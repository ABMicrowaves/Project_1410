CCS PCH C Compiler, Version 4.137, 5967               21-Dec-17 10:43

               Filename: D:\Projects\BA\BA1410\BA1410TX\BA1410TX.lst

               ROM used: 27528 bytes (84%)
                         Largest free fragment is 5236
               RAM used: 436 (28%) at main() level
                         630 (41%) worst case
               Stack:    11 worst case (9 in main + 2 for interrupts)

*
0000:  GOTO   6940
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   0B10
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   0B1A
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0B20
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   0B26
0084:  BTFSS  F9D.4
0086:  GOTO   0090
008A:  BTFSC  F9E.4
008C:  GOTO   0B74
0090:  BTFSS  F7D.0
0092:  GOTO   009C
0096:  BTFSC  F7E.0
0098:  GOTO   0B0A
009C:  MOVFF  0E,00
00A0:  MOVFF  0F,01
00A4:  MOVFF  10,02
00A8:  MOVFF  11,03
00AC:  MOVFF  0C,FE9
00B0:  MOVFF  07,FEA
00B4:  BSF    07.7
00B6:  MOVFF  08,FE1
00BA:  MOVFF  09,FE2
00BE:  MOVFF  0A,FD9
00C2:  MOVFF  0B,FDA
00C6:  MOVFF  12,FF3
00CA:  MOVFF  13,FF4
00CE:  MOVFF  14,FFA
00D2:  MOVFF  15,FF5
00D6:  MOVFF  16,FF6
00DA:  MOVFF  17,FF7
00DE:  MOVF   04,W
00E0:  MOVFF  06,FE0
00E4:  MOVFF  05,FD8
00E8:  RETFIE 0
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0B54:  MOVLW  04
0B56:  MOVLB  2
0B58:  SUBWF  x73,F
0B5A:  BNC   0B70
0B5C:  MOVLW  02
0B5E:  MOVWF  FEA
0B60:  MOVLW  73
0B62:  MOVWF  FE9
0B64:  MOVF   FEF,W
0B66:  BZ    0B70
0B68:  BRA    0B6C
0B6A:  NOP   
0B6C:  DECFSZ FEF,F
0B6E:  BRA    0B6A
0B70:  MOVLB  0
0B72:  RETURN 0
*
0EFE:  MOVLW  02
0F00:  MOVWF  FEA
0F02:  MOVLW  42
0F04:  MOVWF  FE9
0F06:  MOVF   FEF,W
0F08:  BZ    0F26
0F0A:  MOVLW  05
0F0C:  MOVWF  01
0F0E:  CLRF   00
0F10:  DECFSZ 00,F
0F12:  BRA    0F10
0F14:  DECFSZ 01,F
0F16:  BRA    0F0E
0F18:  MOVLW  2E
0F1A:  MOVWF  00
0F1C:  DECFSZ 00,F
0F1E:  BRA    0F1C
0F20:  BRA    0F22
0F22:  DECFSZ FEF,F
0F24:  BRA    0F0A
0F26:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION "BA1410TX V3.4" 
.................... #define VER 34 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... #define BINARY_STATUS_LENTGH 26 // requested be the client to be 26 bytes (16.11.16) 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... //UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UINT  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
.................... UCHAR timerTick_1ms = 0; 
....................  
....................  
....................  
.................... //#bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... //#bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... //#bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... //#bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... //#bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
....................        UINT  cot; 
....................        UINT  rc; 
....................        UINT  rp; 
....................        UCHAR UART_Time; // VERSION 3.3 UT 
....................        UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
....................        byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
....................        byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
....................        UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
....................        UINT setup_version; // the version of this specific setup 
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... UINT current_power;// VERSION 3.3  FFWR 02.05.16 
.................... UINT gl_current_power_level = 0; 
.................... UINT gl_current_power_en_value = 0; 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[BINARY_STATUS_LENTGH];  
....................  
.................... UCHAR ttccp_login = 0; 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0FCC:  BCF    F89.2
....................  
....................   if (channel) 
0FCE:  MOVLB  2
0FD0:  MOVF   x32,F
0FD2:  BZ    0FD8
....................     output_high(DA2_DAT);    // send to VOUTB 
0FD4:  BSF    F89.4
....................   else 
0FD6:  BRA    0FDA
....................     output_low(DA2_DAT);    // send to VOUTA 
0FD8:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0FDA:  BSF    F89.3
....................   delay_cycles(15); 
0FDC:  MOVLW  04
0FDE:  MOVWF  00
0FE0:  DECFSZ 00,F
0FE2:  BRA    0FE0
0FE4:  BRA    0FE6
....................   output_low(DA2_CLK); 
0FE6:  BCF    F89.3
....................   delay_cycles(15); 
0FE8:  MOVLW  04
0FEA:  MOVWF  00
0FEC:  DECFSZ 00,F
0FEE:  BRA    0FEC
0FF0:  BRA    0FF2
....................  
....................   output_low(DA2_DAT); 
0FF2:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0FF4:  BSF    F89.3
....................   delay_cycles(15); 
0FF6:  MOVLW  04
0FF8:  MOVWF  00
0FFA:  DECFSZ 00,F
0FFC:  BRA    0FFA
0FFE:  BRA    1000
....................   output_low(DA2_CLK); 
1000:  BCF    F89.3
....................   delay_cycles(15); 
1002:  MOVLW  04
1004:  MOVWF  00
1006:  DECFSZ 00,F
1008:  BRA    1006
100A:  BRA    100C
....................  
....................   output_high(DA2_CLK); 
100C:  BSF    F89.3
....................   delay_cycles(15); 
100E:  MOVLW  04
1010:  MOVWF  00
1012:  DECFSZ 00,F
1014:  BRA    1012
1016:  BRA    1018
....................   output_low(DA2_CLK); 
1018:  BCF    F89.3
....................   delay_cycles(15); 
101A:  MOVLW  04
101C:  MOVWF  00
101E:  DECFSZ 00,F
1020:  BRA    101E
1022:  BRA    1024
....................  
....................   output_high(DA2_CLK); 
1024:  BSF    F89.3
....................   delay_cycles(15); 
1026:  MOVLW  04
1028:  MOVWF  00
102A:  DECFSZ 00,F
102C:  BRA    102A
102E:  BRA    1030
....................   output_low(DA2_CLK); 
1030:  BCF    F89.3
....................   delay_cycles(15); 
1032:  MOVLW  04
1034:  MOVWF  00
1036:  DECFSZ 00,F
1038:  BRA    1036
103A:  BRA    103C
....................  
....................  
....................   output_high(DA2_CLK); 
103C:  BSF    F89.3
....................   if (level & 0x0200) 
103E:  ANDLW  00
1040:  MOVWF  00
1042:  MOVF   x34,W
1044:  ANDLW  02
1046:  MOVWF  03
1048:  MOVF   00,W
104A:  IORWF  03,W
104C:  BZ    1052
....................     output_high(DA2_DAT); 
104E:  BSF    F89.4
....................   else 
1050:  BRA    1054
....................     output_low(DA2_DAT); 
1052:  BCF    F89.4
....................   delay_cycles(15); 
1054:  MOVLW  04
1056:  MOVWF  00
1058:  DECFSZ 00,F
105A:  BRA    1058
105C:  BRA    105E
....................   output_low(DA2_CLK); 
105E:  BCF    F89.3
....................   delay_cycles(15); 
1060:  MOVLW  04
1062:  MOVWF  00
1064:  DECFSZ 00,F
1066:  BRA    1064
1068:  BRA    106A
....................  
....................   output_high(DA2_CLK); 
106A:  BSF    F89.3
....................   if (level & 0x0100) 
106C:  ANDLW  00
106E:  MOVWF  00
1070:  MOVF   x34,W
1072:  ANDLW  01
1074:  MOVWF  03
1076:  MOVF   00,W
1078:  IORWF  03,W
107A:  BZ    1080
....................     output_high(DA2_DAT); 
107C:  BSF    F89.4
....................   else 
107E:  BRA    1082
....................     output_low(DA2_DAT); 
1080:  BCF    F89.4
....................   output_low(DA2_CLK); 
1082:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1084:  BSF    F89.3
....................   if (level & 0x0080) 
1086:  MOVF   x33,W
1088:  ANDLW  80
108A:  MOVWF  00
108C:  CLRF   03
108E:  MOVF   00,W
1090:  IORWF  03,W
1092:  BZ    1098
....................     output_high(DA2_DAT); 
1094:  BSF    F89.4
....................   else 
1096:  BRA    109A
....................     output_low(DA2_DAT); 
1098:  BCF    F89.4
....................   delay_cycles(15); 
109A:  MOVLW  04
109C:  MOVWF  00
109E:  DECFSZ 00,F
10A0:  BRA    109E
10A2:  BRA    10A4
....................   output_low(DA2_CLK); 
10A4:  BCF    F89.3
....................   delay_cycles(15); 
10A6:  MOVLW  04
10A8:  MOVWF  00
10AA:  DECFSZ 00,F
10AC:  BRA    10AA
10AE:  BRA    10B0
....................  
....................   output_high(DA2_CLK); 
10B0:  BSF    F89.3
....................   if (level & 0x0040) 
10B2:  MOVF   x33,W
10B4:  ANDLW  40
10B6:  MOVWF  00
10B8:  CLRF   03
10BA:  MOVF   00,W
10BC:  IORWF  03,W
10BE:  BZ    10C4
....................     output_high(DA2_DAT); 
10C0:  BSF    F89.4
....................   else 
10C2:  BRA    10C6
....................     output_low(DA2_DAT); 
10C4:  BCF    F89.4
....................   delay_cycles(15); 
10C6:  MOVLW  04
10C8:  MOVWF  00
10CA:  DECFSZ 00,F
10CC:  BRA    10CA
10CE:  BRA    10D0
....................   output_low(DA2_CLK); 
10D0:  BCF    F89.3
....................   delay_cycles(15); 
10D2:  MOVLW  04
10D4:  MOVWF  00
10D6:  DECFSZ 00,F
10D8:  BRA    10D6
10DA:  BRA    10DC
....................  
....................   output_high(DA2_CLK); 
10DC:  BSF    F89.3
....................   if (level & 0x0020) 
10DE:  MOVF   x33,W
10E0:  ANDLW  20
10E2:  MOVWF  00
10E4:  CLRF   03
10E6:  MOVF   00,W
10E8:  IORWF  03,W
10EA:  BZ    10F0
....................     output_high(DA2_DAT); 
10EC:  BSF    F89.4
....................   else 
10EE:  BRA    10F2
....................     output_low(DA2_DAT); 
10F0:  BCF    F89.4
....................   output_low(DA2_CLK); 
10F2:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
10F4:  BSF    F89.3
....................   if (level & 0x0010) 
10F6:  MOVF   x33,W
10F8:  ANDLW  10
10FA:  MOVWF  00
10FC:  CLRF   03
10FE:  MOVF   00,W
1100:  IORWF  03,W
1102:  BZ    1108
....................     output_high(DA2_DAT); 
1104:  BSF    F89.4
....................   else 
1106:  BRA    110A
....................     output_low(DA2_DAT); 
1108:  BCF    F89.4
....................   delay_cycles(15); 
110A:  MOVLW  04
110C:  MOVWF  00
110E:  DECFSZ 00,F
1110:  BRA    110E
1112:  BRA    1114
....................   output_low(DA2_CLK); 
1114:  BCF    F89.3
....................   delay_cycles(15); 
1116:  MOVLW  04
1118:  MOVWF  00
111A:  DECFSZ 00,F
111C:  BRA    111A
111E:  BRA    1120
....................  
....................   output_high(DA2_CLK); 
1120:  BSF    F89.3
....................   if (level & 0x0008) 
1122:  MOVF   x33,W
1124:  ANDLW  08
1126:  MOVWF  00
1128:  CLRF   03
112A:  MOVF   00,W
112C:  IORWF  03,W
112E:  BZ    1134
....................     output_high(DA2_DAT); 
1130:  BSF    F89.4
....................   else 
1132:  BRA    1136
....................     output_low(DA2_DAT); 
1134:  BCF    F89.4
....................   output_low(DA2_CLK); 
1136:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1138:  BSF    F89.3
....................   if (level & 0x0004) 
113A:  MOVF   x33,W
113C:  ANDLW  04
113E:  MOVWF  00
1140:  CLRF   03
1142:  MOVF   00,W
1144:  IORWF  03,W
1146:  BZ    114C
....................     output_high(DA2_DAT); 
1148:  BSF    F89.4
....................   else 
114A:  BRA    114E
....................     output_low(DA2_DAT); 
114C:  BCF    F89.4
....................   delay_cycles(15); 
114E:  MOVLW  04
1150:  MOVWF  00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  BRA    1158
....................   output_low(DA2_CLK); 
1158:  BCF    F89.3
....................   delay_cycles(15); 
115A:  MOVLW  04
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  BRA    1164
....................  
....................   output_high(DA2_CLK); 
1164:  BSF    F89.3
....................   if (level & 0x0002) 
1166:  MOVF   x33,W
1168:  ANDLW  02
116A:  MOVWF  00
116C:  CLRF   03
116E:  MOVF   00,W
1170:  IORWF  03,W
1172:  BZ    1178
....................     output_high(DA2_DAT); 
1174:  BSF    F89.4
....................   else 
1176:  BRA    117A
....................     output_low(DA2_DAT); 
1178:  BCF    F89.4
....................   output_low(DA2_CLK); 
117A:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
117C:  BSF    F89.3
....................   if (level & 0x0001) 
117E:  MOVF   x33,W
1180:  ANDLW  01
1182:  MOVWF  00
1184:  CLRF   03
1186:  MOVF   00,W
1188:  IORWF  03,W
118A:  BZ    1190
....................     output_high(DA2_DAT); 
118C:  BSF    F89.4
....................   else 
118E:  BRA    1192
....................     output_low(DA2_DAT); 
1190:  BCF    F89.4
....................   delay_cycles(15); 
1192:  MOVLW  04
1194:  MOVWF  00
1196:  DECFSZ 00,F
1198:  BRA    1196
119A:  BRA    119C
....................   output_low(DA2_CLK); 
119C:  BCF    F89.3
....................   delay_cycles(15); 
119E:  MOVLW  04
11A0:  MOVWF  00
11A2:  DECFSZ 00,F
11A4:  BRA    11A2
11A6:  BRA    11A8
....................  
....................  
....................   output_high(DA2_CLK); 
11A8:  BSF    F89.3
....................   delay_cycles(15); 
11AA:  MOVLW  04
11AC:  MOVWF  00
11AE:  DECFSZ 00,F
11B0:  BRA    11AE
11B2:  BRA    11B4
....................   output_low(DA2_CLK); 
11B4:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
11B6:  BSF    F89.3
....................   delay_cycles(15); 
11B8:  MOVLW  04
11BA:  MOVWF  00
11BC:  DECFSZ 00,F
11BE:  BRA    11BC
11C0:  BRA    11C2
....................   delay_cycles(15); 
11C2:  MOVLW  04
11C4:  MOVWF  00
11C6:  DECFSZ 00,F
11C8:  BRA    11C6
11CA:  BRA    11CC
....................   output_low(DA2_CLK); 
11CC:  BCF    F89.3
....................   delay_cycles(15); 
11CE:  MOVLW  04
11D0:  MOVWF  00
11D2:  DECFSZ 00,F
11D4:  BRA    11D2
11D6:  BRA    11D8
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
11D8:  BSF    F89.2
....................   delay_cycles(15); 
11DA:  MOVLW  04
11DC:  MOVWF  00
11DE:  DECFSZ 00,F
11E0:  BRA    11DE
11E2:  BRA    11E4
....................   output_low(DA2_LAT); 
11E4:  BCF    F89.1
....................   delay_cycles(15); 
11E6:  MOVLW  04
11E8:  MOVWF  00
11EA:  DECFSZ 00,F
11EC:  BRA    11EA
11EE:  BRA    11F0
....................   output_high(DA2_LAT); 
11F0:  BSF    F89.1
....................   delay_cycles(15); 
11F2:  MOVLW  04
11F4:  MOVWF  00
11F6:  DECFSZ 00,F
11F8:  BRA    11F6
11FA:  BRA    11FC
....................   } 
11FC:  MOVLB  0
11FE:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
605C:  BCF    F8A.1
....................   addr |= 0x80; 
605E:  MOVLB  2
6060:  BSF    x0C.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
6062:  CLRF   x0E
6064:  MOVF   x0E,W
6066:  SUBLW  07
6068:  BNC   6090
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
606A:  MOVF   x0C,W
606C:  ANDLW  80
606E:  BNZ   6074
6070:  BCF    F8C.4
6072:  BRA    6076
6074:  BSF    F8C.4
....................     delay_us(1); 
6076:  BRA    6078
6078:  BRA    607A
....................     output_high(D2A_SCLK); 
607A:  BSF    F8C.0
....................     delay_us(1); 
607C:  BRA    607E
607E:  BRA    6080
....................     output_low(D2A_SCLK); 
6080:  BCF    F8C.0
....................     delay_us(1); 
6082:  BRA    6084
6084:  BRA    6086
....................     } 
6086:  MOVF   x0E,W
6088:  INCF   x0E,F
608A:  BCF    FD8.0
608C:  RLCF   x0C,F
608E:  BRA    6064
....................   for (ix = 0; ix < 8; ix++) 
6090:  CLRF   x0E
6092:  MOVF   x0E,W
6094:  SUBLW  07
6096:  BNC   60B2
....................     { 
....................     output_high(D2A_SCLK); 
6098:  BSF    F8C.0
....................     delay_us(1); 
609A:  BRA    609C
609C:  BRA    609E
....................     output_low(D2A_SCLK); 
609E:  BCF    F8C.0
....................     delay_us(1); 
60A0:  BRA    60A2
60A2:  BRA    60A4
....................     dout <<= 1; 
60A4:  BCF    FD8.0
60A6:  RLCF   x0D,F
....................     if (input(D2A_MISO)) 
60A8:  BTFSS  F83.1
60AA:  BRA    60AE
....................       dout |= 1; 
60AC:  BSF    x0D.0
....................     } 
60AE:  INCF   x0E,F
60B0:  BRA    6092
....................   output_high(D2A_CSB); 
60B2:  BSF    F8A.1
....................   return dout; 
60B4:  MOVFF  20D,01
....................   } 
60B8:  MOVLB  0
60BA:  GOTO   64FC (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5808:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
580A:  MOVLB  2
580C:  CLRF   x0F
580E:  MOVF   x0F,W
5810:  SUBLW  07
5812:  BNC   583A
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5814:  MOVF   x0C,W
5816:  ANDLW  80
5818:  BNZ   581E
581A:  BCF    F8C.4
581C:  BRA    5820
581E:  BSF    F8C.4
....................     delay_us(1); 
5820:  BRA    5822
5822:  BRA    5824
....................     output_high(D2A_SCLK); 
5824:  BSF    F8C.0
....................     delay_us(1); 
5826:  BRA    5828
5828:  BRA    582A
....................     output_low(D2A_SCLK); 
582A:  BCF    F8C.0
....................     delay_us(1); 
582C:  BRA    582E
582E:  BRA    5830
....................     } 
5830:  MOVF   x0F,W
5832:  INCF   x0F,F
5834:  BCF    FD8.0
5836:  RLCF   x0C,F
5838:  BRA    580E
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
583A:  CLRF   x0F
583C:  MOVF   x0F,W
583E:  SUBLW  07
5840:  BNC   5868
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
5842:  MOVF   x0D,W
5844:  ANDLW  80
5846:  BNZ   584C
5848:  BCF    F8C.4
584A:  BRA    584E
584C:  BSF    F8C.4
....................     delay_us(1); 
584E:  BRA    5850
5850:  BRA    5852
....................     output_high(D2A_SCLK); 
5852:  BSF    F8C.0
....................     delay_us(1); 
5854:  BRA    5856
5856:  BRA    5858
....................     output_low(D2A_SCLK); 
5858:  BCF    F8C.0
....................     delay_us(1); 
585A:  BRA    585C
585C:  BRA    585E
....................     } 
585E:  MOVF   x0F,W
5860:  INCF   x0F,F
5862:  BCF    FD8.0
5864:  RLCF   x0D,F
5866:  BRA    583C
....................   output_high(D2A_CSB); 
5868:  BSF    F8A.1
....................   return dout; 
586A:  MOVFF  20E,01
....................   } 
586E:  MOVLB  0
5870:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
15DC:  MOVLW  08
15DE:  MOVLB  2
15E0:  MOVWF  x40
15E2:  MOVF   x40,F
15E4:  BZ    1622
....................     { 
....................     if (data & 0X80) 
15E6:  BTFSS  x3F.7
15E8:  BRA    15EE
....................       output_high(PLL_DAT); 
15EA:  BSF    F8B.3
....................     else 
15EC:  BRA    15F0
....................       output_low(PLL_DAT); 
15EE:  BCF    F8B.3
....................     delay_us(10); 
15F0:  MOVLW  0C
15F2:  MOVWF  00
15F4:  DECFSZ 00,F
15F6:  BRA    15F4
15F8:  BRA    15FA
15FA:  NOP   
....................     output_high(PLL_CLK); 
15FC:  BSF    F8B.2
....................     delay_us(10); 
15FE:  MOVLW  0C
1600:  MOVWF  00
1602:  DECFSZ 00,F
1604:  BRA    1602
1606:  BRA    1608
1608:  NOP   
....................     output_low(PLL_CLK); 
160A:  BCF    F8B.2
....................  
....................     delay_us(25); 
160C:  MOVLW  20
160E:  MOVWF  00
1610:  DECFSZ 00,F
1612:  BRA    1610
1614:  BRA    1616
1616:  NOP   
....................     } 
1618:  MOVF   x40,W
161A:  DECF   x40,F
161C:  BCF    FD8.0
161E:  RLCF   x3F,F
1620:  BRA    15E2
....................   output_low(PLL_DAT); 
1622:  BCF    F8B.3
....................   output_low(PLL_CLK); 
1624:  BCF    F8B.2
....................   } 
1626:  MOVLB  0
1628:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
162A:  CLRWDT
....................   disable_interrupts(GLOBAL); 
162C:  BCF    FF2.6
162E:  BCF    FF2.7
1630:  BTFSC  FF2.7
1632:  BRA    162E
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
1634:  MOVFF  23D,23E
1638:  MOVFF  23D,23F
163C:  RCALL  15DC
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
163E:  MOVFF  23C,23E
1642:  MOVFF  23C,23F
1646:  RCALL  15DC
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1648:  MOVFF  23B,23E
164C:  MOVFF  23B,23F
1650:  RCALL  15DC
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
1652:  MOVFF  23A,23E
1656:  MOVFF  23A,23F
165A:  RCALL  15DC
....................   delay_us(40); 
165C:  MOVLW  34
165E:  MOVWF  00
1660:  DECFSZ 00,F
1662:  BRA    1660
1664:  BRA    1666
1666:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1668:  BSF    F8B.1
....................   delay_us(5); 
166A:  MOVLW  06
166C:  MOVWF  00
166E:  DECFSZ 00,F
1670:  BRA    166E
1672:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
1674:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
1676:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
1678:  MOVLW  C0
167A:  IORWF  FF2,F
....................   restart_wdt(); 
167C:  CLRWDT
....................   } 
167E:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
2022:  MOVLB  1
2024:  CLRF   xC1
2026:  MOVLW  05
2028:  MOVWF  xC0
202A:  MOVF   xC1,W
202C:  SUBLW  05
202E:  BNC   209C
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
2030:  MOVF   xC0,W
2032:  MULLW  04
2034:  MOVF   FF3,W
2036:  CLRF   03
2038:  MOVLB  0
203A:  CALL   00EA
203E:  TBLRD*+
2040:  MOVFF  FF5,01
2044:  TBLRD*+
2046:  MOVFF  FF5,02
204A:  TBLRD*+
204C:  MOVFF  FF5,03
2050:  MOVFF  03,1BF
2054:  MOVFF  02,1BE
2058:  MOVFF  01,1BD
205C:  MOVFF  FE8,1BC
....................     prog |= (ULONG)idx; 
2060:  MOVFF  1C0,00
2064:  CLRF   01
2066:  CLRF   02
2068:  CLRF   03
206A:  MOVF   00,W
206C:  MOVLB  1
206E:  IORWF  xBC,F
2070:  MOVF   01,W
2072:  IORWF  xBD,F
2074:  MOVF   02,W
2076:  IORWF  xBE,F
2078:  MOVF   03,W
207A:  IORWF  xBF,F
....................     PLL_send_word(prog); 
207C:  MOVFF  1BF,23D
2080:  MOVFF  1BE,23C
2084:  MOVFF  1BD,23B
2088:  MOVFF  1BC,23A
208C:  MOVLB  0
208E:  CALL   162A
....................     } 
2092:  MOVLB  1
2094:  MOVF   xC1,W
2096:  INCF   xC1,F
2098:  DECF   xC0,F
209A:  BRA    202A
....................   delay_ms(250); 
209C:  MOVLW  FA
209E:  MOVLB  2
20A0:  MOVWF  x42
20A2:  MOVLB  0
20A4:  CALL   0EFE
....................   PLL_send_word(prog); 
20A8:  MOVFF  1BF,23D
20AC:  MOVFF  1BE,23C
20B0:  MOVFF  1BD,23B
20B4:  MOVFF  1BC,23A
20B8:  CALL   162A
....................   delay_ms(250); 
20BC:  MOVLW  FA
20BE:  MOVLB  2
20C0:  MOVWF  x42
20C2:  MOVLB  0
20C4:  CALL   0EFE
....................   } 
20C8:  GOTO   6A58 (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
13B0:  MOVLB  2
13B2:  CLRF   x43
13B4:  CLRF   x42
13B6:  CLRF   x41
13B8:  MOVLW  02
13BA:  MOVWF  x40
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
13BC:  CLRWDT
....................   D = Frequest; 
13BE:  CLRF   x3F
13C0:  CLRF   x3E
13C2:  MOVFF  237,23D
13C6:  MOVFF  236,23C
....................   PLL_RFdiv = 0x0095003CL; 
13CA:  MOVLB  1
13CC:  CLRF   x45
13CE:  MOVLW  95
13D0:  MOVWF  x44
13D2:  CLRF   x43
13D4:  MOVLW  3C
13D6:  MOVWF  x42
....................   if (Frequest >= 22000) 
13D8:  MOVLB  2
13DA:  MOVF   x37,W
13DC:  SUBLW  54
13DE:  BC    1404
13E0:  XORLW  FF
13E2:  BNZ   13EA
13E4:  MOVF   x36,W
13E6:  SUBLW  EF
13E8:  BC    1404
....................     { 
....................     RFdiv = 1; 
13EA:  CLRF   x43
13EC:  CLRF   x42
13EE:  CLRF   x41
13F0:  MOVLW  01
13F2:  MOVWF  x40
....................     PLL_RFdiv = 0x0085003CL; 
13F4:  MOVLB  1
13F6:  CLRF   x45
13F8:  MOVLW  85
13FA:  MOVWF  x44
13FC:  CLRF   x43
13FE:  MOVLW  3C
1400:  MOVWF  x42
1402:  MOVLB  2
....................     }   
....................   restart_wdt(); 
1404:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
1406:  MOVFF  23F,24B
140A:  MOVFF  23E,24A
140E:  MOVFF  23D,249
1412:  MOVFF  23C,248
1416:  MOVFF  243,24F
141A:  MOVFF  242,24E
141E:  MOVFF  241,24D
1422:  MOVFF  240,24C
1426:  MOVLB  0
1428:  RCALL  12C0
142A:  MOVFF  03,247
142E:  MOVFF  02,246
1432:  MOVFF  01,245
1436:  MOVFF  00,244
143A:  MOVFF  03,24B
143E:  MOVFF  02,24A
1442:  MOVFF  01,249
1446:  MOVFF  00,248
144A:  MOVLB  2
144C:  CLRF   x4F
144E:  CLRF   x4E
1450:  CLRF   x4D
1452:  MOVLW  64
1454:  MOVWF  x4C
1456:  MOVLB  0
1458:  RCALL  12C0
145A:  MOVFF  03,23F
145E:  MOVFF  02,23E
1462:  MOVFF  01,23D
1466:  MOVFF  00,23C
....................   restart_wdt(); 
146A:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
146C:  BCF    FD8.1
146E:  MOVFF  23F,255
1472:  MOVFF  23E,254
1476:  MOVFF  23D,253
147A:  MOVFF  23C,252
147E:  MOVLB  2
1480:  CLRF   x59
1482:  CLRF   x58
1484:  MOVLW  27
1486:  MOVWF  x57
1488:  MOVLW  10
148A:  MOVWF  x56
148C:  MOVLB  0
148E:  RCALL  131C
1490:  MOVFF  03,135
1494:  MOVFF  02,134
1498:  MOVFF  01,133
149C:  MOVFF  00,132
....................   restart_wdt(); 
14A0:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
14A2:  MOVFF  135,24B
14A6:  MOVFF  134,24A
14AA:  MOVFF  133,249
14AE:  MOVFF  132,248
14B2:  MOVLB  2
14B4:  CLRF   x4F
14B6:  CLRF   x4E
14B8:  MOVLW  27
14BA:  MOVWF  x4D
14BC:  MOVLW  10
14BE:  MOVWF  x4C
14C0:  MOVLB  0
14C2:  RCALL  12C0
14C4:  MOVF   00,W
14C6:  MOVLB  2
14C8:  SUBWF  x3C,W
14CA:  MOVWF  x44
14CC:  MOVF   01,W
14CE:  SUBWFB x3D,W
14D0:  MOVWF  x45
14D2:  MOVF   02,W
14D4:  SUBWFB x3E,W
14D6:  MOVWF  x46
14D8:  MOVF   03,W
14DA:  SUBWFB x3F,W
14DC:  MOVWF  x47
14DE:  CLRF   x4B
14E0:  CLRF   x4A
14E2:  CLRF   x49
14E4:  MOVLW  64
14E6:  MOVWF  x48
14E8:  MOVFF  243,24F
14EC:  MOVFF  242,24E
14F0:  MOVFF  241,24D
14F4:  MOVFF  240,24C
14F8:  MOVLB  0
14FA:  RCALL  12C0
14FC:  MOVFF  03,24B
1500:  MOVFF  02,24A
1504:  MOVFF  01,249
1508:  MOVFF  00,248
150C:  BCF    FD8.1
150E:  MOVFF  247,255
1512:  MOVFF  246,254
1516:  MOVFF  245,253
151A:  MOVFF  244,252
151E:  MOVFF  03,259
1522:  MOVFF  02,258
1526:  MOVFF  01,257
152A:  MOVFF  00,256
152E:  RCALL  131C
1530:  MOVFF  03,139
1534:  MOVFF  02,138
1538:  MOVFF  01,137
153C:  MOVFF  00,136
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
1540:  BCF    FD8.1
1542:  MOVLB  2
1544:  CLRF   x55
1546:  CLRF   x54
1548:  CLRF   x53
154A:  MOVLW  64
154C:  MOVWF  x52
154E:  MOVFF  243,259
1552:  MOVFF  242,258
1556:  MOVFF  241,257
155A:  MOVFF  240,256
155E:  MOVLB  0
1560:  RCALL  131C
1562:  MOVFF  03,247
1566:  MOVFF  02,246
156A:  MOVFF  01,245
156E:  MOVFF  00,244
1572:  MOVLB  2
1574:  RLCF   00,W
1576:  MOVWF  00
1578:  RLCF   01,W
157A:  MOVWF  01
157C:  RLCF   02,W
157E:  MOVWF  02
1580:  RLCF   03,W
1582:  MOVWF  03
1584:  RLCF   00,F
1586:  RLCF   01,F
1588:  RLCF   02,F
158A:  RLCF   03,F
158C:  RLCF   00,F
158E:  RLCF   01,F
1590:  RLCF   02,F
1592:  RLCF   03,F
1594:  MOVLW  F8
1596:  ANDWF  00,F
1598:  MOVLW  08
159A:  ADDWF  03,W
159C:  MOVWF  x47
159E:  MOVLW  01
15A0:  ADDWF  00,W
15A2:  MOVLB  1
15A4:  MOVWF  x3A
15A6:  MOVLW  00
15A8:  MOVLB  2
15AA:  ADDWFC 01,W
15AC:  MOVLB  1
15AE:  MOVWF  x3B
15B0:  MOVLW  00
15B2:  MOVLB  2
15B4:  ADDWFC 02,W
15B6:  MOVLB  1
15B8:  MOVWF  x3C
15BA:  MOVLW  00
15BC:  MOVLB  2
15BE:  ADDWFC x47,W
15C0:  MOVLB  1
15C2:  MOVWF  x3D
....................   restart_wdt(); 
15C4:  CLRWDT
....................   Fvco++; 
15C6:  MOVLW  01
15C8:  MOVLB  2
15CA:  ADDWF  x38,F
15CC:  BTFSC  FD8.0
15CE:  INCF   x39,F
15D0:  BTFSC  FD8.2
15D2:  INCF   x3A,F
15D4:  BTFSC  FD8.2
15D6:  INCF   x3B,F
....................   } 
15D8:  MOVLB  0
15DA:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
1680:  MOVLB  2
1682:  CLRF   x3B
1684:  MOVLB  1
1686:  RLCF   x32,W
1688:  MOVLB  2
168A:  MOVWF  x3C
168C:  MOVLB  1
168E:  RLCF   x33,W
1690:  MOVLB  2
1692:  MOVWF  x3D
1694:  MOVLB  1
1696:  RLCF   x34,W
1698:  MOVLB  2
169A:  MOVWF  x3E
169C:  RLCF   x3C,F
169E:  RLCF   x3D,F
16A0:  RLCF   x3E,F
16A2:  RLCF   x3C,F
16A4:  RLCF   x3D,F
16A6:  RLCF   x3E,F
16A8:  RLCF   x3C,F
16AA:  RLCF   x3D,F
16AC:  RLCF   x3E,F
16AE:  RLCF   x3C,F
16B0:  RLCF   x3D,F
16B2:  RLCF   x3E,F
16B4:  RLCF   x3C,F
16B6:  RLCF   x3D,F
16B8:  RLCF   x3E,F
16BA:  RLCF   x3C,F
16BC:  RLCF   x3D,F
16BE:  RLCF   x3E,F
16C0:  MOVLW  80
16C2:  ANDWF  x3C,F
16C4:  MOVLB  1
16C6:  RLCF   x36,W
16C8:  MOVWF  00
16CA:  RLCF   x37,W
16CC:  MOVWF  01
16CE:  RLCF   x38,W
16D0:  MOVWF  02
16D2:  RLCF   x39,W
16D4:  MOVWF  03
16D6:  RLCF   00,F
16D8:  RLCF   01,F
16DA:  RLCF   02,F
16DC:  RLCF   03,F
16DE:  RLCF   00,F
16E0:  RLCF   01,F
16E2:  RLCF   02,F
16E4:  RLCF   03,F
16E6:  MOVLW  F8
16E8:  ANDWF  00,F
16EA:  MOVF   00,W
16EC:  MOVLB  2
16EE:  ADDWF  x3B,W
16F0:  MOVWF  x36
16F2:  MOVF   01,W
16F4:  ADDWFC x3C,W
16F6:  MOVWF  x37
16F8:  MOVF   02,W
16FA:  ADDWFC x3D,W
16FC:  MOVWF  x38
16FE:  MOVF   03,W
1700:  ADDWFC x3E,W
1702:  MOVWF  x39
....................   PLL_frequency = prog; 
1704:  MOVFF  239,141
1708:  MOVFF  238,140
170C:  MOVFF  237,13F
1710:  MOVFF  236,13E
....................   restart_wdt(); 
1714:  CLRWDT
....................   PLL_send_word(prog); 
1716:  MOVFF  239,23D
171A:  MOVFF  238,23C
171E:  MOVFF  237,23B
1722:  MOVFF  236,23A
1726:  MOVLB  0
1728:  RCALL  162A
....................   delay_us(20); 
172A:  MOVLW  1A
172C:  MOVWF  00
172E:  DECFSZ 00,F
1730:  BRA    172E
1732:  NOP   
....................   restart_wdt(); 
1734:  CLRWDT
....................   PLL_send_word(PLL_mod); 
1736:  MOVFF  13D,23D
173A:  MOVFF  13C,23C
173E:  MOVFF  13B,23B
1742:  MOVFF  13A,23A
1746:  RCALL  162A
....................   delay_us(20); 
1748:  MOVLW  1A
174A:  MOVWF  00
174C:  DECFSZ 00,F
174E:  BRA    174C
1750:  NOP   
....................   restart_wdt(); 
1752:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
1754:  MOVFF  145,23D
1758:  MOVFF  144,23C
175C:  MOVFF  143,23B
1760:  MOVFF  142,23A
1764:  RCALL  162A
....................    
....................   } 
1766:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0B0A:  BCF    F7E.0
0B0C:  GOTO   009C
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
.................... { 
....................     timerTick_1ms = 1; 
0B10:  MOVLW  01
0B12:  MOVWF  33
.................... //    TMR_1mS_Flags = 0xFF; 
.................... //    TMR_1mS_Count++; 
.................... //    if (++TMR_1mS_Cnt >= 10) { 
.................... //        TMR_1mS_Cnt = 0; 
.................... //        TMR_10mS_Flags = 0xFF; 
.................... //        if (++TMR_10mS_Cnt >= 10) { 
.................... //            TMR_10mS_Cnt = 0; 
.................... //            TMR_100mS_Flags = 0xFF; 
.................... //            if (++TMR_100mS_Cnt >= 10) 
.................... //            { 
.................... //                TMR_100mS_Cnt = 0; 
.................... //                TMR_1sec_Flags = 0xFF; 
.................... //            } 
.................... //        } 
.................... //    } 
.................... } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0B14:  BCF    F9E.1
0B16:  GOTO   009C
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
0B1A:  BCF    FF2.1
0B1C:  GOTO   009C
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0B20:  BCF    FF0.0
0B22:  GOTO   009C
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0B26:  MOVFF  FAE,272
....................   COM1_rbuf[COM1_rxi] = x; 
0B2A:  CLRF   03
0B2C:  MOVF   35,W
0B2E:  ADDLW  37
0B30:  MOVWF  FE9
0B32:  MOVLW  00
0B34:  ADDWFC 03,W
0B36:  MOVWF  FEA
0B38:  MOVFF  272,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0B3C:  INCF   35,F
0B3E:  MOVF   35,W
0B40:  SUBLW  1F
0B42:  BC    0B46
....................     COM1_rxi = 0; 
0B44:  CLRF   35
....................   if (COM1_rcnt < COM1_RX_LEN) 
0B46:  MOVF   34,W
0B48:  SUBLW  1F
0B4A:  BNC   0B4E
....................     COM1_rcnt++; 
0B4C:  INCF   34,F
....................   } 
....................    
0B4E:  BCF    F9E.5
0B50:  GOTO   009C
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
.................... { 
....................     disable_interrupts(int_TIMER2); 
*
0B74:  BCF    F9D.1
....................     output_high(RS485_EN); 
0B76:  BSF    F8C.5
....................     status_tx_index = 0; 
0B78:  MOVLB  1
0B7A:  CLRF   x16
0B7C:  CLRF   x15
....................     while (tx_block_len--) 
....................     { 
0B7E:  MOVFF  112,03
0B82:  MOVF   x11,W
0B84:  BTFSC  FD8.2
0B86:  DECF   x12,F
0B88:  DECF   x11,F
0B8A:  IORWF  03,W
0B8C:  BZ    0BC8
....................         output_high(RS485_EN); 
0B8E:  BSF    F8C.5
....................         TXREG1 = status_buffer[status_tx_index++]; 
0B90:  MOVFF  116,03
0B94:  MOVF   x15,W
0B96:  INCF   x15,F
0B98:  BTFSC  FD8.2
0B9A:  INCF   x16,F
0B9C:  MOVLB  2
0B9E:  MOVWF  x72
0BA0:  MOVLW  17
0BA2:  ADDWF  x72,W
0BA4:  MOVWF  FE9
0BA6:  MOVLW  01
0BA8:  ADDWFC 03,W
0BAA:  MOVWF  FEA
0BAC:  MOVFF  FEF,FAD
....................         delay_us(500);  
0BB0:  MOVLW  02
0BB2:  MOVWF  x72
0BB4:  MOVLW  F9
0BB6:  MOVWF  x73
0BB8:  MOVLB  0
0BBA:  RCALL  0B54
0BBC:  MOVLB  2
0BBE:  DECFSZ x72,F
0BC0:  BRA    0BB4
....................         output_low(RS485_EN); 
0BC2:  BCF    F8C.5
....................     } 
0BC4:  MOVLB  1
0BC6:  BRA    0B7E
....................     disable_interrupts(int_TBE);     
0BC8:  BCF    F9D.4
....................     enable_interrupts(int_TIMER2); 
0BCA:  BSF    F9D.1
.................... } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0BCC:  BCF    F9E.4
0BCE:  MOVLB  0
0BD0:  GOTO   009C
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
2948:  CLRF   03
294A:  MOVF   36,W
294C:  ADDLW  37
294E:  MOVWF  FE9
2950:  MOVLW  00
2952:  ADDWFC 03,W
2954:  MOVWF  FEA
2956:  MOVFF  FEF,1D5
295A:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
295C:  INCF   36,F
295E:  MOVF   36,W
2960:  SUBLW  1F
2962:  BC    2966
....................     COM1_rxo = 0; 
2964:  CLRF   36
....................   if (COM1_rcnt) 
2966:  MOVF   34,F
2968:  BZ    296C
....................     COM1_rcnt--; 
296A:  DECF   34,F
....................   return x; 
296C:  MOVFF  1D5,01
....................   } 
2970:  MOVLB  0
2972:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
20CC:  BCF    F9D.5
....................   output_high(RS485_EN); 
20CE:  BSF    F8C.5
....................   delay_us(100); 
20D0:  MOVLW  84
20D2:  MOVWF  00
20D4:  DECFSZ 00,F
20D6:  BRA    20D4
20D8:  BRA    20DA
20DA:  NOP   
....................   pos = 0; 
20DC:  MOVLB  2
20DE:  CLRF   x6E
....................   while (*str) 
....................     { 
20E0:  MOVFF  26C,03
20E4:  MOVFF  26B,FE9
20E8:  MOVFF  26C,FEA
20EC:  MOVF   FEF,F
20EE:  BZ    217C
....................     x = *str++; 
20F0:  MOVFF  26C,03
20F4:  MOVF   x6B,W
20F6:  INCF   x6B,F
20F8:  BTFSC  FD8.2
20FA:  INCF   x6C,F
20FC:  MOVWF  FE9
20FE:  MOVFF  03,FEA
2102:  MOVFF  FEF,26D
....................     if (x != '\t') 
2106:  MOVF   x6D,W
2108:  SUBLW  09
210A:  BZ    2138
....................       { 
....................       TXREG1 = x; 
210C:  MOVFF  26D,FAD
....................       pos++; 
2110:  INCF   x6E,F
....................       delay_us(300);  
2112:  MOVLW  02
2114:  MOVWF  x70
2116:  CLRF   19
2118:  BTFSC  FF2.7
211A:  BSF    19.7
211C:  BCF    FF2.7
211E:  MOVLW  95
2120:  MOVWF  x73
2122:  MOVLB  0
2124:  CALL   0B54
2128:  BTFSC  19.7
212A:  BSF    FF2.7
212C:  MOVLB  2
212E:  DECFSZ x70,F
2130:  BRA    2116
....................       x = RCREG1; 
2132:  MOVFF  FAE,26D
....................       } 
....................     else 
2136:  BRA    217A
....................       { 
....................       tab_stop = 32; 
2138:  MOVLW  20
213A:  MOVWF  x6F
....................       if (pos >= tab_stop) 
213C:  MOVF   x6F,W
213E:  SUBWF  x6E,W
2140:  BNC   2148
....................         tab_stop = pos + 2; 
2142:  MOVLW  02
2144:  ADDWF  x6E,W
2146:  MOVWF  x6F
....................       while (pos < tab_stop) 
....................         { 
2148:  MOVF   x6F,W
214A:  SUBWF  x6E,W
214C:  BC    217A
....................         TXREG1 = ' '; 
214E:  MOVLW  20
2150:  MOVWF  FAD
....................         pos++; 
2152:  INCF   x6E,F
....................         delay_us(300); 
2154:  MOVLW  02
2156:  MOVWF  x70
2158:  CLRF   19
215A:  BTFSC  FF2.7
215C:  BSF    19.7
215E:  BCF    FF2.7
2160:  MOVLW  95
2162:  MOVWF  x73
2164:  MOVLB  0
2166:  CALL   0B54
216A:  BTFSC  19.7
216C:  BSF    FF2.7
216E:  MOVLB  2
2170:  DECFSZ x70,F
2172:  BRA    2158
....................         x = RCREG1; 
2174:  MOVFF  FAE,26D
....................         } 
2178:  BRA    2148
....................       } 
....................     } 
217A:  BRA    20E0
....................   delay_us(100); 
217C:  MOVLW  84
217E:  MOVWF  00
2180:  DECFSZ 00,F
2182:  BRA    2180
2184:  BRA    2186
2186:  NOP   
....................   output_low(RS485_EN); 
2188:  BCF    F8C.5
....................   x = RCREG1; 
218A:  MOVFF  FAE,26D
....................   enable_interrupts(int_RDA); 
218E:  BSF    F9D.5
....................   } 
2190:  MOVLB  0
2192:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
....................   { 
....................   UCHAR pos;//, tab_stop; 
....................   pos = 0; 
2194:  MOVLB  1
2196:  CLRF   xBE
....................   tx_block_len = len ; 
2198:  MOVFF  1BD,112
219C:  MOVFF  1BC,111
....................   //status_tx_index = 0; 
....................    
....................   //TXREG1 = status_buffer[0]; 
....................   clear_interrupt(int_TBE); 
21A0:  BCF    F9E.4
....................   enable_interrupts(int_TBE); 
21A2:  BSF    F9D.4
....................   //TXREG1 = status_buffer[0]; 
....................   //output_high(RS485_EN);  
....................   } 
21A4:  MOVLB  0
21A6:  GOTO   220E (RETURN)
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0E84:  MOVLB  1
0E86:  CLRF   x7D
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0E88:  CLRF   34
0E8A:  MOVFF  34,36
0E8E:  MOVFF  36,35
....................   comm_state = COMM_INIT; 
0E92:  CLRF   57
....................   enable_interrupts(int_RDA); 
0E94:  BSF    F9D.5
....................   } 
0E96:  MOVLB  0
0E98:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
*
1D8E:  MOVLW  00
1D90:  BTFSC  F83.7
1D92:  MOVLW  01
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
2992:  MOVLB  1
2994:  MOVF   x46,W
2996:  INCF   x46,F
2998:  CLRF   03
299A:  ADDLW  59
299C:  MOVWF  FE9
299E:  MOVLW  00
29A0:  ADDWFC 03,W
29A2:  MOVWF  FEA
29A4:  CLRF   03
29A6:  MOVFF  FEF,01
29AA:  MOVFF  03,02
....................   } 
29AE:  MOVLB  0
29B0:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
2974:  CLRF   03
2976:  MOVLB  1
2978:  MOVF   x46,W
297A:  ADDLW  59
297C:  MOVWF  FE9
297E:  MOVLW  00
2980:  ADDWFC 03,W
2982:  MOVWF  FEA
2984:  CLRF   03
2986:  MOVFF  FEF,01
298A:  MOVFF  03,02
....................   } 
298E:  MOVLB  0
2990:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
29B2:  CLRF   03
29B4:  MOVLB  1
29B6:  MOVF   x46,W
29B8:  ADDLW  59
29BA:  MOVWF  FE9
29BC:  MOVLW  00
29BE:  ADDWFC 03,W
29C0:  MOVWF  FEA
29C2:  MOVF   FEF,F
29C4:  BZ    29F6
29C6:  CLRF   03
29C8:  MOVF   x46,W
29CA:  ADDLW  59
29CC:  MOVWF  FE9
29CE:  MOVLW  00
29D0:  ADDWFC 03,W
29D2:  MOVWF  FEA
29D4:  MOVF   FEF,W
29D6:  SUBLW  2C
29D8:  BZ    29EE
29DA:  CLRF   03
29DC:  MOVF   x46,W
29DE:  ADDLW  59
29E0:  MOVWF  FE9
29E2:  MOVLW  00
29E4:  ADDWFC 03,W
29E6:  MOVWF  FEA
29E8:  MOVF   FEF,W
29EA:  SUBLW  20
29EC:  BNZ   29F6
29EE:  INCF   x46,F
29F0:  MOVLB  0
29F2:  BRA    29B2
29F4:  MOVLB  1
....................   } 
29F6:  MOVLB  0
29F8:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
2A4E:  MOVLB  2
2A50:  CLRF   x37
2A52:  MOVLW  01
2A54:  MOVWF  x36
....................   SINT num, sign = 1; 
....................   skip_spc(); 
2A56:  MOVLB  0
2A58:  RCALL  29B2
....................   if (comm_buf[comm_ptr]) 
2A5A:  CLRF   03
2A5C:  MOVLB  1
2A5E:  MOVF   x46,W
2A60:  ADDLW  59
2A62:  MOVWF  FE9
2A64:  MOVLW  00
2A66:  ADDWFC 03,W
2A68:  MOVWF  FEA
2A6A:  MOVF   FEF,F
2A6C:  BZ    2AF6
....................     { 
....................     num = 0; 
2A6E:  MOVLB  2
2A70:  CLRF   x35
2A72:  CLRF   x34
....................     if (peek_char() == '-') 
2A74:  MOVLB  0
2A76:  RCALL  2974
2A78:  MOVFF  02,239
2A7C:  MOVFF  01,238
2A80:  MOVLB  2
2A82:  MOVF   01,W
2A84:  SUBLW  2D
2A86:  BNZ   2A96
2A88:  MOVF   x39,F
2A8A:  BNZ   2A96
....................       { 
....................       sign = -1; 
2A8C:  SETF   x37
2A8E:  SETF   x36
....................       get_char(); 
2A90:  MOVLB  0
2A92:  RCALL  2992
2A94:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2A96:  CLRF   03
2A98:  MOVLB  1
2A9A:  MOVF   x46,W
2A9C:  ADDLW  59
2A9E:  MOVWF  FE9
2AA0:  MOVLW  00
2AA2:  ADDWFC 03,W
2AA4:  MOVWF  FEA
2AA6:  MOVFF  FEF,238
2AAA:  MOVLB  2
2AAC:  MOVF   x38,W
2AAE:  SUBLW  2F
2AB0:  BC    2AF6
2AB2:  MOVF   x38,W
2AB4:  SUBLW  39
2AB6:  BNC   2AF6
2AB8:  MOVFF  235,239
2ABC:  MOVFF  234,238
2AC0:  CLRF   x3B
2AC2:  MOVLW  0A
2AC4:  MOVWF  x3A
2AC6:  MOVLB  0
2AC8:  RCALL  29FA
2ACA:  MOVFF  02,239
2ACE:  MOVFF  01,238
2AD2:  MOVLB  1
2AD4:  MOVF   x46,W
2AD6:  INCF   x46,F
2AD8:  CLRF   03
2ADA:  ADDLW  59
2ADC:  MOVWF  FE9
2ADE:  MOVLW  00
2AE0:  ADDWFC 03,W
2AE2:  MOVWF  FEA
2AE4:  MOVLW  30
2AE6:  SUBWF  FEF,W
2AE8:  MOVLB  2
2AEA:  ADDWF  01,W
2AEC:  MOVWF  x34
2AEE:  MOVLW  00
2AF0:  ADDWFC 02,W
2AF2:  MOVWF  x35
2AF4:  BRA    2A96
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
2AF6:  MOVFF  235,239
2AFA:  MOVFF  234,238
2AFE:  MOVFF  237,23B
2B02:  MOVFF  236,23A
2B06:  MOVLB  0
2B08:  RCALL  29FA
2B0A:  MOVFF  02,03
2B0E:  MOVFF  02,02
....................   } 
2B12:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
5E66:  CALL   29B2
....................   if (comm_buf[comm_ptr]) 
5E6A:  CLRF   03
5E6C:  MOVLB  1
5E6E:  MOVF   x46,W
5E70:  ADDLW  59
5E72:  MOVWF  FE9
5E74:  MOVLW  00
5E76:  ADDWFC 03,W
5E78:  MOVWF  FEA
5E7A:  MOVF   FEF,F
5E7C:  BZ    5F0C
....................     { 
....................     num = 0; 
5E7E:  MOVLB  2
5E80:  CLRF   x0F
5E82:  CLRF   x0E
5E84:  CLRF   x0D
5E86:  CLRF   x0C
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5E88:  CLRF   03
5E8A:  MOVLB  1
5E8C:  MOVF   x46,W
5E8E:  ADDLW  59
5E90:  MOVWF  FE9
5E92:  MOVLW  00
5E94:  ADDWFC 03,W
5E96:  MOVWF  FEA
5E98:  MOVFF  FEF,210
5E9C:  MOVLB  2
5E9E:  MOVF   x10,W
5EA0:  SUBLW  2F
5EA2:  BC    5F0A
5EA4:  MOVF   x10,W
5EA6:  SUBLW  39
5EA8:  BNC   5F0A
5EAA:  MOVFF  20F,24B
5EAE:  MOVFF  20E,24A
5EB2:  MOVFF  20D,249
5EB6:  MOVFF  20C,248
5EBA:  CLRF   x4F
5EBC:  CLRF   x4E
5EBE:  CLRF   x4D
5EC0:  MOVLW  0A
5EC2:  MOVWF  x4C
5EC4:  MOVLB  0
5EC6:  CALL   12C0
5ECA:  MOVFF  03,213
5ECE:  MOVFF  02,212
5ED2:  MOVFF  01,211
5ED6:  MOVFF  00,210
5EDA:  MOVLB  1
5EDC:  MOVF   x46,W
5EDE:  INCF   x46,F
5EE0:  CLRF   03
5EE2:  ADDLW  59
5EE4:  MOVWF  FE9
5EE6:  MOVLW  00
5EE8:  ADDWFC 03,W
5EEA:  MOVWF  FEA
5EEC:  MOVLW  30
5EEE:  SUBWF  FEF,W
5EF0:  MOVLB  2
5EF2:  ADDWF  00,W
5EF4:  MOVWF  x0C
5EF6:  MOVLW  00
5EF8:  ADDWFC 01,W
5EFA:  MOVWF  x0D
5EFC:  MOVLW  00
5EFE:  ADDWFC 02,W
5F00:  MOVWF  x0E
5F02:  MOVLW  00
5F04:  ADDWFC x13,W
5F06:  MOVWF  x0F
5F08:  BRA    5E88
5F0A:  MOVLB  1
....................     } 
.................... //  skip_spc(); 
....................   return num; 
5F0C:  MOVFF  20C,00
5F10:  MOVFF  20D,01
5F14:  MOVFF  20E,02
5F18:  MOVFF  20F,03
....................   } 
5F1C:  MOVLB  0
5F1E:  GOTO   6426 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
5D6E:  CALL   29B2
....................   if (peek_char()) 
5D72:  CALL   2974
5D76:  MOVF   01,W
5D78:  IORWF  02,W
5D7A:  BTFSC  FD8.2
5D7C:  BRA    5E54
....................     { 
....................     num = 0; 
5D7E:  MOVLB  2
5D80:  CLRF   x0F
5D82:  CLRF   x0E
5D84:  CLRF   x0D
5D86:  CLRF   x0C
....................     while (isxdigit(peek_char())) 
....................       { 
5D88:  MOVLB  0
5D8A:  CALL   2974
5D8E:  MOVFF  02,212
5D92:  MOVFF  01,211
5D96:  MOVLB  2
5D98:  MOVF   x12,F
5D9A:  BNZ   5DA2
5D9C:  MOVF   x11,W
5D9E:  SUBLW  2F
5DA0:  BC    5DAC
5DA2:  MOVF   x12,F
5DA4:  BNZ   5DAC
5DA6:  MOVF   x11,W
5DA8:  SUBLW  39
5DAA:  BC    5DD4
5DAC:  MOVF   x12,F
5DAE:  BNZ   5DB6
5DB0:  MOVF   x11,W
5DB2:  SUBLW  40
5DB4:  BC    5DC0
5DB6:  MOVF   x12,F
5DB8:  BNZ   5DC0
5DBA:  MOVF   x11,W
5DBC:  SUBLW  46
5DBE:  BC    5DD4
5DC0:  MOVF   x12,F
5DC2:  BNZ   5DCA
5DC4:  MOVF   x11,W
5DC6:  SUBLW  60
5DC8:  BC    5E52
5DCA:  MOVF   x12,F
5DCC:  BNZ   5E52
5DCE:  MOVF   x11,W
5DD0:  SUBLW  66
5DD2:  BNC   5E52
....................       chr = get_char(); 
5DD4:  MOVLB  0
5DD6:  CALL   2992
5DDA:  MOVFF  01,210
....................       chr = toupper(chr); 
5DDE:  MOVLB  2
5DE0:  MOVF   x10,W
5DE2:  SUBLW  60
5DE4:  BC    5DF2
5DE6:  MOVF   x10,W
5DE8:  SUBLW  7A
5DEA:  BNC   5DF2
5DEC:  MOVF   x10,W
5DEE:  ANDLW  DF
5DF0:  BRA    5DF4
5DF2:  MOVF   x10,W
5DF4:  MOVWF  x10
....................       if (chr <= '9') 
5DF6:  MOVF   x10,W
5DF8:  SUBLW  39
5DFA:  BNC   5E02
....................         chr -= '0'; 
5DFC:  MOVLW  30
5DFE:  SUBWF  x10,F
....................       else 
5E00:  BRA    5E06
....................         chr = chr - ('A' - 10); 
5E02:  MOVLW  37
5E04:  SUBWF  x10,F
....................       num = num * 16 + (ULONG)chr; 
5E06:  RLCF   x0C,W
5E08:  MOVWF  x11
5E0A:  RLCF   x0D,W
5E0C:  MOVWF  x12
5E0E:  RLCF   x0E,W
5E10:  MOVWF  x13
5E12:  RLCF   x0F,W
5E14:  MOVWF  x14
5E16:  RLCF   x11,F
5E18:  RLCF   x12,F
5E1A:  RLCF   x13,F
5E1C:  RLCF   x14,F
5E1E:  RLCF   x11,F
5E20:  RLCF   x12,F
5E22:  RLCF   x13,F
5E24:  RLCF   x14,F
5E26:  RLCF   x11,F
5E28:  RLCF   x12,F
5E2A:  RLCF   x13,F
5E2C:  RLCF   x14,F
5E2E:  MOVLW  F0
5E30:  ANDWF  x11,F
5E32:  CLRF   01
5E34:  CLRF   02
5E36:  CLRF   03
5E38:  MOVF   x10,W
5E3A:  ADDWF  x11,W
5E3C:  MOVWF  x0C
5E3E:  MOVF   01,W
5E40:  ADDWFC x12,W
5E42:  MOVWF  x0D
5E44:  MOVF   02,W
5E46:  ADDWFC x13,W
5E48:  MOVWF  x0E
5E4A:  MOVF   03,W
5E4C:  ADDWFC x14,W
5E4E:  MOVWF  x0F
....................       } 
5E50:  BRA    5D88
5E52:  MOVLB  0
....................     } 
....................   return num; 
5E54:  MOVFF  20C,00
5E58:  MOVFF  20D,01
5E5C:  MOVFF  20E,02
5E60:  MOVFF  20F,03
....................   } 
5E64:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
3044:  RCALL  2A4E
3046:  MOVFF  02,22F
304A:  MOVFF  01,22E
304E:  MOVFF  02,239
3052:  MOVFF  01,238
3056:  MOVLB  2
3058:  CLRF   x3B
305A:  MOVLW  0A
305C:  MOVWF  x3A
305E:  MOVLB  0
3060:  RCALL  29FA
3062:  MOVFF  02,22D
3066:  MOVLB  2
3068:  MOVFF  01,22C
....................   if (peek_char() == '.') 
306C:  MOVLB  0
306E:  RCALL  2974
3070:  MOVFF  02,22F
3074:  MOVFF  01,22E
3078:  MOVLB  2
307A:  MOVF   01,W
307C:  SUBLW  2E
307E:  BNZ   30A0
3080:  MOVF   x2F,F
3082:  BNZ   30A0
....................     { 
....................     get_char(); // skip '.' 
3084:  MOVLB  0
3086:  RCALL  2992
....................     freq += get_char() - '0'; 
3088:  RCALL  2992
308A:  MOVLW  30
308C:  MOVLB  2
308E:  SUBWF  01,W
3090:  MOVWF  00
3092:  MOVLW  00
3094:  SUBWFB 02,W
3096:  MOVWF  03
3098:  MOVF   00,W
309A:  ADDWF  x2C,F
309C:  MOVF   03,W
309E:  ADDWFC x2D,F
....................     } 
....................   return freq; 
30A0:  MOVFF  22C,01
30A4:  MOVFF  22D,02
....................   } 
30A8:  MOVLB  0
30AA:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
5890:  MOVLB  1
5892:  MOVF   xD5,W
5894:  XORLW  69
5896:  MOVLB  0
5898:  BZ    58CC
589A:  XORLW  20
589C:  BZ    58FC
589E:  XORLW  2D
58A0:  BZ    592C
58A2:  XORLW  20
58A4:  BZ    5960
58A6:  XORLW  6F
58A8:  BTFSC  FD8.2
58AA:  BRA    5994
58AC:  XORLW  16
58AE:  BTFSC  FD8.2
58B0:  BRA    59E4
58B2:  XORLW  10
58B4:  BTFSC  FD8.2
58B6:  BRA    5A34
58B8:  XORLW  72
58BA:  BTFSC  FD8.2
58BC:  BRA    5A88
58BE:  XORLW  61
58C0:  BTFSC  FD8.2
58C2:  BRA    5ADC
58C4:  XORLW  02
58C6:  BTFSC  FD8.2
58C8:  BRA    5AF4
58CA:  BRA    5B08
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
58CC:  MOVLB  1
58CE:  INCF   x74,F
58D0:  BNZ   58DE
....................         if (++D2A_image[12] > 3) 
58D2:  INCF   x75,F
58D4:  MOVF   x75,W
58D6:  SUBLW  03
58D8:  BC    58DE
....................           { 
....................           D2A_image[11] = 0; 
58DA:  CLRF   x74
....................           D2A_image[12] = 0; 
58DC:  CLRF   x75
....................           } 
....................       write_D2A(11, D2A_image[11]); 
58DE:  MOVLW  0B
58E0:  MOVLB  2
58E2:  MOVWF  x0C
58E4:  MOVFF  174,20D
58E8:  MOVLB  0
58EA:  RCALL  5808
....................       write_D2A(12, D2A_image[12]); 
58EC:  MOVLW  0C
58EE:  MOVLB  2
58F0:  MOVWF  x0C
58F2:  MOVFF  175,20D
58F6:  MOVLB  0
58F8:  RCALL  5808
....................       break; 
58FA:  BRA    5B08
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
58FC:  MOVLB  1
58FE:  INCF   x78,F
5900:  BNZ   590E
....................         if (++D2A_image[16] > 3) 
5902:  INCF   x79,F
5904:  MOVF   x79,W
5906:  SUBLW  03
5908:  BC    590E
....................           { 
....................           D2A_image[15] = 0; 
590A:  CLRF   x78
....................           D2A_image[16] = 0; 
590C:  CLRF   x79
....................           } 
....................       write_D2A(15, D2A_image[15]); 
590E:  MOVLW  0F
5910:  MOVLB  2
5912:  MOVWF  x0C
5914:  MOVFF  178,20D
5918:  MOVLB  0
591A:  RCALL  5808
....................       write_D2A(16, D2A_image[16]); 
591C:  MOVLW  10
591E:  MOVLB  2
5920:  MOVWF  x0C
5922:  MOVFF  179,20D
5926:  MOVLB  0
5928:  RCALL  5808
....................       break; 
592A:  BRA    5B08
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
592C:  MOVLB  1
592E:  DECF   x74,F
5930:  INCFSZ x74,W
5932:  BRA    5942
....................         if (--D2A_image[12] > 3) 
5934:  DECF   x75,F
5936:  MOVF   x75,W
5938:  SUBLW  03
593A:  BC    5942
....................           { 
....................           D2A_image[11] = 255; 
593C:  SETF   x74
....................           D2A_image[12] = 3; 
593E:  MOVLW  03
5940:  MOVWF  x75
....................           } 
....................       write_D2A(11, D2A_image[11]); 
5942:  MOVLW  0B
5944:  MOVLB  2
5946:  MOVWF  x0C
5948:  MOVFF  174,20D
594C:  MOVLB  0
594E:  RCALL  5808
....................       write_D2A(12, D2A_image[12]); 
5950:  MOVLW  0C
5952:  MOVLB  2
5954:  MOVWF  x0C
5956:  MOVFF  175,20D
595A:  MOVLB  0
595C:  RCALL  5808
....................       break; 
595E:  BRA    5B08
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
5960:  MOVLB  1
5962:  DECF   x78,F
5964:  INCFSZ x78,W
5966:  BRA    5976
....................         if (--D2A_image[16] > 3) 
5968:  DECF   x79,F
596A:  MOVF   x79,W
596C:  SUBLW  03
596E:  BC    5976
....................           { 
....................           D2A_image[15] = 255; 
5970:  SETF   x78
....................           D2A_image[16] = 3; 
5972:  MOVLW  03
5974:  MOVWF  x79
....................           } 
....................       write_D2A(15, D2A_image[15]); 
5976:  MOVLW  0F
5978:  MOVLB  2
597A:  MOVWF  x0C
597C:  MOVFF  178,20D
5980:  MOVLB  0
5982:  RCALL  5808
....................       write_D2A(16, D2A_image[16]); 
5984:  MOVLW  10
5986:  MOVLB  2
5988:  MOVWF  x0C
598A:  MOVFF  179,20D
598E:  MOVLB  0
5990:  RCALL  5808
....................       break; 
5992:  BRA    5B08
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5994:  MOVLB  1
5996:  MOVFF  176,1D6
599A:  MOVF   x77,W
599C:  ANDLW  03
599E:  MOVWF  xD7
....................       if (++incdec > 0x3FF) 
59A0:  INCF   xD6,F
59A2:  BTFSC  FD8.2
59A4:  INCF   xD7,F
59A6:  MOVF   xD7,W
59A8:  SUBLW  03
59AA:  BC    59B0
....................         incdec = 0; 
59AC:  CLRF   xD7
59AE:  CLRF   xD6
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
59B0:  MOVF   x77,W
59B2:  ANDLW  C0
59B4:  MOVWF  xD8
59B6:  MOVLW  00
59B8:  IORWF  xD6,F
59BA:  MOVF   xD8,W
59BC:  IORWF  xD7,F
....................       D2A_image[13] = make8(incdec, 0); 
59BE:  MOVFF  1D6,176
....................       D2A_image[14] = make8(incdec, 1); 
59C2:  MOVFF  1D7,177
....................       write_D2A(11, D2A_image[13]); 
59C6:  MOVLW  0B
59C8:  MOVLB  2
59CA:  MOVWF  x0C
59CC:  MOVFF  176,20D
59D0:  MOVLB  0
59D2:  RCALL  5808
....................       write_D2A(12, D2A_image[14]); 
59D4:  MOVLW  0C
59D6:  MOVLB  2
59D8:  MOVWF  x0C
59DA:  MOVFF  177,20D
59DE:  MOVLB  0
59E0:  RCALL  5808
....................       break; 
59E2:  BRA    5B08
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
59E4:  MOVLB  1
59E6:  MOVFF  17A,1D6
59EA:  MOVF   x7B,W
59EC:  ANDLW  03
59EE:  MOVWF  xD7
....................       if (++incdec > 0x3FF) 
59F0:  INCF   xD6,F
59F2:  BTFSC  FD8.2
59F4:  INCF   xD7,F
59F6:  MOVF   xD7,W
59F8:  SUBLW  03
59FA:  BC    5A00
....................         incdec = 0; 
59FC:  CLRF   xD7
59FE:  CLRF   xD6
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5A00:  MOVF   x7B,W
5A02:  ANDLW  C0
5A04:  MOVWF  xD8
5A06:  MOVLW  00
5A08:  IORWF  xD6,F
5A0A:  MOVF   xD8,W
5A0C:  IORWF  xD7,F
....................       D2A_image[17] = make8(incdec, 0); 
5A0E:  MOVFF  1D6,17A
....................       D2A_image[18] = make8(incdec, 1); 
5A12:  MOVFF  1D7,17B
....................       write_D2A(11, D2A_image[17]); 
5A16:  MOVLW  0B
5A18:  MOVLB  2
5A1A:  MOVWF  x0C
5A1C:  MOVFF  17A,20D
5A20:  MOVLB  0
5A22:  RCALL  5808
....................       write_D2A(12, D2A_image[18]); 
5A24:  MOVLW  0C
5A26:  MOVLB  2
5A28:  MOVWF  x0C
5A2A:  MOVFF  17B,20D
5A2E:  MOVLB  0
5A30:  RCALL  5808
....................       break; 
5A32:  BRA    5B08
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5A34:  MOVLB  1
5A36:  MOVFF  176,1D6
5A3A:  MOVF   x77,W
5A3C:  ANDLW  03
5A3E:  MOVWF  xD7
....................       if (--incdec > 0x3FF) 
5A40:  MOVF   xD6,W
5A42:  BTFSC  FD8.2
5A44:  DECF   xD7,F
5A46:  DECF   xD6,F
5A48:  MOVF   xD7,W
5A4A:  SUBLW  03
5A4C:  BC    5A54
....................         incdec = 0x3FF; 
5A4E:  MOVLW  03
5A50:  MOVWF  xD7
5A52:  SETF   xD6
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5A54:  MOVF   x77,W
5A56:  ANDLW  C0
5A58:  MOVWF  xD8
5A5A:  MOVLW  00
5A5C:  IORWF  xD6,F
5A5E:  MOVF   xD8,W
5A60:  IORWF  xD7,F
....................       D2A_image[13] = make8(incdec, 0); 
5A62:  MOVFF  1D6,176
....................       D2A_image[14] = make8(incdec, 1); 
5A66:  MOVFF  1D7,177
....................       write_D2A(11, D2A_image[13]); 
5A6A:  MOVLW  0B
5A6C:  MOVLB  2
5A6E:  MOVWF  x0C
5A70:  MOVFF  176,20D
5A74:  MOVLB  0
5A76:  RCALL  5808
....................       write_D2A(12, D2A_image[14]); 
5A78:  MOVLW  0C
5A7A:  MOVLB  2
5A7C:  MOVWF  x0C
5A7E:  MOVFF  177,20D
5A82:  MOVLB  0
5A84:  RCALL  5808
....................       break; 
5A86:  BRA    5B08
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5A88:  MOVLB  1
5A8A:  MOVFF  17A,1D6
5A8E:  MOVF   x7B,W
5A90:  ANDLW  03
5A92:  MOVWF  xD7
....................       if (--incdec > 0x3FF) 
5A94:  MOVF   xD6,W
5A96:  BTFSC  FD8.2
5A98:  DECF   xD7,F
5A9A:  DECF   xD6,F
5A9C:  MOVF   xD7,W
5A9E:  SUBLW  03
5AA0:  BC    5AA8
....................         incdec = 0x3FF; 
5AA2:  MOVLW  03
5AA4:  MOVWF  xD7
5AA6:  SETF   xD6
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5AA8:  MOVF   x7B,W
5AAA:  ANDLW  C0
5AAC:  MOVWF  xD8
5AAE:  MOVLW  00
5AB0:  IORWF  xD6,F
5AB2:  MOVF   xD8,W
5AB4:  IORWF  xD7,F
....................       D2A_image[17] = make8(incdec, 0); 
5AB6:  MOVFF  1D6,17A
....................       D2A_image[18] = make8(incdec, 1); 
5ABA:  MOVFF  1D7,17B
....................       write_D2A(11, D2A_image[17]); 
5ABE:  MOVLW  0B
5AC0:  MOVLB  2
5AC2:  MOVWF  x0C
5AC4:  MOVFF  17A,20D
5AC8:  MOVLB  0
5ACA:  RCALL  5808
....................       write_D2A(12, D2A_image[18]); 
5ACC:  MOVLW  0C
5ACE:  MOVLB  2
5AD0:  MOVWF  x0C
5AD2:  MOVFF  17B,20D
5AD6:  MOVLB  0
5AD8:  RCALL  5808
....................       break; 
5ADA:  BRA    5B08
....................     case '>': 
....................       if (setup.phase_offset < 255) 
5ADC:  INCFSZ xBD,W
5ADE:  BRA    5AE2
5AE0:  BRA    5AE4
....................         setup.phase_offset++; 
5AE2:  INCF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5AE4:  MOVLW  01
5AE6:  MOVLB  1
5AE8:  MOVWF  xD8
5AEA:  MOVFF  BD,1D9
5AEE:  MOVLB  0
5AF0:  RCALL  5872
....................       break; 
5AF2:  BRA    5B08
....................     case '<': 
....................       if (setup.phase_offset) 
5AF4:  MOVF   xBD,F
5AF6:  BZ    5AFA
....................         setup.phase_offset--; 
5AF8:  DECF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5AFA:  MOVLW  01
5AFC:  MOVLB  1
5AFE:  MOVWF  xD8
5B00:  MOVFF  BD,1D9
5B04:  MOVLB  0
5B06:  RCALL  5872
....................       break; 
....................     } 
....................   } 
5B08:  GOTO   67DA (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
5B0C:  MOVLW  0D
5B0E:  MOVLB  2
5B10:  MOVWF  x0C
5B12:  MOVLW  0A
5B14:  MOVWF  x0D
5B16:  CLRF   x0E
5B18:  MOVLW  02
5B1A:  MOVWF  x6C
5B1C:  MOVLW  0C
5B1E:  MOVWF  x6B
5B20:  MOVLB  0
5B22:  CALL   20CC
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
5B26:  MOVLW  02
5B28:  MOVWF  FEA
5B2A:  MOVLW  0C
5B2C:  MOVWF  FE9
5B2E:  MOVLW  3D
5B30:  MOVWF  01
5B32:  CLRF   FF7
5B34:  MOVLW  00
5B36:  CALL   0112
5B3A:  TBLRD*-
5B3C:  TBLRD*+
5B3E:  MOVFF  FF5,FEE
5B42:  DECFSZ 01,F
5B44:  BRA    5B3C
5B46:  MOVLW  02
5B48:  MOVLB  2
5B4A:  MOVWF  x6C
5B4C:  MOVLW  0C
5B4E:  MOVWF  x6B
5B50:  MOVLB  0
5B52:  CALL   20CC
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5B56:  MOVLW  02
5B58:  MOVWF  FEA
5B5A:  MOVLW  0C
5B5C:  MOVWF  FE9
5B5E:  MOVLW  2E
5B60:  MOVWF  01
5B62:  CLRF   FF7
5B64:  MOVLW  00
5B66:  CALL   0160
5B6A:  TBLRD*-
5B6C:  TBLRD*+
5B6E:  MOVFF  FF5,FEE
5B72:  DECFSZ 01,F
5B74:  BRA    5B6C
5B76:  MOVLW  02
5B78:  MOVLB  2
5B7A:  MOVWF  x6C
5B7C:  MOVLW  0C
5B7E:  MOVWF  x6B
5B80:  MOVLB  0
5B82:  CALL   20CC
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
5B86:  MOVLW  02
5B88:  MOVWF  FEA
5B8A:  MOVLW  0C
5B8C:  MOVWF  FE9
5B8E:  MOVLW  42
5B90:  MOVWF  01
5B92:  CLRF   FF7
5B94:  MOVLW  00
5B96:  CALL   019E
5B9A:  TBLRD*-
5B9C:  TBLRD*+
5B9E:  MOVFF  FF5,FEE
5BA2:  DECFSZ 01,F
5BA4:  BRA    5B9C
5BA6:  MOVLW  02
5BA8:  MOVLB  2
5BAA:  MOVWF  x6C
5BAC:  MOVLW  0C
5BAE:  MOVWF  x6B
5BB0:  MOVLB  0
5BB2:  CALL   20CC
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
5BB6:  MOVLW  02
5BB8:  MOVWF  FEA
5BBA:  MOVLW  0C
5BBC:  MOVWF  FE9
5BBE:  MOVLW  23
5BC0:  MOVWF  01
5BC2:  CLRF   FF7
5BC4:  MOVLW  00
5BC6:  CALL   01F0
5BCA:  TBLRD*-
5BCC:  TBLRD*+
5BCE:  MOVFF  FF5,FEE
5BD2:  DECFSZ 01,F
5BD4:  BRA    5BCC
5BD6:  MOVLW  02
5BD8:  MOVLB  2
5BDA:  MOVWF  x6C
5BDC:  MOVLW  0C
5BDE:  MOVWF  x6B
5BE0:  MOVLB  0
5BE2:  CALL   20CC
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5BE6:  MOVLW  02
5BE8:  MOVWF  FEA
5BEA:  MOVLW  0C
5BEC:  MOVWF  FE9
5BEE:  MOVLW  2D
5BF0:  MOVWF  01
5BF2:  CLRF   FF7
5BF4:  MOVLW  00
5BF6:  CALL   0224
5BFA:  TBLRD*-
5BFC:  TBLRD*+
5BFE:  MOVFF  FF5,FEE
5C02:  DECFSZ 01,F
5C04:  BRA    5BFC
5C06:  MOVLW  02
5C08:  MOVLB  2
5C0A:  MOVWF  x6C
5C0C:  MOVLW  0C
5C0E:  MOVWF  x6B
5C10:  MOVLB  0
5C12:  CALL   20CC
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5C16:  MOVLW  02
5C18:  MOVWF  FEA
5C1A:  MOVLW  0C
5C1C:  MOVWF  FE9
5C1E:  MOVLW  2E
5C20:  MOVWF  01
5C22:  CLRF   FF7
5C24:  MOVLW  00
5C26:  CALL   0262
5C2A:  TBLRD*-
5C2C:  TBLRD*+
5C2E:  MOVFF  FF5,FEE
5C32:  DECFSZ 01,F
5C34:  BRA    5C2C
5C36:  MOVLW  02
5C38:  MOVLB  2
5C3A:  MOVWF  x6C
5C3C:  MOVLW  0C
5C3E:  MOVWF  x6B
5C40:  MOVLB  0
5C42:  CALL   20CC
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5C46:  MOVLW  02
5C48:  MOVWF  FEA
5C4A:  MOVLW  0C
5C4C:  MOVWF  FE9
5C4E:  MOVLW  36
5C50:  MOVWF  01
5C52:  CLRF   FF7
5C54:  MOVLW  00
5C56:  CALL   02A0
5C5A:  TBLRD*-
5C5C:  TBLRD*+
5C5E:  MOVFF  FF5,FEE
5C62:  DECFSZ 01,F
5C64:  BRA    5C5C
5C66:  MOVLW  02
5C68:  MOVLB  2
5C6A:  MOVWF  x6C
5C6C:  MOVLW  0C
5C6E:  MOVWF  x6B
5C70:  MOVLB  0
5C72:  CALL   20CC
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
5C76:  MOVLW  02
5C78:  MOVWF  FEA
5C7A:  MOVLW  0C
5C7C:  MOVWF  FE9
5C7E:  MOVLW  16
5C80:  MOVWF  01
5C82:  CLRF   FF7
5C84:  MOVLW  00
5C86:  CALL   02E6
5C8A:  TBLRD*-
5C8C:  TBLRD*+
5C8E:  MOVFF  FF5,FEE
5C92:  DECFSZ 01,F
5C94:  BRA    5C8C
5C96:  MOVLW  02
5C98:  MOVLB  2
5C9A:  MOVWF  x6C
5C9C:  MOVLW  0C
5C9E:  MOVWF  x6B
5CA0:  MOVLB  0
5CA2:  CALL   20CC
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
5CA6:  MOVLW  02
5CA8:  MOVWF  FEA
5CAA:  MOVLW  0C
5CAC:  MOVWF  FE9
5CAE:  MOVLW  3C
5CB0:  MOVWF  01
5CB2:  CLRF   FF7
5CB4:  MOVLW  00
5CB6:  CALL   030C
5CBA:  TBLRD*-
5CBC:  TBLRD*+
5CBE:  MOVFF  FF5,FEE
5CC2:  DECFSZ 01,F
5CC4:  BRA    5CBC
5CC6:  MOVLW  02
5CC8:  MOVLB  2
5CCA:  MOVWF  x6C
5CCC:  MOVLW  0C
5CCE:  MOVWF  x6B
5CD0:  MOVLB  0
5CD2:  CALL   20CC
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5CD6:  MOVLW  02
5CD8:  MOVWF  FEA
5CDA:  MOVLW  0C
5CDC:  MOVWF  FE9
5CDE:  MOVLW  3D
5CE0:  MOVWF  01
5CE2:  CLRF   FF7
5CE4:  MOVLW  00
5CE6:  CALL   0358
5CEA:  TBLRD*-
5CEC:  TBLRD*+
5CEE:  MOVFF  FF5,FEE
5CF2:  DECFSZ 01,F
5CF4:  BRA    5CEC
5CF6:  MOVLW  02
5CF8:  MOVLB  2
5CFA:  MOVWF  x6C
5CFC:  MOVLW  0C
5CFE:  MOVWF  x6B
5D00:  MOVLB  0
5D02:  CALL   20CC
....................   COM1_send_str("\r\n"); 
5D06:  MOVLW  0D
5D08:  MOVLB  2
5D0A:  MOVWF  x0C
5D0C:  MOVLW  0A
5D0E:  MOVWF  x0D
5D10:  CLRF   x0E
5D12:  MOVLW  02
5D14:  MOVWF  x6C
5D16:  MOVLW  0C
5D18:  MOVWF  x6B
5D1A:  MOVLB  0
5D1C:  CALL   20CC
....................   } 
5D20:  GOTO   6148 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
....................   { 
....................   //COM1_send_str("\r\nFAIL\r\n"); 
....................   } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... float read_temperature(void)  
....................   { 
....................   float temp; 
....................   SINT val; 
....................   set_adc_channel(A2D_TEMP); // read temperature 
*
2686:  MOVLW  18
2688:  MOVWF  01
268A:  MOVF   FC2,W
268C:  ANDLW  83
268E:  IORWF  01,W
2690:  MOVWF  FC2
....................   delay_us(50); 
2692:  MOVLW  42
2694:  MOVWF  00
2696:  DECFSZ 00,F
2698:  BRA    2696
269A:  NOP   
....................   val = read_adc(); 
269C:  BSF    FC2.1
269E:  BTFSC  FC2.1
26A0:  BRA    269E
26A2:  MOVFF  FC4,246
26A6:  MOVLB  2
26A8:  MOVFF  FC3,245
....................   temp = (float)val / 1024.0 * 3.3; 
26AC:  MOVFF  246,248
26B0:  MOVFF  245,247
26B4:  MOVLB  0
26B6:  BRA    23BC
26B8:  MOVFF  00,247
26BC:  MOVFF  01,248
26C0:  MOVFF  02,249
26C4:  MOVFF  03,24A
26C8:  MOVFF  03,255
26CC:  MOVFF  02,254
26D0:  MOVFF  01,253
26D4:  MOVFF  00,252
26D8:  MOVLB  2
26DA:  CLRF   x59
26DC:  CLRF   x58
26DE:  CLRF   x57
26E0:  MOVLW  89
26E2:  MOVWF  x56
26E4:  MOVLB  0
26E6:  CALL   18A2
26EA:  MOVFF  00,247
26EE:  MOVFF  01,248
26F2:  MOVFF  02,249
26F6:  MOVFF  03,24A
26FA:  MOVFF  03,255
26FE:  MOVFF  02,254
2702:  MOVFF  01,253
2706:  MOVFF  00,252
270A:  MOVLW  33
270C:  MOVLB  2
270E:  MOVWF  x59
2710:  MOVWF  x58
2712:  MOVLW  53
2714:  MOVWF  x57
2716:  MOVLW  80
2718:  MOVWF  x56
271A:  MOVLB  0
271C:  CALL   1A00
2720:  MOVFF  03,244
2724:  MOVFF  02,243
2728:  MOVFF  01,242
272C:  MOVFF  00,241
....................   temp -= 0.75; 
2730:  BSF    FD8.1
2732:  MOVFF  244,24A
2736:  MOVFF  243,249
273A:  MOVFF  242,248
273E:  MOVFF  241,247
2742:  MOVLB  2
2744:  CLRF   x4E
2746:  CLRF   x4D
2748:  MOVLW  40
274A:  MOVWF  x4C
274C:  MOVLW  7E
274E:  MOVWF  x4B
2750:  MOVLB  0
2752:  RCALL  240E
2754:  MOVFF  03,244
2758:  MOVFF  02,243
275C:  MOVFF  01,242
2760:  MOVFF  00,241
....................   temp *= 100; 
2764:  MOVFF  244,255
2768:  MOVFF  243,254
276C:  MOVFF  242,253
2770:  MOVFF  241,252
2774:  MOVLB  2
2776:  CLRF   x59
2778:  CLRF   x58
277A:  MOVLW  48
277C:  MOVWF  x57
277E:  MOVLW  85
2780:  MOVWF  x56
2782:  MOVLB  0
2784:  CALL   1A00
2788:  MOVFF  03,244
278C:  MOVFF  02,243
2790:  MOVFF  01,242
2794:  MOVFF  00,241
....................   temp += 25.0; 
2798:  BCF    FD8.1
279A:  MOVFF  244,24A
279E:  MOVFF  243,249
27A2:  MOVFF  242,248
27A6:  MOVFF  241,247
27AA:  MOVLB  2
27AC:  CLRF   x4E
27AE:  CLRF   x4D
27B0:  MOVLW  48
27B2:  MOVWF  x4C
27B4:  MOVLW  83
27B6:  MOVWF  x4B
27B8:  MOVLB  0
27BA:  RCALL  240E
27BC:  MOVFF  03,244
27C0:  MOVFF  02,243
27C4:  MOVFF  01,242
27C8:  MOVFF  00,241
....................   return temp; 
27CC:  MOVFF  241,00
27D0:  MOVFF  242,01
27D4:  MOVFF  243,02
27D8:  MOVFF  244,03
....................   } 
27DC:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
....................   { 
*
2254:  MOVLB  1
2256:  CLRF   xC4
....................  // float temp; 
....................   byte t = 0; 
....................   t =          (bit)setup.data_source ; 
2258:  CLRF   xC4
225A:  MOVLB  0
225C:  BTFSS  xB3.0
225E:  BRA    2266
2260:  MOVLB  1
2262:  INCF   xC4,F
2264:  MOVLB  0
....................   t = t + ( (bit)setup.data_polarity <<  1); 
2266:  MOVLW  00
2268:  BTFSC  xB1.0
226A:  MOVLW  01
226C:  MOVWF  00
226E:  BCF    FD8.0
2270:  RLCF   00,F
2272:  MOVF   00,W
2274:  MOVLB  1
2276:  ADDWF  xC4,F
....................   t = t + ( (bit)setup.randomizer <<     2); 
2278:  MOVLW  00
227A:  MOVLB  0
227C:  BTFSC  xB5.0
227E:  MOVLW  01
2280:  MOVWF  00
2282:  RLCF   00,F
2284:  RLCF   00,F
2286:  MOVLW  FC
2288:  ANDWF  00,F
228A:  MOVF   00,W
228C:  MOVLB  1
228E:  ADDWF  xC4,F
....................   t = t + ( (bit)setup.clock_source <<   3); 
2290:  MOVLW  00
2292:  MOVLB  0
2294:  BTFSC  xB2.0
2296:  MOVLW  01
2298:  MOVWF  00
229A:  RLCF   00,F
229C:  RLCF   00,F
229E:  RLCF   00,F
22A0:  MOVLW  F8
22A2:  ANDWF  00,F
22A4:  MOVF   00,W
22A6:  MOVLB  1
22A8:  ADDWF  xC4,F
....................   t = t + ( (bit)setup.clock_polarity << 4); 
22AA:  MOVLW  00
22AC:  MOVLB  0
22AE:  BTFSC  xB0.0
22B0:  MOVLW  01
22B2:  MOVWF  00
22B4:  SWAPF  00,F
22B6:  MOVLW  F0
22B8:  ANDWF  00,F
22BA:  MOVF   00,W
22BC:  MOVLB  1
22BE:  ADDWF  xC4,F
....................   t = t + ( (bit)setup.SOQPSK <<         5); 
22C0:  MOVLW  00
22C2:  MOVLB  0
22C4:  BTFSC  xB7.0
22C6:  MOVLW  01
22C8:  MOVWF  00
22CA:  SWAPF  00,F
22CC:  RLCF   00,F
22CE:  MOVLW  E0
22D0:  ANDWF  00,F
22D2:  MOVF   00,W
22D4:  MOVLB  1
22D6:  ADDWF  xC4,F
....................   t = t + ( (bit)0 <<       6); 
....................   t = t + ( (bit)0 <<       7); 
....................    
....................   //  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................   return t; 
22D8:  CLRF   03
22DA:  MOVFF  1C4,01
22DE:  MOVFF  03,02
....................   } 
22E2:  MOVLB  0
22E4:  GOTO   282A (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
....................   { 
....................  // float temp; 
....................  set_adc_channel(A2D_PREV); // select forward power input 
22E8:  MOVLW  10
22EA:  MOVWF  01
22EC:  MOVF   FC2,W
22EE:  ANDLW  83
22F0:  IORWF  01,W
22F2:  MOVWF  FC2
....................  delay_us(20); 
22F4:  MOVLW  1A
22F6:  MOVWF  00
22F8:  DECFSZ 00,F
22FA:  BRA    22F8
22FC:  NOP   
....................  revp = read_adc(); 
22FE:  BSF    FC2.1
2300:  BTFSC  FC2.1
2302:  BRA    2300
2304:  MOVFF  FC4,106
2308:  MOVLB  1
230A:  MOVFF  FC3,105
....................   if (revp <= 580) 
230E:  MOVF   x06,W
2310:  SUBLW  02
2312:  BNC   2320
2314:  BNZ   231C
2316:  MOVF   x05,W
2318:  SUBLW  44
231A:  BNC   2320
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
231C:  BCF    xA7.0
....................       else 
231E:  BRA    2322
....................         revp_status = 1;//Q strcpy(revstat, "BAD"); 
2320:  BSF    xA7.0
....................  
....................   byte t = 0; 
2322:  CLRF   xC4
....................   t =       (bit)setup.cot ; //RB 
2324:  CLRF   xC4
2326:  MOVLB  0
2328:  BTFSS  xF5.0
232A:  BRA    2332
232C:  MOVLB  1
232E:  INCF   xC4,F
2330:  MOVLB  0
....................   t = t + ( (bit)setup.rc <<  1); 
2332:  MOVLW  00
2334:  BTFSC  xF7.0
2336:  MOVLW  01
2338:  MOVWF  00
233A:  BCF    FD8.0
233C:  RLCF   00,F
233E:  MOVF   00,W
2340:  MOVLB  1
2342:  ADDWF  xC4,F
....................   t = t + ( (bit)gl_current_power_en_value << 2);//RF 
2344:  MOVLW  00
2346:  BTFSC  x0D.0
2348:  MOVLW  01
234A:  MOVWF  00
234C:  RLCF   00,F
234E:  RLCF   00,F
2350:  MOVLW  FC
2352:  ANDWF  00,F
2354:  MOVF   00,W
2356:  ADDWF  xC4,F
....................   t = t + ( (bit)(gl_current_power_level == power_level) <<  3); 
2358:  MOVF   1C,W
235A:  SUBWF  x0B,W
235C:  BNZ   2364
235E:  MOVF   1D,W
2360:  SUBWF  x0C,W
2362:  BZ    2368
2364:  MOVLW  00
2366:  BRA    236A
2368:  MOVLW  01
236A:  MOVWF  01
236C:  MOVLW  00
236E:  BTFSC  01.0
2370:  MOVLW  01
2372:  MOVWF  00
2374:  RLCF   00,F
2376:  RLCF   00,F
2378:  RLCF   00,F
237A:  MOVLW  F8
237C:  ANDWF  00,F
237E:  MOVF   00,W
2380:  ADDWF  xC4,F
....................   t = t + ( (bit)setup.UART_Status << 4); 
2382:  MOVLW  00
2384:  MOVLB  0
2386:  BTFSC  xFC.0
2388:  MOVLW  01
238A:  MOVWF  00
238C:  SWAPF  00,F
238E:  MOVLW  F0
2390:  ANDWF  00,F
2392:  MOVF   00,W
2394:  MOVLB  1
2396:  ADDWF  xC4,F
....................   t = t + ( (bit)revp_status <<       5); 
2398:  MOVLW  00
239A:  BTFSC  xA7.0
239C:  MOVLW  01
239E:  MOVWF  00
23A0:  SWAPF  00,F
23A2:  RLCF   00,F
23A4:  MOVLW  E0
23A6:  ANDWF  00,F
23A8:  MOVF   00,W
23AA:  ADDWF  xC4,F
....................   t = t + ( (bit)0 <<       6); 
....................   t = t + ( (bit)0 <<       7); 
....................    
....................   
....................   return t; 
23AC:  CLRF   03
23AE:  MOVFF  1C4,01
23B2:  MOVFF  03,02
....................   } 
23B6:  MOVLB  0
23B8:  GOTO   2830 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
366A:  CALL   2A4E
366E:  MOVFF  02,22D
3672:  MOVFF  01,22C
....................   setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
3676:  MOVFF  22C,FE
....................   if (idx <= 40 && idx >= 20) 
367A:  MOVLB  2
367C:  MOVF   x2D,F
367E:  BNZ   36D2
3680:  MOVF   x2C,W
3682:  SUBLW  28
3684:  BNC   36D2
3686:  MOVF   x2D,F
3688:  BNZ   3690
368A:  MOVF   x2C,W
368C:  SUBLW  13
368E:  BC    36D2
....................     { 
....................     setup.power_level = idx - 20; 
3690:  MOVLW  14
3692:  SUBWF  x2C,W
3694:  MOVLB  0
3696:  MOVWF  xBB
3698:  MOVLW  00
369A:  MOVLB  2
369C:  SUBWFB x2D,W
369E:  MOVLB  0
36A0:  MOVWF  xBC
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
36A2:  BCF    FD8.0
36A4:  RLCF   xBB,W
36A6:  MOVWF  02
36A8:  RLCF   xBC,W
36AA:  MOVWF  03
36AC:  MOVF   02,W
36AE:  ADDLW  C4
36B0:  MOVWF  FE9
36B2:  MOVLW  00
36B4:  ADDWFC 03,W
36B6:  MOVWF  FEA
36B8:  MOVFF  FEC,03
36BC:  MOVF   FED,F
36BE:  MOVFF  FEF,1C
36C2:  MOVFF  03,1D
....................     return 1; 
36C6:  MOVLW  01
36C8:  MOVWF  01
36CA:  MOVLW  00
36CC:  MOVWF  02
36CE:  BRA    36D8
36D0:  MOVLB  2
....................     } 
....................   return 0; 
36D2:  MOVLW  00
36D4:  MOVWF  01
36D6:  MOVWF  02
36D8:  MOVLB  0
....................   } 
36DA:  GOTO   4D1C (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
35F6:  CALL   2A4E
35FA:  MOVFF  02,22D
35FE:  MOVFF  01,22C
....................   setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
3602:  MOVFF  22C,FD
....................   if (idx <= 40 && idx >= 20) 
3606:  MOVLB  2
3608:  MOVF   x2D,F
360A:  BNZ   365E
360C:  MOVF   x2C,W
360E:  SUBLW  28
3610:  BNC   365E
3612:  MOVF   x2D,F
3614:  BNZ   361C
3616:  MOVF   x2C,W
3618:  SUBLW  13
361A:  BC    365E
....................     { 
....................     setup.power_low_level = idx - 20; 
361C:  MOVLW  14
361E:  SUBWF  x2C,W
3620:  MOVLB  0
3622:  MOVWF  xF3
3624:  MOVLW  00
3626:  MOVLB  2
3628:  SUBWFB x2D,W
362A:  MOVLB  0
362C:  MOVWF  xF4
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
362E:  BCF    FD8.0
3630:  RLCF   xF3,W
3632:  MOVWF  02
3634:  RLCF   xF4,W
3636:  MOVWF  03
3638:  MOVF   02,W
363A:  ADDLW  C4
363C:  MOVWF  FE9
363E:  MOVLW  00
3640:  ADDWFC 03,W
3642:  MOVWF  FEA
3644:  MOVFF  FEC,03
3648:  MOVF   FED,F
364A:  MOVFF  FEF,1A
364E:  MOVFF  03,1B
....................     return 1; 
3652:  MOVLW  01
3654:  MOVWF  01
3656:  MOVLW  00
3658:  MOVWF  02
365A:  BRA    3664
365C:  MOVLB  2
....................     } 
....................   return 0; 
365E:  MOVLW  00
3660:  MOVWF  01
3662:  MOVWF  02
3664:  MOVLB  0
....................   } 
3666:  GOTO   4C72 (RETURN)
....................  
.................... void update_temperature_string()  
.................... { 
....................   if(setup.pwr) 
*
353A:  MOVF   xAD,W
353C:  IORWF  xAE,W
353E:  BZ    35A2
....................   { 
....................     sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", read_temperature()); 
3540:  CALL   2686
3544:  MOVFF  00,241
3548:  MOVFF  01,242
354C:  MOVFF  02,243
3550:  MOVFF  03,244
3554:  MOVLW  01
3556:  MOVLB  1
3558:  MOVWF  xA9
355A:  MOVLW  7D
355C:  MOVWF  xA8
355E:  MOVLW  D4
3560:  MOVWF  FF6
3562:  MOVLW  0B
3564:  MOVWF  FF7
3566:  MOVLW  06
3568:  MOVLB  2
356A:  MOVWF  x45
356C:  MOVLB  0
356E:  RCALL  2F60
3570:  MOVLW  05
3572:  MOVWF  FE9
3574:  MOVFF  244,248
3578:  MOVFF  243,247
357C:  MOVFF  242,246
3580:  MOVFF  241,245
3584:  MOVLW  02
3586:  MOVLB  2
3588:  MOVWF  x49
358A:  MOVLB  0
358C:  BRA    338A
358E:  MOVLW  DF
3590:  MOVWF  FF6
3592:  MOVLW  0B
3594:  MOVWF  FF7
3596:  MOVLW  08
3598:  MOVLB  2
359A:  MOVWF  x45
359C:  MOVLB  0
359E:  RCALL  2F60
....................   } 
....................   else 
35A0:  BRA    35D2
....................   { 
....................     COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
35A2:  MOVLW  02
35A4:  MOVWF  FEA
35A6:  MOVLW  2C
35A8:  MOVWF  FE9
35AA:  MOVLW  15
35AC:  MOVWF  01
35AE:  CLRF   FF7
35B0:  MOVLW  00
35B2:  CALL   03A6
35B6:  TBLRD*-
35B8:  TBLRD*+
35BA:  MOVFF  FF5,FEE
35BE:  DECFSZ 01,F
35C0:  BRA    35B8
35C2:  MOVLW  02
35C4:  MOVLB  2
35C6:  MOVWF  x6C
35C8:  MOVLW  2C
35CA:  MOVWF  x6B
35CC:  MOVLB  0
35CE:  CALL   20CC
....................   } 
.................... } 
35D2:  RETURN 0
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... The message structure is defined below. 
....................  
.................... Byte# Description Remarks 
.................... 1 Header  Constant - 47 Hex 
.................... 2 Temperature Send 2's complement 
.................... 3 Power level 
.................... 4 Current 
.................... 5 PLL lock 
.................... 6 Checksum  Checksum of all preceding bytes 
....................  
.................... Table 1 - Status Packet structure 
....................  
.................... The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
....................   { 
*
281C:  MOVLB  1
281E:  CLRF   xBD
2820:  CLRF   xBC
....................   UINT chksum = 0, idx; 
....................   SINT current_temperature;   
....................   power_output(); 
2822:  MOVLB  0
2824:  CALL   1E96
....................   byte BitsStatus1,BitsStatus2; 
....................   BitsStatus1 = Bits_status1(); 
2828:  BRA    2254
282A:  MOVFF  01,1C2
....................   BitsStatus2 = Bits_status2(); 
282E:  BRA    22E8
2830:  MOVFF  01,1C3
....................   
....................   current_temperature = (SINT)(read_temperature() * 100); 
2834:  RCALL  2686
2836:  MOVFF  00,1C4
283A:  MOVFF  01,1C5
283E:  MOVFF  02,1C6
2842:  MOVFF  03,1C7
2846:  MOVFF  03,255
284A:  MOVFF  02,254
284E:  MOVFF  01,253
2852:  MOVFF  00,252
2856:  MOVLB  2
2858:  CLRF   x59
285A:  CLRF   x58
285C:  MOVLW  48
285E:  MOVWF  x57
2860:  MOVLW  85
2862:  MOVWF  x56
2864:  MOVLB  0
2866:  CALL   1A00
286A:  MOVFF  03,1C7
286E:  MOVFF  02,1C6
2872:  MOVFF  01,1C5
2876:  MOVFF  00,1C4
287A:  BRA    27DE
287C:  MOVFF  02,1C1
2880:  MOVFF  01,1C0
....................   //measured_current = read_current(); 
....................   //power_level_stat = current_power; 
....................   status_buffer[0] = 0xFB;                              // Synchronization Byte 1 
2884:  MOVLW  FB
2886:  MOVLB  1
2888:  MOVWF  x17
....................   status_buffer[1] = 0x60;                              // Synchronization Byte 2 
288A:  MOVLW  60
288C:  MOVWF  x18
....................   status_buffer[2] = TX_Counter;                        // The counter increments by one each time an update is sent 0 to 255 
288E:  MOVFF  113,119
....................   status_buffer[3] = (setup.frequency >> 8) & 0xff;      // MSB TX frequency  
2892:  MOVFF  BA,11A
....................   status_buffer[4] = setup.frequency & 0xff;            // LSB TX frequency  
2896:  MOVFF  B9,11B
289A:  MOVLB  1
....................   status_buffer[5] = setup.mode;                        // State of modulation state 
289C:  MOVFF  AF,11C
....................   status_buffer[6] = BitsStatus1;                       // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
28A0:  MOVFF  1C2,11D
....................   if(setup.pwr && gl_current_power_en_value) 
28A4:  MOVLB  0
28A6:  MOVF   xAD,W
28A8:  IORWF  xAE,W
28AA:  BZ    28C6
28AC:  MOVLB  1
28AE:  MOVF   x0D,W
28B0:  IORWF  x0E,W
28B2:  BTFSS  FD8.2
28B4:  BRA    28BA
28B6:  MOVLB  0
28B8:  BRA    28C6
....................   { 
....................     status_buffer[7] = (current_temperature >> 8) & 0xff;  // MSB TX Temperature  
28BA:  MOVFF  1C1,11E
....................     status_buffer[8] = current_temperature & 0xff;        // LSB TX Temperature  
28BE:  MOVFF  1C0,11F
....................   }  
....................   else  
28C2:  BRA    28CE
28C4:  MOVLB  0
....................   { 
....................     // signal that the transmiter is off 
....................     status_buffer[7] = 0x7f; 
28C6:  MOVLW  7F
28C8:  MOVLB  1
28CA:  MOVWF  x1E
....................     status_buffer[8] = 0xff; 
28CC:  SETF   x1F
....................   } 
....................   status_buffer[9] = (setup.bitrate >> 8) & 0xff;       // MSB Bit rate state 
28CE:  MOVFF  AC,120
....................   status_buffer[10] = setup.bitrate & 0xff;             // LSB Bit rate state  
28D2:  MOVFF  AB,121
28D6:  MOVLB  1
....................   status_buffer[11] = current_power;                    // TX power in dBm 
28D8:  MOVFF  109,122
....................   status_buffer[12] = setup.internal_pattern;           // Data type while using internal data 
28DC:  MOVFF  B4,123
....................   status_buffer[13] = BitsStatus2;                      // Bits status of: Reverse Power N/A 
28E0:  MOVFF  1C3,124
....................   status_buffer[14] = setup.bitlow_power_level;         // TX low power in dBm (VL) 
28E4:  MOVFF  FD,125
....................   status_buffer[15] = setup.bitpower_level;             // TX low power in dBm (VP) 
28E8:  MOVFF  FE,126
....................   status_buffer[16] = revp/2;                           // Revers power div by 2 in order to make it 1 BIT 
28EC:  BCF    FD8.0
28EE:  RRCF   x06,W
28F0:  RRCF   x05,W
28F2:  MOVWF  x27
....................   status_buffer[17] = VER;                              // TX VERSION 
28F4:  MOVLW  22
28F6:  MOVWF  x28
....................   status_buffer[18] = (setup.unit_ID >> 8) & 0xff;      // MSB TX Serial number 
28F8:  MOVFF  F2,129
....................   status_buffer[19] = setup.unit_ID & 0xff;             // LSB TX Serial number 
28FC:  MOVFF  F1,12A
2900:  MOVLB  1
....................   status_buffer[20] = (setup.setup_version >> 8)&0xff;  // MSB of the config version 
2902:  MOVFF  102,12B
....................   status_buffer[21] = setup.setup_version & 0xff;       // LSB of the config version 
2906:  MOVFF  101,12C
....................   status_buffer[22] = 0xAA;                             // Spare 
290A:  MOVLW  AA
290C:  MOVWF  x2D
....................   status_buffer[23] = 0xAA;                             // Spare 
290E:  MOVWF  x2E
....................     
....................   for (idx = 0; idx < BINARY_STATUS_LENTGH-2; idx++) 
2910:  CLRF   xBF
2912:  CLRF   xBE
2914:  MOVF   xBF,F
2916:  BNZ   293A
2918:  MOVF   xBE,W
291A:  SUBLW  17
291C:  BNC   293A
....................   { 
....................     chksum += status_buffer[idx]; 
291E:  MOVLW  17
2920:  ADDWF  xBE,W
2922:  MOVWF  FE9
2924:  MOVLW  01
2926:  ADDWFC xBF,W
2928:  MOVWF  FEA
292A:  MOVF   FEF,W
292C:  ADDWF  xBC,F
292E:  MOVLW  00
2930:  ADDWFC xBD,F
....................   } 
2932:  INCF   xBE,F
2934:  BTFSC  FD8.2
2936:  INCF   xBF,F
2938:  BRA    2914
....................   // add the checksum to the end of the binary message, LSB first (request by the client 16.11.16) 
....................   status_buffer[BINARY_STATUS_LENTGH-2] = chksum & 0xff; 
293A:  MOVFF  1BC,12F
....................   status_buffer[BINARY_STATUS_LENTGH-1] =(chksum >> 8) & 0xff; 
293E:  MOVFF  1BD,130
....................  } 
2942:  MOVLB  0
2944:  GOTO   6B5E (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
60BE:  MOVLW  02
60C0:  MOVLB  1
60C2:  MOVWF  xD5
....................   comm_ptr = 0; 
60C4:  CLRF   x46
....................   switch (toupper(get_char())) 
....................     { 
60C6:  MOVLB  0
60C8:  CALL   2992
60CC:  MOVFF  02,20D
60D0:  MOVFF  01,20C
60D4:  MOVLB  2
60D6:  MOVF   x0D,F
60D8:  BNZ   60E0
60DA:  MOVF   x0C,W
60DC:  SUBLW  60
60DE:  BC    60F0
60E0:  MOVF   x0D,F
60E2:  BNZ   60F0
60E4:  MOVF   x0C,W
60E6:  SUBLW  7A
60E8:  BNC   60F0
60EA:  MOVF   x0C,W
60EC:  ANDLW  DF
60EE:  BRA    60F2
60F0:  MOVF   x0C,W
60F2:  XORLW  48
60F4:  MOVLB  0
60F6:  BZ    6146
60F8:  XORLW  09
60FA:  BZ    614E
60FC:  XORLW  02
60FE:  BTFSC  FD8.2
6100:  BRA    6222
6102:  XORLW  07
6104:  BTFSC  FD8.2
6106:  BRA    62F8
6108:  XORLW  0B
610A:  BTFSC  FD8.2
610C:  BRA    6376
610E:  XORLW  1D
6110:  BTFSC  FD8.2
6112:  BRA    63B4
6114:  XORLW  10
6116:  BTFSC  FD8.2
6118:  BRA    63F4
611A:  XORLW  05
611C:  BTFSC  FD8.2
611E:  BRA    644C
6120:  XORLW  01
6122:  BTFSC  FD8.2
6124:  BRA    6568
6126:  XORLW  15
6128:  BTFSC  FD8.2
612A:  BRA    65F6
612C:  XORLW  07
612E:  BTFSC  FD8.2
6130:  BRA    669C
6132:  XORLW  65
6134:  BTFSC  FD8.2
6136:  BRA    6764
6138:  XORLW  03
613A:  BTFSC  FD8.2
613C:  BRA    6772
613E:  XORLW  01
6140:  BTFSC  FD8.2
6142:  BRA    677C
6144:  BRA    678A
....................     case 'H': 
....................       list_help1(); 
6146:  BRA    5B0C
....................       return 0; 
6148:  MOVLW  00
614A:  MOVWF  01
614C:  BRA    6794
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
614E:  CALL   2992
6152:  MOVFF  02,20D
6156:  MOVFF  01,20C
615A:  MOVLB  2
615C:  MOVF   x0D,F
615E:  BNZ   6166
6160:  MOVF   x0C,W
6162:  SUBLW  60
6164:  BC    6176
6166:  MOVF   x0D,F
6168:  BNZ   6176
616A:  MOVF   x0C,W
616C:  SUBLW  7A
616E:  BNC   6176
6170:  MOVF   x0C,W
6172:  ANDLW  DF
6174:  BRA    6178
6176:  MOVF   x0C,W
6178:  XORLW  54
617A:  MOVLB  0
617C:  BZ    6184
617E:  XORLW  1D
6180:  BZ    618E
6182:  BRA    6220
....................         case 'T': 
....................           idx = get_int(); 
6184:  CALL   2A4E
6188:  MOVFF  01,1D6
....................  
....................           // write to attenuator 
....................           break; 
618C:  BRA    6220
....................         case 'I': 
....................           idx = get_int(); 
618E:  CALL   2A4E
6192:  MOVFF  01,1D6
....................           if (idx && idx < 4) 
6196:  MOVLB  1
6198:  MOVF   xD6,F
619A:  BZ    621E
619C:  MOVF   xD6,W
619E:  SUBLW  03
61A0:  BNC   621E
....................             { 
....................             set_adc_channel(idx-1); 
61A2:  MOVLW  01
61A4:  SUBWF  xD6,W
61A6:  MOVLB  2
61A8:  MOVWF  x0C
61AA:  RLCF   x0C,W
61AC:  MOVWF  00
61AE:  RLCF   00,F
61B0:  MOVLW  FC
61B2:  ANDWF  00,F
61B4:  MOVF   FC2,W
61B6:  ANDLW  83
61B8:  IORWF  00,W
61BA:  MOVWF  FC2
....................             delay_us(30); 
61BC:  MOVLW  27
61BE:  MOVWF  00
61C0:  DECFSZ 00,F
61C2:  BRA    61C0
61C4:  BRA    61C6
....................             value = read_adc(); 
61C6:  BSF    FC2.1
61C8:  BTFSC  FC2.1
61CA:  BRA    61C8
61CC:  MOVFF  FC3,20A
61D0:  MOVFF  FC4,20B
....................             sprintf(buf, "$AR %lu\r", value); 
61D4:  MOVLW  01
61D6:  MOVLB  1
61D8:  MOVWF  xA9
61DA:  MOVLW  DA
61DC:  MOVWF  xA8
61DE:  MOVLW  E8
61E0:  MOVWF  FF6
61E2:  MOVLW  0B
61E4:  MOVWF  FF7
61E6:  MOVLW  04
61E8:  MOVLB  2
61EA:  MOVWF  x45
61EC:  MOVLB  0
61EE:  CALL   2F60
61F2:  MOVLW  10
61F4:  MOVWF  FE9
61F6:  MOVFF  20B,231
61FA:  MOVFF  20A,230
61FE:  CALL   2F88
6202:  MOVLW  0D
6204:  MOVLB  2
6206:  MOVWF  x52
6208:  MOVLB  0
620A:  CALL   2F3E
....................             COM1_send_str(buf); 
620E:  MOVLW  01
6210:  MOVLB  2
6212:  MOVWF  x6C
6214:  MOVLW  DA
6216:  MOVWF  x6B
6218:  MOVLB  0
621A:  CALL   20CC
....................             } 
....................           break; 
621E:  MOVLB  0
....................         } 
....................       break; 
6220:  BRA    6790
....................     case 'C': 
....................       chr = toupper(get_char()); 
6222:  CALL   2992
6226:  MOVFF  02,20D
622A:  MOVFF  01,20C
622E:  MOVLB  2
6230:  MOVF   x0D,F
6232:  BNZ   623A
6234:  MOVF   x0C,W
6236:  SUBLW  60
6238:  BC    624A
623A:  MOVF   x0D,F
623C:  BNZ   624A
623E:  MOVF   x0C,W
6240:  SUBLW  7A
6242:  BNC   624A
6244:  MOVF   x0C,W
6246:  ANDLW  DF
6248:  BRA    624C
624A:  MOVF   x0C,W
624C:  MOVLB  1
624E:  MOVWF  xD5
....................       if (chr == 'F') 
6250:  MOVF   xD5,W
6252:  SUBLW  46
6254:  BNZ   6288
....................         { 
....................         freq = get_frequency(); 
6256:  MOVLB  0
6258:  CALL   3044
625C:  MOVLB  2
625E:  CLRF   x05
6260:  CLRF   x04
6262:  MOVFF  02,203
6266:  MOVFF  01,202
....................         PLL_compute_freq_parameters(freq); 
626A:  MOVFF  203,20D
626E:  MOVFF  202,20C
6272:  MOVFF  203,237
6276:  MOVFF  202,236
627A:  MOVLB  0
627C:  CALL   13B0
....................         PLL_update(); 
6280:  CALL   1680
....................         } 
....................       else if (chr == 'P') 
6284:  BRA    62F2
6286:  MOVLB  1
6288:  MOVF   xD5,W
628A:  SUBLW  50
628C:  BNZ   62F4
....................         { 
....................         idx = get_int(); 
628E:  MOVLB  0
6290:  CALL   2A4E
6294:  MOVFF  01,1D6
....................         if (idx < 2) 
6298:  MOVLB  1
629A:  MOVF   xD6,W
629C:  SUBLW  01
629E:  BNC   62F4
....................           { 
....................           setup.clock_polarity = idx & 1; 
62A0:  MOVF   xD6,W
62A2:  ANDLW  01
62A4:  MOVLB  0
62A6:  MOVWF  xB0
....................           sprintf(buf, "$CP %u\r", idx); 
62A8:  MOVLW  01
62AA:  MOVLB  1
62AC:  MOVWF  xA9
62AE:  MOVLW  DA
62B0:  MOVWF  xA8
62B2:  MOVLW  F2
62B4:  MOVWF  FF6
62B6:  MOVLW  0B
62B8:  MOVWF  FF7
62BA:  MOVLW  04
62BC:  MOVLB  2
62BE:  MOVWF  x45
62C0:  MOVLB  0
62C2:  CALL   2F60
62C6:  MOVFF  1D6,230
62CA:  MOVLW  1B
62CC:  MOVLB  2
62CE:  MOVWF  x31
62D0:  MOVLB  0
62D2:  CALL   30D8
62D6:  MOVLW  0D
62D8:  MOVLB  2
62DA:  MOVWF  x52
62DC:  MOVLB  0
62DE:  CALL   2F3E
....................           COM1_send_str(buf); 
62E2:  MOVLW  01
62E4:  MOVLB  2
62E6:  MOVWF  x6C
62E8:  MOVLW  DA
62EA:  MOVWF  x6B
62EC:  MOVLB  0
62EE:  CALL   20CC
62F2:  MOVLB  1
....................           } 
....................         } 
....................       break; 
62F4:  MOVLB  0
62F6:  BRA    6790
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
62F8:  CALL   2992
62FC:  MOVFF  02,20D
6300:  MOVFF  01,20C
6304:  MOVLB  2
6306:  MOVF   x0D,F
6308:  BNZ   6310
630A:  MOVF   x0C,W
630C:  SUBLW  60
630E:  BC    6320
6310:  MOVF   x0D,F
6312:  BNZ   6320
6314:  MOVF   x0C,W
6316:  SUBLW  7A
6318:  BNC   6320
631A:  MOVF   x0C,W
631C:  ANDLW  DF
631E:  BRA    6322
6320:  MOVF   x0C,W
6322:  SUBLW  49
6324:  BNZ   6372
....................         { 
....................         idx = input_c(); // change to REAL input ports 
6326:  MOVFF  F82,1D6
....................         sprintf(buf, "$DR %02X\r", idx); 
632A:  MOVLW  01
632C:  MOVLB  1
632E:  MOVWF  xA9
6330:  MOVLW  DA
6332:  MOVWF  xA8
6334:  MOVLW  FA
6336:  MOVWF  FF6
6338:  MOVLW  0B
633A:  MOVWF  FF7
633C:  MOVLW  04
633E:  MOVLB  2
6340:  MOVWF  x45
6342:  MOVLB  0
6344:  CALL   2F60
6348:  MOVFF  1D6,20C
634C:  MOVLW  37
634E:  MOVLB  2
6350:  MOVWF  x0D
6352:  MOVLB  0
6354:  RCALL  5D24
6356:  MOVLW  0D
6358:  MOVLB  2
635A:  MOVWF  x52
635C:  MOVLB  0
635E:  CALL   2F3E
....................         COM1_send_str(buf); 
6362:  MOVLW  01
6364:  MOVLB  2
6366:  MOVWF  x6C
6368:  MOVLW  DA
636A:  MOVWF  x6B
636C:  MOVLB  0
636E:  CALL   20CC
....................         } 
....................       break; 
6372:  MOVLB  0
6374:  BRA    6790
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
6376:  CALL   2992
637A:  MOVFF  02,20D
637E:  MOVFF  01,20C
6382:  MOVLB  2
6384:  MOVF   x0D,F
6386:  BNZ   638E
6388:  MOVF   x0C,W
638A:  SUBLW  60
638C:  BC    639E
638E:  MOVF   x0D,F
6390:  BNZ   639E
6392:  MOVF   x0C,W
6394:  SUBLW  7A
6396:  BNC   639E
6398:  MOVF   x0C,W
639A:  ANDLW  DF
639C:  BRA    63A0
639E:  MOVF   x0C,W
63A0:  SUBLW  54
63A2:  BNZ   63B0
....................         { 
....................         value = get_hex(); 
63A4:  MOVLB  0
63A6:  RCALL  5D6E
63A8:  MOVFF  01,20B
63AC:  MOVFF  00,20A
....................         // output bits 
....................         } 
....................       break; 
63B0:  MOVLB  0
63B2:  BRA    6790
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
63B4:  CALL   2992
63B8:  MOVFF  02,20D
63BC:  MOVFF  01,20C
63C0:  MOVLB  2
63C2:  MOVF   x0D,F
63C4:  BNZ   63CC
63C6:  MOVF   x0C,W
63C8:  SUBLW  60
63CA:  BC    63DC
63CC:  MOVF   x0D,F
63CE:  BNZ   63DC
63D0:  MOVF   x0C,W
63D2:  SUBLW  7A
63D4:  BNC   63DC
63D6:  MOVF   x0C,W
63D8:  ANDLW  DF
63DA:  BRA    63DE
63DC:  MOVF   x0C,W
63DE:  SUBLW  44
63E0:  BNZ   63F0
....................         { 
....................         output_high(D2A_RESET); 
63E2:  BSF    F8A.3
....................         delay_ms(100); 
63E4:  MOVLW  64
63E6:  MOVWF  x42
63E8:  MOVLB  0
63EA:  CALL   0EFE
....................         output_low(D2A_RESET); 
63EE:  BCF    F8A.3
....................         } 
....................       break; 
63F0:  MOVLB  0
63F2:  BRA    6790
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
63F4:  CALL   2992
63F8:  MOVFF  02,20D
63FC:  MOVFF  01,20C
6400:  MOVLB  2
6402:  MOVF   x0D,F
6404:  BNZ   640C
6406:  MOVF   x0C,W
6408:  SUBLW  60
640A:  BC    641C
640C:  MOVF   x0D,F
640E:  BNZ   641C
6410:  MOVF   x0C,W
6412:  SUBLW  7A
6414:  BNC   641C
6416:  MOVF   x0C,W
6418:  ANDLW  DF
641A:  BRA    641E
641C:  MOVF   x0C,W
641E:  SUBLW  52
6420:  BNZ   6448
....................         { 
....................         bitrate = str_to_long(); 
6422:  MOVLB  0
6424:  BRA    5E66
6426:  MOVFF  03,209
642A:  MOVFF  02,208
642E:  MOVFF  01,207
6432:  MOVFF  00,206
....................         set_bitrate(bitrate); 
6436:  MOVFF  207,20D
643A:  MOVFF  206,20C
643E:  MOVFF  207,20F
6442:  MOVFF  206,20E
6446:  BRA    5F22
....................         } 
....................       break; 
6448:  MOVLB  0
644A:  BRA    6790
....................     case 'G': 
....................       device = get_char(); 
644C:  CALL   2992
6450:  MOVFF  01,1D7
....................       addr = get_hex(); 
6454:  RCALL  5D6E
6456:  MOVFF  00,1D8
....................       switch (toupper(device)) 
....................         { 
645A:  MOVLB  1
645C:  MOVF   xD7,W
645E:  SUBLW  60
6460:  BC    646E
6462:  MOVF   xD7,W
6464:  SUBLW  7A
6466:  BNC   646E
6468:  MOVF   xD7,W
646A:  ANDLW  DF
646C:  BRA    6470
646E:  MOVF   xD7,W
6470:  XORLW  46
6472:  MOVLB  0
6474:  BZ    647C
6476:  XORLW  02
6478:  BZ    64F6
647A:  BRA    6566
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
647C:  MOVFF  1D8,20C
6480:  MOVLW  01
6482:  MOVLB  2
6484:  MOVWF  x0E
6486:  MOVLW  D9
6488:  MOVWF  x0D
648A:  MOVLB  0
648C:  BRA    5FB2
648E:  MOVFF  01,1D5
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
6492:  MOVLW  01
6494:  MOVLB  1
6496:  MOVWF  xA9
6498:  MOVLW  DA
649A:  MOVWF  xA8
649C:  MOVLW  04
649E:  MOVWF  FF6
64A0:  MOVLW  0C
64A2:  MOVWF  FF7
64A4:  MOVLW  07
64A6:  MOVLB  2
64A8:  MOVWF  x45
64AA:  MOVLB  0
64AC:  CALL   2F60
64B0:  MOVFF  1D8,20C
64B4:  MOVLW  37
64B6:  MOVLB  2
64B8:  MOVWF  x0D
64BA:  MOVLB  0
64BC:  RCALL  5D24
64BE:  MOVLW  20
64C0:  MOVLB  2
64C2:  MOVWF  x52
64C4:  MOVLB  0
64C6:  CALL   2F3E
64CA:  MOVFF  1D5,20C
64CE:  MOVLW  37
64D0:  MOVLB  2
64D2:  MOVWF  x0D
64D4:  MOVLB  0
64D6:  RCALL  5D24
64D8:  MOVLW  0D
64DA:  MOVLB  2
64DC:  MOVWF  x52
64DE:  MOVLB  0
64E0:  CALL   2F3E
....................           COM1_send_str(buf); 
64E4:  MOVLW  01
64E6:  MOVLB  2
64E8:  MOVWF  x6C
64EA:  MOVLW  DA
64EC:  MOVWF  x6B
64EE:  MOVLB  0
64F0:  CALL   20CC
....................           break; 
64F4:  BRA    6566
....................         case 'D': 
....................           data = read_D2A(addr); 
64F6:  MOVFF  1D8,20C
64FA:  BRA    605C
64FC:  MOVFF  01,1D9
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
6500:  MOVLW  01
6502:  MOVLB  1
6504:  MOVWF  xA9
6506:  MOVLW  DA
6508:  MOVWF  xA8
650A:  MOVLW  16
650C:  MOVWF  FF6
650E:  MOVLW  0C
6510:  MOVWF  FF7
6512:  MOVLW  07
6514:  MOVLB  2
6516:  MOVWF  x45
6518:  MOVLB  0
651A:  CALL   2F60
651E:  MOVFF  1D8,20C
6522:  MOVLW  37
6524:  MOVLB  2
6526:  MOVWF  x0D
6528:  MOVLB  0
652A:  CALL   5D24
652E:  MOVLW  20
6530:  MOVLB  2
6532:  MOVWF  x52
6534:  MOVLB  0
6536:  CALL   2F3E
653A:  MOVFF  1D9,20C
653E:  MOVLW  37
6540:  MOVLB  2
6542:  MOVWF  x0D
6544:  MOVLB  0
6546:  CALL   5D24
654A:  MOVLW  0D
654C:  MOVLB  2
654E:  MOVWF  x52
6550:  MOVLB  0
6552:  CALL   2F3E
....................           COM1_send_str(buf); 
6556:  MOVLW  01
6558:  MOVLB  2
655A:  MOVWF  x6C
655C:  MOVLW  DA
655E:  MOVWF  x6B
6560:  MOVLB  0
6562:  CALL   20CC
....................           break; 
....................         } 
....................       break; 
6566:  BRA    6790
....................     case 'F': // fill tables 
....................       skip_spc(); 
6568:  CALL   29B2
....................       idx = get_char(); // get table designator 
656C:  CALL   2992
6570:  MOVFF  01,1D6
....................       addr = get_int(); // get table index 
6574:  CALL   2A4E
6578:  MOVFF  01,1D8
....................       value = get_int(); // get value to put into table 
657C:  CALL   2A4E
6580:  MOVFF  02,20B
6584:  MOVFF  01,20A
....................       switch (toupper(idx)) 
....................         { 
6588:  MOVLB  1
658A:  MOVF   xD6,W
658C:  SUBLW  60
658E:  BC    659C
6590:  MOVF   xD6,W
6592:  SUBLW  7A
6594:  BNC   659C
6596:  MOVF   xD6,W
6598:  ANDLW  DF
659A:  BRA    659E
659C:  MOVF   xD6,W
659E:  XORLW  4E
65A0:  MOVLB  0
65A2:  BZ    65AA
65A4:  XORLW  1E
65A6:  BZ    65D0
65A8:  BRA    65F4
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
65AA:  MOVLB  1
65AC:  MOVF   xD8,W
65AE:  SUBLW  02
65B0:  BNC   65CC
....................             { 
....................             setup.negative_voltage[addr] = value; 
65B2:  BCF    FD8.0
65B4:  RLCF   xD8,W
65B6:  CLRF   03
65B8:  ADDLW  BE
65BA:  MOVWF  FE9
65BC:  MOVLW  00
65BE:  ADDWFC 03,W
65C0:  MOVWF  FEA
65C2:  MOVFF  20B,FEC
65C6:  MOVF   FED,F
65C8:  MOVFF  20A,FEF
....................             } 
....................           break; 
65CC:  MOVLB  0
65CE:  BRA    65F4
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
65D0:  MOVLB  1
65D2:  MOVF   xD8,W
65D4:  SUBLW  14
65D6:  BNC   65F2
....................             { 
....................             setup.power_in[addr] = value; 
65D8:  BCF    FD8.0
65DA:  RLCF   xD8,W
65DC:  CLRF   03
65DE:  ADDLW  C4
65E0:  MOVWF  FE9
65E2:  MOVLW  00
65E4:  ADDWFC 03,W
65E6:  MOVWF  FEA
65E8:  MOVFF  20B,FEC
65EC:  MOVF   FED,F
65EE:  MOVFF  20A,FEF
....................             } 
....................           break; 
65F2:  MOVLB  0
....................         } 
....................       break; 
65F4:  BRA    6790
....................     case 'S': 
....................       device = get_char(); 
65F6:  CALL   2992
65FA:  MOVFF  01,1D7
....................       addr = get_hex(); 
65FE:  CALL   5D6E
6602:  MOVFF  00,1D8
....................       data = get_hex(); 
6606:  CALL   5D6E
660A:  MOVFF  00,1D9
....................       switch (toupper(device)) 
....................         { 
660E:  MOVLB  1
6610:  MOVF   xD7,W
6612:  SUBLW  60
6614:  BC    6622
6616:  MOVF   xD7,W
6618:  SUBLW  7A
661A:  BNC   6622
661C:  MOVF   xD7,W
661E:  ANDLW  DF
6620:  BRA    6624
6622:  MOVF   xD7,W
6624:  XORLW  46
6626:  MOVLB  0
6628:  BZ    6634
662A:  XORLW  02
662C:  BZ    6666
662E:  XORLW  12
6630:  BZ    668A
6632:  BRA    669A
....................         case 'F': 
....................           buf[0] = addr; 
6634:  MOVFF  1D8,1DA
....................           buf[1] = data; 
6638:  MOVFF  1D9,1DB
....................           FPGA_image[addr] = data; 
663C:  CLRF   03
663E:  MOVLB  1
6640:  MOVF   xD8,W
6642:  ADDLW  49
6644:  MOVWF  FE9
6646:  MOVLW  01
6648:  ADDWFC 03,W
664A:  MOVWF  FEA
664C:  MOVFF  1D9,FEF
....................           send_FPGA_command(2, buf); 
6650:  MOVLW  02
6652:  MOVLB  2
6654:  MOVWF  x42
6656:  MOVLW  01
6658:  MOVWF  x44
665A:  MOVLW  DA
665C:  MOVWF  x43
665E:  MOVLB  0
6660:  CALL   1768
....................           break; 
6664:  BRA    669A
....................         case 'D': 
....................           D2A_image[addr] = data; 
6666:  CLRF   03
6668:  MOVLB  1
666A:  MOVF   xD8,W
666C:  ADDLW  69
666E:  MOVWF  FE9
6670:  MOVLW  01
6672:  ADDWFC 03,W
6674:  MOVWF  FEA
6676:  MOVFF  1D9,FEF
....................           write_D2A(addr, data); 
667A:  MOVFF  1D8,20C
667E:  MOVFF  1D9,20D
6682:  MOVLB  0
6684:  CALL   5808
....................           break; 
6688:  BRA    669A
....................         case 'V': 
....................           allow_write = 2975; 
668A:  MOVLW  0B
668C:  MOVLB  1
668E:  MOVWF  x04
6690:  MOVLW  9F
6692:  MOVWF  x03
....................           write_setup(); 
6694:  MOVLB  0
6696:  CALL   31C4
....................           break; 
....................         } 
....................       break; 
669A:  BRA    6790
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
669C:  CALL   2992
66A0:  MOVFF  02,20D
66A4:  MOVFF  01,20C
66A8:  MOVLB  2
66AA:  MOVF   x0D,F
66AC:  BNZ   66B4
66AE:  MOVF   x0C,W
66B0:  SUBLW  60
66B2:  BC    66C4
66B4:  MOVF   x0D,F
66B6:  BNZ   66C4
66B8:  MOVF   x0C,W
66BA:  SUBLW  7A
66BC:  BNC   66C4
66BE:  MOVF   x0C,W
66C0:  ANDLW  DF
66C2:  BRA    66C6
66C4:  MOVF   x0C,W
66C6:  SUBLW  54
66C8:  BNZ   6760
....................         if (toupper(get_char()) == 'C') 
66CA:  MOVLB  0
66CC:  CALL   2992
66D0:  MOVFF  02,20D
66D4:  MOVFF  01,20C
66D8:  MOVLB  2
66DA:  MOVF   x0D,F
66DC:  BNZ   66E4
66DE:  MOVF   x0C,W
66E0:  SUBLW  60
66E2:  BC    66F4
66E4:  MOVF   x0D,F
66E6:  BNZ   66F4
66E8:  MOVF   x0C,W
66EA:  SUBLW  7A
66EC:  BNC   66F4
66EE:  MOVF   x0C,W
66F0:  ANDLW  DF
66F2:  BRA    66F6
66F4:  MOVF   x0C,W
66F6:  SUBLW  43
66F8:  BNZ   6760
....................           if (toupper(get_char()) == 'C') 
66FA:  MOVLB  0
66FC:  CALL   2992
6700:  MOVFF  02,20D
6704:  MOVFF  01,20C
6708:  MOVLB  2
670A:  MOVF   x0D,F
670C:  BNZ   6714
670E:  MOVF   x0C,W
6710:  SUBLW  60
6712:  BC    6724
6714:  MOVF   x0D,F
6716:  BNZ   6724
6718:  MOVF   x0C,W
671A:  SUBLW  7A
671C:  BNC   6724
671E:  MOVF   x0C,W
6720:  ANDLW  DF
6722:  BRA    6726
6724:  MOVF   x0C,W
6726:  SUBLW  43
6728:  BNZ   6760
....................             if (toupper(get_char()) == 'P') 
672A:  MOVLB  0
672C:  CALL   2992
6730:  MOVFF  02,20D
6734:  MOVFF  01,20C
6738:  MOVLB  2
673A:  MOVF   x0D,F
673C:  BNZ   6744
673E:  MOVF   x0C,W
6740:  SUBLW  60
6742:  BC    6754
6744:  MOVF   x0D,F
6746:  BNZ   6754
6748:  MOVF   x0C,W
674A:  SUBLW  7A
674C:  BNC   6754
674E:  MOVF   x0C,W
6750:  ANDLW  DF
6752:  BRA    6756
6754:  MOVF   x0C,W
6756:  SUBLW  50
6758:  BNZ   6760
....................               ttccp = 1; 
675A:  MOVLW  01
675C:  MOVLB  1
675E:  MOVWF  x47
....................       break; 
6760:  MOVLB  0
6762:  BRA    6790
....................     case '1': // year 
....................       setup.year = get_int(); 
6764:  CALL   2A4E
6768:  MOVFF  02,EF
676C:  MOVFF  01,EE
....................       break; 
6770:  BRA    6790
....................     case '2': // week 
....................       setup.week = get_int(); 
6772:  CALL   2A4E
6776:  MOVFF  01,F0
....................       break; 
677A:  BRA    6790
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
677C:  CALL   2A4E
6780:  MOVFF  02,F2
6784:  MOVFF  01,F1
....................       break; 
6788:  BRA    6790
....................     default: 
....................       return 0; 
678A:  MOVLW  00
678C:  MOVWF  01
678E:  BRA    6794
....................     } 
....................   return 0; 
6790:  MOVLW  00
6792:  MOVWF  01
....................   } 
6794:  GOTO   6822 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
32BA:  CALL   2A4E
32BE:  MOVFF  01,00
32C2:  MOVFF  02,01
32C6:  CLRF   02
32C8:  CLRF   03
32CA:  MOVFF  03,22F
32CE:  MOVFF  02,22E
32D2:  MOVFF  01,22D
32D6:  MOVFF  00,22C
....................             get_char(); 
32DA:  CALL   2992
....................             sub = get_int(); 
32DE:  CALL   2A4E
32E2:  MOVFF  01,00
32E6:  MOVFF  02,01
32EA:  CLRF   02
32EC:  CLRF   03
32EE:  MOVFF  03,233
32F2:  MOVFF  02,232
32F6:  MOVFF  01,231
32FA:  MOVFF  00,230
....................  
....................             if (peek_char() == '.') 
32FE:  CALL   2974
3302:  MOVFF  02,235
3306:  MOVFF  01,234
330A:  MOVLB  2
330C:  MOVF   01,W
330E:  SUBLW  2E
3310:  BNZ   334E
3312:  MOVF   x35,F
3314:  BNZ   334E
....................               { 
....................               get_char(); 
3316:  MOVLB  0
3318:  CALL   2992
....................               sub = get_int(); 
331C:  CALL   2A4E
3320:  MOVFF  01,00
3324:  MOVFF  02,01
3328:  CLRF   02
332A:  CLRF   03
332C:  MOVFF  03,233
3330:  MOVFF  02,232
3334:  MOVFF  01,231
3338:  MOVFF  00,230
....................               bitrate += sub; 
333C:  MOVLB  2
333E:  MOVF   x30,W
3340:  ADDWF  x2C,F
3342:  MOVF   x31,W
3344:  ADDWFC x2D,F
3346:  MOVF   x32,W
3348:  ADDWFC x2E,F
334A:  MOVF   x33,W
334C:  ADDWFC x2F,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
334E:  MOVFF  22F,24B
3352:  MOVFF  22E,24A
3356:  MOVFF  22D,249
335A:  MOVFF  22C,248
335E:  CLRF   x4F
3360:  CLRF   x4E
3362:  CLRF   x4D
3364:  MOVLW  64
3366:  MOVWF  x4C
3368:  MOVLB  0
336A:  CALL   12C0
336E:  MOVLB  2
3370:  MOVF   x30,W
3372:  ADDWF  00,W
3374:  MOVLB  0
3376:  MOVWF  xAB
3378:  MOVLB  2
337A:  MOVF   x31,W
337C:  ADDWFC 01,W
337E:  MOVLB  0
3380:  MOVWF  xAC
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
3382:  CALL   1C30
....................  
....................   } 
3386:  GOTO   49C2 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n\n"); 
*
2B14:  MOVLW  0D
2B16:  MOVLB  2
2B18:  MOVWF  x2C
2B1A:  MOVLW  0A
2B1C:  MOVWF  x2D
2B1E:  MOVWF  x2E
2B20:  CLRF   x2F
2B22:  MOVLW  02
2B24:  MOVWF  x6C
2B26:  MOVLW  2C
2B28:  MOVWF  x6B
2B2A:  MOVLB  0
2B2C:  CALL   20CC
....................   COM1_send_str("DS <data soure><cr>  \tSet data source (0-1)\r\n"); 
2B30:  MOVLW  02
2B32:  MOVWF  FEA
2B34:  MOVLW  2C
2B36:  MOVWF  FE9
2B38:  MOVLW  2E
2B3A:  MOVWF  01
2B3C:  CLRF   FF7
2B3E:  MOVLW  00
2B40:  CALL   03CC
2B44:  TBLRD*-
2B46:  TBLRD*+
2B48:  MOVFF  FF5,FEE
2B4C:  DECFSZ 01,F
2B4E:  BRA    2B46
2B50:  MOVLW  02
2B52:  MOVLB  2
2B54:  MOVWF  x6C
2B56:  MOVLW  2C
2B58:  MOVWF  x6B
2B5A:  MOVLB  0
2B5C:  CALL   20CC
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2B60:  MOVLW  02
2B62:  MOVWF  FEA
2B64:  MOVLW  2C
2B66:  MOVWF  FE9
2B68:  MOVLW  33
2B6A:  MOVWF  01
2B6C:  CLRF   FF7
2B6E:  MOVLW  00
2B70:  CALL   040A
2B74:  TBLRD*-
2B76:  TBLRD*+
2B78:  MOVFF  FF5,FEE
2B7C:  DECFSZ 01,F
2B7E:  BRA    2B76
2B80:  MOVLW  02
2B82:  MOVLB  2
2B84:  MOVWF  x6C
2B86:  MOVLW  2C
2B88:  MOVWF  x6B
2B8A:  MOVLB  0
2B8C:  CALL   20CC
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2B90:  MOVLW  02
2B92:  MOVWF  FEA
2B94:  MOVLW  2C
2B96:  MOVWF  FE9
2B98:  MOVLW  31
2B9A:  MOVWF  01
2B9C:  CLRF   FF7
2B9E:  MOVLW  00
2BA0:  CALL   044E
2BA4:  TBLRD*-
2BA6:  TBLRD*+
2BA8:  MOVFF  FF5,FEE
2BAC:  DECFSZ 01,F
2BAE:  BRA    2BA6
2BB0:  MOVLW  02
2BB2:  MOVLB  2
2BB4:  MOVWF  x6C
2BB6:  MOVLW  2C
2BB8:  MOVWF  x6B
2BBA:  MOVLB  0
2BBC:  CALL   20CC
....................   COM1_send_str("RP <power height><cr>  \tSet power height (0-1)\r\n"); 
2BC0:  MOVLW  02
2BC2:  MOVWF  FEA
2BC4:  MOVLW  2C
2BC6:  MOVWF  FE9
2BC8:  MOVLW  31
2BCA:  MOVWF  01
2BCC:  CLRF   FF7
2BCE:  MOVLW  00
2BD0:  CALL   0490
2BD4:  TBLRD*-
2BD6:  TBLRD*+
2BD8:  MOVFF  FF5,FEE
2BDC:  DECFSZ 01,F
2BDE:  BRA    2BD6
2BE0:  MOVLW  02
2BE2:  MOVLB  2
2BE4:  MOVWF  x6C
2BE6:  MOVLW  2C
2BE8:  MOVWF  x6B
2BEA:  MOVLB  0
2BEC:  CALL   20CC
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2BF0:  MOVLW  02
2BF2:  MOVWF  FEA
2BF4:  MOVLW  2C
2BF6:  MOVWF  FE9
2BF8:  MOVLW  31
2BFA:  MOVWF  01
2BFC:  CLRF   FF7
2BFE:  MOVLW  00
2C00:  CALL   04D2
2C04:  TBLRD*-
2C06:  TBLRD*+
2C08:  MOVFF  FF5,FEE
2C0C:  DECFSZ 01,F
2C0E:  BRA    2C06
2C10:  MOVLW  02
2C12:  MOVLB  2
2C14:  MOVWF  x6C
2C16:  MOVLW  2C
2C18:  MOVWF  x6B
2C1A:  MOVLB  0
2C1C:  CALL   20CC
....................   COM1_send_str("RA <randomizer><cr>  \tSet with/without randomizer (0-1)\r\n"); 
2C20:  MOVLW  02
2C22:  MOVWF  FEA
2C24:  MOVLW  2C
2C26:  MOVWF  FE9
2C28:  MOVLW  3A
2C2A:  MOVWF  01
2C2C:  CLRF   FF7
2C2E:  MOVLW  00
2C30:  CALL   0514
2C34:  TBLRD*-
2C36:  TBLRD*+
2C38:  MOVFF  FF5,FEE
2C3C:  DECFSZ 01,F
2C3E:  BRA    2C36
2C40:  MOVLW  02
2C42:  MOVLB  2
2C44:  MOVWF  x6C
2C46:  MOVLW  2C
2C48:  MOVWF  x6B
2C4A:  MOVLB  0
2C4C:  CALL   20CC
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2C50:  MOVLW  02
2C52:  MOVWF  FEA
2C54:  MOVLW  2C
2C56:  MOVWF  FE9
2C58:  MOVLW  35
2C5A:  MOVWF  01
2C5C:  CLRF   FF7
2C5E:  MOVLW  00
2C60:  CALL   055E
2C64:  TBLRD*-
2C66:  TBLRD*+
2C68:  MOVFF  FF5,FEE
2C6C:  DECFSZ 01,F
2C6E:  BRA    2C66
2C70:  MOVLW  02
2C72:  MOVLB  2
2C74:  MOVWF  x6C
2C76:  MOVLW  2C
2C78:  MOVWF  x6B
2C7A:  MOVLB  0
2C7C:  CALL   20CC
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2C80:  MOVLW  02
2C82:  MOVWF  FEA
2C84:  MOVLW  2C
2C86:  MOVWF  FE9
2C88:  MOVLW  21
2C8A:  MOVWF  01
2C8C:  CLRF   FF7
2C8E:  MOVLW  00
2C90:  CALL   05A4
2C94:  TBLRD*-
2C96:  TBLRD*+
2C98:  MOVFF  FF5,FEE
2C9C:  DECFSZ 01,F
2C9E:  BRA    2C96
2CA0:  MOVLW  02
2CA2:  MOVLB  2
2CA4:  MOVWF  x6C
2CA6:  MOVLW  2C
2CA8:  MOVWF  x6B
2CAA:  MOVLB  0
2CAC:  CALL   20CC
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2CB0:  MOVLW  02
2CB2:  MOVWF  FEA
2CB4:  MOVLW  2C
2CB6:  MOVWF  FE9
2CB8:  MOVLW  32
2CBA:  MOVWF  01
2CBC:  CLRF   FF7
2CBE:  MOVLW  00
2CC0:  CALL   05D6
2CC4:  TBLRD*-
2CC6:  TBLRD*+
2CC8:  MOVFF  FF5,FEE
2CCC:  DECFSZ 01,F
2CCE:  BRA    2CC6
2CD0:  MOVLW  02
2CD2:  MOVLB  2
2CD4:  MOVWF  x6C
2CD6:  MOVLW  2C
2CD8:  MOVWF  x6B
2CDA:  MOVLB  0
2CDC:  CALL   20CC
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2CE0:  MOVLW  02
2CE2:  MOVWF  FEA
2CE4:  MOVLW  2C
2CE6:  MOVWF  FE9
2CE8:  MOVLW  39
2CEA:  MOVWF  01
2CEC:  CLRF   FF7
2CEE:  MOVLW  00
2CF0:  CALL   0618
2CF4:  TBLRD*-
2CF6:  TBLRD*+
2CF8:  MOVFF  FF5,FEE
2CFC:  DECFSZ 01,F
2CFE:  BRA    2CF6
2D00:  MOVLW  02
2D02:  MOVLB  2
2D04:  MOVWF  x6C
2D06:  MOVLW  2C
2D08:  MOVWF  x6B
2D0A:  MOVLB  0
2D0C:  CALL   20CC
....................   COM1_send_str("VE <cr>  \tdisplay version info\r\n"); 
2D10:  MOVLW  02
2D12:  MOVWF  FEA
2D14:  MOVLW  2C
2D16:  MOVWF  FE9
2D18:  MOVLW  21
2D1A:  MOVWF  01
2D1C:  CLRF   FF7
2D1E:  MOVLW  00
2D20:  CALL   0662
2D24:  TBLRD*-
2D26:  TBLRD*+
2D28:  MOVFF  FF5,FEE
2D2C:  DECFSZ 01,F
2D2E:  BRA    2D26
2D30:  MOVLW  02
2D32:  MOVLB  2
2D34:  MOVWF  x6C
2D36:  MOVLW  2C
2D38:  MOVWF  x6B
2D3A:  MOVLB  0
2D3C:  CALL   20CC
....................   COM1_send_str("VS <major>.<minor> <cr>  \tset the setup file version\r\n"); 
2D40:  MOVLW  02
2D42:  MOVWF  FEA
2D44:  MOVLW  2C
2D46:  MOVWF  FE9
2D48:  MOVLW  37
2D4A:  MOVWF  01
2D4C:  CLRF   FF7
2D4E:  MOVLW  00
2D50:  CALL   0694
2D54:  TBLRD*-
2D56:  TBLRD*+
2D58:  MOVFF  FF5,FEE
2D5C:  DECFSZ 01,F
2D5E:  BRA    2D56
2D60:  MOVLW  02
2D62:  MOVLB  2
2D64:  MOVWF  x6C
2D66:  MOVLW  2C
2D68:  MOVWF  x6B
2D6A:  MOVLB  0
2D6C:  CALL   20CC
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2D70:  MOVLW  02
2D72:  MOVWF  FEA
2D74:  MOVLW  2C
2D76:  MOVWF  FE9
2D78:  MOVLW  31
2D7A:  MOVWF  01
2D7C:  CLRF   FF7
2D7E:  MOVLW  00
2D80:  CALL   06DC
2D84:  TBLRD*-
2D86:  TBLRD*+
2D88:  MOVFF  FF5,FEE
2D8C:  DECFSZ 01,F
2D8E:  BRA    2D86
2D90:  MOVLW  02
2D92:  MOVLB  2
2D94:  MOVWF  x6C
2D96:  MOVLW  2C
2D98:  MOVWF  x6B
2D9A:  MOVLB  0
2D9C:  CALL   20CC
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2DA0:  MOVLW  02
2DA2:  MOVWF  FEA
2DA4:  MOVLW  2C
2DA6:  MOVWF  FE9
2DA8:  MOVLW  35
2DAA:  MOVWF  01
2DAC:  CLRF   FF7
2DAE:  MOVLW  00
2DB0:  CALL   071E
2DB4:  TBLRD*-
2DB6:  TBLRD*+
2DB8:  MOVFF  FF5,FEE
2DBC:  DECFSZ 01,F
2DBE:  BRA    2DB6
2DC0:  MOVLW  02
2DC2:  MOVLB  2
2DC4:  MOVWF  x6C
2DC6:  MOVLW  2C
2DC8:  MOVWF  x6B
2DCA:  MOVLB  0
2DCC:  CALL   20CC
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2DD0:  MOVLW  02
2DD2:  MOVWF  FEA
2DD4:  MOVLW  2C
2DD6:  MOVWF  FE9
2DD8:  MOVLW  3B
2DDA:  MOVWF  01
2DDC:  CLRF   FF7
2DDE:  MOVLW  00
2DE0:  CALL   0764
2DE4:  TBLRD*-
2DE6:  TBLRD*+
2DE8:  MOVFF  FF5,FEE
2DEC:  DECFSZ 01,F
2DEE:  BRA    2DE6
2DF0:  MOVLW  02
2DF2:  MOVLB  2
2DF4:  MOVWF  x6C
2DF6:  MOVLW  2C
2DF8:  MOVWF  x6B
2DFA:  MOVLB  0
2DFC:  CALL   20CC
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2E00:  MOVLW  02
2E02:  MOVWF  FEA
2E04:  MOVLW  2C
2E06:  MOVWF  FE9
2E08:  MOVLW  3B
2E0A:  MOVWF  01
2E0C:  CLRF   FF7
2E0E:  MOVLW  00
2E10:  CALL   07B0
2E14:  TBLRD*-
2E16:  TBLRD*+
2E18:  MOVFF  FF5,FEE
2E1C:  DECFSZ 01,F
2E1E:  BRA    2E16
2E20:  MOVLW  02
2E22:  MOVLB  2
2E24:  MOVWF  x6C
2E26:  MOVLW  2C
2E28:  MOVWF  x6B
2E2A:  MOVLB  0
2E2C:  CALL   20CC
....................   COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2E30:  MOVLW  02
2E32:  MOVWF  FEA
2E34:  MOVLW  2C
2E36:  MOVWF  FE9
2E38:  MOVLW  2F
2E3A:  MOVWF  01
2E3C:  CLRF   FF7
2E3E:  MOVLW  00
2E40:  CALL   07FC
2E44:  TBLRD*-
2E46:  TBLRD*+
2E48:  MOVFF  FF5,FEE
2E4C:  DECFSZ 01,F
2E4E:  BRA    2E46
2E50:  MOVLW  02
2E52:  MOVLB  2
2E54:  MOVWF  x6C
2E56:  MOVLW  2C
2E58:  MOVWF  x6B
2E5A:  MOVLB  0
2E5C:  CALL   20CC
....................   COM1_send_str("UT <UART Time><cr>  \tSet the stop time, default 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
2E60:  MOVLW  02
2E62:  MOVWF  FEA
2E64:  MOVLW  2C
2E66:  MOVWF  FE9
2E68:  MOVLW  3D
2E6A:  MOVWF  01
2E6C:  CLRF   FF7
2E6E:  MOVLW  00
2E70:  CALL   083C
2E74:  TBLRD*-
2E76:  TBLRD*+
2E78:  MOVFF  FF5,FEE
2E7C:  DECFSZ 01,F
2E7E:  BRA    2E76
2E80:  MOVLW  02
2E82:  MOVLB  2
2E84:  MOVWF  x6C
2E86:  MOVLW  2C
2E88:  MOVWF  x6B
2E8A:  MOVLB  0
2E8C:  CALL   20CC
....................   COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
2E90:  MOVLW  02
2E92:  MOVWF  FEA
2E94:  MOVLW  2C
2E96:  MOVWF  FE9
2E98:  MOVLW  2D
2E9A:  MOVWF  01
2E9C:  CLRF   FF7
2E9E:  MOVLW  00
2EA0:  CALL   088A
2EA4:  TBLRD*-
2EA6:  TBLRD*+
2EA8:  MOVFF  FF5,FEE
2EAC:  DECFSZ 01,F
2EAE:  BRA    2EA6
2EB0:  MOVLW  02
2EB2:  MOVLB  2
2EB4:  MOVWF  x6C
2EB6:  MOVLW  2C
2EB8:  MOVWF  x6B
2EBA:  MOVLB  0
2EBC:  CALL   20CC
....................   COM1_send_str("BG <UART Change><cr>  \tSet Block per second (1-20)\r\n");// VERSION 3.3  23.03.2016 
2EC0:  MOVLW  02
2EC2:  MOVWF  FEA
2EC4:  MOVLW  2C
2EC6:  MOVWF  FE9
2EC8:  MOVLW  35
2ECA:  MOVWF  01
2ECC:  CLRF   FF7
2ECE:  MOVLW  00
2ED0:  CALL   08C8
2ED4:  TBLRD*-
2ED6:  TBLRD*+
2ED8:  MOVFF  FF5,FEE
2EDC:  DECFSZ 01,F
2EDE:  BRA    2ED6
2EE0:  MOVLW  02
2EE2:  MOVLB  2
2EE4:  MOVWF  x6C
2EE6:  MOVLW  2C
2EE8:  MOVWF  x6B
2EEA:  MOVLB  0
2EEC:  CALL   20CC
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2EF0:  MOVLW  02
2EF2:  MOVWF  FEA
2EF4:  MOVLW  2C
2EF6:  MOVWF  FE9
2EF8:  MOVLW  25
2EFA:  MOVWF  01
2EFC:  CLRF   FF7
2EFE:  MOVLW  00
2F00:  CALL   090E
2F04:  TBLRD*-
2F06:  TBLRD*+
2F08:  MOVFF  FF5,FEE
2F0C:  DECFSZ 01,F
2F0E:  BRA    2F06
2F10:  MOVLW  02
2F12:  MOVLB  2
2F14:  MOVWF  x6C
2F16:  MOVLW  2C
2F18:  MOVWF  x6B
2F1A:  MOVLB  0
2F1C:  CALL   20CC
....................   COM1_send_str("\r\n"); 
2F20:  MOVLW  0D
2F22:  MOVLB  2
2F24:  MOVWF  x2C
2F26:  MOVLW  0A
2F28:  MOVWF  x2D
2F2A:  CLRF   x2E
2F2C:  MOVLW  02
2F2E:  MOVWF  x6C
2F30:  MOVLW  2C
2F32:  MOVWF  x6B
2F34:  MOVLB  0
2F36:  CALL   20CC
....................   } 
2F3A:  GOTO   5666 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
374A:  MOVLB  1
374C:  CLRF   xC8
374E:  CLRF   xF2
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, sub; 
....................   UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
....................   chr = 2; 
3750:  MOVLW  02
3752:  MOVWF  xC9
....................   comm_ptr = 0; 
3754:  CLRF   x46
....................     if (peek_char() == ':') // addressed message? 
3756:  MOVLB  0
3758:  CALL   2974
375C:  MOVFF  02,22D
3760:  MOVFF  01,22C
3764:  MOVLB  2
3766:  MOVF   01,W
3768:  SUBLW  3A
376A:  BNZ   37A8
376C:  MOVF   x2D,F
376E:  BNZ   37A8
....................     { 
....................     get_char(); // skip ':' 
3770:  MOVLB  0
3772:  CALL   2992
....................     addr = get_int(); 
3776:  CALL   2A4E
377A:  MOVFF  01,201
....................     if (get_char() != ':') 
377E:  CALL   2992
3782:  MOVFF  02,22D
3786:  MOVFF  01,22C
378A:  MOVLB  2
378C:  MOVF   01,W
378E:  SUBLW  3A
3790:  BNZ   3796
3792:  MOVF   x2D,F
3794:  BNZ   3796
....................       break; 
....................     if (setup.unit_id != addr) 
3796:  MOVF   x01,W
3798:  MOVLB  0
379A:  SUBWF  xF1,W
379C:  BNZ   37A2
379E:  MOVF   xF2,F
37A0:  BZ    37A6
....................       goto aaa; 
37A2:  GOTO   5666
37A6:  MOVLB  2
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
37A8:  MOVLB  0
37AA:  CALL   2992
37AE:  MOVFF  02,22D
37B2:  MOVFF  01,22C
37B6:  MOVLB  2
37B8:  MOVF   x2D,F
37BA:  BNZ   37C2
37BC:  MOVF   x2C,W
37BE:  SUBLW  60
37C0:  BC    37D2
37C2:  MOVF   x2D,F
37C4:  BNZ   37D2
37C6:  MOVF   x2C,W
37C8:  SUBLW  7A
37CA:  BNC   37D2
37CC:  MOVF   x2C,W
37CE:  ANDLW  DF
37D0:  BRA    37D4
37D2:  MOVF   x2C,W
37D4:  MOVLB  1
37D6:  MOVWF  xF3
....................   c2 = toupper(get_char()); 
37D8:  MOVLB  0
37DA:  CALL   2992
37DE:  MOVFF  02,22D
37E2:  MOVFF  01,22C
37E6:  MOVLB  2
37E8:  MOVF   x2D,F
37EA:  BNZ   37F2
37EC:  MOVF   x2C,W
37EE:  SUBLW  60
37F0:  BC    3802
37F2:  MOVF   x2D,F
37F4:  BNZ   3802
37F6:  MOVF   x2C,W
37F8:  SUBLW  7A
37FA:  BNC   3802
37FC:  MOVF   x2C,W
37FE:  ANDLW  DF
3800:  BRA    3804
3802:  MOVF   x2C,W
3804:  MOVLB  1
3806:  MOVWF  xF4
....................   skip_spc(); 
3808:  MOVLB  0
380A:  CALL   29B2
....................  
....................   if (peek_char() == 13) // is this a query? 
380E:  CALL   2974
3812:  MOVFF  02,22D
3816:  MOVFF  01,22C
381A:  MOVLB  2
381C:  MOVF   01,W
381E:  SUBLW  0D
3820:  BNZ   382E
3822:  MOVF   x2D,F
3824:  BNZ   382E
....................     query = 1; // YES 
3826:  MOVLW  01
3828:  MOVLB  1
382A:  MOVWF  xF2
382C:  MOVLB  2
....................   switch (c1) 
....................     { 
382E:  MOVLB  1
3830:  MOVF   xF3,W
3832:  XORLW  4C
3834:  MOVLB  0
3836:  BZ    38AE
3838:  XORLW  68
383A:  BZ    38F2
383C:  XORLW  6C
383E:  BTFSC  FD8.2
3840:  BRA    3950
3842:  XORLW  0E
3844:  BTFSC  FD8.2
3846:  BRA    3998
3848:  XORLW  0B
384A:  BTFSC  FD8.2
384C:  BRA    3A90
384E:  XORLW  09
3850:  BTFSC  FD8.2
3852:  BRA    3B96
3854:  XORLW  16
3856:  BTFSC  FD8.2
3858:  BRA    3EA4
385A:  XORLW  05
385C:  BTFSC  FD8.2
385E:  GOTO   4496
3862:  XORLW  04
3864:  BTFSC  FD8.2
3866:  GOTO   44B4
386A:  XORLW  06
386C:  BTFSC  FD8.2
386E:  GOTO   44F6
3872:  XORLW  17
3874:  BTFSC  FD8.2
3876:  GOTO   4700
387A:  XORLW  0B
387C:  BTFSC  FD8.2
387E:  GOTO   4854
3882:  XORLW  1D
3884:  BTFSC  FD8.2
3886:  GOTO   49CE
388A:  XORLW  02
388C:  BTFSC  FD8.2
388E:  GOTO   49F2
3892:  XORLW  15
3894:  BTFSC  FD8.2
3896:  GOTO   4E1A
389A:  XORLW  04
389C:  BTFSC  FD8.2
389E:  GOTO   5022
38A2:  XORLW  16
38A4:  BTFSC  FD8.2
38A6:  GOTO   5136
38AA:  GOTO   5628
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
38AE:  MOVLB  1
38B0:  MOVF   xF4,W
38B2:  XORLW  49
38B4:  MOVLB  0
38B6:  BZ    38BE
38B8:  XORLW  06
38BA:  BZ    38E8
38BC:  BRA    38EE
....................         case 'I':               // login 
....................           val = get_int(); 
38BE:  CALL   2A4E
38C2:  MOVFF  02,20B
38C6:  MOVFF  01,20A
....................           if (val == 17592) 
38CA:  MOVLB  2
38CC:  MOVF   x0A,W
38CE:  SUBLW  B8
38D0:  BNZ   38DE
38D2:  MOVF   x0B,W
38D4:  SUBLW  44
38D6:  BNZ   38DE
....................             ttccp_login = 1; 
38D8:  MOVLW  01
38DA:  MOVLB  1
38DC:  MOVWF  x31
.................... 			debug_mode = 1; 
38DE:  MOVLW  01
38E0:  MOVLB  1
38E2:  MOVWF  x48
....................           break; 
38E4:  MOVLB  0
38E6:  BRA    38EE
....................         case 'O':              // logout 
....................           ttccp_login = 0; 
38E8:  MOVLB  1
38EA:  CLRF   x31
....................           break; 
38EC:  MOVLB  0
....................         } 
....................       break; 
38EE:  GOTO   5666
....................     case '$': 
....................       if (!ttccp_login) break; 
38F2:  MOVLB  1
38F4:  MOVF   x31,F
38F6:  BNZ   3900
38F8:  MOVLB  0
38FA:  GOTO   5666
38FE:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
3900:  MOVF   xF4,W
3902:  SUBLW  52
3904:  BNZ   394A
....................         { 
....................         val = get_int(); 
3906:  MOVLB  0
3908:  CALL   2A4E
390C:  MOVFF  02,20B
3910:  MOVFF  01,20A
....................           if (val != 17591) 
3914:  MOVLB  2
3916:  MOVF   x0A,W
3918:  SUBLW  B7
391A:  BNZ   3922
391C:  MOVF   x0B,W
391E:  SUBLW  44
3920:  BZ    3926
....................             return; 
3922:  GOTO   5668
....................         ttccp = 0; 
3926:  MOVLB  1
3928:  CLRF   x47
....................         COM1_send_str("\r\n\n*"); 
392A:  MOVLW  0D
392C:  MOVLB  2
392E:  MOVWF  x0E
3930:  MOVLW  0A
3932:  MOVWF  x0F
3934:  MOVWF  x10
3936:  MOVLW  2A
3938:  MOVWF  x11
393A:  CLRF   x12
393C:  MOVLW  02
393E:  MOVWF  x6C
3940:  MOVLW  0E
3942:  MOVWF  x6B
3944:  MOVLB  0
3946:  CALL   20CC
....................         } 
....................       break; 
394A:  MOVLB  0
394C:  GOTO   5666
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
3950:  MOVLB  1
3952:  MOVF   x31,F
3954:  BNZ   395E
3956:  MOVLB  0
3958:  GOTO   5666
395C:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r"); 
395E:  MOVLW  02
3960:  MOVWF  FEA
3962:  MOVLW  13
3964:  MOVWF  FE9
3966:  MOVLW  0F
3968:  MOVWF  01
396A:  CLRF   FF7
396C:  MOVLW  00
396E:  MOVLB  0
3970:  CALL   0944
3974:  TBLRD*-
3976:  TBLRD*+
3978:  MOVFF  FF5,FEE
397C:  DECFSZ 01,F
397E:  BRA    3976
3980:  MOVLW  02
3982:  MOVLB  2
3984:  MOVWF  x6C
3986:  MOVLW  13
3988:  MOVWF  x6B
398A:  MOVLB  0
398C:  CALL   20CC
....................       list_help(); 
3990:  GOTO   2B14
....................     break; 
3994:  GOTO   5666
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
3998:  MOVLB  1
399A:  MOVF   x31,F
399C:  BNZ   39A6
399E:  MOVLB  0
39A0:  GOTO   5666
39A4:  MOVLB  1
....................       switch (c2) 
....................         { 
39A6:  MOVF   xF4,W
39A8:  XORLW  52
39AA:  MOVLB  0
39AC:  BZ    39B0
39AE:  BRA    3A8C
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
39B0:  MOVLB  1
39B2:  MOVF   xF4,W
39B4:  SUBLW  52
39B6:  BNZ   3A5A
....................             { 
....................             if (query) 
39B8:  MOVF   xF2,F
39BA:  BZ    3A08
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
39BC:  MOVLW  01
39BE:  MOVWF  xA9
39C0:  MOVLW  CA
39C2:  MOVWF  xA8
39C4:  MOVLW  28
39C6:  MOVWF  FF6
39C8:  MOVLW  0C
39CA:  MOVWF  FF7
39CC:  MOVLW  03
39CE:  MOVLB  2
39D0:  MOVWF  x45
39D2:  MOVLB  0
39D4:  CALL   2F60
39D8:  MOVLW  10
39DA:  MOVWF  FE9
39DC:  MOVFF  BA,231
39E0:  MOVFF  B9,230
39E4:  CALL   2F88
39E8:  MOVLW  0D
39EA:  MOVLB  2
39EC:  MOVWF  x52
39EE:  MOVLB  0
39F0:  CALL   2F3E
....................               COM1_send_str(buf); 
39F4:  MOVLW  01
39F6:  MOVLB  2
39F8:  MOVWF  x6C
39FA:  MOVLW  CA
39FC:  MOVWF  x6B
39FE:  MOVLB  0
3A00:  CALL   20CC
....................               } 
....................               else 
3A04:  BRA    3A56
3A06:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
3A08:  MOVLB  0
3A0A:  CALL   3044
3A0E:  MOVLB  2
3A10:  CLRF   x05
3A12:  CLRF   x04
3A14:  MOVFF  02,203
3A18:  MOVFF  01,202
....................                 setup.frequency = freq; 
3A1C:  MOVFF  203,BA
3A20:  MOVFF  202,B9
....................                 PLL_compute_freq_parameters(freq); 
3A24:  MOVFF  203,22D
3A28:  MOVFF  202,22C
3A2C:  MOVFF  203,237
3A30:  MOVFF  202,236
3A34:  MOVLB  0
3A36:  CALL   13B0
....................                 PLL_update(); 
3A3A:  CALL   1680
.................... 				delay_ms(50); 
3A3E:  MOVLW  32
3A40:  MOVLB  2
3A42:  MOVWF  x42
3A44:  MOVLB  0
3A46:  CALL   0EFE
.................... 				PLL_update(); 
3A4A:  CALL   1680
....................                 ret = 1; 
3A4E:  MOVLW  01
3A50:  MOVLB  1
3A52:  MOVWF  xC8
3A54:  MOVLB  0
....................               } 
....................             } 
....................             else 
3A56:  BRA    3A8C
3A58:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
3A5A:  MOVLW  02
3A5C:  MOVWF  FEA
3A5E:  MOVLW  13
3A60:  MOVWF  FE9
3A62:  MOVLW  0A
3A64:  MOVWF  01
3A66:  CLRF   FF7
3A68:  MOVLW  00
3A6A:  MOVLB  0
3A6C:  CALL   0964
3A70:  TBLRD*-
3A72:  TBLRD*+
3A74:  MOVFF  FF5,FEE
3A78:  DECFSZ 01,F
3A7A:  BRA    3A72
3A7C:  MOVLW  02
3A7E:  MOVLB  2
3A80:  MOVWF  x6C
3A82:  MOVLW  13
3A84:  MOVWF  x6B
3A86:  MOVLB  0
3A88:  CALL   20CC
....................           break; 
....................         } 
....................       break; 
3A8C:  GOTO   5666
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
3A90:  MOVLB  1
3A92:  MOVF   x31,F
3A94:  BNZ   3A9E
3A96:  MOVLB  0
3A98:  GOTO   5666
3A9C:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
3A9E:  MOVF   xF4,W
3AA0:  SUBLW  4F
3AA2:  BNZ   3B5E
....................           { 
....................             if(query) 
3AA4:  MOVF   xF2,F
3AA6:  BZ    3AF0
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
3AA8:  MOVLW  01
3AAA:  MOVWF  xA9
3AAC:  MOVLW  CA
3AAE:  MOVWF  xA8
3AB0:  MOVLW  30
3AB2:  MOVWF  FF6
3AB4:  MOVLW  0C
3AB6:  MOVWF  FF7
3AB8:  MOVLW  03
3ABA:  MOVLB  2
3ABC:  MOVWF  x45
3ABE:  MOVLB  0
3AC0:  CALL   2F60
3AC4:  MOVFF  AF,230
3AC8:  MOVLW  1B
3ACA:  MOVLB  2
3ACC:  MOVWF  x31
3ACE:  MOVLB  0
3AD0:  CALL   30D8
3AD4:  MOVLW  0D
3AD6:  MOVLB  2
3AD8:  MOVWF  x52
3ADA:  MOVLB  0
3ADC:  CALL   2F3E
....................             COM1_send_str(buf); 
3AE0:  MOVLW  01
3AE2:  MOVLB  2
3AE4:  MOVWF  x6C
3AE6:  MOVLW  CA
3AE8:  MOVWF  x6B
3AEA:  MOVLB  0
3AEC:  CALL   20CC
....................             } 
....................           val = get_int(); 
3AF0:  MOVLB  0
3AF2:  CALL   2A4E
3AF6:  MOVFF  02,20B
3AFA:  MOVFF  01,20A
....................           if (val <= 3) 
3AFE:  MOVLB  2
3B00:  MOVF   x0B,F
3B02:  BNZ   3B1E
3B04:  MOVF   x0A,W
3B06:  SUBLW  03
3B08:  BNC   3B1E
....................             { 
....................             setup.mode = val; 
3B0A:  MOVFF  20A,AF
....................             FPGA_set_reg0(); 
3B0E:  MOVLB  0
3B10:  CALL   17D6
....................             ret = 1; 
3B14:  MOVLW  01
3B16:  MOVLB  1
3B18:  MOVWF  xC8
....................             } 
....................           else 
3B1A:  BRA    3B5C
3B1C:  MOVLB  2
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
3B1E:  MOVLW  02
3B20:  MOVWF  FEA
3B22:  MOVLW  13
3B24:  MOVWF  FE9
3B26:  MOVLW  09
3B28:  MOVWF  01
3B2A:  CLRF   FF7
3B2C:  MOVLW  00
3B2E:  MOVLB  0
3B30:  CALL   097E
3B34:  TBLRD*-
3B36:  TBLRD*+
3B38:  MOVFF  FF5,FEE
3B3C:  DECFSZ 01,F
3B3E:  BRA    3B36
3B40:  MOVLW  02
3B42:  MOVLB  2
3B44:  MOVWF  x6C
3B46:  MOVLW  13
3B48:  MOVWF  x6B
3B4A:  MOVLB  0
3B4C:  CALL   20CC
....................             ret = 0; 
3B50:  MOVLB  1
3B52:  CLRF   xC8
....................             break; 
3B54:  MOVLB  0
3B56:  GOTO   5666
3B5A:  MOVLB  1
....................             } 
....................           } 
....................           else 
3B5C:  BRA    3B90
....................               COM1_send_str("\r\nFAIL\r\n"); 
3B5E:  MOVLW  02
3B60:  MOVWF  FEA
3B62:  MOVLW  13
3B64:  MOVWF  FE9
3B66:  MOVLW  09
3B68:  MOVWF  01
3B6A:  CLRF   FF7
3B6C:  MOVLW  00
3B6E:  MOVLB  0
3B70:  CALL   097E
3B74:  TBLRD*-
3B76:  TBLRD*+
3B78:  MOVFF  FF5,FEE
3B7C:  DECFSZ 01,F
3B7E:  BRA    3B76
3B80:  MOVLW  02
3B82:  MOVLB  2
3B84:  MOVWF  x6C
3B86:  MOVLW  13
3B88:  MOVWF  x6B
3B8A:  MOVLB  0
3B8C:  CALL   20CC
....................       break; 
3B90:  MOVLB  0
3B92:  GOTO   5666
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
3B96:  MOVLB  1
3B98:  MOVF   x31,F
3B9A:  BNZ   3BA4
3B9C:  MOVLB  0
3B9E:  GOTO   5666
3BA2:  MOVLB  1
....................       switch (c2) 
....................         { 
3BA4:  MOVF   xF4,W
3BA6:  XORLW  53
3BA8:  MOVLB  0
3BAA:  BZ    3BBA
3BAC:  XORLW  03
3BAE:  BTFSC  FD8.2
3BB0:  BRA    3CB2
3BB2:  XORLW  15
3BB4:  BTFSC  FD8.2
3BB6:  BRA    3DAA
3BB8:  BRA    3EA0
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
3BBA:  MOVLB  1
3BBC:  MOVF   xF2,F
3BBE:  BZ    3C0C
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
3BC0:  MOVLW  01
3BC2:  MOVWF  xA9
3BC4:  MOVLW  CA
3BC6:  MOVWF  xA8
3BC8:  MOVLW  38
3BCA:  MOVWF  FF6
3BCC:  MOVLW  0C
3BCE:  MOVWF  FF7
3BD0:  MOVLW  03
3BD2:  MOVLB  2
3BD4:  MOVWF  x45
3BD6:  MOVLB  0
3BD8:  CALL   2F60
3BDC:  MOVFF  B3,230
3BE0:  MOVLW  1B
3BE2:  MOVLB  2
3BE4:  MOVWF  x31
3BE6:  MOVLB  0
3BE8:  CALL   30D8
3BEC:  MOVLW  0D
3BEE:  MOVLB  2
3BF0:  MOVWF  x52
3BF2:  MOVLB  0
3BF4:  CALL   2F3E
....................             COM1_send_str(buf); 
3BF8:  MOVLW  01
3BFA:  MOVLB  2
3BFC:  MOVWF  x6C
3BFE:  MOVLW  CA
3C00:  MOVWF  x6B
3C02:  MOVLB  0
3C04:  CALL   20CC
....................             } 
....................           else 
3C08:  BRA    3CA8
3C0A:  MOVLB  1
....................             { 
....................             val = get_int(); 
3C0C:  MOVLB  0
3C0E:  CALL   2A4E
3C12:  MOVFF  02,20B
3C16:  MOVFF  01,20A
....................             if (val < 2) 
3C1A:  MOVLB  2
3C1C:  MOVF   x0B,F
3C1E:  BNZ   3C34
3C20:  MOVF   x0A,W
3C22:  SUBLW  01
3C24:  BNC   3C34
....................               { 
....................               setup.data_source = val; 
3C26:  MOVFF  20A,B3
....................               FPGA_set_reg6(); 
3C2A:  MOVLB  0
3C2C:  CALL   1832
....................               } 
....................             else 
3C30:  BRA    3CA8
3C32:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3C34:  MOVLW  02
3C36:  MOVWF  FEA
3C38:  MOVLW  13
3C3A:  MOVWF  FE9
3C3C:  MOVLW  09
3C3E:  MOVWF  01
3C40:  CLRF   FF7
3C42:  MOVLW  00
3C44:  MOVLB  0
3C46:  CALL   097E
3C4A:  TBLRD*-
3C4C:  TBLRD*+
3C4E:  MOVFF  FF5,FEE
3C52:  DECFSZ 01,F
3C54:  BRA    3C4C
3C56:  MOVLW  02
3C58:  MOVLB  2
3C5A:  MOVWF  x6C
3C5C:  MOVLW  13
3C5E:  MOVWF  x6B
3C60:  MOVLB  0
3C62:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3C66:  MOVLW  01
3C68:  MOVLB  1
3C6A:  MOVWF  xA9
3C6C:  MOVLW  7D
3C6E:  MOVWF  xA8
3C70:  MOVLW  40
3C72:  MOVWF  FF6
3C74:  MOVLW  0C
3C76:  MOVWF  FF7
3C78:  MOVLW  07
3C7A:  MOVLB  2
3C7C:  MOVWF  x45
3C7E:  MOVLB  0
3C80:  CALL   2F60
3C84:  MOVFF  B3,230
3C88:  MOVLW  1B
3C8A:  MOVLB  2
3C8C:  MOVWF  x31
3C8E:  MOVLB  0
3C90:  CALL   30D8
3C94:  MOVLW  0D
3C96:  MOVLB  2
3C98:  MOVWF  x52
3C9A:  MOVLB  0
3C9C:  CALL   2F3E
....................               ret = 0; 
3CA0:  MOVLB  1
3CA2:  CLRF   xC8
....................               break; 
3CA4:  MOVLB  0
3CA6:  BRA    3EA0
....................               } 
....................             } 
....................           ret = 1; 
3CA8:  MOVLW  01
3CAA:  MOVLB  1
3CAC:  MOVWF  xC8
....................           break; 
3CAE:  MOVLB  0
3CB0:  BRA    3EA0
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
3CB2:  MOVLB  1
3CB4:  MOVF   xF2,F
3CB6:  BZ    3D04
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
3CB8:  MOVLW  01
3CBA:  MOVWF  xA9
3CBC:  MOVLW  CA
3CBE:  MOVWF  xA8
3CC0:  MOVLW  4C
3CC2:  MOVWF  FF6
3CC4:  MOVLW  0C
3CC6:  MOVWF  FF7
3CC8:  MOVLW  03
3CCA:  MOVLB  2
3CCC:  MOVWF  x45
3CCE:  MOVLB  0
3CD0:  CALL   2F60
3CD4:  MOVFF  B1,230
3CD8:  MOVLW  1B
3CDA:  MOVLB  2
3CDC:  MOVWF  x31
3CDE:  MOVLB  0
3CE0:  CALL   30D8
3CE4:  MOVLW  0D
3CE6:  MOVLB  2
3CE8:  MOVWF  x52
3CEA:  MOVLB  0
3CEC:  CALL   2F3E
....................             COM1_send_str(buf); 
3CF0:  MOVLW  01
3CF2:  MOVLB  2
3CF4:  MOVWF  x6C
3CF6:  MOVLW  CA
3CF8:  MOVWF  x6B
3CFA:  MOVLB  0
3CFC:  CALL   20CC
....................             } 
....................           else 
3D00:  BRA    3DA0
3D02:  MOVLB  1
....................             { 
....................             val = get_int(); 
3D04:  MOVLB  0
3D06:  CALL   2A4E
3D0A:  MOVFF  02,20B
3D0E:  MOVFF  01,20A
....................             if (val < 2) 
3D12:  MOVLB  2
3D14:  MOVF   x0B,F
3D16:  BNZ   3D2C
3D18:  MOVF   x0A,W
3D1A:  SUBLW  01
3D1C:  BNC   3D2C
....................               { 
....................               setup.data_polarity = val; 
3D1E:  MOVFF  20A,B1
....................               FPGA_set_reg0(); 
3D22:  MOVLB  0
3D24:  CALL   17D6
....................               } 
....................             else 
3D28:  BRA    3DA0
3D2A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3D2C:  MOVLW  02
3D2E:  MOVWF  FEA
3D30:  MOVLW  13
3D32:  MOVWF  FE9
3D34:  MOVLW  09
3D36:  MOVWF  01
3D38:  CLRF   FF7
3D3A:  MOVLW  00
3D3C:  MOVLB  0
3D3E:  CALL   097E
3D42:  TBLRD*-
3D44:  TBLRD*+
3D46:  MOVFF  FF5,FEE
3D4A:  DECFSZ 01,F
3D4C:  BRA    3D44
3D4E:  MOVLW  02
3D50:  MOVLB  2
3D52:  MOVWF  x6C
3D54:  MOVLW  13
3D56:  MOVWF  x6B
3D58:  MOVLB  0
3D5A:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3D5E:  MOVLW  01
3D60:  MOVLB  1
3D62:  MOVWF  xA9
3D64:  MOVLW  7D
3D66:  MOVWF  xA8
3D68:  MOVLW  54
3D6A:  MOVWF  FF6
3D6C:  MOVLW  0C
3D6E:  MOVWF  FF7
3D70:  MOVLW  07
3D72:  MOVLB  2
3D74:  MOVWF  x45
3D76:  MOVLB  0
3D78:  CALL   2F60
3D7C:  MOVFF  B1,230
3D80:  MOVLW  1B
3D82:  MOVLB  2
3D84:  MOVWF  x31
3D86:  MOVLB  0
3D88:  CALL   30D8
3D8C:  MOVLW  0D
3D8E:  MOVLB  2
3D90:  MOVWF  x52
3D92:  MOVLB  0
3D94:  CALL   2F3E
....................               ret = 0; 
3D98:  MOVLB  1
3D9A:  CLRF   xC8
....................               break; 
3D9C:  MOVLB  0
3D9E:  BRA    3EA0
....................               } 
....................             } 
....................           ret = 1; 
3DA0:  MOVLW  01
3DA2:  MOVLB  1
3DA4:  MOVWF  xC8
....................           break; 
3DA6:  MOVLB  0
3DA8:  BRA    3EA0
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
3DAA:  MOVLB  1
3DAC:  MOVF   xF2,F
3DAE:  BZ    3DFC
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
3DB0:  MOVLW  01
3DB2:  MOVWF  xA9
3DB4:  MOVLW  CA
3DB6:  MOVWF  xA8
3DB8:  MOVLW  60
3DBA:  MOVWF  FF6
3DBC:  MOVLW  0C
3DBE:  MOVWF  FF7
3DC0:  MOVLW  03
3DC2:  MOVLB  2
3DC4:  MOVWF  x45
3DC6:  MOVLB  0
3DC8:  CALL   2F60
3DCC:  MOVFF  B7,230
3DD0:  MOVLW  1B
3DD2:  MOVLB  2
3DD4:  MOVWF  x31
3DD6:  MOVLB  0
3DD8:  CALL   30D8
3DDC:  MOVLW  0D
3DDE:  MOVLB  2
3DE0:  MOVWF  x52
3DE2:  MOVLB  0
3DE4:  CALL   2F3E
....................             COM1_send_str(buf); 
3DE8:  MOVLW  01
3DEA:  MOVLB  2
3DEC:  MOVWF  x6C
3DEE:  MOVLW  CA
3DF0:  MOVWF  x6B
3DF2:  MOVLB  0
3DF4:  CALL   20CC
....................             } 
....................           else 
3DF8:  BRA    3E98
3DFA:  MOVLB  1
....................             { 
....................             val = get_int(); 
3DFC:  MOVLB  0
3DFE:  CALL   2A4E
3E02:  MOVFF  02,20B
3E06:  MOVFF  01,20A
....................             if (val < 2) 
3E0A:  MOVLB  2
3E0C:  MOVF   x0B,F
3E0E:  BNZ   3E24
3E10:  MOVF   x0A,W
3E12:  SUBLW  01
3E14:  BNC   3E24
....................               { 
....................               setup.SOQPSK = val; 
3E16:  MOVFF  20A,B7
....................               FPGA_set_reg0(); 
3E1A:  MOVLB  0
3E1C:  CALL   17D6
....................               } 
....................             else 
3E20:  BRA    3E98
3E22:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3E24:  MOVLW  02
3E26:  MOVWF  FEA
3E28:  MOVLW  13
3E2A:  MOVWF  FE9
3E2C:  MOVLW  09
3E2E:  MOVWF  01
3E30:  CLRF   FF7
3E32:  MOVLW  00
3E34:  MOVLB  0
3E36:  CALL   097E
3E3A:  TBLRD*-
3E3C:  TBLRD*+
3E3E:  MOVFF  FF5,FEE
3E42:  DECFSZ 01,F
3E44:  BRA    3E3C
3E46:  MOVLW  02
3E48:  MOVLB  2
3E4A:  MOVWF  x6C
3E4C:  MOVLW  13
3E4E:  MOVWF  x6B
3E50:  MOVLB  0
3E52:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3E56:  MOVLW  01
3E58:  MOVLB  1
3E5A:  MOVWF  xA9
3E5C:  MOVLW  7D
3E5E:  MOVWF  xA8
3E60:  MOVLW  68
3E62:  MOVWF  FF6
3E64:  MOVLW  0C
3E66:  MOVWF  FF7
3E68:  MOVLW  07
3E6A:  MOVLB  2
3E6C:  MOVWF  x45
3E6E:  MOVLB  0
3E70:  CALL   2F60
3E74:  MOVFF  B7,230
3E78:  MOVLW  1B
3E7A:  MOVLB  2
3E7C:  MOVWF  x31
3E7E:  MOVLB  0
3E80:  CALL   30D8
3E84:  MOVLW  0D
3E86:  MOVLB  2
3E88:  MOVWF  x52
3E8A:  MOVLB  0
3E8C:  CALL   2F3E
....................               ret = 0; 
3E90:  MOVLB  1
3E92:  CLRF   xC8
....................               break; 
3E94:  MOVLB  0
3E96:  BRA    3EA0
....................               } 
....................             } 
....................           ret = 1; 
3E98:  MOVLW  01
3E9A:  MOVLB  1
3E9C:  MOVWF  xC8
....................           break; 
3E9E:  MOVLB  0
....................         } 
....................       break; 
3EA0:  GOTO   5666
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
3EA4:  MOVLB  1
3EA6:  MOVF   x31,F
3EA8:  BNZ   3EB2
3EAA:  MOVLB  0
3EAC:  GOTO   5666
3EB0:  MOVLB  1
....................       switch (c2) 
....................         { 
3EB2:  MOVLW  41
3EB4:  SUBWF  xF4,W
3EB6:  ADDLW  F0
3EB8:  BTFSC  FD8.0
3EBA:  BRA    4490
3EBC:  ADDLW  10
3EBE:  MOVLB  0
3EC0:  GOTO   566E
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
3EC4:  MOVLB  1
3EC6:  MOVF   xF2,F
3EC8:  BZ    3F16
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
3ECA:  MOVLW  01
3ECC:  MOVWF  xA9
3ECE:  MOVLW  CA
3ED0:  MOVWF  xA8
3ED2:  MOVLW  74
3ED4:  MOVWF  FF6
3ED6:  MOVLW  0C
3ED8:  MOVWF  FF7
3EDA:  MOVLW  03
3EDC:  MOVLB  2
3EDE:  MOVWF  x45
3EE0:  MOVLB  0
3EE2:  CALL   2F60
3EE6:  MOVFF  B6,230
3EEA:  MOVLW  1B
3EEC:  MOVLB  2
3EEE:  MOVWF  x31
3EF0:  MOVLB  0
3EF2:  CALL   30D8
3EF6:  MOVLW  0D
3EF8:  MOVLB  2
3EFA:  MOVWF  x52
3EFC:  MOVLB  0
3EFE:  CALL   2F3E
....................             COM1_send_str(buf); 
3F02:  MOVLW  01
3F04:  MOVLB  2
3F06:  MOVWF  x6C
3F08:  MOVLW  CA
3F0A:  MOVWF  x6B
3F0C:  MOVLB  0
3F0E:  CALL   20CC
....................             } 
....................           else 
3F12:  BRA    4010
3F14:  MOVLB  1
....................             { 
....................             val = get_int(); 
3F16:  MOVLB  0
3F18:  CALL   2A4E
3F1C:  MOVFF  02,20B
3F20:  MOVFF  01,20A
....................             if (val < 2) 
3F24:  MOVLB  2
3F26:  MOVF   x0B,F
3F28:  BNZ   3F9C
3F2A:  MOVF   x0A,W
3F2C:  SUBLW  01
3F2E:  BNC   3F9C
....................               { 
.................... 	          if(setup.rc == 1) 
3F30:  MOVLB  0
3F32:  DECFSZ xF7,W
3F34:  BRA    3F54
3F36:  MOVF   xF8,F
3F38:  BNZ   3F54
.................... 	            { 
.................... 	            if(val == 0) 
3F3A:  MOVLB  2
3F3C:  MOVF   x0A,F
3F3E:  BNZ   3F4E
3F40:  MOVF   x0B,F
3F42:  BNZ   3F4E
.................... 	            { 
.................... 	            setup.rp =1; 
3F44:  MOVLB  0
3F46:  CLRF   xFA
3F48:  MOVLW  01
3F4A:  MOVWF  xF9
.................... 	            } 
.................... 	          else 
3F4C:  BRA    3F54
....................  
.................... 	          setup.rp = 0; 
3F4E:  MOVLB  0
3F50:  CLRF   xFA
3F52:  CLRF   xF9
.................... 	          } 
.................... 	          if(val == 1) 
3F54:  MOVLB  2
3F56:  DECFSZ x0A,W
3F58:  BRA    3F7C
3F5A:  MOVF   x0B,F
3F5C:  BNZ   3F7C
.................... 	          { 
....................               rp_command = setup.rp = 0; 
3F5E:  MOVLB  0
3F60:  CLRF   xFA
3F62:  CLRF   xF9
3F64:  MOVFF  F9,1A5
....................               delay_ms(50); 
3F68:  MOVLW  32
3F6A:  MOVLB  2
3F6C:  MOVWF  x42
3F6E:  MOVLB  0
3F70:  CALL   0EFE
....................               update_all(); 
3F74:  CALL   1D24
....................               } 
....................               else 
3F78:  BRA    3F98
3F7A:  MOVLB  2
....................                { 
....................               rp_command = setup.rp = 1; 
3F7C:  MOVLB  0
3F7E:  CLRF   xFA
3F80:  MOVLW  01
3F82:  MOVWF  xF9
3F84:  MOVFF  F9,1A5
....................               delay_ms(50); 
3F88:  MOVLW  32
3F8A:  MOVLB  2
3F8C:  MOVWF  x42
3F8E:  MOVLB  0
3F90:  CALL   0EFE
....................               update_all(); 
3F94:  CALL   1D24
....................               } 
....................               } 
....................             else 
3F98:  BRA    4010
3F9A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3F9C:  MOVLW  02
3F9E:  MOVWF  FEA
3FA0:  MOVLW  13
3FA2:  MOVWF  FE9
3FA4:  MOVLW  09
3FA6:  MOVWF  01
3FA8:  CLRF   FF7
3FAA:  MOVLW  00
3FAC:  MOVLB  0
3FAE:  CALL   097E
3FB2:  TBLRD*-
3FB4:  TBLRD*+
3FB6:  MOVFF  FF5,FEE
3FBA:  DECFSZ 01,F
3FBC:  BRA    3FB4
3FBE:  MOVLW  02
3FC0:  MOVLB  2
3FC2:  MOVWF  x6C
3FC4:  MOVLW  13
3FC6:  MOVWF  x6B
3FC8:  MOVLB  0
3FCA:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
3FCE:  MOVLW  01
3FD0:  MOVLB  1
3FD2:  MOVWF  xA9
3FD4:  MOVLW  7D
3FD6:  MOVWF  xA8
3FD8:  MOVLW  7C
3FDA:  MOVWF  FF6
3FDC:  MOVLW  0C
3FDE:  MOVWF  FF7
3FE0:  MOVLW  07
3FE2:  MOVLB  2
3FE4:  MOVWF  x45
3FE6:  MOVLB  0
3FE8:  CALL   2F60
3FEC:  MOVFF  1A5,230
3FF0:  MOVLW  1B
3FF2:  MOVLB  2
3FF4:  MOVWF  x31
3FF6:  MOVLB  0
3FF8:  CALL   30D8
3FFC:  MOVLW  0D
3FFE:  MOVLB  2
4000:  MOVWF  x52
4002:  MOVLB  0
4004:  CALL   2F3E
....................               ret = 0; 
4008:  MOVLB  1
400A:  CLRF   xC8
....................               break; 
400C:  BRA    4490
400E:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
4010:  MOVLW  01
4012:  MOVLB  1
4014:  MOVWF  xC8
....................           break; 
4016:  BRA    4490
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
4018:  MOVLB  1
401A:  MOVF   xF2,F
401C:  BZ    406A
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
401E:  MOVLW  01
4020:  MOVWF  xA9
4022:  MOVLW  CA
4024:  MOVWF  xA8
4026:  MOVLW  88
4028:  MOVWF  FF6
402A:  MOVLW  0C
402C:  MOVWF  FF7
402E:  MOVLW  03
4030:  MOVLB  2
4032:  MOVWF  x45
4034:  MOVLB  0
4036:  CALL   2F60
403A:  MOVFF  1A6,230
403E:  MOVLW  1B
4040:  MOVLB  2
4042:  MOVWF  x31
4044:  MOVLB  0
4046:  CALL   30D8
404A:  MOVLW  0D
404C:  MOVLB  2
404E:  MOVWF  x52
4050:  MOVLB  0
4052:  CALL   2F3E
....................             COM1_send_str(buf); 
4056:  MOVLW  01
4058:  MOVLB  2
405A:  MOVWF  x6C
405C:  MOVLW  CA
405E:  MOVWF  x6B
4060:  MOVLB  0
4062:  CALL   20CC
....................             } 
....................           else 
4066:  BRA    41CC
4068:  MOVLB  1
....................             { 
....................             val = get_int(); 
406A:  MOVLB  0
406C:  CALL   2A4E
4070:  MOVFF  02,20B
4074:  MOVFF  01,20A
....................             if (val == 0) 
4078:  MOVLB  2
407A:  MOVF   x0A,F
407C:  BNZ   40E6
407E:  MOVF   x0B,F
4080:  BNZ   40E6
....................               { 
.................... 			  if(setup.cot || setup.rc) 
4082:  MOVLB  0
4084:  MOVF   xF5,W
4086:  IORWF  xF6,W
4088:  BNZ   4090
408A:  MOVF   xF7,W
408C:  IORWF  xF8,W
408E:  BZ    40B6
.................... 				{ 
....................                 pwr_command = 0; 
4090:  MOVLB  1
4092:  CLRF   xA6
....................                 setup.pwr = pwr_command; 
4094:  MOVLB  0
4096:  CLRF   xAE
4098:  MOVFF  1A6,AD
....................                 delay_ms(60); 
409C:  MOVLW  3C
409E:  MOVLB  2
40A0:  MOVWF  x42
40A2:  MOVLB  0
40A4:  CALL   0EFE
.................... 			 	update_all(); 
40A8:  CALL   1D24
.................... 			 	ret = 1; 
40AC:  MOVLW  01
40AE:  MOVLB  1
40B0:  MOVWF  xC8
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
40B2:  BRA    40E2
40B4:  MOVLB  0
40B6:  MOVF   xF5,F
40B8:  BNZ   40BE
40BA:  MOVF   xF6,F
40BC:  BZ    40C4
40BE:  MOVF   xF7,W
40C0:  IORWF  xF8,W
40C2:  BZ    40E0
.................... 				  { 
....................                   pwr_command = 0; 
40C4:  MOVLB  1
40C6:  CLRF   xA6
....................                 setup.pwr = pwr_command; 
40C8:  MOVLB  0
40CA:  CLRF   xAE
40CC:  MOVFF  1A6,AD
....................                 delay_ms(60); 
40D0:  MOVLW  3C
40D2:  MOVLB  2
40D4:  MOVWF  x42
40D6:  MOVLB  0
40D8:  CALL   0EFE
.................... 			 	update_all(); 
40DC:  CALL   1D24
40E0:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
40E2:  BRA    41CA
40E4:  MOVLB  2
.................... 				{ 
.................... 				if (val == 1) 
40E6:  DECFSZ x0A,W
40E8:  BRA    4158
40EA:  MOVF   x0B,F
40EC:  BNZ   4158
.................... 				  { 
.................... 				  if(setup.cot) 
40EE:  MOVLB  0
40F0:  MOVF   xF5,W
40F2:  IORWF  xF6,W
40F4:  BZ    4122
.................... 				   { 
.................... 				   pwr_command = 1; 
40F6:  MOVLW  01
40F8:  MOVLB  1
40FA:  MOVWF  xA6
.................... 				   setup.pwr = pwr_command; 
40FC:  MOVLB  0
40FE:  CLRF   xAE
4100:  MOVFF  1A6,AD
.................... 				   power_output(); 
4104:  CALL   1E96
....................                    delay_ms(50); 
4108:  MOVLW  32
410A:  MOVLB  2
410C:  MOVWF  x42
410E:  MOVLB  0
4110:  CALL   0EFE
.................... 				   ret = 1; 
4114:  MOVLW  01
4116:  MOVLB  1
4118:  MOVWF  xC8
....................                    update_all(); 
411A:  MOVLB  0
411C:  CALL   1D24
.................... 				   } 
.................... 					else if(setup.cot == 0) 
4120:  BRA    4154
4122:  MOVF   xF5,F
4124:  BNZ   4154
4126:  MOVF   xF6,F
4128:  BNZ   4154
.................... 				  { 
....................                   pwr_command = 1; 
412A:  MOVLW  01
412C:  MOVLB  1
412E:  MOVWF  xA6
....................                   setup.pwr = pwr_command; 
4130:  MOVLB  0
4132:  CLRF   xAE
4134:  MOVFF  1A6,AD
....................                   power_output(); 
4138:  CALL   1E96
.................... 				  delay_ms(50); 
413C:  MOVLW  32
413E:  MOVLB  2
4140:  MOVWF  x42
4142:  MOVLB  0
4144:  CALL   0EFE
.................... 				  ret = 1; 
4148:  MOVLW  01
414A:  MOVLB  1
414C:  MOVWF  xC8
....................                   update_all(); 
414E:  MOVLB  0
4150:  CALL   1D24
....................                   } 
.................... 				} 
....................             else 
4154:  BRA    41CC
4156:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4158:  MOVLW  02
415A:  MOVWF  FEA
415C:  MOVLW  13
415E:  MOVWF  FE9
4160:  MOVLW  09
4162:  MOVWF  01
4164:  CLRF   FF7
4166:  MOVLW  00
4168:  MOVLB  0
416A:  CALL   097E
416E:  TBLRD*-
4170:  TBLRD*+
4172:  MOVFF  FF5,FEE
4176:  DECFSZ 01,F
4178:  BRA    4170
417A:  MOVLW  02
417C:  MOVLB  2
417E:  MOVWF  x6C
4180:  MOVLW  13
4182:  MOVWF  x6B
4184:  MOVLB  0
4186:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
418A:  MOVLW  01
418C:  MOVLB  1
418E:  MOVWF  xA9
4190:  MOVLW  7D
4192:  MOVWF  xA8
4194:  MOVLW  90
4196:  MOVWF  FF6
4198:  MOVLW  0C
419A:  MOVWF  FF7
419C:  MOVLW  07
419E:  MOVLB  2
41A0:  MOVWF  x45
41A2:  MOVLB  0
41A4:  CALL   2F60
41A8:  MOVFF  1A6,230
41AC:  MOVLW  1B
41AE:  MOVLB  2
41B0:  MOVWF  x31
41B2:  MOVLB  0
41B4:  CALL   30D8
41B8:  MOVLW  0D
41BA:  MOVLB  2
41BC:  MOVWF  x52
41BE:  MOVLB  0
41C0:  CALL   2F3E
....................               ret = 0; 
41C4:  MOVLB  1
41C6:  CLRF   xC8
....................               break; 
41C8:  BRA    4490
41CA:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
41CC:  MOVLW  01
41CE:  MOVLB  1
41D0:  MOVWF  xC8
....................           break; 
41D2:  BRA    4490
....................  
....................          case 'C': 
....................          	if (query) 
41D4:  MOVLB  1
41D6:  MOVF   xF2,F
41D8:  BZ    4226
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
41DA:  MOVLW  01
41DC:  MOVWF  xA9
41DE:  MOVLW  CA
41E0:  MOVWF  xA8
41E2:  MOVLW  9C
41E4:  MOVWF  FF6
41E6:  MOVLW  0C
41E8:  MOVWF  FF7
41EA:  MOVLW  03
41EC:  MOVLB  2
41EE:  MOVWF  x45
41F0:  MOVLB  0
41F2:  CALL   2F60
41F6:  MOVLW  10
41F8:  MOVWF  FE9
41FA:  MOVFF  F8,231
41FE:  MOVFF  F7,230
4202:  CALL   2F88
4206:  MOVLW  0D
4208:  MOVLB  2
420A:  MOVWF  x52
420C:  MOVLB  0
420E:  CALL   2F3E
....................             COM1_send_str(buf); 
4212:  MOVLW  01
4214:  MOVLB  2
4216:  MOVWF  x6C
4218:  MOVLW  CA
421A:  MOVWF  x6B
421C:  MOVLB  0
421E:  CALL   20CC
....................             } 
....................           else 
4222:  BRA    42B6
4224:  MOVLB  1
....................             { 
....................           val = get_int(); 
4226:  MOVLB  0
4228:  CALL   2A4E
422C:  MOVFF  02,20B
4230:  MOVFF  01,20A
....................           if(val < 2) 
4234:  MOVLB  2
4236:  MOVF   x0B,F
4238:  BNZ   4284
423A:  MOVF   x0A,W
423C:  SUBLW  01
423E:  BNC   4284
....................           	{ 
.................... 	          	if(val == 0) 
4240:  MOVF   x0A,F
4242:  BNZ   4260
4244:  MOVF   x0B,F
4246:  BNZ   4260
.................... 	          	{ 
.................... 	              setup.rc = 0; 
4248:  MOVLB  0
424A:  CLRF   xF8
424C:  CLRF   xF7
.................... 	              delay_ms(50); 
424E:  MOVLW  32
4250:  MOVLB  2
4252:  MOVWF  x42
4254:  MOVLB  0
4256:  CALL   0EFE
.................... 	              update_all(); 
425A:  CALL   1D24
425E:  MOVLB  2
.................... 	            } 
.................... 	            if(val == 1) 
4260:  DECFSZ x0A,W
4262:  BRA    4282
4264:  MOVF   x0B,F
4266:  BNZ   4282
.................... 	              { 
.................... 	              setup.rc = 1; 
4268:  MOVLB  0
426A:  CLRF   xF8
426C:  MOVLW  01
426E:  MOVWF  xF7
.................... 	              delay_ms(50); 
4270:  MOVLW  32
4272:  MOVLB  2
4274:  MOVWF  x42
4276:  MOVLB  0
4278:  CALL   0EFE
.................... 	              update_all(); 
427C:  CALL   1D24
4280:  MOVLB  2
.................... 	              } 
....................            } 
....................           else 
4282:  BRA    42B8
....................             COM1_send_str("\r\nFAULT\r\n"); 
4284:  MOVLW  02
4286:  MOVWF  FEA
4288:  MOVLW  13
428A:  MOVWF  FE9
428C:  MOVLW  0A
428E:  MOVWF  01
4290:  CLRF   FF7
4292:  MOVLW  00
4294:  MOVLB  0
4296:  CALL   0964
429A:  TBLRD*-
429C:  TBLRD*+
429E:  MOVFF  FF5,FEE
42A2:  DECFSZ 01,F
42A4:  BRA    429C
42A6:  MOVLW  02
42A8:  MOVLB  2
42AA:  MOVWF  x6C
42AC:  MOVLW  13
42AE:  MOVWF  x6B
42B0:  MOVLB  0
42B2:  CALL   20CC
42B6:  MOVLB  2
....................             } 
....................           break; 
42B8:  MOVLB  1
42BA:  BRA    4490
....................  
....................           case 'B': 
....................             if (query) 
42BC:  MOVLB  1
42BE:  MOVF   xF2,F
42C0:  BZ    430E
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
42C2:  MOVLW  01
42C4:  MOVWF  xA9
42C6:  MOVLW  CA
42C8:  MOVWF  xA8
42CA:  MOVLW  A4
42CC:  MOVWF  FF6
42CE:  MOVLW  0C
42D0:  MOVWF  FF7
42D2:  MOVLW  03
42D4:  MOVLB  2
42D6:  MOVWF  x45
42D8:  MOVLB  0
42DA:  CALL   2F60
42DE:  MOVLW  10
42E0:  MOVWF  FE9
42E2:  MOVFF  F6,231
42E6:  MOVFF  F5,230
42EA:  CALL   2F88
42EE:  MOVLW  0D
42F0:  MOVLB  2
42F2:  MOVWF  x52
42F4:  MOVLB  0
42F6:  CALL   2F3E
....................             COM1_send_str(buf); 
42FA:  MOVLW  01
42FC:  MOVLB  2
42FE:  MOVWF  x6C
4300:  MOVLW  CA
4302:  MOVWF  x6B
4304:  MOVLB  0
4306:  CALL   20CC
....................             } 
....................           else 
430A:  BRA    437E
430C:  MOVLB  1
....................             { 
....................           val = get_int(); 
430E:  MOVLB  0
4310:  CALL   2A4E
4314:  MOVFF  02,20B
4318:  MOVFF  01,20A
....................           if(val < 2) 
431C:  MOVLB  2
431E:  MOVF   x0B,F
4320:  BNZ   434C
4322:  MOVF   x0A,W
4324:  SUBLW  01
4326:  BNC   434C
....................           	{ 
....................             setup.cot = val; 
4328:  MOVFF  20B,F6
432C:  MOVFF  20A,F5
....................             pwr_command++; 
4330:  MOVLB  1
4332:  INCF   xA6,F
....................             pwr_command &= 1; 
4334:  MOVLW  01
4336:  ANDWF  xA6,F
....................             delay_ms(50); 
4338:  MOVLW  32
433A:  MOVLB  2
433C:  MOVWF  x42
433E:  MOVLB  0
4340:  CALL   0EFE
....................             update_all(); 
4344:  CALL   1D24
....................            } 
....................           else 
4348:  BRA    437E
434A:  MOVLB  2
....................             COM1_send_str("\r\nFAULT\r\n"); 
434C:  MOVLW  02
434E:  MOVWF  FEA
4350:  MOVLW  13
4352:  MOVWF  FE9
4354:  MOVLW  0A
4356:  MOVWF  01
4358:  CLRF   FF7
435A:  MOVLW  00
435C:  MOVLB  0
435E:  CALL   0964
4362:  TBLRD*-
4364:  TBLRD*+
4366:  MOVFF  FF5,FEE
436A:  DECFSZ 01,F
436C:  BRA    4364
436E:  MOVLW  02
4370:  MOVLB  2
4372:  MOVWF  x6C
4374:  MOVLW  13
4376:  MOVWF  x6B
4378:  MOVLB  0
437A:  CALL   20CC
....................             } 
....................           break; 
437E:  MOVLB  1
4380:  BRA    4490
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
4382:  MOVLB  1
4384:  MOVF   xF2,F
4386:  BZ    43D4
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
4388:  MOVLW  01
438A:  MOVWF  xA9
438C:  MOVLW  CA
438E:  MOVWF  xA8
4390:  MOVLW  AC
4392:  MOVWF  FF6
4394:  MOVLW  0C
4396:  MOVWF  FF7
4398:  MOVLW  03
439A:  MOVLB  2
439C:  MOVWF  x45
439E:  MOVLB  0
43A0:  CALL   2F60
43A4:  MOVFF  B5,230
43A8:  MOVLW  1B
43AA:  MOVLB  2
43AC:  MOVWF  x31
43AE:  MOVLB  0
43B0:  CALL   30D8
43B4:  MOVLW  0D
43B6:  MOVLB  2
43B8:  MOVWF  x52
43BA:  MOVLB  0
43BC:  CALL   2F3E
....................             COM1_send_str(buf); 
43C0:  MOVLW  01
43C2:  MOVLB  2
43C4:  MOVWF  x6C
43C6:  MOVLW  CA
43C8:  MOVWF  x6B
43CA:  MOVLB  0
43CC:  CALL   20CC
....................             } 
....................           else 
43D0:  BRA    4474
43D2:  MOVLB  1
....................             { 
....................             val = get_int(); 
43D4:  MOVLB  0
43D6:  CALL   2A4E
43DA:  MOVFF  02,20B
43DE:  MOVFF  01,20A
....................             if (val < 2) 
43E2:  MOVLB  2
43E4:  MOVF   x0B,F
43E6:  BNZ   4402
43E8:  MOVF   x0A,W
43EA:  SUBLW  01
43EC:  BNC   4402
....................               { 
....................               setup.randomizer = val; 
43EE:  MOVFF  20A,B5
....................               FPGA_set_reg0(); 
43F2:  MOVLB  0
43F4:  CALL   17D6
....................               ret = 1; 
43F8:  MOVLW  01
43FA:  MOVLB  1
43FC:  MOVWF  xC8
....................               } 
....................             else 
43FE:  BRA    4474
4400:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4402:  MOVLW  02
4404:  MOVWF  FEA
4406:  MOVLW  13
4408:  MOVWF  FE9
440A:  MOVLW  09
440C:  MOVWF  01
440E:  CLRF   FF7
4410:  MOVLW  00
4412:  MOVLB  0
4414:  CALL   097E
4418:  TBLRD*-
441A:  TBLRD*+
441C:  MOVFF  FF5,FEE
4420:  DECFSZ 01,F
4422:  BRA    441A
4424:  MOVLW  02
4426:  MOVLB  2
4428:  MOVWF  x6C
442A:  MOVLW  13
442C:  MOVWF  x6B
442E:  MOVLB  0
4430:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
4434:  MOVLW  01
4436:  MOVLB  1
4438:  MOVWF  xA9
443A:  MOVLW  7D
443C:  MOVWF  xA8
443E:  MOVLW  B4
4440:  MOVWF  FF6
4442:  MOVLW  0C
4444:  MOVWF  FF7
4446:  MOVLW  07
4448:  MOVLB  2
444A:  MOVWF  x45
444C:  MOVLB  0
444E:  CALL   2F60
4452:  MOVFF  B5,230
4456:  MOVLW  1B
4458:  MOVLB  2
445A:  MOVWF  x31
445C:  MOVLB  0
445E:  CALL   30D8
4462:  MOVLW  0D
4464:  MOVLB  2
4466:  MOVWF  x52
4468:  MOVLB  0
446A:  CALL   2F3E
....................               ret = 0; 
446E:  MOVLB  1
4470:  CLRF   xC8
....................               break; 
4472:  BRA    4490
....................               } 
....................             } 
....................           ret = 1; 
4474:  MOVLW  01
4476:  MOVLB  1
4478:  MOVWF  xC8
....................           break; 
447A:  BRA    4490
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
447C:  CALL   0F9A
....................           update_all(); 
4480:  CALL   1D24
....................           ret = 1; 
4484:  MOVLW  01
4486:  MOVLB  1
4488:  MOVWF  xC8
....................           break; 
448A:  BRA    4490
....................         case 'E':   // reset 
....................           reset_cpu(); 
448C:  RESET
....................           break; 
448E:  MOVLB  1
....................         } 
....................       break; 
4490:  MOVLB  0
4492:  GOTO   5666
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
4496:  MOVLB  1
4498:  MOVF   x31,F
449A:  BNZ   44A4
449C:  MOVLB  0
449E:  GOTO   5666
44A2:  MOVLB  1
....................       if (c2 == 'A') 
44A4:  MOVF   xF4,W
44A6:  SUBLW  41
44A8:  BNZ   44AE
....................         { 
....................         //xxxx 
....................         ret = 1; 
44AA:  MOVLW  01
44AC:  MOVWF  xC8
....................         } 
....................       break; 
44AE:  MOVLB  0
44B0:  GOTO   5666
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
44B4:  MOVLB  1
44B6:  MOVF   x31,F
44B8:  BNZ   44C2
44BA:  MOVLB  0
44BC:  GOTO   5666
44C0:  MOVLB  1
....................       switch (c2) 
....................         { 
44C2:  MOVF   xF4,W
44C4:  XORLW  50
44C6:  MOVLB  0
44C8:  BZ    44D0
44CA:  XORLW  06
44CC:  BZ    44DA
44CE:  BRA    44F2
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
44D0:  MOVLW  01
44D2:  MOVLB  1
44D4:  MOVWF  xC8
....................           break; 
44D6:  MOVLB  0
44D8:  BRA    44F2
....................         case 'V': 
....................           allow_write = 2975; 
44DA:  MOVLW  0B
44DC:  MOVLB  1
44DE:  MOVWF  x04
44E0:  MOVLW  9F
44E2:  MOVWF  x03
....................           write_setup(); 
44E4:  MOVLB  0
44E6:  CALL   31C4
....................           ret = 1; 
44EA:  MOVLW  01
44EC:  MOVLB  1
44EE:  MOVWF  xC8
....................           break; 
44F0:  MOVLB  0
....................         } 
....................       break; 
44F2:  GOTO   5666
....................        
....................  
....................     case 'U': // VERSION 3.3 UT US 
....................       if (!ttccp_login) break; 
44F6:  MOVLB  1
44F8:  MOVF   x31,F
44FA:  BNZ   4504
44FC:  MOVLB  0
44FE:  GOTO   5666
4502:  MOVLB  1
....................       switch (c2) 
....................         { 
4504:  MOVF   xF4,W
4506:  XORLW  54
4508:  MOVLB  0
450A:  BZ    4514
450C:  XORLW  07
450E:  BTFSC  FD8.2
4510:  BRA    4610
4512:  BRA    46FC
....................         case 'T':  
....................           if (query) 
4514:  MOVLB  1
4516:  MOVF   xF2,F
4518:  BZ    4566
....................             { 
....................             sprintf(buf, "UT %u\r", setup.UART_Time); 
451A:  MOVLW  01
451C:  MOVWF  xA9
451E:  MOVLW  CA
4520:  MOVWF  xA8
4522:  MOVLW  C0
4524:  MOVWF  FF6
4526:  MOVLW  0C
4528:  MOVWF  FF7
452A:  MOVLW  03
452C:  MOVLB  2
452E:  MOVWF  x45
4530:  MOVLB  0
4532:  CALL   2F60
4536:  MOVFF  FB,230
453A:  MOVLW  1B
453C:  MOVLB  2
453E:  MOVWF  x31
4540:  MOVLB  0
4542:  CALL   30D8
4546:  MOVLW  0D
4548:  MOVLB  2
454A:  MOVWF  x52
454C:  MOVLB  0
454E:  CALL   2F3E
....................             COM1_send_str(buf); 
4552:  MOVLW  01
4554:  MOVLB  2
4556:  MOVWF  x6C
4558:  MOVLW  CA
455A:  MOVWF  x6B
455C:  MOVLB  0
455E:  CALL   20CC
....................             } 
.................... 	            else 
4562:  BRA    4604
4564:  MOVLB  1
.................... 	            { 
.................... 	            val = get_int(); 
4566:  MOVLB  0
4568:  CALL   2A4E
456C:  MOVFF  02,20B
4570:  MOVFF  01,20A
.................... 	            if (val < 240 && val > 10) 
4574:  MOVLB  2
4576:  MOVF   x0B,F
4578:  BNZ   4590
457A:  MOVF   x0A,W
457C:  SUBLW  EF
457E:  BNC   4590
4580:  MOVF   x0B,F
4582:  BNZ   458A
4584:  MOVF   x0A,W
4586:  SUBLW  0A
4588:  BC    4590
.................... 	              { 
.................... 	              setup.UART_Time = val;	               
458A:  MOVFF  20A,FB
.................... 	              } 
.................... 	            else 
458E:  BRA    4606
.................... 	              { 
.................... 				  			COM1_send_str("\r\nFAIL\r\n"); 
4590:  MOVLW  02
4592:  MOVWF  FEA
4594:  MOVLW  13
4596:  MOVWF  FE9
4598:  MOVLW  09
459A:  MOVWF  01
459C:  CLRF   FF7
459E:  MOVLW  00
45A0:  MOVLB  0
45A2:  CALL   097E
45A6:  TBLRD*-
45A8:  TBLRD*+
45AA:  MOVFF  FF5,FEE
45AE:  DECFSZ 01,F
45B0:  BRA    45A8
45B2:  MOVLW  02
45B4:  MOVLB  2
45B6:  MOVWF  x6C
45B8:  MOVLW  13
45BA:  MOVWF  x6B
45BC:  MOVLB  0
45BE:  CALL   20CC
.................... 	              sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
45C2:  MOVLW  01
45C4:  MOVLB  1
45C6:  MOVWF  xA9
45C8:  MOVLW  7D
45CA:  MOVWF  xA8
45CC:  MOVLW  C8
45CE:  MOVWF  FF6
45D0:  MOVLW  0C
45D2:  MOVWF  FF7
45D4:  MOVLW  07
45D6:  MOVLB  2
45D8:  MOVWF  x45
45DA:  MOVLB  0
45DC:  CALL   2F60
45E0:  MOVFF  FB,230
45E4:  MOVLW  1B
45E6:  MOVLB  2
45E8:  MOVWF  x31
45EA:  MOVLB  0
45EC:  CALL   30D8
45F0:  MOVLW  0D
45F2:  MOVLB  2
45F4:  MOVWF  x52
45F6:  MOVLB  0
45F8:  CALL   2F3E
.................... 	              ret = 0; 
45FC:  MOVLB  1
45FE:  CLRF   xC8
.................... 	              break; 
4600:  MOVLB  0
4602:  BRA    46FC
4604:  MOVLB  2
.................... 	              } 
.................... 	            } 
.................... 	            ret = 1; 
4606:  MOVLW  01
4608:  MOVLB  1
460A:  MOVWF  xC8
....................          		  break;  
460C:  MOVLB  0
460E:  BRA    46FC
....................                      
....................         case 'S': 
....................            { 
....................           if (query) 
4610:  MOVLB  1
4612:  MOVF   xF2,F
4614:  BZ    4662
....................             { 
....................             sprintf(buf, "US %u\r",setup.UART_Status); 
4616:  MOVLW  01
4618:  MOVWF  xA9
461A:  MOVLW  CA
461C:  MOVWF  xA8
461E:  MOVLW  D4
4620:  MOVWF  FF6
4622:  MOVLW  0C
4624:  MOVWF  FF7
4626:  MOVLW  03
4628:  MOVLB  2
462A:  MOVWF  x45
462C:  MOVLB  0
462E:  CALL   2F60
4632:  MOVFF  FC,230
4636:  MOVLW  1B
4638:  MOVLB  2
463A:  MOVWF  x31
463C:  MOVLB  0
463E:  CALL   30D8
4642:  MOVLW  0D
4644:  MOVLB  2
4646:  MOVWF  x52
4648:  MOVLB  0
464A:  CALL   2F3E
....................             COM1_send_str(buf); 
464E:  MOVLW  01
4650:  MOVLB  2
4652:  MOVWF  x6C
4654:  MOVLW  CA
4656:  MOVWF  x6B
4658:  MOVLB  0
465A:  CALL   20CC
....................             } 
....................           else 
465E:  BRA    46F6
4660:  MOVLB  1
....................             { 
....................             val = get_int(); 
4662:  MOVLB  0
4664:  CALL   2A4E
4668:  MOVFF  02,20B
466C:  MOVFF  01,20A
....................             if (val < 2) 
4670:  MOVLB  2
4672:  MOVF   x0B,F
4674:  BNZ   4682
4676:  MOVF   x0A,W
4678:  SUBLW  01
467A:  BNC   4682
....................               { 
....................               setup.UART_Status = val; 
467C:  MOVFF  20A,FC
....................               } 
....................             else 
4680:  BRA    46F8
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
4682:  MOVLW  02
4684:  MOVWF  FEA
4686:  MOVLW  13
4688:  MOVWF  FE9
468A:  MOVLW  09
468C:  MOVWF  01
468E:  CLRF   FF7
4690:  MOVLW  00
4692:  MOVLB  0
4694:  CALL   097E
4698:  TBLRD*-
469A:  TBLRD*+
469C:  MOVFF  FF5,FEE
46A0:  DECFSZ 01,F
46A2:  BRA    469A
46A4:  MOVLW  02
46A6:  MOVLB  2
46A8:  MOVWF  x6C
46AA:  MOVLW  13
46AC:  MOVWF  x6B
46AE:  MOVLB  0
46B0:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
46B4:  MOVLW  01
46B6:  MOVLB  1
46B8:  MOVWF  xA9
46BA:  MOVLW  7D
46BC:  MOVWF  xA8
46BE:  MOVLW  DC
46C0:  MOVWF  FF6
46C2:  MOVLW  0C
46C4:  MOVWF  FF7
46C6:  MOVLW  07
46C8:  MOVLB  2
46CA:  MOVWF  x45
46CC:  MOVLB  0
46CE:  CALL   2F60
46D2:  MOVFF  FC,230
46D6:  MOVLW  1B
46D8:  MOVLB  2
46DA:  MOVWF  x31
46DC:  MOVLB  0
46DE:  CALL   30D8
46E2:  MOVLW  0D
46E4:  MOVLB  2
46E6:  MOVWF  x52
46E8:  MOVLB  0
46EA:  CALL   2F3E
....................               ret = 0; 
46EE:  MOVLB  1
46F0:  CLRF   xC8
....................               break; 
46F2:  MOVLB  0
46F4:  BRA    46FC
46F6:  MOVLB  2
....................               } 
....................             } 
....................         break; 
46F8:  MOVLB  0
46FA:  BRA    46FC
....................         } 
....................         break; 
....................         } 
....................       break; 
46FC:  GOTO   5666
....................        
.................... 	 case 'B': // VERSION 3.3 BG Block Ghange and Check Function 23.0.2016 
....................       if (!ttccp_login) break; 
4700:  MOVLB  1
4702:  MOVF   x31,F
4704:  BNZ   470E
4706:  MOVLB  0
4708:  GOTO   5666
470C:  MOVLB  1
....................       switch (c2) 
....................         { 
470E:  MOVF   xF4,W
4710:  XORLW  47
4712:  MOVLB  0
4714:  BZ    4718
4716:  BRA    4850
....................         case 'G':      
....................           if (query) 
4718:  MOVLB  1
471A:  MOVF   xF2,F
471C:  BZ    476A
....................             { 
....................             sprintf(buf, "BG %lu\r", setup.Block_per_second); 
471E:  MOVLW  01
4720:  MOVWF  xA9
4722:  MOVLW  CA
4724:  MOVWF  xA8
4726:  MOVLW  E8
4728:  MOVWF  FF6
472A:  MOVLW  0C
472C:  MOVWF  FF7
472E:  MOVLW  03
4730:  MOVLB  2
4732:  MOVWF  x45
4734:  MOVLB  0
4736:  CALL   2F60
473A:  MOVLW  10
473C:  MOVWF  FE9
473E:  MOVFF  100,231
4742:  MOVFF  FF,230
4746:  CALL   2F88
474A:  MOVLW  0D
474C:  MOVLB  2
474E:  MOVWF  x52
4750:  MOVLB  0
4752:  CALL   2F3E
....................             COM1_send_str(buf); 
4756:  MOVLW  01
4758:  MOVLB  2
475A:  MOVWF  x6C
475C:  MOVLW  CA
475E:  MOVWF  x6B
4760:  MOVLB  0
4762:  CALL   20CC
....................             } 
....................           else 
4766:  BRA    4848
4768:  MOVLB  1
....................             { 
....................             sub = get_int(); 
476A:  MOVLB  0
476C:  CALL   2A4E
4770:  MOVFF  01,00
4774:  MOVFF  02,01
4778:  CLRF   02
477A:  CLRF   03
477C:  MOVFF  03,209
4780:  MOVFF  02,208
4784:  MOVFF  01,207
4788:  MOVFF  00,206
....................             if (sub >= 1 && sub <= 40) 
478C:  MOVLB  2
478E:  MOVF   x09,F
4790:  BNZ   47A0
4792:  MOVF   x08,F
4794:  BNZ   47A0
4796:  MOVF   x07,F
4798:  BNZ   47A0
479A:  MOVF   x06,W
479C:  SUBLW  00
479E:  BC    47D4
47A0:  MOVF   x09,F
47A2:  BNZ   47D4
47A4:  MOVF   x08,F
47A6:  BNZ   47D4
47A8:  MOVF   x07,F
47AA:  BNZ   47D4
47AC:  MOVF   x06,W
47AE:  SUBLW  28
47B0:  BNC   47D4
....................               { 
.................... 	            //sub = sub*10; 
....................               //setup.Block_per_second = sub; 
....................               setup.Block_per_second = convert_power(sub); 
47B2:  MOVFF  207,22D
47B6:  MOVFF  206,22C
47BA:  MOVFF  207,22F
47BE:  MOVFF  206,22E
47C2:  MOVLB  0
47C4:  GOTO   31F2
47C8:  MOVFF  02,100
47CC:  MOVFF  01,FF
....................               } 
....................             else 
47D0:  BRA    4848
47D2:  MOVLB  2
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
47D4:  MOVLW  02
47D6:  MOVWF  FEA
47D8:  MOVLW  13
47DA:  MOVWF  FE9
47DC:  MOVLW  09
47DE:  MOVWF  01
47E0:  CLRF   FF7
47E2:  MOVLW  00
47E4:  MOVLB  0
47E6:  CALL   097E
47EA:  TBLRD*-
47EC:  TBLRD*+
47EE:  MOVFF  FF5,FEE
47F2:  DECFSZ 01,F
47F4:  BRA    47EC
47F6:  MOVLW  02
47F8:  MOVLB  2
47FA:  MOVWF  x6C
47FC:  MOVLW  13
47FE:  MOVWF  x6B
4800:  MOVLB  0
4802:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR BG %lu\r", setup.Block_per_second); 
4806:  MOVLW  01
4808:  MOVLB  1
480A:  MOVWF  xA9
480C:  MOVLW  7D
480E:  MOVWF  xA8
4810:  MOVLW  F0
4812:  MOVWF  FF6
4814:  MOVLW  0C
4816:  MOVWF  FF7
4818:  MOVLW  07
481A:  MOVLB  2
481C:  MOVWF  x45
481E:  MOVLB  0
4820:  CALL   2F60
4824:  MOVLW  10
4826:  MOVWF  FE9
4828:  MOVFF  100,231
482C:  MOVFF  FF,230
4830:  CALL   2F88
4834:  MOVLW  0D
4836:  MOVLB  2
4838:  MOVWF  x52
483A:  MOVLB  0
483C:  CALL   2F3E
....................               ret = 0; 
4840:  MOVLB  1
4842:  CLRF   xC8
....................               break; 
4844:  MOVLB  0
4846:  BRA    4850
....................               } 
....................             } 
....................           ret = 1; 
4848:  MOVLW  01
484A:  MOVLB  1
484C:  MOVWF  xC8
....................           break; 
484E:  MOVLB  0
....................         } 
....................       break; 
4850:  GOTO   5666
....................        
....................       	 
....................     case 'I': 
....................       if (!ttccp_login) break; 
4854:  MOVLB  1
4856:  MOVF   x31,F
4858:  BNZ   4862
485A:  MOVLB  0
485C:  GOTO   5666
4860:  MOVLB  1
....................       switch (c2) 
....................         { 
4862:  MOVF   xF4,W
4864:  XORLW  44
4866:  MOVLB  0
4868:  BZ    4872
486A:  XORLW  07
486C:  BTFSC  FD8.2
486E:  BRA    496A
4870:  BRA    49CA
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
4872:  MOVLB  1
4874:  MOVF   xF2,F
4876:  BZ    48C4
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
4878:  MOVLW  01
487A:  MOVWF  xA9
487C:  MOVLW  CA
487E:  MOVWF  xA8
4880:  MOVLW  FC
4882:  MOVWF  FF6
4884:  MOVLW  0C
4886:  MOVWF  FF7
4888:  MOVLW  03
488A:  MOVLB  2
488C:  MOVWF  x45
488E:  MOVLB  0
4890:  CALL   2F60
4894:  MOVFF  B4,230
4898:  MOVLW  1B
489A:  MOVLB  2
489C:  MOVWF  x31
489E:  MOVLB  0
48A0:  CALL   30D8
48A4:  MOVLW  0D
48A6:  MOVLB  2
48A8:  MOVWF  x52
48AA:  MOVLB  0
48AC:  CALL   2F3E
....................             COM1_send_str(buf); 
48B0:  MOVLW  01
48B2:  MOVLB  2
48B4:  MOVWF  x6C
48B6:  MOVLW  CA
48B8:  MOVWF  x6B
48BA:  MOVLB  0
48BC:  CALL   20CC
....................             } 
....................           else 
48C0:  BRA    4960
48C2:  MOVLB  1
....................             { 
....................             val = get_int(); 
48C4:  MOVLB  0
48C6:  CALL   2A4E
48CA:  MOVFF  02,20B
48CE:  MOVFF  01,20A
....................             if (val < 4) 
48D2:  MOVLB  2
48D4:  MOVF   x0B,F
48D6:  BNZ   48EC
48D8:  MOVF   x0A,W
48DA:  SUBLW  03
48DC:  BNC   48EC
....................               { 
....................               setup.internal_pattern = val; 
48DE:  MOVFF  20A,B4
....................               FPGA_set_reg6(); 
48E2:  MOVLB  0
48E4:  CALL   1832
....................               } 
....................             else 
48E8:  BRA    4960
48EA:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
48EC:  MOVLW  02
48EE:  MOVWF  FEA
48F0:  MOVLW  13
48F2:  MOVWF  FE9
48F4:  MOVLW  09
48F6:  MOVWF  01
48F8:  CLRF   FF7
48FA:  MOVLW  00
48FC:  MOVLB  0
48FE:  CALL   097E
4902:  TBLRD*-
4904:  TBLRD*+
4906:  MOVFF  FF5,FEE
490A:  DECFSZ 01,F
490C:  BRA    4904
490E:  MOVLW  02
4910:  MOVLB  2
4912:  MOVWF  x6C
4914:  MOVLW  13
4916:  MOVWF  x6B
4918:  MOVLB  0
491A:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
491E:  MOVLW  01
4920:  MOVLB  1
4922:  MOVWF  xA9
4924:  MOVLW  7D
4926:  MOVWF  xA8
4928:  MOVLW  04
492A:  MOVWF  FF6
492C:  MOVLW  0D
492E:  MOVWF  FF7
4930:  MOVLW  07
4932:  MOVLB  2
4934:  MOVWF  x45
4936:  MOVLB  0
4938:  CALL   2F60
493C:  MOVFF  B4,230
4940:  MOVLW  1B
4942:  MOVLB  2
4944:  MOVWF  x31
4946:  MOVLB  0
4948:  CALL   30D8
494C:  MOVLW  0D
494E:  MOVLB  2
4950:  MOVWF  x52
4952:  MOVLB  0
4954:  CALL   2F3E
....................               ret = 0; 
4958:  MOVLB  1
495A:  CLRF   xC8
....................               break; 
495C:  MOVLB  0
495E:  BRA    49CA
....................               } 
....................             } 
....................           ret = 1; 
4960:  MOVLW  01
4962:  MOVLB  1
4964:  MOVWF  xC8
....................           break; 
4966:  MOVLB  0
4968:  BRA    49CA
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
496A:  MOVLB  1
496C:  MOVF   xF2,F
496E:  BZ    49BC
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
4970:  MOVLW  01
4972:  MOVWF  xA9
4974:  MOVLW  CA
4976:  MOVWF  xA8
4978:  MOVLW  10
497A:  MOVWF  FF6
497C:  MOVLW  0D
497E:  MOVWF  FF7
4980:  MOVLW  03
4982:  MOVLB  2
4984:  MOVWF  x45
4986:  MOVLB  0
4988:  CALL   2F60
498C:  MOVLW  10
498E:  MOVWF  FE9
4990:  MOVFF  AC,231
4994:  MOVFF  AB,230
4998:  CALL   2F88
499C:  MOVLW  0D
499E:  MOVLB  2
49A0:  MOVWF  x52
49A2:  MOVLB  0
49A4:  CALL   2F3E
....................             COM1_send_str(buf); 
49A8:  MOVLW  01
49AA:  MOVLB  2
49AC:  MOVWF  x6C
49AE:  MOVLW  CA
49B0:  MOVWF  x6B
49B2:  MOVLB  0
49B4:  CALL   20CC
....................             } 
....................           else 
49B8:  BRA    49C2
49BA:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
49BC:  MOVLB  0
49BE:  GOTO   32BA
....................             } 
....................           ret = 1; 
49C2:  MOVLW  01
49C4:  MOVLB  1
49C6:  MOVWF  xC8
....................           break; 
49C8:  MOVLB  0
....................         } 
....................       break; 
49CA:  GOTO   5666
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
49CE:  MOVLB  1
49D0:  MOVF   x31,F
49D2:  BNZ   49DC
49D4:  MOVLB  0
49D6:  GOTO   5666
49DA:  MOVLB  1
....................       if (c2 == 'E') 
49DC:  MOVF   xF4,W
49DE:  SUBLW  45
49E0:  BNZ   49EC
....................         { 
....................             update_temperature_string(); 
49E2:  MOVLB  0
49E4:  CALL   353A
....................             ret = 0; 
49E8:  MOVLB  1
49EA:  CLRF   xC8
....................         } 
....................       break; 
49EC:  MOVLB  0
49EE:  GOTO   5666
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
49F2:  MOVLB  1
49F4:  MOVF   x31,F
49F6:  BNZ   4A00
49F8:  MOVLB  0
49FA:  GOTO   5666
49FE:  MOVLB  1
....................       switch (c2) 
....................         { 
4A00:  MOVF   xF4,W
4A02:  XORLW  45
4A04:  MOVLB  0
4A06:  BZ    4A28
4A08:  XORLW  16
4A0A:  BTFSC  FD8.2
4A0C:  BRA    4B5E
4A0E:  XORLW  1F
4A10:  BTFSC  FD8.2
4A12:  BRA    4C64
4A14:  XORLW  1C
4A16:  BTFSC  FD8.2
4A18:  BRA    4CB0
4A1A:  XORLW  1D
4A1C:  BTFSC  FD8.2
4A1E:  BRA    4D26
4A20:  XORLW  0E
4A22:  BTFSC  FD8.2
4A24:  BRA    4D9C
4A26:  BRA    4E16
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
4A28:  MOVLB  1
4A2A:  MOVF   xF4,W
4A2C:  SUBLW  45
4A2E:  BNZ   4B28
.................... 		{ 
....................           sprintf(buf, "VE %s VS %lu.%lu ID=%02lu DT=%02lu%02u\r",  
....................                 VERSION, ((setup.setup_version >> 8) & 0xff), (setup.setup_version & 0xff), 
....................                 setup.unit_ID, setup.year, setup.week); 
4A30:  MOVFF  102,22C
4A34:  MOVLB  2
4A36:  CLRF   x2D
4A38:  CLRF   x2D
4A3A:  MOVFF  101,22E
4A3E:  MOVLB  2
4A40:  CLRF   x2F
4A42:  MOVLW  01
4A44:  MOVLB  1
4A46:  MOVWF  xA9
4A48:  MOVLW  CA
4A4A:  MOVWF  xA8
4A4C:  MOVLW  18
4A4E:  MOVWF  FF6
4A50:  MOVLW  0D
4A52:  MOVWF  FF7
4A54:  MOVLW  03
4A56:  MOVLB  2
4A58:  MOVWF  x45
4A5A:  MOVLB  0
4A5C:  CALL   2F60
4A60:  MOVLW  A8
4A62:  MOVWF  FF6
4A64:  MOVLW  09
4A66:  MOVWF  FF7
4A68:  GOTO   35D4
4A6C:  MOVLW  1D
4A6E:  MOVWF  FF6
4A70:  MOVLW  0D
4A72:  MOVWF  FF7
4A74:  MOVLW  04
4A76:  MOVLB  2
4A78:  MOVWF  x45
4A7A:  MOVLB  0
4A7C:  CALL   2F60
4A80:  MOVLW  10
4A82:  MOVWF  FE9
4A84:  MOVFF  22D,231
4A88:  MOVFF  22C,230
4A8C:  CALL   2F88
4A90:  MOVLW  2E
4A92:  MOVLB  2
4A94:  MOVWF  x52
4A96:  MOVLB  0
4A98:  CALL   2F3E
4A9C:  MOVLW  10
4A9E:  MOVWF  FE9
4AA0:  MOVFF  22F,231
4AA4:  MOVFF  22E,230
4AA8:  CALL   2F88
4AAC:  MOVLW  28
4AAE:  MOVWF  FF6
4AB0:  MOVLW  0D
4AB2:  MOVWF  FF7
4AB4:  MOVLW  04
4AB6:  MOVLB  2
4AB8:  MOVWF  x45
4ABA:  MOVLB  0
4ABC:  CALL   2F60
4AC0:  MOVLW  0B
4AC2:  MOVWF  FE9
4AC4:  MOVFF  F2,231
4AC8:  MOVFF  F1,230
4ACC:  CALL   2F88
4AD0:  MOVLW  31
4AD2:  MOVWF  FF6
4AD4:  MOVLW  0D
4AD6:  MOVWF  FF7
4AD8:  MOVLW  04
4ADA:  MOVLB  2
4ADC:  MOVWF  x45
4ADE:  MOVLB  0
4AE0:  CALL   2F60
4AE4:  MOVLW  0B
4AE6:  MOVWF  FE9
4AE8:  MOVFF  EF,231
4AEC:  MOVFF  EE,230
4AF0:  CALL   2F88
4AF4:  MOVFF  F0,230
4AF8:  MOVLW  01
4AFA:  MOVLB  2
4AFC:  MOVWF  x31
4AFE:  MOVLB  0
4B00:  CALL   30D8
4B04:  MOVLW  0D
4B06:  MOVLB  2
4B08:  MOVWF  x52
4B0A:  MOVLB  0
4B0C:  CALL   2F3E
....................           COM1_send_str(buf); 
4B10:  MOVLW  01
4B12:  MOVLB  2
4B14:  MOVWF  x6C
4B16:  MOVLW  CA
4B18:  MOVWF  x6B
4B1A:  MOVLB  0
4B1C:  CALL   20CC
....................           ret = 1; 
4B20:  MOVLW  01
4B22:  MOVLB  1
4B24:  MOVWF  xC8
.................... 		} 
.................... 		else 
4B26:  BRA    4B5A
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4B28:  MOVLW  02
4B2A:  MOVWF  FEA
4B2C:  MOVLW  13
4B2E:  MOVWF  FE9
4B30:  MOVLW  09
4B32:  MOVWF  01
4B34:  CLRF   FF7
4B36:  MOVLW  00
4B38:  MOVLB  0
4B3A:  CALL   097E
4B3E:  TBLRD*-
4B40:  TBLRD*+
4B42:  MOVFF  FF5,FEE
4B46:  DECFSZ 01,F
4B48:  BRA    4B40
4B4A:  MOVLW  02
4B4C:  MOVLB  2
4B4E:  MOVWF  x6C
4B50:  MOVLW  13
4B52:  MOVWF  x6B
4B54:  MOVLB  0
4B56:  CALL   20CC
....................           break; 
4B5A:  MOVLB  0
4B5C:  BRA    4E16
....................         case 'S': // set setup version 
....................         { 
....................             if (query) { 
4B5E:  MOVLB  1
4B60:  MOVF   xF2,F
4B62:  BZ    4BD8
....................                 sprintf(buf, "VS %lu%lu\r", (setup.setup_version >> 8) & 0xff, setup.setup_version & 0xff); 
4B64:  MOVFF  102,22C
4B68:  MOVLB  2
4B6A:  CLRF   x2D
4B6C:  CLRF   x2D
4B6E:  MOVFF  101,22E
4B72:  MOVLB  2
4B74:  CLRF   x2F
4B76:  MOVLW  01
4B78:  MOVLB  1
4B7A:  MOVWF  xA9
4B7C:  MOVLW  CA
4B7E:  MOVWF  xA8
4B80:  MOVLW  40
4B82:  MOVWF  FF6
4B84:  MOVLW  0D
4B86:  MOVWF  FF7
4B88:  MOVLW  03
4B8A:  MOVLB  2
4B8C:  MOVWF  x45
4B8E:  MOVLB  0
4B90:  CALL   2F60
4B94:  MOVLW  10
4B96:  MOVWF  FE9
4B98:  MOVFF  22D,231
4B9C:  MOVFF  22C,230
4BA0:  CALL   2F88
4BA4:  MOVLW  10
4BA6:  MOVWF  FE9
4BA8:  MOVFF  22F,231
4BAC:  MOVFF  22E,230
4BB0:  CALL   2F88
4BB4:  MOVLW  0D
4BB6:  MOVLB  2
4BB8:  MOVWF  x52
4BBA:  MOVLB  0
4BBC:  CALL   2F3E
....................                 COM1_send_str(buf); 
4BC0:  MOVLW  01
4BC2:  MOVLB  2
4BC4:  MOVWF  x6C
4BC6:  MOVLW  CA
4BC8:  MOVWF  x6B
4BCA:  MOVLB  0
4BCC:  CALL   20CC
....................                 ret = 1; 
4BD0:  MOVLW  01
4BD2:  MOVLB  1
4BD4:  MOVWF  xC8
....................             } else { 
4BD6:  BRA    4C60
....................                 val = get_int(); 
4BD8:  MOVLB  0
4BDA:  CALL   2A4E
4BDE:  MOVFF  02,20B
4BE2:  MOVFF  01,20A
....................                 if (peek_char() == '.') 
4BE6:  CALL   2974
4BEA:  MOVFF  02,22D
4BEE:  MOVFF  01,22C
4BF2:  MOVLB  2
4BF4:  MOVF   01,W
4BF6:  SUBLW  2E
4BF8:  BNZ   4C2E
4BFA:  MOVF   x2D,F
4BFC:  BNZ   4C2E
....................                 { 
....................                     get_char(); // skip '.' 
4BFE:  MOVLB  0
4C00:  CALL   2992
....................                     rp = get_int(); 
4C04:  CALL   2A4E
4C08:  MOVFF  02,20D
4C0C:  MOVFF  01,20C
....................                     rp += val << 8; 
4C10:  MOVLW  00
4C12:  MOVLB  2
4C14:  ADDWF  x0C,F
4C16:  MOVF   x0A,W
4C18:  ADDWFC x0D,F
....................                     setup.setup_version = rp;    
4C1A:  MOVFF  20D,102
4C1E:  MOVFF  20C,101
....................                     ret = 1;                  
4C22:  MOVLW  01
4C24:  MOVLB  1
4C26:  MOVWF  xC8
....................                     break; 
4C28:  MOVLB  0
4C2A:  BRA    4E16
4C2C:  MOVLB  2
....................                 } 
.................... 			    COM1_send_str("\r\nFAIL\r\n");                 
4C2E:  MOVLW  02
4C30:  MOVWF  FEA
4C32:  MOVLW  13
4C34:  MOVWF  FE9
4C36:  MOVLW  09
4C38:  MOVWF  01
4C3A:  CLRF   FF7
4C3C:  MOVLW  00
4C3E:  MOVLB  0
4C40:  CALL   097E
4C44:  TBLRD*-
4C46:  TBLRD*+
4C48:  MOVFF  FF5,FEE
4C4C:  DECFSZ 01,F
4C4E:  BRA    4C46
4C50:  MOVLW  02
4C52:  MOVLB  2
4C54:  MOVWF  x6C
4C56:  MOVLW  13
4C58:  MOVWF  x6B
4C5A:  MOVLB  0
4C5C:  CALL   20CC
....................             } 
....................             break; 
4C60:  MOVLB  0
4C62:  BRA    4E16
....................         }  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
4C64:  MOVLB  1
4C66:  MOVF   xF4,W
4C68:  SUBLW  4C
4C6A:  BNZ   4C7A
.................... 		{ 
....................           set_low_power_level(); 
4C6C:  MOVLB  0
4C6E:  GOTO   35F6
....................           ret = 1; 
4C72:  MOVLW  01
4C74:  MOVLB  1
4C76:  MOVWF  xC8
.................... 		} 
.................... 		else 
4C78:  BRA    4CAC
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
4C7A:  MOVLW  02
4C7C:  MOVWF  FEA
4C7E:  MOVLW  13
4C80:  MOVWF  FE9
4C82:  MOVLW  09
4C84:  MOVWF  01
4C86:  CLRF   FF7
4C88:  MOVLW  00
4C8A:  MOVLB  0
4C8C:  CALL   097E
4C90:  TBLRD*-
4C92:  TBLRD*+
4C94:  MOVFF  FF5,FEE
4C98:  DECFSZ 01,F
4C9A:  BRA    4C92
4C9C:  MOVLW  02
4C9E:  MOVLB  2
4CA0:  MOVWF  x6C
4CA2:  MOVLW  13
4CA4:  MOVWF  x6B
4CA6:  MOVLB  0
4CA8:  CALL   20CC
....................           break; 
4CAC:  MOVLB  0
4CAE:  BRA    4E16
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
4CB0:  MOVLB  1
4CB2:  MOVF   xF2,F
4CB4:  BZ    4D16
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4CB6:  MOVLW  14
4CB8:  MOVLB  0
4CBA:  ADDWF  xBB,W
4CBC:  MOVLB  2
4CBE:  MOVWF  x2C
4CC0:  MOVLW  00
4CC2:  MOVLB  0
4CC4:  ADDWFC xBC,W
4CC6:  MOVLB  2
4CC8:  MOVWF  x2D
4CCA:  MOVLW  01
4CCC:  MOVLB  1
4CCE:  MOVWF  xA9
4CD0:  MOVLW  CA
4CD2:  MOVWF  xA8
4CD4:  MOVLW  4C
4CD6:  MOVWF  FF6
4CD8:  MOVLW  0D
4CDA:  MOVWF  FF7
4CDC:  MOVLW  03
4CDE:  MOVLB  2
4CE0:  MOVWF  x45
4CE2:  MOVLB  0
4CE4:  CALL   2F60
4CE8:  MOVLW  10
4CEA:  MOVWF  FE9
4CEC:  MOVFF  22D,231
4CF0:  MOVFF  22C,230
4CF4:  CALL   2F88
4CF8:  MOVLW  0D
4CFA:  MOVLB  2
4CFC:  MOVWF  x52
4CFE:  MOVLB  0
4D00:  CALL   2F3E
....................             COM1_send_str(buf); 
4D04:  MOVLW  01
4D06:  MOVLB  2
4D08:  MOVWF  x6C
4D0A:  MOVLW  CA
4D0C:  MOVWF  x6B
4D0E:  MOVLB  0
4D10:  CALL   20CC
....................             } 
....................           else 
4D14:  BRA    4D1C
....................             set_power_level(); 
4D16:  MOVLB  0
4D18:  GOTO   366A
....................             ret = 1; 
4D1C:  MOVLW  01
4D1E:  MOVLB  1
4D20:  MOVWF  xC8
....................           break; 
4D22:  MOVLB  0
4D24:  BRA    4E16
....................  
....................         case 'M': // manual power level 
....................           if (query) 
4D26:  MOVLB  1
4D28:  MOVF   xF2,F
4D2A:  BZ    4D78
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
4D2C:  MOVLW  01
4D2E:  MOVWF  xA9
4D30:  MOVLW  CA
4D32:  MOVWF  xA8
4D34:  MOVLW  54
4D36:  MOVWF  FF6
4D38:  MOVLW  0D
4D3A:  MOVWF  FF7
4D3C:  MOVLW  03
4D3E:  MOVLB  2
4D40:  MOVWF  x45
4D42:  MOVLB  0
4D44:  CALL   2F60
4D48:  MOVLW  10
4D4A:  MOVWF  FE9
4D4C:  MOVFF  23,231
4D50:  MOVFF  22,230
4D54:  CALL   2F88
4D58:  MOVLW  0D
4D5A:  MOVLB  2
4D5C:  MOVWF  x52
4D5E:  MOVLB  0
4D60:  CALL   2F3E
....................             COM1_send_str(buf); 
4D64:  MOVLW  01
4D66:  MOVLB  2
4D68:  MOVWF  x6C
4D6A:  MOVLW  CA
4D6C:  MOVWF  x6B
4D6E:  MOVLB  0
4D70:  CALL   20CC
....................             } 
....................           else 
4D74:  BRA    4D9A
4D76:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
4D78:  MOVLB  0
4D7A:  CALL   2A4E
4D7E:  MOVFF  02,23
4D82:  MOVFF  01,22
....................             set_AD5312(DAC_NEG_VOLT, val); 
4D86:  MOVLW  01
4D88:  MOVLB  2
4D8A:  MOVWF  x32
4D8C:  MOVFF  20B,234
4D90:  MOVFF  20A,233
4D94:  MOVLB  0
4D96:  CALL   0FCC
....................             } 
....................           break; 
4D9A:  BRA    4E16
....................         case 'C': // manual power level 
....................           if (query) 
4D9C:  MOVLB  1
4D9E:  MOVF   xF2,F
4DA0:  BZ    4DEE
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
4DA2:  MOVLW  01
4DA4:  MOVWF  xA9
4DA6:  MOVLW  CA
4DA8:  MOVWF  xA8
4DAA:  MOVLW  5C
4DAC:  MOVWF  FF6
4DAE:  MOVLW  0D
4DB0:  MOVWF  FF7
4DB2:  MOVLW  03
4DB4:  MOVLB  2
4DB6:  MOVWF  x45
4DB8:  MOVLB  0
4DBA:  CALL   2F60
4DBE:  MOVLW  10
4DC0:  MOVWF  FE9
4DC2:  MOVFF  25,231
4DC6:  MOVFF  24,230
4DCA:  CALL   2F88
4DCE:  MOVLW  0D
4DD0:  MOVLB  2
4DD2:  MOVWF  x52
4DD4:  MOVLB  0
4DD6:  CALL   2F3E
....................             COM1_send_str(buf); 
4DDA:  MOVLW  01
4DDC:  MOVLB  2
4DDE:  MOVWF  x6C
4DE0:  MOVLW  CA
4DE2:  MOVWF  x6B
4DE4:  MOVLB  0
4DE6:  CALL   20CC
....................             } 
....................           else 
4DEA:  BRA    4E16
4DEC:  MOVLB  1
....................             { 
....................             val = get_int(); 
4DEE:  MOVLB  0
4DF0:  CALL   2A4E
4DF4:  MOVFF  02,20B
4DF8:  MOVFF  01,20A
....................             manual_pos = val; 
4DFC:  MOVFF  20B,25
4E00:  MOVFF  20A,24
....................             set_AD5312(DAC_POS_VOLT, val); 
4E04:  MOVLB  2
4E06:  CLRF   x32
4E08:  MOVFF  20B,234
4E0C:  MOVFF  20A,233
4E10:  MOVLB  0
4E12:  CALL   0FCC
....................             } 
....................           break; 
.................... 		} 
....................       break; 
4E16:  GOTO   5666
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
4E1A:  MOVLB  1
4E1C:  MOVF   x31,F
4E1E:  BNZ   4E28
4E20:  MOVLB  0
4E22:  GOTO   5666
4E26:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
4E28:  MOVF   xF4,W
4E2A:  SUBLW  53
4E2C:  BTFSS  FD8.2
4E2E:  BRA    4F24
....................         { 
....................           if (query) 
4E30:  MOVF   xF2,F
4E32:  BZ    4E80
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
4E34:  MOVLW  01
4E36:  MOVWF  xA9
4E38:  MOVLW  CA
4E3A:  MOVWF  xA8
4E3C:  MOVLW  64
4E3E:  MOVWF  FF6
4E40:  MOVLW  0D
4E42:  MOVWF  FF7
4E44:  MOVLW  03
4E46:  MOVLB  2
4E48:  MOVWF  x45
4E4A:  MOVLB  0
4E4C:  CALL   2F60
4E50:  MOVFF  B2,230
4E54:  MOVLW  1B
4E56:  MOVLB  2
4E58:  MOVWF  x31
4E5A:  MOVLB  0
4E5C:  CALL   30D8
4E60:  MOVLW  0D
4E62:  MOVLB  2
4E64:  MOVWF  x52
4E66:  MOVLB  0
4E68:  CALL   2F3E
....................             COM1_send_str(buf); 
4E6C:  MOVLW  01
4E6E:  MOVLB  2
4E70:  MOVWF  x6C
4E72:  MOVLW  CA
4E74:  MOVWF  x6B
4E76:  MOVLB  0
4E78:  CALL   20CC
....................             } 
....................           else 
4E7C:  BRA    4F1C
4E7E:  MOVLB  1
....................             { 
....................             val = get_int(); 
4E80:  MOVLB  0
4E82:  CALL   2A4E
4E86:  MOVFF  02,20B
4E8A:  MOVFF  01,20A
....................             if (val < 2) 
4E8E:  MOVLB  2
4E90:  MOVF   x0B,F
4E92:  BNZ   4EA8
4E94:  MOVF   x0A,W
4E96:  SUBLW  01
4E98:  BNC   4EA8
....................               { 
....................               setup.clock_source = val; 
4E9A:  MOVFF  20A,B2
....................               FPGA_set_reg6(); 
4E9E:  MOVLB  0
4EA0:  CALL   1832
....................               } 
....................             else 
4EA4:  BRA    4F1C
4EA6:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4EA8:  MOVLW  02
4EAA:  MOVWF  FEA
4EAC:  MOVLW  13
4EAE:  MOVWF  FE9
4EB0:  MOVLW  09
4EB2:  MOVWF  01
4EB4:  CLRF   FF7
4EB6:  MOVLW  00
4EB8:  MOVLB  0
4EBA:  CALL   097E
4EBE:  TBLRD*-
4EC0:  TBLRD*+
4EC2:  MOVFF  FF5,FEE
4EC6:  DECFSZ 01,F
4EC8:  BRA    4EC0
4ECA:  MOVLW  02
4ECC:  MOVLB  2
4ECE:  MOVWF  x6C
4ED0:  MOVLW  13
4ED2:  MOVWF  x6B
4ED4:  MOVLB  0
4ED6:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
4EDA:  MOVLW  01
4EDC:  MOVLB  1
4EDE:  MOVWF  xA9
4EE0:  MOVLW  7D
4EE2:  MOVWF  xA8
4EE4:  MOVLW  6C
4EE6:  MOVWF  FF6
4EE8:  MOVLW  0D
4EEA:  MOVWF  FF7
4EEC:  MOVLW  07
4EEE:  MOVLB  2
4EF0:  MOVWF  x45
4EF2:  MOVLB  0
4EF4:  CALL   2F60
4EF8:  MOVFF  B2,230
4EFC:  MOVLW  1B
4EFE:  MOVLB  2
4F00:  MOVWF  x31
4F02:  MOVLB  0
4F04:  CALL   30D8
4F08:  MOVLW  0D
4F0A:  MOVLB  2
4F0C:  MOVWF  x52
4F0E:  MOVLB  0
4F10:  CALL   2F3E
....................               ret = 0; 
4F14:  MOVLB  1
4F16:  CLRF   xC8
....................               break; 
4F18:  MOVLB  0
4F1A:  BRA    5666
....................               } 
....................             } 
....................  
....................         ret = 1; 
4F1C:  MOVLW  01
4F1E:  MOVLB  1
4F20:  MOVWF  xC8
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
4F22:  BRA    501E
4F24:  MOVF   xF4,W
4F26:  SUBLW  50
4F28:  BTFSS  FD8.2
4F2A:  BRA    501E
....................         { 
....................           if (query) 
4F2C:  MOVF   xF2,F
4F2E:  BZ    4F7C
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
4F30:  MOVLW  01
4F32:  MOVWF  xA9
4F34:  MOVLW  CA
4F36:  MOVWF  xA8
4F38:  MOVLW  78
4F3A:  MOVWF  FF6
4F3C:  MOVLW  0D
4F3E:  MOVWF  FF7
4F40:  MOVLW  03
4F42:  MOVLB  2
4F44:  MOVWF  x45
4F46:  MOVLB  0
4F48:  CALL   2F60
4F4C:  MOVFF  B0,230
4F50:  MOVLW  1B
4F52:  MOVLB  2
4F54:  MOVWF  x31
4F56:  MOVLB  0
4F58:  CALL   30D8
4F5C:  MOVLW  0D
4F5E:  MOVLB  2
4F60:  MOVWF  x52
4F62:  MOVLB  0
4F64:  CALL   2F3E
....................             COM1_send_str(buf); 
4F68:  MOVLW  01
4F6A:  MOVLB  2
4F6C:  MOVWF  x6C
4F6E:  MOVLW  CA
4F70:  MOVWF  x6B
4F72:  MOVLB  0
4F74:  CALL   20CC
....................             } 
....................           else 
4F78:  BRA    5018
4F7A:  MOVLB  1
....................             { 
....................             val = get_int(); 
4F7C:  MOVLB  0
4F7E:  CALL   2A4E
4F82:  MOVFF  02,20B
4F86:  MOVFF  01,20A
....................             if (val < 2) 
4F8A:  MOVLB  2
4F8C:  MOVF   x0B,F
4F8E:  BNZ   4FA4
4F90:  MOVF   x0A,W
4F92:  SUBLW  01
4F94:  BNC   4FA4
....................               { 
....................               setup.clock_polarity = val; 
4F96:  MOVFF  20A,B0
....................               FPGA_set_reg0(); 
4F9A:  MOVLB  0
4F9C:  CALL   17D6
....................               } 
....................             else 
4FA0:  BRA    5018
4FA2:  MOVLB  2
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4FA4:  MOVLW  02
4FA6:  MOVWF  FEA
4FA8:  MOVLW  13
4FAA:  MOVWF  FE9
4FAC:  MOVLW  09
4FAE:  MOVWF  01
4FB0:  CLRF   FF7
4FB2:  MOVLW  00
4FB4:  MOVLB  0
4FB6:  CALL   097E
4FBA:  TBLRD*-
4FBC:  TBLRD*+
4FBE:  MOVFF  FF5,FEE
4FC2:  DECFSZ 01,F
4FC4:  BRA    4FBC
4FC6:  MOVLW  02
4FC8:  MOVLB  2
4FCA:  MOVWF  x6C
4FCC:  MOVLW  13
4FCE:  MOVWF  x6B
4FD0:  MOVLB  0
4FD2:  CALL   20CC
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4FD6:  MOVLW  01
4FD8:  MOVLB  1
4FDA:  MOVWF  xA9
4FDC:  MOVLW  7D
4FDE:  MOVWF  xA8
4FE0:  MOVLW  80
4FE2:  MOVWF  FF6
4FE4:  MOVLW  0D
4FE6:  MOVWF  FF7
4FE8:  MOVLW  07
4FEA:  MOVLB  2
4FEC:  MOVWF  x45
4FEE:  MOVLB  0
4FF0:  CALL   2F60
4FF4:  MOVFF  B0,230
4FF8:  MOVLW  1B
4FFA:  MOVLB  2
4FFC:  MOVWF  x31
4FFE:  MOVLB  0
5000:  CALL   30D8
5004:  MOVLW  0D
5006:  MOVLB  2
5008:  MOVWF  x52
500A:  MOVLB  0
500C:  CALL   2F3E
....................               ret = 0; 
5010:  MOVLB  1
5012:  CLRF   xC8
....................               break; 
5014:  MOVLB  0
5016:  BRA    5666
....................               } 
....................             } 
....................  
....................         ret = 1; 
5018:  MOVLW  01
501A:  MOVLB  1
501C:  MOVWF  xC8
....................         } 
....................       break; 
501E:  MOVLB  0
5020:  BRA    5666
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
5022:  MOVLB  1
5024:  MOVF   x31,F
5026:  BNZ   502E
5028:  MOVLB  0
502A:  BRA    5666
502C:  MOVLB  1
....................       switch (c2) 
....................         { 
502E:  MOVF   xF4,W
5030:  XORLW  50
5032:  MOVLB  0
5034:  BZ    5040
5036:  XORLW  04
5038:  BZ    50B4
503A:  XORLW  06
503C:  BZ    50C0
503E:  BRA    5132
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
5040:  MOVLW  14
5042:  MOVWF  01
5044:  MOVF   FC2,W
5046:  ANDLW  83
5048:  IORWF  01,W
504A:  MOVWF  FC2
....................           delay_us(50); 
504C:  MOVLW  42
504E:  MOVWF  00
5050:  DECFSZ 00,F
5052:  BRA    5050
5054:  NOP   
....................           val = read_adc(); 
5056:  BSF    FC2.1
5058:  BTFSC  FC2.1
505A:  BRA    5058
505C:  MOVFF  FC4,20B
5060:  MOVLB  2
5062:  MOVFF  FC3,20A
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
5066:  MOVLW  01
5068:  MOVLB  1
506A:  MOVWF  xA9
506C:  MOVLW  7D
506E:  MOVWF  xA8
5070:  MOVLW  8C
5072:  MOVWF  FF6
5074:  MOVLW  0D
5076:  MOVWF  FF7
5078:  MOVLW  04
507A:  MOVLB  2
507C:  MOVWF  x45
507E:  MOVLB  0
5080:  CALL   2F60
5084:  MOVLW  10
5086:  MOVWF  FE9
5088:  MOVFF  20B,231
508C:  MOVFF  20A,230
5090:  CALL   2F88
5094:  MOVLW  0D
5096:  MOVLB  2
5098:  MOVWF  x52
509A:  MOVLB  0
509C:  CALL   2F3E
50A0:  MOVLW  0A
50A2:  MOVLB  2
50A4:  MOVWF  x52
50A6:  MOVLB  0
50A8:  CALL   2F3E
....................           ret = 0; 
50AC:  MOVLB  1
50AE:  CLRF   xC8
....................           break; 
50B0:  MOVLB  0
50B2:  BRA    5132
....................         case 'T': 
....................             update_temperature_string(); 
50B4:  CALL   353A
....................             ret = 0; 
50B8:  MOVLB  1
50BA:  CLRF   xC8
....................             break; 
50BC:  MOVLB  0
50BE:  BRA    5132
....................  
....................         case 'R': 
....................             set_adc_channel(A2D_PREV); // select forward power input 
50C0:  MOVLW  10
50C2:  MOVWF  01
50C4:  MOVF   FC2,W
50C6:  ANDLW  83
50C8:  IORWF  01,W
50CA:  MOVWF  FC2
....................             delay_us(20); 
50CC:  MOVLW  1A
50CE:  MOVWF  00
50D0:  DECFSZ 00,F
50D2:  BRA    50D0
50D4:  NOP   
....................             val = read_adc(); 
50D6:  BSF    FC2.1
50D8:  BTFSC  FC2.1
50DA:  BRA    50D8
50DC:  MOVFF  FC4,20B
50E0:  MOVLB  2
50E2:  MOVFF  FC3,20A
....................             sprintf(ttccp_error_message, "\nGR %lu\r\n", val); 
50E6:  MOVLW  01
50E8:  MOVLB  1
50EA:  MOVWF  xA9
50EC:  MOVLW  7D
50EE:  MOVWF  xA8
50F0:  MOVLW  96
50F2:  MOVWF  FF6
50F4:  MOVLW  0D
50F6:  MOVWF  FF7
50F8:  MOVLW  04
50FA:  MOVLB  2
50FC:  MOVWF  x45
50FE:  MOVLB  0
5100:  CALL   2F60
5104:  MOVLW  10
5106:  MOVWF  FE9
5108:  MOVFF  20B,231
510C:  MOVFF  20A,230
5110:  CALL   2F88
5114:  MOVLW  0D
5116:  MOVLB  2
5118:  MOVWF  x52
511A:  MOVLB  0
511C:  CALL   2F3E
5120:  MOVLW  0A
5122:  MOVLB  2
5124:  MOVWF  x52
5126:  MOVLB  0
5128:  CALL   2F3E
....................       			ret = 0; 
512C:  MOVLB  1
512E:  CLRF   xC8
5130:  MOVLB  0
....................             } 
....................           break; 
5132:  BRA    5666
....................       break; 
5134:  BRA    5666
....................  
....................       case 'Q': //statusl      if (!ttccp_login) break; 
....................  
....................         COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
5136:  MOVLW  02
5138:  MOVWF  FEA
513A:  MOVLW  13
513C:  MOVWF  FE9
513E:  MOVLW  19
5140:  MOVWF  01
5142:  CLRF   FF7
5144:  MOVLW  00
5146:  CALL   09B6
514A:  TBLRD*-
514C:  TBLRD*+
514E:  MOVFF  FF5,FEE
5152:  DECFSZ 01,F
5154:  BRA    514C
5156:  MOVLW  02
5158:  MOVLB  2
515A:  MOVWF  x6C
515C:  MOVLW  13
515E:  MOVWF  x6B
5160:  MOVLB  0
5162:  CALL   20CC
....................         COM1_send_str(VERSION); 
5166:  MOVLW  02
5168:  MOVWF  FEA
516A:  MOVLW  13
516C:  MOVWF  FE9
516E:  MOVLW  0E
5170:  MOVWF  01
5172:  CLRF   FF7
5174:  MOVLW  00
5176:  CALL   0998
517A:  TBLRD*-
517C:  TBLRD*+
517E:  MOVFF  FF5,FEE
5182:  DECFSZ 01,F
5184:  BRA    517C
5186:  MOVLW  02
5188:  MOVLB  2
518A:  MOVWF  x6C
518C:  MOVLW  13
518E:  MOVWF  x6B
5190:  MOVLB  0
5192:  CALL   20CC
....................         sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................                 setup.unit_ID, setup.year, setup.week); 
5196:  MOVLW  01
5198:  MOVLB  1
519A:  MOVWF  xA9
519C:  MOVLW  CA
519E:  MOVWF  xA8
51A0:  MOVLW  A0
51A2:  MOVWF  FF6
51A4:  MOVLW  0D
51A6:  MOVWF  FF7
51A8:  MOVLW  05
51AA:  MOVLB  2
51AC:  MOVWF  x45
51AE:  MOVLB  0
51B0:  CALL   2F60
51B4:  MOVLW  10
51B6:  MOVWF  FE9
51B8:  MOVFF  F2,231
51BC:  MOVFF  F1,230
51C0:  CALL   2F88
51C4:  MOVLW  A8
51C6:  MOVWF  FF6
51C8:  MOVLW  0D
51CA:  MOVWF  FF7
51CC:  MOVLW  04
51CE:  MOVLB  2
51D0:  MOVWF  x45
51D2:  MOVLB  0
51D4:  CALL   2F60
51D8:  MOVLW  0B
51DA:  MOVWF  FE9
51DC:  MOVFF  EF,231
51E0:  MOVFF  EE,230
51E4:  CALL   2F88
51E8:  MOVFF  F0,230
51EC:  MOVLW  01
51EE:  MOVLB  2
51F0:  MOVWF  x31
51F2:  MOVLB  0
51F4:  CALL   30D8
51F8:  MOVLW  0D
51FA:  MOVLB  2
51FC:  MOVWF  x52
51FE:  MOVLB  0
5200:  CALL   2F3E
....................         COM1_send_str(buf); 
5204:  MOVLW  01
5206:  MOVLB  2
5208:  MOVWF  x6C
520A:  MOVLW  CA
520C:  MOVWF  x6B
520E:  MOVLB  0
5210:  CALL   20CC
....................  
....................         set_adc_channel(A2D_PREV); // select forward power input 
5214:  MOVLW  10
5216:  MOVWF  01
5218:  MOVF   FC2,W
521A:  ANDLW  83
521C:  IORWF  01,W
521E:  MOVWF  FC2
....................         delay_us(20); 
5220:  MOVLW  1A
5222:  MOVWF  00
5224:  DECFSZ 00,F
5226:  BRA    5224
5228:  NOP   
....................         revp = read_adc(); 
522A:  BSF    FC2.1
522C:  BTFSC  FC2.1
522E:  BRA    522C
5230:  MOVFF  FC4,106
5234:  MOVLB  1
5236:  MOVFF  FC3,105
....................  
....................         if (revp <= 580) 
523A:  MOVF   x06,W
523C:  SUBLW  02
523E:  BNC   5268
5240:  BNZ   5248
5242:  MOVF   x05,W
5244:  SUBLW  44
5246:  BNC   5268
....................             strcpy(revstat, "GOOD"); 
5248:  MOVLW  01
524A:  MOVWF  FEA
524C:  MOVLW  F5
524E:  MOVWF  FE9
5250:  MOVLW  00
5252:  MOVLB  0
5254:  CALL   09E0
5258:  TBLRD*-
525A:  TBLRD*+
525C:  MOVF   FF5,W
525E:  MOVWF  FEE
5260:  IORLW  00
5262:  BNZ   525A
....................         else 
5264:  BRA    5284
5266:  MOVLB  1
....................             strcpy(revstat, "BAD"); 
5268:  MOVLW  01
526A:  MOVWF  FEA
526C:  MOVLW  F5
526E:  MOVWF  FE9
5270:  MOVLW  00
5272:  MOVLB  0
5274:  CALL   09F6
5278:  TBLRD*-
527A:  TBLRD*+
527C:  MOVF   FF5,W
527E:  MOVWF  FEE
5280:  IORLW  00
5282:  BNZ   527A
....................      
....................         if(setup.rp) 
5284:  MOVF   xF9,W
5286:  IORWF  xFA,W
5288:  BZ    5292
....................           rp=0; 
528A:  MOVLB  2
528C:  CLRF   x0D
528E:  CLRF   x0C
....................         else 
5290:  BRA    529A
....................           rp=1; 
5292:  MOVLB  2
5294:  CLRF   x0D
5296:  MOVLW  01
5298:  MOVWF  x0C
....................  
....................      
....................           sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................                   setup.frequency, revstat, current_power, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
529A:  MOVFF  AC,22F
529E:  MOVFF  AB,22E
52A2:  CLRF   x31
52A4:  MOVLW  64
52A6:  MOVWF  x30
52A8:  MOVLB  0
52AA:  CALL   36DE
52AE:  MOVFF  02,22D
52B2:  MOVFF  01,22C
52B6:  MOVFF  AC,22F
52BA:  MOVFF  AB,22E
52BE:  MOVLB  2
52C0:  CLRF   x31
52C2:  MOVLW  64
52C4:  MOVWF  x30
52C6:  MOVLB  0
52C8:  CALL   36DE
52CC:  MOVFF  00,22E
52D0:  MOVFF  03,22F
52D4:  MOVLW  01
52D6:  MOVLB  1
52D8:  MOVWF  xA9
52DA:  MOVLW  CA
52DC:  MOVWF  xA8
52DE:  MOVLW  B8
52E0:  MOVWF  FF6
52E2:  MOVLW  0D
52E4:  MOVWF  FF7
52E6:  MOVLW  08
52E8:  MOVLB  2
52EA:  MOVWF  x45
52EC:  MOVLB  0
52EE:  CALL   2F60
52F2:  MOVLW  10
52F4:  MOVWF  FE9
52F6:  MOVFF  BA,231
52FA:  MOVFF  B9,230
52FE:  CALL   2F88
5302:  MOVLW  C3
5304:  MOVWF  FF6
5306:  MOVLW  0D
5308:  MOVWF  FF7
530A:  MOVLW  06
530C:  MOVLB  2
530E:  MOVWF  x45
5310:  MOVLB  0
5312:  CALL   2F60
5316:  MOVLW  01
5318:  MOVWF  FEA
531A:  MOVLW  F5
531C:  MOVWF  FE9
531E:  GOTO   3724
5322:  MOVLW  CB
5324:  MOVWF  FF6
5326:  MOVLW  0D
5328:  MOVWF  FF7
532A:  MOVLW  07
532C:  MOVLB  2
532E:  MOVWF  x45
5330:  MOVLB  0
5332:  CALL   2F60
5336:  MOVLW  10
5338:  MOVWF  FE9
533A:  MOVFF  10A,231
533E:  MOVFF  109,230
5342:  CALL   2F88
5346:  MOVLW  D5
5348:  MOVWF  FF6
534A:  MOVLW  0D
534C:  MOVWF  FF7
534E:  MOVLW  05
5350:  MOVLB  2
5352:  MOVWF  x45
5354:  MOVLB  0
5356:  CALL   2F60
535A:  MOVLW  10
535C:  MOVWF  FE9
535E:  MOVFF  22D,231
5362:  MOVFF  22C,230
5366:  CALL   2F88
536A:  MOVLW  2E
536C:  MOVLB  2
536E:  MOVWF  x52
5370:  MOVLB  0
5372:  CALL   2F3E
5376:  MOVLW  10
5378:  MOVWF  FE9
537A:  MOVFF  22F,231
537E:  MOVFF  22E,230
5382:  CALL   2F88
5386:  MOVLW  E1
5388:  MOVWF  FF6
538A:  MOVLW  0D
538C:  MOVWF  FF7
538E:  MOVLW  09
5390:  MOVLB  2
5392:  MOVWF  x45
5394:  MOVLB  0
5396:  CALL   2F60
539A:  MOVFF  AF,230
539E:  MOVLW  1B
53A0:  MOVLB  2
53A2:  MOVWF  x31
53A4:  MOVLB  0
53A6:  CALL   30D8
53AA:  MOVLW  EC
53AC:  MOVWF  FF6
53AE:  MOVLW  0D
53B0:  MOVWF  FF7
53B2:  MOVLW  05
53B4:  MOVLB  2
53B6:  MOVWF  x45
53B8:  MOVLB  0
53BA:  CALL   2F60
53BE:  MOVFF  B2,230
53C2:  MOVLW  1B
53C4:  MOVLB  2
53C6:  MOVWF  x31
53C8:  MOVLB  0
53CA:  CALL   30D8
53CE:  MOVLW  F3
53D0:  MOVWF  FF6
53D2:  MOVLW  0D
53D4:  MOVWF  FF7
53D6:  MOVLW  05
53D8:  MOVLB  2
53DA:  MOVWF  x45
53DC:  MOVLB  0
53DE:  CALL   2F60
53E2:  MOVLW  10
53E4:  MOVWF  FE9
53E6:  MOVFF  AE,231
53EA:  MOVFF  AD,230
53EE:  CALL   2F88
53F2:  MOVLW  0D
53F4:  MOVLB  2
53F6:  MOVWF  x52
53F8:  MOVLB  0
53FA:  CALL   2F3E
....................           COM1_send_str(buf); 
53FE:  MOVLW  01
5400:  MOVLB  2
5402:  MOVWF  x6C
5404:  MOVLW  CA
5406:  MOVWF  x6B
5408:  MOVLB  0
540A:  CALL   20CC
....................      
....................           sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                     setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                             setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                             setup.clock_polarity); 
540E:  MOVLW  14
5410:  ADDWF  xF3,W
5412:  MOVLB  2
5414:  MOVWF  x2C
5416:  MOVLW  00
5418:  MOVLB  0
541A:  ADDWFC xF4,W
541C:  MOVLB  2
541E:  MOVWF  x2D
5420:  MOVLW  01
5422:  MOVLB  1
5424:  MOVWF  xA9
5426:  MOVLW  CA
5428:  MOVWF  xA8
542A:  MOVLW  FE
542C:  MOVWF  FF6
542E:  MOVLW  0D
5430:  MOVWF  FF7
5432:  MOVLW  06
5434:  MOVLB  2
5436:  MOVWF  x45
5438:  MOVLB  0
543A:  CALL   2F60
543E:  MOVFF  B7,230
5442:  MOVLW  1B
5444:  MOVLB  2
5446:  MOVWF  x31
5448:  MOVLB  0
544A:  CALL   30D8
544E:  MOVLW  06
5450:  MOVWF  FF6
5452:  MOVLW  0E
5454:  MOVWF  FF7
5456:  MOVLW  05
5458:  MOVLB  2
545A:  MOVWF  x45
545C:  MOVLB  0
545E:  CALL   2F60
5462:  MOVFF  B5,230
5466:  MOVLW  1B
5468:  MOVLB  2
546A:  MOVWF  x31
546C:  MOVLB  0
546E:  CALL   30D8
5472:  MOVLW  0D
5474:  MOVWF  FF6
5476:  MOVLW  0E
5478:  MOVWF  FF7
547A:  MOVLW  05
547C:  MOVLB  2
547E:  MOVWF  x45
5480:  MOVLB  0
5482:  CALL   2F60
5486:  MOVFF  B1,230
548A:  MOVLW  1B
548C:  MOVLB  2
548E:  MOVWF  x31
5490:  MOVLB  0
5492:  CALL   30D8
5496:  MOVLW  14
5498:  MOVWF  FF6
549A:  MOVLW  0E
549C:  MOVWF  FF7
549E:  MOVLW  05
54A0:  MOVLB  2
54A2:  MOVWF  x45
54A4:  MOVLB  0
54A6:  CALL   2F60
54AA:  MOVLW  10
54AC:  MOVWF  FE9
54AE:  MOVFF  20D,231
54B2:  MOVFF  20C,230
54B6:  CALL   2F88
54BA:  MOVLW  1C
54BC:  MOVWF  FF6
54BE:  MOVLW  0E
54C0:  MOVWF  FF7
54C2:  MOVLW  05
54C4:  MOVLB  2
54C6:  MOVWF  x45
54C8:  MOVLB  0
54CA:  CALL   2F60
54CE:  MOVFF  B3,230
54D2:  MOVLW  1B
54D4:  MOVLB  2
54D6:  MOVWF  x31
54D8:  MOVLB  0
54DA:  CALL   30D8
54DE:  MOVLW  23
54E0:  MOVWF  FF6
54E2:  MOVLW  0E
54E4:  MOVWF  FF7
54E6:  MOVLW  05
54E8:  MOVLB  2
54EA:  MOVWF  x45
54EC:  MOVLB  0
54EE:  CALL   2F60
54F2:  MOVFF  B4,230
54F6:  MOVLW  1B
54F8:  MOVLB  2
54FA:  MOVWF  x31
54FC:  MOVLB  0
54FE:  CALL   30D8
5502:  MOVLW  2A
5504:  MOVWF  FF6
5506:  MOVLW  0E
5508:  MOVWF  FF7
550A:  MOVLW  05
550C:  MOVLB  2
550E:  MOVWF  x45
5510:  MOVLB  0
5512:  CALL   2F60
5516:  MOVLW  10
5518:  MOVWF  FE9
551A:  MOVFF  22D,231
551E:  MOVFF  22C,230
5522:  CALL   2F88
5526:  MOVLW  32
5528:  MOVWF  FF6
552A:  MOVLW  0E
552C:  MOVWF  FF7
552E:  MOVLW  05
5530:  MOVLB  2
5532:  MOVWF  x45
5534:  MOVLB  0
5536:  CALL   2F60
553A:  MOVLW  10
553C:  MOVWF  FE9
553E:  MOVFF  F6,231
5542:  MOVFF  F5,230
5546:  CALL   2F88
554A:  MOVLW  3A
554C:  MOVWF  FF6
554E:  MOVLW  0E
5550:  MOVWF  FF7
5552:  MOVLW  05
5554:  MOVLB  2
5556:  MOVWF  x45
5558:  MOVLB  0
555A:  CALL   2F60
555E:  MOVLW  10
5560:  MOVWF  FE9
5562:  MOVFF  F8,231
5566:  MOVFF  F7,230
556A:  CALL   2F88
556E:  MOVLW  42
5570:  MOVWF  FF6
5572:  MOVLW  0E
5574:  MOVWF  FF7
5576:  MOVLW  05
5578:  MOVLB  2
557A:  MOVWF  x45
557C:  MOVLB  0
557E:  CALL   2F60
5582:  MOVFF  B0,230
5586:  MOVLW  1B
5588:  MOVLB  2
558A:  MOVWF  x31
558C:  MOVLB  0
558E:  CALL   30D8
5592:  MOVLW  0D
5594:  MOVLB  2
5596:  MOVWF  x52
5598:  MOVLB  0
559A:  CALL   2F3E
....................                                             COM1_send_str(buf); 
559E:  MOVLW  01
55A0:  MOVLB  2
55A2:  MOVWF  x6C
55A4:  MOVLW  CA
55A6:  MOVWF  x6B
55A8:  MOVLB  0
55AA:  CALL   20CC
....................                                              
....................           sprintf(buf, "\r\n\nUT=%u, US=%u\r" setup.UART_Time, setup.UART_Status); // VERSION 3.3 17.1.2016 
55AE:  MOVLW  01
55B0:  MOVLB  1
55B2:  MOVWF  xA9
55B4:  MOVLW  CA
55B6:  MOVWF  xA8
55B8:  MOVLW  4C
55BA:  MOVWF  FF6
55BC:  MOVLW  0E
55BE:  MOVWF  FF7
55C0:  MOVLW  06
55C2:  MOVLB  2
55C4:  MOVWF  x45
55C6:  MOVLB  0
55C8:  CALL   2F60
55CC:  MOVFF  FB,230
55D0:  MOVLW  1B
55D2:  MOVLB  2
55D4:  MOVWF  x31
55D6:  MOVLB  0
55D8:  CALL   30D8
55DC:  MOVLW  54
55DE:  MOVWF  FF6
55E0:  MOVLW  0E
55E2:  MOVWF  FF7
55E4:  MOVLW  05
55E6:  MOVLB  2
55E8:  MOVWF  x45
55EA:  MOVLB  0
55EC:  CALL   2F60
55F0:  MOVFF  FC,230
55F4:  MOVLW  1B
55F6:  MOVLB  2
55F8:  MOVWF  x31
55FA:  MOVLB  0
55FC:  CALL   30D8
5600:  MOVLW  0D
5602:  MOVLB  2
5604:  MOVWF  x52
5606:  MOVLB  0
5608:  CALL   2F3E
....................           COM1_send_str(buf); 
560C:  MOVLW  01
560E:  MOVLB  2
5610:  MOVWF  x6C
5612:  MOVLW  CA
5614:  MOVWF  x6B
5616:  MOVLB  0
5618:  CALL   20CC
....................  
....................         update_temperature_string(); 
561C:  CALL   353A
....................         ret = 0; 
5620:  MOVLB  1
5622:  CLRF   xC8
....................       break; 
5624:  MOVLB  0
5626:  BRA    5666
....................       default: 
....................       	{ 
....................          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5628:  MOVLB  1
562A:  MOVF   x31,F
562C:  BNZ   5634
562E:  MOVLB  0
5630:  BRA    5666
5632:  MOVLB  1
....................          COM1_send_str("\r\nFAIL\r\n"); 
5634:  MOVLW  02
5636:  MOVWF  FEA
5638:  MOVLW  13
563A:  MOVWF  FE9
563C:  MOVLW  09
563E:  MOVWF  01
5640:  CLRF   FF7
5642:  MOVLW  00
5644:  MOVLB  0
5646:  CALL   097E
564A:  TBLRD*-
564C:  TBLRD*+
564E:  MOVFF  FF5,FEE
5652:  DECFSZ 01,F
5654:  BRA    564C
5656:  MOVLW  02
5658:  MOVLB  2
565A:  MOVWF  x6C
565C:  MOVLW  13
565E:  MOVWF  x6B
5660:  MOVLB  0
5662:  CALL   20CC
5666:  MOVLB  2
....................          
....................         } 
....................     } 
.................... aaa: 
....................   return; 
....................   } 
5668:  MOVLB  0
566A:  GOTO   5762 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
56A8:  MOVF   57,W
56AA:  XORLW  00
56AC:  BZ    56BA
56AE:  XORLW  02
56B0:  BZ    56E8
56B2:  XORLW  01
56B4:  BTFSC  FD8.2
56B6:  BRA    5804
56B8:  BRA    5804
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
56BA:  CLRF   58
....................       comm_state = COMM_WAIT_CR; 
56BC:  MOVLW  02
56BE:  MOVWF  57
....................       comm_timeout = 0; 
56C0:  CLRF   xAA
56C2:  CLRF   xA9
....................       if (ttccp_login) 
56C4:  MOVLB  1
56C6:  MOVF   x31,F
56C8:  BZ    56E4
....................       COM1_send_str("\r>"); 
56CA:  MOVLW  0D
56CC:  MOVWF  xC2
56CE:  MOVLW  3E
56D0:  MOVWF  xC3
56D2:  CLRF   xC4
56D4:  MOVLW  01
56D6:  MOVLB  2
56D8:  MOVWF  x6C
56DA:  MOVLW  C2
56DC:  MOVWF  x6B
56DE:  MOVLB  0
56E0:  CALL   20CC
....................       break; 
56E4:  MOVLB  0
56E6:  BRA    5804
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
56E8:  MOVF   34,F
56EA:  BTFSC  FD8.2
56EC:  BRA    57D8
....................         { 
....................         comm_timeout = 0; 
56EE:  CLRF   xAA
56F0:  CLRF   xA9
....................         chr = COM1_get_chr(); 
56F2:  CALL   2948
56F6:  MOVLB  1
56F8:  CLRF   xBF
56FA:  MOVFF  01,1BE
....................         comm_buf[comm_ridx++] = chr; 
56FE:  MOVF   58,W
5700:  INCF   58,F
5702:  CLRF   03
5704:  ADDLW  59
5706:  MOVWF  FE9
5708:  MOVLW  00
570A:  ADDWFC 03,W
570C:  MOVWF  FEA
570E:  MOVFF  1BE,FEF
....................         if (comm_ridx > 70) 
5712:  MOVF   58,W
5714:  SUBLW  46
5716:  BC    5720
....................           { 
....................           comm_state = 0; 
5718:  CLRF   57
....................           break; 
571A:  MOVLB  0
571C:  BRA    5804
571E:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
5720:  MOVF   xBE,W
5722:  SUBLW  0D
5724:  BNZ   572A
5726:  MOVF   xBF,F
5728:  BZ    5734
572A:  MOVF   xBE,W
572C:  SUBLW  3B
572E:  BNZ   57DA
5730:  MOVF   xBF,F
5732:  BNZ   57DA
....................           { 
....................           if (chr == ';') 
5734:  MOVF   xBE,W
5736:  SUBLW  3B
5738:  BNZ   5756
573A:  MOVF   xBF,F
573C:  BNZ   5756
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
573E:  MOVLW  01
5740:  SUBWF  58,W
5742:  CLRF   03
5744:  ADDLW  59
5746:  MOVWF  FE9
5748:  MOVLW  00
574A:  ADDWFC 03,W
574C:  MOVWF  FEA
574E:  MOVLW  0D
5750:  MOVWF  FEF
....................             comm_ridx = 0; 
5752:  CLRF   58
....................             } 
....................           else 
5754:  BRA    575C
....................             COM1_init(); 
5756:  MOVLB  0
5758:  CALL   0E84
....................           process_ttccp_commands(); 
575C:  MOVLB  0
575E:  GOTO   374A
....................           if (debug_mode) 
5762:  MOVLB  1
5764:  MOVF   x48,F
5766:  BZ    5772
....................           	if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5768:  MOVF   x31,F
576A:  BNZ   5772
576C:  MOVLB  0
576E:  BRA    5804
5770:  MOVLB  1
....................             COM1_send_str("\r\nOK\n"); 
5772:  MOVLW  0D
5774:  MOVWF  xC2
5776:  MOVLW  0A
5778:  MOVWF  xC3
577A:  MOVLW  4F
577C:  MOVWF  xC4
577E:  MOVLW  4B
5780:  MOVWF  xC5
5782:  MOVLW  0A
5784:  MOVWF  xC6
5786:  CLRF   xC7
5788:  MOVLW  01
578A:  MOVLB  2
578C:  MOVWF  x6C
578E:  MOVLW  C2
5790:  MOVWF  x6B
5792:  MOVLB  0
5794:  CALL   20CC
....................           if (ret == 1) 
5798:  MOVLB  1
579A:  DECFSZ xC0,W
579C:  BRA    57C8
579E:  MOVF   xC1,F
57A0:  BNZ   57C8
....................             { 
.................... 	          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
57A2:  MOVF   x31,F
57A4:  BNZ   57AC
57A6:  MOVLB  0
57A8:  BRA    5804
57AA:  MOVLB  1
....................             COM1_send_str("\n\r"); 
57AC:  MOVLW  0A
57AE:  MOVWF  xC2
57B0:  MOVLW  0D
57B2:  MOVWF  xC3
57B4:  CLRF   xC4
57B6:  MOVLW  01
57B8:  MOVLB  2
57BA:  MOVWF  x6C
57BC:  MOVLW  C2
57BE:  MOVWF  x6B
57C0:  MOVLB  0
57C2:  CALL   20CC
....................             } 
....................           else 
57C6:  BRA    57D8
....................             COM1_send_str(ttccp_error_message); 
57C8:  MOVLW  01
57CA:  MOVLB  2
57CC:  MOVWF  x6C
57CE:  MOVLW  7D
57D0:  MOVWF  x6B
57D2:  MOVLB  0
57D4:  CALL   20CC
57D8:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
57DA:  MOVF   57,W
57DC:  SUBLW  01
57DE:  BC    5800
....................         if (TMR_100MS_COMM_TO) 
57E0:  BTFSS  2B.1
57E2:  BRA    5800
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
57E4:  BCF    2B.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
57E6:  MOVLB  0
57E8:  INCF   xA9,F
57EA:  BTFSC  FD8.2
57EC:  INCF   xAA,F
57EE:  MOVF   xAA,W
57F0:  SUBLW  26
57F2:  BC    5800
57F4:  XORLW  FF
57F6:  BNZ   57FE
57F8:  MOVF   xA9,W
57FA:  SUBLW  10
57FC:  BC    5800
....................             comm_state = 0; 
57FE:  CLRF   57
....................           } 
....................       break; 
5800:  MOVLB  0
5802:  BRA    5804
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
5804:  GOTO   693C (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
6798:  MOVF   57,W
679A:  ADDLW  FC
679C:  BTFSC  FD8.0
679E:  BRA    68E0
67A0:  ADDLW  04
67A2:  GOTO   68E4
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
67A6:  CLRF   58
....................       comm_state++; 
67A8:  INCF   57,F
....................       break; 
67AA:  BRA    68E0
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
67AC:  MOVF   34,F
67AE:  BZ    67DA
....................         if ((chr = COM1_get_chr()) == '$') 
67B0:  CALL   2948
67B4:  MOVLB  1
67B6:  CLRF   xBF
67B8:  MOVFF  01,1BE
67BC:  MOVF   xBE,W
67BE:  SUBLW  24
67C0:  BNZ   67D0
67C2:  MOVF   xBF,F
67C4:  BNZ   67D0
....................           { 
....................           comm_state++; 
67C6:  INCF   57,F
....................           comm_timeout = 0; 
67C8:  MOVLB  0
67CA:  CLRF   xAA
67CC:  CLRF   xA9
....................           } 
....................         else 
67CE:  BRA    67DA
....................           inc_dec(chr); 
67D0:  MOVFF  1BE,1D5
67D4:  MOVLB  0
67D6:  GOTO   5890
....................       break; 
67DA:  BRA    68E0
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
67DC:  MOVF   34,F
67DE:  BTFSC  FD8.2
67E0:  BRA    68B4
....................         { 
....................         comm_timeout = 0; 
67E2:  CLRF   xAA
67E4:  CLRF   xA9
....................         chr = COM1_get_chr(); 
67E6:  CALL   2948
67EA:  MOVLB  1
67EC:  CLRF   xBF
67EE:  MOVFF  01,1BE
....................         comm_buf[comm_ridx++] = chr; 
67F2:  MOVF   58,W
67F4:  INCF   58,F
67F6:  CLRF   03
67F8:  ADDLW  59
67FA:  MOVWF  FE9
67FC:  MOVLW  00
67FE:  ADDWFC 03,W
6800:  MOVWF  FEA
6802:  MOVFF  1BE,FEF
....................         if (comm_ridx > 70) 
6806:  MOVF   58,W
6808:  SUBLW  46
680A:  BC    6814
....................           { 
....................           comm_state = 0; 
680C:  CLRF   57
....................           break; 
680E:  MOVLB  0
6810:  BRA    68E0
6812:  MOVLB  1
....................           } 
....................         if (chr == 13) 
6814:  MOVF   xBE,W
6816:  SUBLW  0D
6818:  BNZ   6876
681A:  MOVF   xBF,F
681C:  BNZ   6876
....................           { 
....................           ret = process_dollar_commands(); 
681E:  MOVLB  0
6820:  BRA    60BE
6822:  MOVLB  1
6824:  CLRF   xC1
6826:  MOVFF  01,1C0
....................           if (ret == 1) 
682A:  DECFSZ xC0,W
682C:  BRA    6832
682E:  MOVF   xC1,F
6830:  BNZ   6832
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
6832:  INCFSZ xC0,W
6834:  BRA    683A
6836:  MOVF   xC1,F
6838:  BZ    686C
....................             COM1_send_str("\r\nOK\r\n*"); 
683A:  MOVLW  01
683C:  MOVWF  FEA
683E:  MOVLW  C2
6840:  MOVWF  FE9
6842:  MOVLW  08
6844:  MOVWF  01
6846:  CLRF   FF7
6848:  MOVLW  00
684A:  MOVLB  0
684C:  CALL   0A0A
6850:  TBLRD*-
6852:  TBLRD*+
6854:  MOVFF  FF5,FEE
6858:  DECFSZ 01,F
685A:  BRA    6852
685C:  MOVLW  01
685E:  MOVLB  2
6860:  MOVWF  x6C
6862:  MOVLW  C2
6864:  MOVWF  x6B
6866:  MOVLB  0
6868:  CALL   20CC
....................           COM1_init(); 
686C:  MOVLB  0
686E:  CALL   0E84
....................           } 
....................         else if (chr == 27) 
6872:  BRA    68B4
6874:  MOVLB  1
6876:  MOVF   xBE,W
6878:  SUBLW  1B
687A:  BNZ   68B6
687C:  MOVF   xBF,F
687E:  BNZ   68B6
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
6880:  MOVLW  01
6882:  MOVWF  FEA
6884:  MOVLW  CA
6886:  MOVWF  FE9
6888:  MOVLW  0B
688A:  MOVWF  01
688C:  CLRF   FF7
688E:  MOVLW  00
6890:  MOVLB  0
6892:  CALL   0A22
6896:  TBLRD*-
6898:  TBLRD*+
689A:  MOVFF  FF5,FEE
689E:  DECFSZ 01,F
68A0:  BRA    6898
68A2:  MOVLW  01
68A4:  MOVLB  2
68A6:  MOVWF  x6C
68A8:  MOVLW  CA
68AA:  MOVWF  x6B
68AC:  MOVLB  0
68AE:  CALL   20CC
....................           comm_state = 0; 
68B2:  CLRF   57
68B4:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
68B6:  MOVF   57,W
68B8:  SUBLW  01
68BA:  BC    68DC
....................         if (TMR_100MS_COMM_TO) 
68BC:  BTFSS  2B.1
68BE:  BRA    68DC
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
68C0:  BCF    2B.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
68C2:  MOVLB  0
68C4:  INCF   xA9,F
68C6:  BTFSC  FD8.2
68C8:  INCF   xAA,F
68CA:  MOVF   xAA,W
68CC:  SUBLW  26
68CE:  BC    68DC
68D0:  XORLW  FF
68D2:  BNZ   68DA
68D4:  MOVF   xA9,W
68D6:  SUBLW  10
68D8:  BC    68DC
....................             comm_state = 0; 
68DA:  CLRF   57
....................           } 
....................       break; 
68DC:  MOVLB  0
68DE:  BRA    68E0
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
68E0:  GOTO   693C (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
6906:  BTFSS  FAB.1
6908:  BRA    691A
....................     { 
....................     OERR = 0; 
690A:  BCF    FAB.1
....................     CREN = 0; 
690C:  BCF    FAB.4
....................     delay_us(5); 
690E:  MOVLW  06
6910:  MOVWF  00
6912:  DECFSZ 00,F
6914:  BRA    6912
6916:  NOP   
....................     CREN = 1; 
6918:  BSF    FAB.4
....................     } 
....................   if (FERR) 
691A:  BTFSS  FAB.2
691C:  BRA    6928
....................     { 
....................     FERR = 0; 
691E:  BCF    FAB.2
....................     chr = RCREG1; 
6920:  MOVLB  1
6922:  CLRF   xBD
6924:  MOVFF  FAE,1BC
....................     } 
....................   if (ttccp) 
6928:  MOVLB  1
692A:  MOVF   x47,F
692C:  BZ    6938
....................     ttccp_handler(); 
692E:  MOVLB  0
6930:  GOTO   56A8
....................   else 
6934:  MOVLB  0
6936:  BRA    693C
....................     dollar_handler(); 
6938:  MOVLB  0
693A:  BRA    6798
....................   } 
693C:  GOTO   6B76 (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 FFWR 
.................... //============================================================================= 
.................... typedef struct { 
....................   UINT analog1; 
....................   UINT Pout1; 
.................... } POWER_TRANS1; 
....................  
.................... const POWER_TRANS1 Ptrans1[] = { 
....................  
.................... //  dec    vmeas    Pout1 
.................... {  80  ,  20  },//  0.29V  ,0 
.................... {  102  ,  21  },//  0.33V  ,1 
.................... {  118  ,  22  },//  0.38V  ,2 
.................... {  127  ,  23  },//  0.41V  ,3 
.................... {  143  ,  24  },//  0.46V  ,4 
.................... {  167  ,  25  },//  0.54V  ,5 
.................... {  183  ,  26  },//  0.59V  ,6 
.................... {  208  ,  27  },//  0.67V  ,7 
.................... {  226  ,  28  },//  0.73V  ,8 
.................... {  257  ,  29  },//  0.83V  ,9 
.................... {  288  ,  30  },//  0.93V  ,10 
.................... {  322  ,  31  },//  1.04V  ,11 
.................... {  360  ,  32  },//  1.16V  ,12 
.................... {  400  ,  33  },//  1.29V  ,13 
.................... {  446  ,  34  },//  1.44V  ,14 
.................... {  505  ,  35  },//  1.63V  ,15 
.................... {  564  ,  36  },//  1.82V  ,16 
.................... {  645  ,  37  },//  2.08V  ,17 
.................... {  722  ,  38  },//  2.33V  ,18 
.................... {  818  ,  39  },//  2.64V  ,19 
.................... {  992  ,  40  },//  3.2V  ,20 
.................... {  1005,   41  }, //  3.2V    ,21 
.................... {   1023,   55  } 
.................... }; 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
1768:  BCF    F8A.2
....................   delay_us(10); 
176A:  MOVLW  0C
176C:  MOVWF  00
176E:  DECFSZ 00,F
1770:  BRA    176E
1772:  BRA    1774
1774:  NOP   
....................   while (length--) 
....................     { 
1776:  MOVLB  2
1778:  MOVF   x42,W
177A:  DECF   x42,F
177C:  XORLW  00
177E:  BZ    17C4
....................     xbyte = *data++; 
1780:  MOVFF  244,03
1784:  MOVF   x43,W
1786:  INCF   x43,F
1788:  BTFSC  FD8.2
178A:  INCF   x44,F
178C:  MOVWF  FE9
178E:  MOVFF  03,FEA
1792:  MOVFF  FEF,245
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
1796:  CLRF   x46
1798:  MOVF   x46,W
179A:  SUBLW  07
179C:  BNC   17C2
....................       { 
....................       if (xbyte & 0x80) 
179E:  BTFSS  x45.7
17A0:  BRA    17A6
....................         output_high(D2A_MOSI); 
17A2:  BSF    F8C.4
....................       else 
17A4:  BRA    17A8
....................         output_low(D2A_MOSI); 
17A6:  BCF    F8C.4
....................       delay_us(1); 
17A8:  BRA    17AA
17AA:  BRA    17AC
....................       output_high(D2A_SCLK); 
17AC:  BSF    F8C.0
....................       delay_us(1); 
17AE:  BRA    17B0
17B0:  BRA    17B2
....................       output_low(D2A_SCLK); 
17B2:  BCF    F8C.0
....................       delay_us(1); 
17B4:  BRA    17B6
17B6:  BRA    17B8
....................       } 
17B8:  MOVF   x46,W
17BA:  INCF   x46,F
17BC:  BCF    FD8.0
17BE:  RLCF   x45,F
17C0:  BRA    1798
....................     } 
17C2:  BRA    1778
....................   delay_us(10); 
17C4:  MOVLW  0C
17C6:  MOVWF  00
17C8:  DECFSZ 00,F
17CA:  BRA    17C8
17CC:  BRA    17CE
17CE:  NOP   
....................   output_high(CSN); 
17D0:  BSF    F8A.2
....................   } 
17D2:  MOVLB  0
17D4:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5FB2:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5FB4:  MOVLB  2
5FB6:  CLRF   x10
5FB8:  MOVF   x10,W
5FBA:  SUBLW  07
5FBC:  BNC   5FF4
....................     { 
....................     if (addr & 0x80) 
5FBE:  BTFSS  x0C.7
5FC0:  BRA    5FC6
....................       output_high(D2A_MOSI); 
5FC2:  BSF    F8C.4
....................     else 
5FC4:  BRA    5FC8
....................       output_low(D2A_MOSI); 
5FC6:  BCF    F8C.4
....................     delay_us(5); 
5FC8:  MOVLW  06
5FCA:  MOVWF  00
5FCC:  DECFSZ 00,F
5FCE:  BRA    5FCC
5FD0:  NOP   
....................     output_high(D2A_SCLK); 
5FD2:  BSF    F8C.0
....................     delay_us(5); 
5FD4:  MOVLW  06
5FD6:  MOVWF  00
5FD8:  DECFSZ 00,F
5FDA:  BRA    5FD8
5FDC:  NOP   
....................     output_low(D2A_SCLK); 
5FDE:  BCF    F8C.0
....................     delay_us(5); 
5FE0:  MOVLW  06
5FE2:  MOVWF  00
5FE4:  DECFSZ 00,F
5FE6:  BRA    5FE4
5FE8:  NOP   
....................     } 
5FEA:  MOVF   x10,W
5FEC:  INCF   x10,F
5FEE:  BCF    FD8.0
5FF0:  RLCF   x0C,F
5FF2:  BRA    5FB8
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5FF4:  CLRF   x0F
5FF6:  CLRF   x10
5FF8:  MOVF   x10,W
5FFA:  SUBLW  07
5FFC:  BNC   6042
....................     { 
....................     xbyte <<= 1; 
5FFE:  BCF    FD8.0
6000:  RLCF   x0F,F
....................     delay_us(5); 
6002:  MOVLW  06
6004:  MOVWF  00
6006:  DECFSZ 00,F
6008:  BRA    6006
600A:  NOP   
....................     output_high(D2A_SCLK); 
600C:  BSF    F8C.0
....................     delay_us(3); 
600E:  MOVLW  03
6010:  MOVWF  00
6012:  DECFSZ 00,F
6014:  BRA    6012
6016:  BRA    6018
....................     if (input(D2A_MISO)) 
6018:  BTFSS  F83.1
601A:  BRA    6028
....................       { 
....................       xbyte |= 1; 
601C:  BSF    x0F.0
....................       delay_us(2); 
601E:  MOVLW  02
6020:  MOVWF  00
6022:  DECFSZ 00,F
6024:  BRA    6022
6026:  NOP   
....................       } 
....................     delay_us(2); 
6028:  MOVLW  02
602A:  MOVWF  00
602C:  DECFSZ 00,F
602E:  BRA    602C
6030:  NOP   
....................     output_low(D2A_SCLK); 
6032:  BCF    F8C.0
....................     delay_us(3); 
6034:  MOVLW  03
6036:  MOVWF  00
6038:  DECFSZ 00,F
603A:  BRA    6038
603C:  BRA    603E
....................     } 
603E:  INCF   x10,F
6040:  BRA    5FF8
....................   *data = xbyte; 
6042:  MOVFF  20D,FE9
6046:  MOVFF  20E,FEA
604A:  MOVFF  20F,FEF
....................   output_high(CSN); 
604E:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
6050:  BCF    F8C.0
....................   return xbyte; 
6052:  MOVFF  20F,01
....................   } 
6056:  MOVLB  0
6058:  GOTO   648E (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1B38:  MOVFF  249,255
1B3C:  MOVFF  248,254
1B40:  MOVFF  247,253
1B44:  MOVFF  246,252
1B48:  BRA    1868
1B4A:  MOVFF  03,24D
1B4E:  MOVFF  02,24C
1B52:  MOVFF  01,24B
1B56:  MOVFF  00,24A
....................   temp = bitspersec / 240000000.0; 
1B5A:  MOVFF  24D,255
1B5E:  MOVFF  24C,254
1B62:  MOVFF  24B,253
1B66:  MOVFF  24A,252
1B6A:  MOVLW  C0
1B6C:  MOVLB  2
1B6E:  MOVWF  x59
1B70:  MOVLW  E1
1B72:  MOVWF  x58
1B74:  MOVLW  64
1B76:  MOVWF  x57
1B78:  MOVLW  9A
1B7A:  MOVWF  x56
1B7C:  MOVLB  0
1B7E:  RCALL  18A2
1B80:  MOVFF  03,251
1B84:  MOVFF  02,250
1B88:  MOVFF  01,24F
1B8C:  MOVFF  00,24E
....................   temp *= 65536.0; 
1B90:  MOVFF  251,255
1B94:  MOVFF  250,254
1B98:  MOVFF  24F,253
1B9C:  MOVFF  24E,252
1BA0:  MOVLB  2
1BA2:  CLRF   x59
1BA4:  CLRF   x58
1BA6:  CLRF   x57
1BA8:  MOVLW  8F
1BAA:  MOVWF  x56
1BAC:  MOVLB  0
1BAE:  RCALL  1A00
1BB0:  MOVFF  03,251
1BB4:  MOVFF  02,250
1BB8:  MOVFF  01,24F
1BBC:  MOVFF  00,24E
....................   temp *= 65536.0; 
1BC0:  MOVFF  251,255
1BC4:  MOVFF  250,254
1BC8:  MOVFF  24F,253
1BCC:  MOVFF  24E,252
1BD0:  MOVLB  2
1BD2:  CLRF   x59
1BD4:  CLRF   x58
1BD6:  CLRF   x57
1BD8:  MOVLW  8F
1BDA:  MOVWF  x56
1BDC:  MOVLB  0
1BDE:  RCALL  1A00
1BE0:  MOVFF  03,251
1BE4:  MOVFF  02,250
1BE8:  MOVFF  01,24F
1BEC:  MOVFF  00,24E
....................   return (ULONG)temp - 1; 
1BF0:  MOVFF  251,255
1BF4:  MOVFF  250,254
1BF8:  MOVFF  24F,253
1BFC:  MOVFF  24E,252
1C00:  RCALL  1AF6
1C02:  MOVFF  03,255
1C06:  MOVFF  02,254
1C0A:  MOVFF  01,253
1C0E:  MOVFF  00,252
1C12:  MOVLW  01
1C14:  MOVLB  2
1C16:  SUBWF  00,W
1C18:  MOVWF  00
1C1A:  MOVLW  00
1C1C:  SUBWFB 01,W
1C1E:  MOVWF  01
1C20:  MOVLW  00
1C22:  SUBWFB 02,W
1C24:  MOVWF  02
1C26:  MOVLW  00
1C28:  SUBWFB 03,W
1C2A:  MOVWF  03
....................   } 
1C2C:  MOVLB  0
1C2E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
5872:  MOVFF  1D8,1DA
....................   buf[1] = value; 
5876:  MOVFF  1D9,1DB
....................   send_FPGA_command(2, buf); 
587A:  MOVLW  02
587C:  MOVLB  2
587E:  MOVWF  x42
5880:  MOVLW  01
5882:  MOVWF  x44
5884:  MOVLW  DA
5886:  MOVWF  x43
5888:  MOVLB  0
588A:  CALL   1768
....................   } 
588E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
5F22:  MOVLB  2
5F24:  CLRF   x1E
5F26:  CLRF   x1D
5F28:  MOVFF  20F,21C
5F2C:  MOVFF  20E,21B
5F30:  MOVFF  21E,24B
5F34:  MOVFF  21D,24A
5F38:  MOVFF  20F,249
5F3C:  MOVFF  20E,248
5F40:  CLRF   x4F
5F42:  CLRF   x4E
5F44:  MOVLW  27
5F46:  MOVWF  x4D
5F48:  MOVLW  10
5F4A:  MOVWF  x4C
5F4C:  MOVLB  0
5F4E:  CALL   12C0
5F52:  MOVFF  03,21E
5F56:  MOVFF  02,21D
5F5A:  MOVFF  01,21C
5F5E:  MOVFF  00,21B
5F62:  MOVFF  03,249
5F66:  MOVFF  02,248
5F6A:  MOVFF  01,247
5F6E:  MOVFF  00,246
5F72:  CALL   1B38
5F76:  MOVFF  03,21A
5F7A:  MOVFF  02,219
5F7E:  MOVFF  01,218
5F82:  MOVFF  00,217
....................   buf[0] = 2; 
5F86:  MOVLW  02
5F88:  MOVLB  2
5F8A:  MOVWF  x10
....................   buf[1] = make8(bitf, 0); 
5F8C:  MOVFF  217,211
....................   buf[2] = make8(bitf, 1); 
5F90:  MOVFF  218,212
....................   buf[3] = make8(bitf, 2); 
5F94:  MOVFF  219,213
....................   buf[4] = make8(bitf, 3); 
5F98:  MOVFF  21A,214
....................   send_FPGA_command(5, buf); 
5F9C:  MOVLW  05
5F9E:  MOVWF  x42
5FA0:  MOVLW  02
5FA2:  MOVWF  x44
5FA4:  MOVLW  10
5FA6:  MOVWF  x43
5FA8:  MOVLB  0
5FAA:  CALL   1768
....................   } 
5FAE:  GOTO   6448 (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 0; 
*
17D6:  MOVLB  2
17D8:  CLRF   x36
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
17DA:  MOVLB  0
17DC:  SWAPF  xB0,W
17DE:  MOVWF  00
17E0:  MOVLW  F0
17E2:  ANDWF  00,F
17E4:  MOVF   00,W
17E6:  IORWF  xAF,W
17E8:  MOVLB  2
17EA:  MOVWF  x3E
17EC:  MOVLB  0
17EE:  SWAPF  xB1,W
17F0:  MOVWF  00
17F2:  RLCF   00,F
17F4:  MOVLW  E0
17F6:  ANDWF  00,F
17F8:  MOVF   00,W
17FA:  MOVLB  2
17FC:  IORWF  x3E,F
17FE:  MOVLB  0
1800:  SWAPF  xB5,W
1802:  MOVWF  00
1804:  RLCF   00,F
1806:  RLCF   00,F
1808:  MOVLW  C0
180A:  ANDWF  00,F
180C:  MOVF   00,W
180E:  MOVLB  2
1810:  IORWF  x3E,F
1812:  CLRF   00
1814:  MOVLB  0
1816:  BTFSC  xB7.0
1818:  BSF    00.7
181A:  MOVF   00,W
181C:  MOVLB  2
181E:  IORWF  x3E,W
1820:  MOVWF  x37
....................   send_FPGA_command(2, buf); 
1822:  MOVLW  02
1824:  MOVWF  x42
1826:  MOVWF  x44
1828:  MOVLW  36
182A:  MOVWF  x43
182C:  MOVLB  0
182E:  RCALL  1768
....................   } 
1830:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 6; 
1832:  MOVLW  06
1834:  MOVLB  2
1836:  MOVWF  x36
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
1838:  BCF    FD8.0
183A:  MOVLB  0
183C:  RLCF   xB3,W
183E:  IORWF  xB2,W
1840:  MOVLB  2
1842:  MOVWF  x3E
1844:  MOVLB  0
1846:  RLCF   xB4,W
1848:  MOVWF  00
184A:  RLCF   00,F
184C:  MOVLW  FC
184E:  ANDWF  00,F
1850:  MOVF   00,W
1852:  MOVLB  2
1854:  IORWF  x3E,W
1856:  MOVWF  x37
....................   send_FPGA_command(2, buf); 
1858:  MOVLW  02
185A:  MOVWF  x42
185C:  MOVWF  x44
185E:  MOVLW  36
1860:  MOVWF  x43
1862:  MOVLB  0
1864:  RCALL  1768
....................   } 
1866:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1C30:  MOVLB  2
1C32:  CLRF   x45
1C34:  CLRF   x44
1C36:  MOVFF  AC,243
1C3A:  MOVFF  AB,242
1C3E:  MOVFF  245,24B
1C42:  MOVFF  244,24A
1C46:  MOVFF  AC,249
1C4A:  MOVFF  AB,248
1C4E:  CLRF   x4F
1C50:  CLRF   x4E
1C52:  MOVLW  27
1C54:  MOVWF  x4D
1C56:  MOVLW  10
1C58:  MOVWF  x4C
1C5A:  MOVLB  0
1C5C:  CALL   12C0
1C60:  MOVFF  03,245
1C64:  MOVFF  02,244
1C68:  MOVFF  01,243
1C6C:  MOVFF  00,242
1C70:  MOVFF  03,249
1C74:  MOVFF  02,248
1C78:  MOVFF  01,247
1C7C:  MOVFF  00,246
1C80:  RCALL  1B38
1C82:  MOVFF  03,241
1C86:  MOVFF  02,240
1C8A:  MOVFF  01,23F
1C8E:  MOVFF  00,23E
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1C92:  MOVLW  02
1C94:  MOVLB  2
1C96:  MOVWF  x36
1C98:  MOVFF  23E,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1C9C:  MOVLW  02
1C9E:  MOVWF  x42
1CA0:  MOVWF  x44
1CA2:  MOVLW  36
1CA4:  MOVWF  x43
1CA6:  MOVLB  0
1CA8:  RCALL  1768
1CAA:  MOVLW  0A
1CAC:  MOVLB  2
1CAE:  MOVWF  x42
1CB0:  MOVLB  0
1CB2:  CALL   0EFE
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1CB6:  MOVLW  03
1CB8:  MOVLB  2
1CBA:  MOVWF  x36
1CBC:  MOVFF  23F,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1CC0:  MOVLW  02
1CC2:  MOVWF  x42
1CC4:  MOVWF  x44
1CC6:  MOVLW  36
1CC8:  MOVWF  x43
1CCA:  MOVLB  0
1CCC:  RCALL  1768
1CCE:  MOVLW  0A
1CD0:  MOVLB  2
1CD2:  MOVWF  x42
1CD4:  MOVLB  0
1CD6:  CALL   0EFE
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1CDA:  MOVLW  04
1CDC:  MOVLB  2
1CDE:  MOVWF  x36
1CE0:  MOVFF  240,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1CE4:  MOVLW  02
1CE6:  MOVWF  x42
1CE8:  MOVWF  x44
1CEA:  MOVLW  36
1CEC:  MOVWF  x43
1CEE:  MOVLB  0
1CF0:  RCALL  1768
1CF2:  MOVLW  0A
1CF4:  MOVLB  2
1CF6:  MOVWF  x42
1CF8:  MOVLB  0
1CFA:  CALL   0EFE
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1CFE:  MOVLW  05
1D00:  MOVLB  2
1D02:  MOVWF  x36
1D04:  MOVFF  241,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1D08:  MOVLW  02
1D0A:  MOVWF  x42
1D0C:  MOVWF  x44
1D0E:  MOVLW  36
1D10:  MOVWF  x43
1D12:  MOVLB  0
1D14:  RCALL  1768
1D16:  MOVLW  0A
1D18:  MOVLB  2
1D1A:  MOVWF  x42
1D1C:  MOVLB  0
1D1E:  CALL   0EFE
....................   } 
1D22:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
3154:  MOVLB  2
3156:  MOVF   x31,W
3158:  MOVWF  03
315A:  MOVF   x30,W
315C:  BTFSC  FD8.2
315E:  DECF   x31,F
3160:  DECF   x30,F
3162:  IORWF  03,W
3164:  BZ    31BE
3166:  MOVF   x2D,W
3168:  MOVWF  03
316A:  MOVF   x2C,W
316C:  INCF   x2C,F
316E:  BTFSC  FD8.2
3170:  INCF   x2D,F
3172:  MOVWF  x32
3174:  MOVFF  03,233
3178:  MOVF   x2F,W
317A:  MOVWF  03
317C:  MOVF   x2E,W
317E:  INCF   x2E,F
3180:  BTFSC  FD8.2
3182:  INCF   x2F,F
3184:  MOVWF  FE9
3186:  MOVFF  03,FEA
318A:  MOVFF  FEF,234
318E:  MOVF   FF2,W
3190:  MOVWF  00
3192:  BCF    FF2.7
3194:  MOVFF  232,FA9
3198:  MOVFF  234,FA8
319C:  BCF    FA6.6
319E:  BCF    FA6.7
31A0:  BSF    FA6.2
31A2:  MOVLB  F
31A4:  MOVLW  55
31A6:  MOVWF  FA7
31A8:  MOVLW  AA
31AA:  MOVWF  FA7
31AC:  BSF    FA6.1
31AE:  BTFSC  FA6.1
31B0:  BRA    31AE
31B2:  BCF    FA6.2
31B4:  MOVF   00,W
31B6:  IORWF  FF2,F
31B8:  MOVLB  0
31BA:  BRA    3154
31BC:  MOVLB  2
....................   } 
31BE:  MOVLB  0
31C0:  GOTO   31E8 (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0F28:  MOVLB  2
0F2A:  MOVF   x31,W
0F2C:  MOVWF  03
0F2E:  MOVF   x30,W
0F30:  BTFSC  FD8.2
0F32:  DECF   x31,F
0F34:  DECF   x30,F
0F36:  IORWF  03,W
0F38:  BZ    0F78
0F3A:  MOVF   x2F,W
0F3C:  MOVWF  03
0F3E:  MOVF   x2E,W
0F40:  INCF   x2E,F
0F42:  BTFSC  FD8.2
0F44:  INCF   x2F,F
0F46:  MOVWF  FE9
0F48:  MOVFF  03,FEA
0F4C:  MOVF   x2D,W
0F4E:  MOVWF  03
0F50:  MOVF   x2C,W
0F52:  INCF   x2C,F
0F54:  BTFSC  FD8.2
0F56:  INCF   x2D,F
0F58:  MOVWF  x34
0F5A:  MOVFF  03,235
0F5E:  MOVFF  FF2,236
0F62:  BCF    FF2.7
0F64:  MOVFF  234,FA9
0F68:  BCF    FA6.6
0F6A:  BCF    FA6.7
0F6C:  BSF    FA6.0
0F6E:  MOVF   FA8,W
0F70:  BTFSC  x36.7
0F72:  BSF    FF2.7
0F74:  MOVWF  FEF
0F76:  BRA    0F2A
....................   } 
0F78:  MOVLB  0
0F7A:  GOTO   0FB0 (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
31C4:  MOVLB  1
31C6:  MOVF   x03,W
31C8:  SUBLW  9F
31CA:  BNZ   31EA
31CC:  MOVF   x04,W
31CE:  SUBLW  0B
31D0:  BNZ   31EA
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
31D2:  MOVLB  2
31D4:  CLRF   x2D
31D6:  CLRF   x2C
31D8:  CLRF   x2F
31DA:  MOVLW  AB
31DC:  MOVWF  x2E
31DE:  CLRF   x31
31E0:  MOVLW  58
31E2:  MOVWF  x30
31E4:  MOVLB  0
31E6:  BRA    3154
31E8:  MOVLB  1
....................   allow_write = 0; 
31EA:  CLRF   x04
31EC:  CLRF   x03
....................   } 
31EE:  MOVLB  0
31F0:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0F9A:  MOVLB  2
0F9C:  CLRF   x2D
0F9E:  CLRF   x2C
0FA0:  CLRF   x2F
0FA2:  MOVLW  AB
0FA4:  MOVWF  x2E
0FA6:  CLRF   x31
0FA8:  MOVLW  58
0FAA:  MOVWF  x30
0FAC:  MOVLB  0
0FAE:  BRA    0F28
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0FB0:  INCFSZ xB2,W
0FB2:  BRA    0FB6
0FB4:  BRA    0FBA
0FB6:  INCFSZ xB3,W
0FB8:  BRA    0FCA
....................     memset(&setup, 0, sizeof(setup)); 
0FBA:  CLRF   FEA
0FBC:  MOVLW  AB
0FBE:  MOVWF  FE9
0FC0:  CLRF   00
0FC2:  CLRF   02
0FC4:  MOVLW  58
0FC6:  MOVWF  01
0FC8:  BRA    0F7E
....................   } 
0FCA:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
31F2:  MOVLB  2
31F4:  CLRF   x31
31F6:  CLRF   x30
31F8:  MOVF   x31,F
31FA:  BNZ   32AE
31FC:  MOVF   x30,W
31FE:  SUBLW  13
3200:  BNC   32AE
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
3202:  RLCF   x30,W
3204:  MOVWF  x32
3206:  RLCF   x31,W
3208:  MOVWF  x33
320A:  RLCF   x32,F
320C:  RLCF   x33,F
320E:  MOVLW  FC
3210:  ANDWF  x32,F
3212:  MOVFF  233,03
3216:  MOVF   x32,W
3218:  MOVLB  0
321A:  CALL   0A3E
321E:  TBLRD*+
3220:  MOVFF  FF5,03
3224:  MOVWF  01
3226:  MOVF   03,W
3228:  MOVLB  2
322A:  SUBWF  x2F,W
322C:  BNC   32A6
322E:  BNZ   3236
3230:  MOVF   01,W
3232:  SUBWF  x2E,W
3234:  BNC   32A6
3236:  MOVLW  01
3238:  ADDWF  x30,W
323A:  MOVWF  x34
323C:  MOVLW  00
323E:  ADDWFC x31,W
3240:  MOVWF  x35
3242:  RLCF   x34,F
3244:  RLCF   x35,F
3246:  RLCF   x34,F
3248:  RLCF   x35,F
324A:  MOVLW  FC
324C:  ANDWF  x34,F
324E:  MOVFF  235,03
3252:  MOVF   x34,W
3254:  MOVLB  0
3256:  CALL   0A3E
325A:  TBLRD*+
325C:  MOVFF  FF5,03
3260:  MOVWF  01
3262:  MOVLB  2
3264:  MOVF   x2F,W
3266:  SUBWF  03,W
3268:  BNC   32A6
326A:  BNZ   3272
326C:  MOVF   01,W
326E:  SUBWF  x2E,W
3270:  BC    32A6
....................     return Ptrans[idx].Pout; 
3272:  RLCF   x30,W
3274:  MOVWF  x32
3276:  RLCF   x31,W
3278:  MOVWF  x33
327A:  RLCF   x32,F
327C:  RLCF   x33,F
327E:  MOVLW  FC
3280:  ANDWF  x32,F
3282:  MOVLW  02
3284:  ADDWF  x32,W
3286:  MOVWF  01
3288:  MOVLW  00
328A:  ADDWFC x33,W
328C:  MOVWF  03
328E:  MOVF   01,W
3290:  MOVLB  0
3292:  CALL   0A3E
3296:  TBLRD*+
3298:  MOVFF  FF5,03
329C:  MOVWF  01
329E:  MOVFF  03,02
32A2:  BRA    32B4
32A4:  MOVLB  2
....................   } 
32A6:  INCF   x30,F
32A8:  BTFSC  FD8.2
32AA:  INCF   x31,F
32AC:  BRA    31F8
....................   return 0; 
32AE:  MOVLW  00
32B0:  MOVWF  01
32B2:  MOVWF  02
32B4:  MOVLB  0
....................   } 
32B6:  GOTO   47C8 (RETURN)
....................  
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 
.................... //============================================================================= 
.................... UINT convert_power1(UINT analog)// FFWR POWER 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
1200:  MOVLB  2
1202:  CLRF   x33
1204:  CLRF   x32
1206:  MOVF   x33,F
1208:  BNZ   12B6
120A:  MOVF   x32,W
120C:  SUBLW  13
120E:  BNC   12B6
....................     { 
....................   if (analog >= Ptrans1[idx].analog1 && analog < Ptrans1[idx+1].analog1) 
1210:  RLCF   x32,W
1212:  MOVWF  x34
1214:  RLCF   x33,W
1216:  MOVWF  x35
1218:  RLCF   x34,F
121A:  RLCF   x35,F
121C:  MOVLW  FC
121E:  ANDWF  x34,F
1220:  MOVFF  235,03
1224:  MOVF   x34,W
1226:  MOVLB  0
1228:  RCALL  0A9E
122A:  TBLRD*+
122C:  MOVFF  FF5,03
1230:  MOVWF  01
1232:  MOVF   03,W
1234:  MOVLB  2
1236:  SUBWF  x31,W
1238:  BNC   12AE
123A:  BNZ   1242
123C:  MOVF   01,W
123E:  SUBWF  x30,W
1240:  BNC   12AE
1242:  MOVLW  01
1244:  ADDWF  x32,W
1246:  MOVWF  x36
1248:  MOVLW  00
124A:  ADDWFC x33,W
124C:  MOVWF  x37
124E:  RLCF   x36,F
1250:  RLCF   x37,F
1252:  RLCF   x36,F
1254:  RLCF   x37,F
1256:  MOVLW  FC
1258:  ANDWF  x36,F
125A:  MOVFF  237,03
125E:  MOVF   x36,W
1260:  MOVLB  0
1262:  RCALL  0A9E
1264:  TBLRD*+
1266:  MOVFF  FF5,03
126A:  MOVWF  01
126C:  MOVLB  2
126E:  MOVF   x31,W
1270:  SUBWF  03,W
1272:  BNC   12AE
1274:  BNZ   127C
1276:  MOVF   01,W
1278:  SUBWF  x30,W
127A:  BC    12AE
....................     return Ptrans1[idx].Pout1; 
127C:  RLCF   x32,W
127E:  MOVWF  x34
1280:  RLCF   x33,W
1282:  MOVWF  x35
1284:  RLCF   x34,F
1286:  RLCF   x35,F
1288:  MOVLW  FC
128A:  ANDWF  x34,F
128C:  MOVLW  02
128E:  ADDWF  x34,W
1290:  MOVWF  01
1292:  MOVLW  00
1294:  ADDWFC x35,W
1296:  MOVWF  03
1298:  MOVF   01,W
129A:  MOVLB  0
129C:  RCALL  0A9E
129E:  TBLRD*+
12A0:  MOVFF  FF5,03
12A4:  MOVWF  01
12A6:  MOVFF  03,02
12AA:  BRA    12BE
12AC:  MOVLB  2
....................   } 
12AE:  INCF   x32,F
12B0:  BTFSC  FD8.2
12B2:  INCF   x33,F
12B4:  BRA    1206
....................   return 0; 
12B6:  MOVLW  00
12B8:  MOVWF  01
12BA:  MOVWF  02
12BC:  MOVLB  0
....................   } 
12BE:  RETURN 0
....................  
.................... //============================================================================= 
.................... // this functions sets the POWER_EN discrete high / low 
.................... // depanding on the state of 1 discrete (STANDBY) and 2 variables 
.................... // (setup.cot & setup.pwr). 
.................... // the function also calls 'update_all' when a transition from  
.................... // low to high occurs. 
.................... // the truth table for setting the discrete is: 
....................  
.................... // SB cot pwr Output 
.................... // 0   0   0    H 
.................... // 0   0   1    L 
.................... // 0   1   0    L 
.................... // 0   1   1    H 
.................... // 1   0   0    L 
.................... // 1   0   1    H 
.................... // 1   1   0    H 
.................... // 1   1   1    L 
....................  
.................... // the reduction of this function is:  
.................... // not(sb^cot^pwr) or 
.................... // sb ^ (cot == pwr) (used below) 
.................... //============================================================================= 
.................... void set_power_en()  
.................... { 
*
1D94:  MOVLB  2
1D96:  MOVWF  x32
1D98:  MOVLB  0
1D9A:  MOVF   xAD,W
1D9C:  SUBWF  xF5,W
1D9E:  BNZ   1DA6
1DA0:  MOVF   xAE,W
1DA2:  SUBWF  xF6,W
1DA4:  BZ    1DAA
1DA6:  MOVLW  00
1DA8:  BRA    1DAC
1DAA:  MOVLW  01
1DAC:  MOVLB  2
1DAE:  XORWF  x32,W
1DB0:  MOVWF  x30
1DB2:  CLRF   x31
....................     static UINT last_val = 0; // saving the last state of the discrete 
....................     UINT dval = input(STANDBY) ^ (setup.cot == setup.pwr); 
....................  
....................     // set the discrete 
....................     if(dval)  
1DB4:  MOVF   x30,W
1DB6:  IORWF  x31,W
1DB8:  BZ    1DBE
....................     { 
....................         output_high(POWER_EN); 
1DBA:  BSF    F8C.6
....................     } 
....................     else 
1DBC:  BRA    1DD8
....................     { 
....................         output_low(POWER_EN); 
1DBE:  BCF    F8C.6
....................         if(setup.cot == 1)  
1DC0:  MOVLB  0
1DC2:  DECFSZ xF5,W
1DC4:  BRA    1DD8
1DC6:  MOVF   xF6,F
1DC8:  BNZ   1DD8
....................         { 
....................             // this was a special case in before the refactoring 
....................             // it is not known why the call is only when cot == 1 
....................             set_AD5312(DAC_POS_VOLT, 0);     
1DCA:  MOVLB  2
1DCC:  CLRF   x32
1DCE:  CLRF   x34
1DD0:  CLRF   x33
1DD2:  MOVLB  0
1DD4:  CALL   0FCC
....................         } 
....................     } 
....................  
....................     // call update all on low to high transition 
....................     if(last_val == 0 && dval == 1)  
1DD8:  MOVLB  1
1DDA:  MOVF   xAA,F
1DDC:  BNZ   1E06
1DDE:  MOVF   xAB,F
1DE0:  BNZ   1E06
1DE2:  MOVLB  2
1DE4:  DECFSZ x30,W
1DE6:  BRA    1DEA
1DE8:  BRA    1DEE
1DEA:  MOVLB  1
1DEC:  BRA    1E06
1DEE:  MOVF   x31,F
1DF0:  BTFSC  FD8.2
1DF2:  BRA    1DF8
1DF4:  MOVLB  1
1DF6:  BRA    1E06
....................     { 
....................         delay_ms(50); 
1DF8:  MOVLW  32
1DFA:  MOVWF  x42
1DFC:  MOVLB  0
1DFE:  CALL   0EFE
....................         update_all(); 
1E02:  RCALL  1D24
1E04:  MOVLB  1
....................     } 
....................     last_val = dval; 
1E06:  MOVFF  231,1AB
1E0A:  MOVFF  230,1AA
....................     gl_current_power_en_value = dval; 
1E0E:  MOVFF  231,10E
1E12:  MOVFF  230,10D
.................... } 
1E16:  MOVLB  0
1E18:  GOTO   1F90 (RETURN)
....................  
.................... //============================================================================= 
.................... // this function returns the requested power level (SV / VL) based on  
.................... // 3 parameters, rc, rp and the discrete HILOW 
.................... // in high power mode (rc=1), if the discrete & rp are equal the function should 
.................... // return SV (power_level) if not, it should return VL (low_power_level). 
.................... // in low power mode (rc=0), if the discrete & rp are equal the function should 
.................... // return VL (low_power_level) if not, it should return SV (power_level). 
.................... //============================================================================= 
.................... UINT get_requested_power_level() { 
....................     UINT levels[2]; 
....................     int l; 
....................     levels[0] = power_level; 
1E1C:  MOVFF  1D,231
1E20:  MOVFF  1C,230
....................     levels[1] = low_power_level; 
1E24:  MOVFF  1B,233
1E28:  MOVFF  1A,232
....................  
....................     l = (setup.rc & 0x1) ^ (input(HILO) == setup.rp); 
1E2C:  MOVF   xF7,W
1E2E:  ANDLW  01
1E30:  MOVLB  2
1E32:  MOVWF  x35
1E34:  CLRF   x36
1E36:  MOVLW  00
1E38:  BTFSC  F83.2
1E3A:  MOVLW  01
1E3C:  MOVLB  0
1E3E:  SUBWF  xF9,W
1E40:  BNZ   1E46
1E42:  MOVF   xFA,F
1E44:  BZ    1E4A
1E46:  MOVLW  00
1E48:  BRA    1E4C
1E4A:  MOVLW  01
1E4C:  MOVLB  2
1E4E:  XORWF  x35,W
1E50:  MOVWF  x34
....................      
....................     gl_current_power_level = levels[l]; 
1E52:  BCF    FD8.0
1E54:  RLCF   x34,W
1E56:  CLRF   03
1E58:  ADDLW  30
1E5A:  MOVWF  FE9
1E5C:  MOVLW  02
1E5E:  ADDWFC 03,W
1E60:  MOVWF  FEA
1E62:  MOVFF  FEC,03
1E66:  MOVF   FED,F
1E68:  MOVFF  FEF,10B
1E6C:  MOVLB  1
1E6E:  MOVFF  03,10C
....................     return levels[l]; 
1E72:  BCF    FD8.0
1E74:  MOVLB  2
1E76:  RLCF   x34,W
1E78:  CLRF   03
1E7A:  ADDLW  30
1E7C:  MOVWF  FE9
1E7E:  MOVLW  02
1E80:  ADDWFC 03,W
1E82:  MOVWF  FEA
1E84:  MOVFF  FEF,01
1E88:  INCF   FE9,F
1E8A:  MOVF   FEF,W
1E8C:  DECF   FE9,F
1E8E:  MOVWF  02
.................... } 
1E90:  MOVLB  0
1E92:  GOTO   1F92 (RETURN)
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
1E96:  INCFSZ 24,W
1E98:  BRA    1EA0
1E9A:  INCFSZ 25,W
1E9C:  BRA    1EA0
1E9E:  BRA    1EF6
....................     { 
....................     if (TMR_100MS_POWER) 
1EA0:  BTFSS  2B.3
1EA2:  BRA    1EF4
....................       { 
....................       TMR_100MS_POWER = 0; 
1EA4:  BCF    2B.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1EA6:  MOVLB  2
1EA8:  CLRF   x32
1EAA:  MOVFF  25,234
1EAE:  MOVFF  24,233
1EB2:  MOVLB  0
1EB4:  CALL   0FCC
....................       set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1EB8:  MOVLW  14
1EBA:  MOVWF  01
1EBC:  MOVF   FC2,W
1EBE:  ANDLW  83
1EC0:  IORWF  01,W
1EC2:  MOVWF  FC2
....................       delay_us(20); 
1EC4:  MOVLW  1A
1EC6:  MOVWF  00
1EC8:  DECFSZ 00,F
1ECA:  BRA    1EC8
1ECC:  NOP   
....................       power = read_adc(); 
1ECE:  BSF    FC2.1
1ED0:  BTFSC  FC2.1
1ED2:  BRA    1ED0
1ED4:  MOVFF  FC4,22D
1ED8:  MOVLB  2
1EDA:  MOVFF  FC3,22C
....................       current_power = convert_power1(power); 
1EDE:  MOVFF  22D,231
1EE2:  MOVFF  22C,230
1EE6:  MOVLB  0
1EE8:  CALL   1200
1EEC:  MOVFF  02,10A
1EF0:  MOVFF  01,109
....................       } 
....................     return; 
1EF4:  BRA    201C
....................     } 
....................      
....................   if (setup.frequency < FREQ_LOW_THRESH) 
1EF6:  MOVF   xBA,W
1EF8:  SUBLW  58
1EFA:  BNC   1F1A
1EFC:  BNZ   1F04
1EFE:  MOVF   xB9,W
1F00:  SUBLW  29
1F02:  BNC   1F1A
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1F04:  MOVLW  01
1F06:  MOVLB  2
1F08:  MOVWF  x32
1F0A:  MOVFF  BF,234
1F0E:  MOVFF  BE,233
1F12:  MOVLB  0
1F14:  CALL   0FCC
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1F18:  BRA    1F52
1F1A:  MOVF   xBA,W
1F1C:  SUBLW  5A
1F1E:  BNC   1F3E
1F20:  BNZ   1F28
1F22:  MOVF   xB9,W
1F24:  SUBLW  F9
1F26:  BNC   1F3E
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1F28:  MOVLW  01
1F2A:  MOVLB  2
1F2C:  MOVWF  x32
1F2E:  MOVFF  C1,234
1F32:  MOVFF  C0,233
1F36:  MOVLB  0
1F38:  CALL   0FCC
....................   else 
1F3C:  BRA    1F52
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1F3E:  MOVLW  01
1F40:  MOVLB  2
1F42:  MOVWF  x32
1F44:  MOVFF  C3,234
1F48:  MOVFF  C2,233
1F4C:  MOVLB  0
1F4E:  CALL   0FCC
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1F52:  MOVLW  14
1F54:  MOVWF  01
1F56:  MOVF   FC2,W
1F58:  ANDLW  83
1F5A:  IORWF  01,W
1F5C:  MOVWF  FC2
....................   delay_us(20); 
1F5E:  MOVLW  1A
1F60:  MOVWF  00
1F62:  DECFSZ 00,F
1F64:  BRA    1F62
1F66:  NOP   
....................   power = read_adc(); 
1F68:  BSF    FC2.1
1F6A:  BTFSC  FC2.1
1F6C:  BRA    1F6A
1F6E:  MOVFF  FC4,22D
1F72:  MOVLB  2
1F74:  MOVFF  FC3,22C
....................   current_power = convert_power1(power); 
1F78:  MOVFF  22D,231
1F7C:  MOVFF  22C,230
1F80:  MOVLB  0
1F82:  CALL   1200
1F86:  MOVFF  02,10A
1F8A:  MOVFF  01,109
....................   set_power_en();      
1F8E:  BRA    1D8E
....................      
....................   level = get_requested_power_level(); 
1F90:  BRA    1E1C
1F92:  MOVFF  02,22F
1F96:  MOVFF  01,22E
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
1F9A:  MOVLW  06
1F9C:  MOVLB  2
1F9E:  ADDWF  x2E,W
1FA0:  MOVWF  01
1FA2:  MOVLW  00
1FA4:  ADDWFC x2F,W
1FA6:  MOVWF  03
1FA8:  MOVF   03,W
1FAA:  SUBWF  x2D,W
1FAC:  BNC   1FB6
1FAE:  BNZ   1FD4
1FB0:  MOVF   x2C,W
1FB2:  SUBWF  01,W
1FB4:  BNC   1FD4
1FB6:  MOVLW  06
1FB8:  SUBWF  x2E,W
1FBA:  MOVWF  00
1FBC:  MOVLW  00
1FBE:  SUBWFB x2F,W
1FC0:  MOVWF  03
1FC2:  MOVFF  00,01
1FC6:  MOVF   x2D,W
1FC8:  SUBWF  03,W
1FCA:  BNC   201E
1FCC:  BNZ   1FD4
1FCE:  MOVF   01,W
1FD0:  SUBWF  x2C,W
1FD2:  BC    201E
....................     { 
....................     if (power < level) 
1FD4:  MOVF   x2D,W
1FD6:  SUBWF  x2F,W
1FD8:  BNC   1FF6
1FDA:  BNZ   1FE2
1FDC:  MOVF   x2E,W
1FDE:  SUBWF  x2C,W
1FE0:  BC    1FF6
....................       { 
....................       if (power_control >= 150) 
1FE2:  MOVF   1F,F
1FE4:  BNZ   1FEC
1FE6:  MOVF   1E,W
1FE8:  SUBLW  95
1FEA:  BC    1FF4
....................         power_control -= DEADBAND / 2; 
1FEC:  MOVLW  03
1FEE:  SUBWF  1E,F
1FF0:  MOVLW  00
1FF2:  SUBWFB 1F,F
....................       } 
....................     else if (power_control <= 1010) 
1FF4:  BRA    200C
1FF6:  MOVF   1F,W
1FF8:  SUBLW  03
1FFA:  BNC   200C
1FFC:  BNZ   2004
1FFE:  MOVF   1E,W
2000:  SUBLW  F2
2002:  BNC   200C
....................       { 
....................       power_control += DEADBAND / 2; 
2004:  MOVLW  03
2006:  ADDWF  1E,F
2008:  MOVLW  00
200A:  ADDWFC 1F,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
200C:  CLRF   x32
200E:  MOVFF  1F,234
2012:  MOVFF  1E,233
2016:  MOVLB  0
2018:  CALL   0FCC
201C:  MOVLB  2
....................     }	 
....................  
....................  
....................   } 
201E:  MOVLB  0
2020:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0E5E:  CLRF   F89
....................   output_b(0); 
0E60:  CLRF   F8A
....................   output_c(0); 
0E62:  CLRF   F8B
....................   output_d(0); 
0E64:  CLRF   F8C
....................   output_e(0); 
0E66:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0E68:  MOVLW  E1
0E6A:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0E6C:  MOVLW  C1
0E6E:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0E70:  MOVLW  F1
0E72:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0E74:  MOVLW  8E
0E76:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0E78:  BSF    F96.0
0E7A:  BSF    F96.1
0E7C:  BCF    F96.2
0E7E:  BSF    F96.3
....................   } 
0E80:  GOTO   0EC4 (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0E9A:  MOVLW  48
0E9C:  IORLW  05
0E9E:  MOVWF  FBA
0EA0:  MOVLW  63
0EA2:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0EA4:  CLRF   FB4
0EA6:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0EA8:  MOVLW  00
0EAA:  IORLW  05
0EAC:  MOVLB  F
0EAE:  MOVWF  x51
0EB0:  MOVLW  63
0EB2:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0EB4:  CLRF   x4D
0EB6:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0EB8:  MOVLW  00
0EBA:  MOVWF  x4A
0EBC:  MOVLW  00
0EBE:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0EC0:  MOVLB  0
0EC2:  BRA    0E5E
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0EC4:  MOVF   FC1,W
0EC6:  ANDLW  F0
0EC8:  MOVWF  FC1
0ECA:  MOVLW  21
0ECC:  MOVLB  F
0ECE:  MOVWF  x38
0ED0:  MOVLW  03
0ED2:  MOVWF  x3C
0ED4:  MOVLW  00
0ED6:  MOVWF  x39
0ED8:  MOVWF  x3A
0EDA:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0EDC:  MOVF   FC0,W
0EDE:  ANDLW  C0
0EE0:  IORLW  25
0EE2:  MOVWF  FC0
0EE4:  BSF    FC0.7
0EE6:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0EE8:  CLRF   F77
0EEA:  MOVLW  04
0EEC:  MOVWF  F78
0EEE:  MOVWF  F79
....................  
....................   COM1_init(); 
0EF0:  MOVLB  0
0EF2:  RCALL  0E84
....................   enable_interrupts(INT_TIMER2); 
0EF4:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0EF6:  MOVLW  C0
0EF8:  IORWF  FF2,F
....................   } 
0EFA:  GOTO   69CE (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1D24:  MOVFF  BA,233
1D28:  MOVFF  B9,232
....................   delay_ms(5); 
1D2C:  MOVLW  05
1D2E:  MOVLB  2
1D30:  MOVWF  x42
1D32:  MOVLB  0
1D34:  CALL   0EFE
....................   PLL_compute_freq_parameters(freq); 
1D38:  MOVFF  233,237
1D3C:  MOVFF  232,236
1D40:  CALL   13B0
....................   delay_ms(5); 
1D44:  MOVLW  05
1D46:  MOVLB  2
1D48:  MOVWF  x42
1D4A:  MOVLB  0
1D4C:  CALL   0EFE
....................   PLL_update(); 
1D50:  RCALL  1680
....................   delay_ms(5); 
1D52:  MOVLW  05
1D54:  MOVLB  2
1D56:  MOVWF  x42
1D58:  MOVLB  0
1D5A:  CALL   0EFE
....................   FPGA_set_reg0(); 
1D5E:  RCALL  17D6
....................   delay_ms(5); 
1D60:  MOVLW  05
1D62:  MOVLB  2
1D64:  MOVWF  x42
1D66:  MOVLB  0
1D68:  CALL   0EFE
....................   FPGA_set_reg6(); 
1D6C:  RCALL  1832
....................   delay_ms(5); 
1D6E:  MOVLW  05
1D70:  MOVLB  2
1D72:  MOVWF  x42
1D74:  MOVLB  0
1D76:  CALL   0EFE
....................   FPGA_set_bitrate(); 
1D7A:  RCALL  1C30
....................   bitr = setup.bitrate; 
1D7C:  MOVFF  AC,235
1D80:  MOVFF  AB,234
....................   power_control = 1000; 
1D84:  MOVLW  03
1D86:  MOVWF  1F
1D88:  MOVLW  E8
1D8A:  MOVWF  1E
....................   } 
1D8C:  RETURN 0
....................  
.................... void timer_tick()  
.................... { 
....................     if(timerTick_1ms == 1) { 
*
21AA:  DECFSZ 33,W
21AC:  BRA    224C
....................         timerTick_1ms = 0; 
21AE:  CLRF   33
....................         if (++TMR_SendStatus >= setup.Block_per_second && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
21B0:  INCF   2E,F
21B2:  BTFSC  FD8.2
21B4:  INCF   2F,F
21B6:  MOVLB  1
21B8:  MOVF   x00,W
21BA:  SUBWF  2F,W
21BC:  BNC   2210
21BE:  BNZ   21D0
21C0:  MOVLB  0
21C2:  MOVF   xFF,W
21C4:  SUBWF  2E,W
21C6:  BTFSC  FD8.0
21C8:  BRA    21CE
21CA:  MOVLB  1
21CC:  BRA    2210
21CE:  MOVLB  1
21D0:  DECFSZ 32,W
21D2:  BRA    2210
21D4:  MOVLB  0
21D6:  DECFSZ xFC,W
21D8:  BRA    21DC
21DA:  BRA    21E0
21DC:  MOVLB  1
21DE:  BRA    2210
21E0:  MOVLB  1
21E2:  DECFSZ x0F,W
21E4:  BRA    21EA
21E6:  MOVF   x10,F
21E8:  BZ    21F2
21EA:  MOVF   x0F,F
21EC:  BNZ   2210
21EE:  MOVF   x10,F
21F0:  BNZ   2210
....................         { 
....................             TMR_SendStatus = 0; 
21F2:  CLRF   2F
21F4:  CLRF   2E
....................             SendStatusFlag = 1; 
21F6:  MOVLW  01
21F8:  MOVWF  30
....................             TX_Counter++; //VERSION 3.3 21.3.2016 count the number of times the status block is sent 
21FA:  INCF   x13,F
21FC:  BTFSC  FD8.2
21FE:  INCF   x14,F
....................             if (!ttccp_login) 
2200:  MOVF   x31,F
2202:  BNZ   2210
....................             { 
....................               	COM1_send_block(BINARY_STATUS_LENTGH); 
2204:  CLRF   xBD
2206:  MOVLW  1A
2208:  MOVWF  xBC
220A:  MOVLB  0
220C:  BRA    2194
220E:  MOVLB  1
....................             } 
....................         } 
....................         if (++TMR_1mS_Cnt >= 10) 
2210:  INCF   27,F
2212:  MOVF   27,W
2214:  SUBLW  09
2216:  BC    224E
....................         { 
....................             TMR_1mS_Cnt = 0; 
2218:  CLRF   27
....................             ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
221A:  INCF   2E,F
221C:  BTFSC  FD8.2
221E:  INCF   2F,F
....................             TMR_10mS_Count++; 
2220:  INCF   28,F
....................             TMR_10mS_Flags = 0xFF; 
2222:  SETF   29
....................             if (++TMR_10mS_Cnt >= 10) 
2224:  INCF   2A,F
2226:  MOVF   2A,W
2228:  SUBLW  09
222A:  BC    224E
....................             { 
....................                 TMR_10mS_Cnt = 0; 
222C:  CLRF   2A
....................                 TMR_100mS_Flags = 0xFF; 
222E:  SETF   2B
....................                 if (++TMR_100mS_Cnt >= 10) 
2230:  INCF   2C,F
2232:  MOVF   2C,W
2234:  SUBLW  09
2236:  BC    224E
....................                 { 
....................                     TMR_100mS_Cnt = 0; 
2238:  CLRF   2C
....................                     TMR_1sec_Flags = 0xFF; 
223A:  SETF   2D
....................                     if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
223C:  INCF   31,F
223E:  MOVLB  0
2240:  MOVF   xFB,W
2242:  SUBWF  31,W
2244:  BNC   224C
....................            			{ 
....................            			    TMR_StartStatus = 0; 
2246:  CLRF   31
....................             			StartStatusFlag = 1; 
2248:  MOVLW  01
224A:  MOVWF  32
224C:  MOVLB  1
....................             		} 
....................                 } 
....................             } 
....................         } 
....................     } 
.................... } 
224E:  MOVLB  0
2250:  GOTO   6B18 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
6940:  CLRF   FF8
6942:  BCF    FD0.7
6944:  BSF    07.7
6946:  CLRF   FEA
6948:  CLRF   FE9
694A:  MOVLW  70
694C:  MOVWF  FD3
694E:  BCF    F9B.6
6950:  BCF    F9B.7
6952:  BCF    FB8.3
6954:  MOVLW  19
6956:  MOVWF  FAF
6958:  MOVLW  A6
695A:  MOVWF  FAC
695C:  MOVLW  90
695E:  MOVWF  FAB
6960:  SETF   23
6962:  SETF   22
6964:  SETF   25
6966:  SETF   24
6968:  CLRF   2F
696A:  CLRF   2E
696C:  CLRF   30
696E:  CLRF   31
6970:  CLRF   32
6972:  CLRF   33
6974:  MOVLB  1
6976:  CLRF   x04
6978:  CLRF   x03
697A:  CLRF   x0C
697C:  CLRF   x0B
697E:  CLRF   x0E
6980:  CLRF   x0D
6982:  CLRF   x10
6984:  CLRF   x0F
6986:  CLRF   x14
6988:  CLRF   x13
698A:  CLRF   x31
698C:  MOVLW  01
698E:  MOVWF  x47
6990:  CLRF   x48
6992:  MOVFF  F9,1A5
6996:  MOVFF  AD,1A6
699A:  CLRF   xA9
699C:  CLRF   xA8
699E:  CLRF   xAB
69A0:  CLRF   xAA
69A2:  MOVF   FC1,W
69A4:  ANDLW  F0
69A6:  MOVWF  FC1
69A8:  MOVLW  00
69AA:  MOVLB  F
69AC:  MOVWF  x38
69AE:  MOVWF  x3C
69B0:  MOVWF  x39
69B2:  MOVWF  x3A
69B4:  MOVWF  x3B
69B6:  MOVLB  1
69B8:  CLRF   x88
69BA:  CLRF   F77
69BC:  CLRF   F78
69BE:  CLRF   F79
69C0:  MOVLW  03
69C2:  MOVWF  xAD
69C4:  MOVLW  E8
69C6:  MOVWF  xAC
....................   int16 vouta = 1000; 
....................   init_system();  
69C8:  MOVLB  0
69CA:  GOTO   0E9A
....................   output_high(D2A_CSB); 
69CE:  BSF    F8A.1
....................   delay_ms(100); 
69D0:  MOVLW  64
69D2:  MOVLB  2
69D4:  MOVWF  x42
69D6:  MOVLB  0
69D8:  CALL   0EFE
....................   read_setup(); 
69DC:  CALL   0F9A
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
69E0:  MOVF   xFB,F
69E2:  BNZ   69E8
.................... 		setup.UART_Time = 10; 
69E4:  MOVLW  0A
69E6:  MOVWF  xFB
.................... 	if (setup.Block_per_second == 0) 
69E8:  MOVF   xFF,F
69EA:  BNZ   6A00
69EC:  MOVLB  1
69EE:  MOVF   x00,F
69F0:  BTFSC  FD8.2
69F2:  BRA    69F8
69F4:  MOVLB  0
69F6:  BRA    6A00
....................     setup.Block_per_second = 100; 
69F8:  CLRF   x00
69FA:  MOVLW  64
69FC:  MOVLB  0
69FE:  MOVWF  xFF
.................... 	//setup.UART_Status = 1;// VERSION 3.3: 10.2.2016  
....................   power_level = setup.power_in[setup.power_level]; 
6A00:  BCF    FD8.0
6A02:  RLCF   xBB,W
6A04:  MOVWF  02
6A06:  RLCF   xBC,W
6A08:  MOVWF  03
6A0A:  MOVF   02,W
6A0C:  ADDLW  C4
6A0E:  MOVWF  FE9
6A10:  MOVLW  00
6A12:  ADDWFC 03,W
6A14:  MOVWF  FEA
6A16:  MOVFF  FEC,03
6A1A:  MOVF   FED,F
6A1C:  MOVFF  FEF,1C
6A20:  MOVFF  03,1D
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6A24:  BCF    FD8.0
6A26:  RLCF   xF3,W
6A28:  MOVWF  02
6A2A:  RLCF   xF4,W
6A2C:  MOVWF  03
6A2E:  MOVF   02,W
6A30:  ADDLW  C4
6A32:  MOVWF  FE9
6A34:  MOVLW  00
6A36:  ADDWFC 03,W
6A38:  MOVWF  FEA
6A3A:  MOVFF  FEC,03
6A3E:  MOVF   FED,F
6A40:  MOVFF  FEF,1A
6A44:  MOVFF  03,1B
....................   power_control = 1000; 
6A48:  MOVLW  03
6A4A:  MOVWF  1F
6A4C:  MOVLW  E8
6A4E:  MOVWF  1E
....................   power_output(); 
6A50:  CALL   1E96
....................    
....................  
....................   PLL_initialize(); 
6A54:  GOTO   2022
....................   delay_ms(50); 
6A58:  MOVLW  32
6A5A:  MOVLB  2
6A5C:  MOVWF  x42
6A5E:  MOVLB  0
6A60:  CALL   0EFE
....................   update_all(); 
6A64:  CALL   1D24
....................  
....................   output_high(D2A_RESET); 
6A68:  BSF    F8A.3
....................   delay_ms(50); 
6A6A:  MOVLW  32
6A6C:  MOVLB  2
6A6E:  MOVWF  x42
6A70:  MOVLB  0
6A72:  CALL   0EFE
....................   output_low(D2A_RESET); 
6A76:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
6A78:  MOVLW  0D
6A7A:  MOVLB  1
6A7C:  MOVWF  xAE
6A7E:  MOVLW  0A
6A80:  MOVWF  xAF
6A82:  CLRF   xB0
6A84:  MOVLW  01
6A86:  MOVLB  2
6A88:  MOVWF  x6C
6A8A:  MOVLW  AE
6A8C:  MOVWF  x6B
6A8E:  MOVLB  0
6A90:  CALL   20CC
....................   COM1_send_str(VERSION); 
6A94:  MOVLW  01
6A96:  MOVWF  FEA
6A98:  MOVLW  AE
6A9A:  MOVWF  FE9
6A9C:  MOVLW  0E
6A9E:  MOVWF  01
6AA0:  CLRF   FF7
6AA2:  MOVLW  00
6AA4:  CALL   0998
6AA8:  TBLRD*-
6AAA:  TBLRD*+
6AAC:  MOVFF  FF5,FEE
6AB0:  DECFSZ 01,F
6AB2:  BRA    6AAA
6AB4:  MOVLW  01
6AB6:  MOVLB  2
6AB8:  MOVWF  x6C
6ABA:  MOVLW  AE
6ABC:  MOVWF  x6B
6ABE:  MOVLB  0
6AC0:  CALL   20CC
....................   COM1_send_str("\r\n"); 
6AC4:  MOVLW  0D
6AC6:  MOVLB  1
6AC8:  MOVWF  xAE
6ACA:  MOVLW  0A
6ACC:  MOVWF  xAF
6ACE:  CLRF   xB0
6AD0:  MOVLW  01
6AD2:  MOVLB  2
6AD4:  MOVWF  x6C
6AD6:  MOVLW  AE
6AD8:  MOVWF  x6B
6ADA:  MOVLB  0
6ADC:  CALL   20CC
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
6AE0:  MOVLB  2
6AE2:  CLRF   x32
6AE4:  MOVFF  1AD,234
6AE8:  MOVFF  1AC,233
6AEC:  MOVLB  0
6AEE:  CALL   0FCC
....................  
....................  
....................   delay_ms(500); 
6AF2:  MOVLW  02
6AF4:  MOVLB  1
6AF6:  MOVWF  xBC
6AF8:  MOVLW  FA
6AFA:  MOVLB  2
6AFC:  MOVWF  x42
6AFE:  MOVLB  0
6B00:  CALL   0EFE
6B04:  MOVLB  1
6B06:  DECFSZ xBC,F
6B08:  BRA    6AF8
....................   output_high(POWER_EN); 
6B0A:  BSF    F8C.6
....................  
.................... update_all(); 
6B0C:  MOVLB  0
6B0E:  CALL   1D24
....................  
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6B12:  CLRWDT
....................     timer_tick(); 
6B14:  GOTO   21AA
....................     if (TMR_100mS_BLINK) 
6B18:  BTFSS  2B.0
6B1A:  BRA    6B24
....................       { 
....................       TMR_100mS_BLINK = 0; 
6B1C:  BCF    2B.0
....................       output_toggle(LED1); 
6B1E:  BTG    F8A.4
....................       delay_us(1); 
6B20:  BRA    6B22
6B22:  BRA    6B24
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6B24:  DECFSZ 32,W
6B26:  BRA    6B5E
6B28:  MOVF   36,F
6B2A:  BNZ   6B5E
6B2C:  MOVLB  1
6B2E:  DECFSZ x0F,W
6B30:  BRA    6B36
6B32:  MOVF   x10,F
6B34:  BZ    6B4A
6B36:  MOVF   x0F,F
6B38:  BTFSC  FD8.2
6B3A:  BRA    6B40
6B3C:  MOVLB  0
6B3E:  BRA    6B5E
6B40:  MOVF   x10,F
6B42:  BTFSC  FD8.2
6B44:  BRA    6B4A
6B46:  MOVLB  0
6B48:  BRA    6B5E
....................     	{         
.................... 				if (setup.UART_Status == 1) 
6B4A:  MOVLB  0
6B4C:  DECFSZ xFC,W
6B4E:  BRA    6B5E
.................... 		      { 
.................... 			      stay_on = 1; 
6B50:  MOVLB  1
6B52:  CLRF   x10
6B54:  MOVLW  01
6B56:  MOVWF  x0F
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
6B58:  MOVLB  0
6B5A:  GOTO   281C
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6B5E:  MOVLB  1
6B60:  MOVF   x0F,W
6B62:  SUBLW  02
6B64:  BNZ   6B6A
6B66:  MOVF   x10,F
6B68:  BZ    6B72
6B6A:  MOVF   x0F,F
6B6C:  BNZ   6B82
6B6E:  MOVF   x10,F
6B70:  BNZ   6B82
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6B72:  MOVLB  0
6B74:  BRA    6906
.................... 		   			if (COM1_rxo != 0 ) 
6B76:  MOVF   36,F
6B78:  BZ    6B84
.................... 		   				stay_on = 2; 
6B7A:  MOVLB  1
6B7C:  CLRF   x10
6B7E:  MOVLW  02
6B80:  MOVWF  x0F
6B82:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6B84:  CALL   1E96
....................    } 
6B88:  BRA    6B12
....................   } 
....................  
6B8A:  BRA    6B8A

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
