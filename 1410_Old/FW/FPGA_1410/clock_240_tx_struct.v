//
// Module Haim.Clock_240_tx.struct
//
// Created:
//          by - user.UNKNOWN (USER-PC)
//          at - 09:47:28 16/06/14
//
// Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
//

`resetall
`timescale 1ns/10ps
module Clock_240_tx( 
   // Port Declarations
   input   wire            Bit_clock, 
   input   wire            Bit_data, 
   input   wire            SPI_CS, 
   input   wire            SPI_DI, 
   input   wire            SPI_clk, 
   input   wire            inclk0, 
   output  wire            DAC_clk_m, 
   output  wire            DAC_clk_p, 
   output  reg     [13:0]  I, 
   output  wire            LED1, 
   output  wire            LED2, 
   output  wire            LED3, 
   output  wire            LED4, 
   output  reg     [13:0]  Q, 
   output  wire            TP3, 
   output  wire            TP4, 
   output  wire            TP5, 
   output  wire            TP6, 
   output  wire            test, 
   inout   wire            SPI_DO
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         CLK_POL;
wire         CLK_SRC;
wire         DAC_clk;
wire         DAC_clk_n;
wire  [3:0]  DAT_PAT;
wire         DAT_POL;
wire         DAT_SRC;
wire         Diff_en;
wire  [31:0] FB_RATE;
wire  [15:0] IIR;
wire  [13:0] I_p;
wire  [13:0] Q_p;
wire         RAND;
wire  [4:0]  REV;
wire         SDO_r;
wire  [6:0]  addr;
wire  [6:0]  addr_d;
wire  [31:0] bit_rate;
wire         clk;
wire         clk_120;
wire         clock_d;
wire         data_d;
wire  [8:0]  data_trans_cnt;
wire         gnd1;
wire         internal_data;
wire  [3:0]  mode;
wire         outside_freq_range;
wire  [13:0] ph_roll_0;
wire  [13:0] ph_roll_1;
wire  [13:0] ph_roll_2;
wire  [13:0] ph_roll_3;
wire  [13:0] ph_roll_4;
wire  [13:0] ph_roll_5;
wire  [13:0] ph_roll_6;
wire  [13:0] ph_roll_7;
wire  [13:0] phase_modulation;
wire  [13:0] phase_offset;
wire  [13:0] phase_test;
wire  [4:0]  pll_state;
wire  [31:0] quotient;
wire  [31:0] quotient_1;
wire  [13:0] roll_total_ddd;
wire         rst;
wire         rst_n;
reg   [14:0] shift;
wire  [16:0] shift_tst;
wire         steady_state;
wire  [2:0]  sym_count_dd;
wire  [31:0] sym_phase;
wire         sym_phase_of_d;
wire         test_clk;
wire         testa;
reg   [27:0] timer;
wire         transition_i;
wire         true_random;


// Instances 
ARTM_tx_240 transmitter( 
   .inclk0             (inclk0), 
   .data_in            (Bit_data), 
   .data_clock         (Bit_clock), 
   .mode               (mode), 
   .phase_offset       (phase_offset), 
   .bit_rate           (bit_rate), 
   .rst_n              (rst_n), 
   .rst_in             (), 
   .PB_nBB             (gnd1), 
   .CLK_POL            (CLK_POL), 
   .RAND               (RAND), 
   .CLK_SRC            (CLK_SRC), 
   .DAT_SRC            (DAT_SRC), 
   .DAT_POL            (DAT_POL), 
   .internal_data      (internal_data), 
   .Diff_en            (Diff_en), 
   .clk                (clk), 
   .rst                (rst), 
   .DAC_clk            (DAC_clk_p), 
   // NOT 
   // CONNECTED
   .DAC_clk_n          (DAC_clk_m), 
   .sine               (Q_p), 
   .cosine             (I_p), 
   .bit_clock          (TP6), 
   .FB_RATE            (FB_RATE), 
   .tx_sig             (), 
   .scram_data         (), 
   .sym_phase_of       (), 
   .steady_state       (steady_state), 
   .bit_0_a_ddd        (), 
   .bit_0_b_ddd        (), 
   .pll_state          (pll_state), 
   .three_cnt_a        (), 
   .odd_ev             (), 
   .bit_0              (), 
   .bit_1              (), 
   .sym_phase          (sym_phase), 
   .true_random        (true_random), 
   .phase_modulation   (phase_modulation), 
   .transition_d       (), 
   .transition_i       (transition_i), 
   .data_d             (data_d), 
   .clock_d            (clock_d), 
   .outside_freq_range (outside_freq_range), 
   .IIR                (IIR), 
   .clk_120            (clk_120), 
   .roll_total_ddd     (roll_total_ddd), 
   .phase_test         (phase_test), 
   .phase_0            (), 
   .phase_1            (), 
   .phase_2            (), 
   .phase_3            (), 
   .phase_4            (), 
   .phase_5            (), 
   .phase_6            (), 
   .phase_7            (), 
   .lookup_rslt_4      (), 
   .SOQPSK_lookup_4    (), 
   .sym_count_dd       (sym_count_dd), 
   .sym_phase_of_d     (sym_phase_of_d), 
   .sym_phase_of_dd    (), 
   // 
   // N
   // O
   // T
   // 
   // 
   // C
   // O
   // N
   // N
   // E
   // C
   // T
   // E
   // D
   .ph_roll_0          (ph_roll_0), 
   .ph_roll_1          (ph_roll_1), 
   .ph_roll_2          (ph_roll_2), 
   .ph_roll_3          (ph_roll_3), 
   .ph_roll_4          (ph_roll_4), 
   .ph_roll_5          (ph_roll_5), 
   .ph_roll_6          (ph_roll_6), 
   .ph_roll_7          (ph_roll_7), 
   .phase_total_d1     (), 
   .phase_total_d2     (), 
   .flip_ddd           (), 
   .phase_fm_0         (), 
   .phase_fm_1         (), 
   .fm_phase_of        (), 
   .fm_phase_lu_0      (), 
   .alpha_fm_0_dd      (), 
   .phase_fm_rr        (), 
   .phase_fm_r         (), 
   .FM_lookup_addr_0   (), 
   .FM_lookup_addr_1   (), 
   .quotient           (quotient), 
   .quotient_1         (quotient_1), 
   .testa              (testa), 
   .phase_err          (), 
   .data_trans_cnt     (data_trans_cnt)
); 

Internal_Data_Gen internal( 
   .clk           (clk_120), 
   .rst           (rst), 
   .data_clock    (sym_phase[31]), 
   .DAT_PAT       (DAT_PAT), 
   .internal_data (internal_data), 
   .shift         (shift_tst)
); 

serial_IFC SPI( 
   .clk          (clk_120), 
   .rst          (rst), 
   .CSB          (SPI_CS), 
   .SCLK         (SPI_clk), 
   .SDI          (SPI_DI), 
   .SDO          (SPI_DO), 
   .PLL_lock     (steady_state), 
   .REV          (REV), 
   .FB_R         (FB_RATE), 
   .mode         (mode), 
   .phase_offset (phase_offset), 
   .bit_rate     (bit_rate), 
   .CLK_POL      (CLK_POL), 
   .DAT_POL      (DAT_POL), 
   .RAND         (RAND), 
   .addr_vld     (), 
   .word_cnt     (), 
   .num_bytes    (), 
   // NOT 
   // CONNECTED
   .addr         (addr), 
   .addr_d       (addr_d), 
   .bit_cnt      (), 
   .bit_cnt_wr   (), 
   .addr_wr_en   (), 
   .data_wr_en   (), 
   .data_wr_en_d (), 
   .rx_data      (), 
   .rd_nwr       (), 
   .SDO_r        (SDO_r), 
   .CLK_SRC      (CLK_SRC), 
   .DAT_SRC      (DAT_SRC), 
   .DAT_PAT      (DAT_PAT), 
   .Diff_en      (Diff_en), 
   .shift        (), 
   .addr_incr_en (), 
   .addr_incr    ()
); 

// HDL Embedded Text Block 2 B1
assign TP5=rst;
assign TP4=rst;
assign TP3=rst;
// HDL Embedded Text Block 3 C2
assign REV=5'd1;
// HDL Embedded Text Block 4 e3
assign rst_n= (shift!=16'hfffe);
// HDL Embedded Text Block 5 e4
always @ (posedge clk)
   if (rst==1'd1)
      timer<=28'd0;
   else
      timer<=timer+28'd1;
// HDL Embedded Text Block 6 B5
assign test=internal_data;
// HDL Embedded Text Block 7 FF0
always @ (posedge clk)
   if (rst==1'd1)
   begin
         I<=14'd0;
         Q<=14'd0;
      end
   else 
      begin
         I<={I_p};
         Q<={Q_p};
      end
// HDL Embedded Text Block 8 e6
always @(posedge clk)
 if (shift==15'd0)
   shift=15'h5aaa;
else if (shift!=15'h1110)
   shift<=(shift!=15'h7fff)?(shift+15'd1):shift;
// HDL Embedded Text Block 9 g0
assign gnd1 = 1'b0;
// HDL Embedded Text Block 10 B0
assign LED1=timer[27];
assign LED2=timer[27];
assign LED3=timer[27];
assign LED4=timer[27];

endmodule // Clock_240_tx

