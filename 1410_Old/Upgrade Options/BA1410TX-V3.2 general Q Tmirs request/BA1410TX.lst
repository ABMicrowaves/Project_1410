CCS PCH C Compiler, Version 4.137, 5799               18-ιπε-15 10:45

               Filename: D:\nati\projects\1410TX\BA1410TX-V3.2\BA1410TX.lst

               ROM used: 24210 bytes (74%)
                         Largest free fragment is 8554
               RAM used: 379 (25%) at main() level
                         594 (39%) worst case
               Stack:    9 worst case (8 in main + 1 for interrupts)

*
0000:  GOTO   5CDE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   09B2
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   09E2
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   09E8
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   09EE
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   09AC
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVFF  15,FF5
00CA:  MOVFF  16,FF6
00CE:  MOVFF  17,FF7
00D2:  MOVF   04,W
00D4:  MOVFF  06,FE0
00D8:  MOVFF  05,FD8
00DC:  RETFIE 0
.................... /*  
.................... 	========== program changes protocol ============= 
.................... 	=	Date: 18.1.15 
.................... 	=	Cancel => status without LI____  //if (!ttccp_login) break; 
.................... 	=	chenge => Help edded CP, CS, TE, Q 
.................... 	= 
.................... 	================================================= 
.................... */ 
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0CD8:  MOVLW  02
0CDA:  MOVWF  FEA
0CDC:  MOVLW  15
0CDE:  MOVWF  FE9
0CE0:  MOVF   FEF,W
0CE2:  BZ    0D00
0CE4:  MOVLW  05
0CE6:  MOVWF  01
0CE8:  CLRF   00
0CEA:  DECFSZ 00,F
0CEC:  BRA    0CEA
0CEE:  DECFSZ 01,F
0CF0:  BRA    0CE8
0CF2:  MOVLW  2E
0CF4:  MOVWF  00
0CF6:  DECFSZ 00,F
0CF8:  BRA    0CF6
0CFA:  BRA    0CFC
0CFC:  DECFSZ FEF,F
0CFE:  BRA    0CE4
0D00:  RETURN 0
*
1EF2:  MOVLW  04
1EF4:  MOVLB  2
1EF6:  SUBWF  x43,F
1EF8:  BNC   1F0E
1EFA:  MOVLW  02
1EFC:  MOVWF  FEA
1EFE:  MOVLW  43
1F00:  MOVWF  FE9
1F02:  MOVF   FEF,W
1F04:  BZ    1F0E
1F06:  BRA    1F0A
1F08:  NOP   
1F0A:  DECFSZ FEF,F
1F0C:  BRA    1F08
1F0E:  MOVLB  0
1F10:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
.................... #define VERSION " BA1410TX V3.2" 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... UINT manual_power = 0xFFFF; 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
.................... 	   UINT  cot; 
.................... 	   UINT  rc; 
.................... 	   UINT  rp; 
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT a=2, b=2; 
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0DAC:  BCF    F89.2
....................  
....................   if (channel) 
0DAE:  MOVLB  2
0DB0:  MOVF   x02,F
0DB2:  BZ    0DB8
....................     output_high(DA2_DAT);    // send to VOUTB 
0DB4:  BSF    F89.4
....................   else 
0DB6:  BRA    0DBA
....................     output_low(DA2_DAT);    // send to VOUTA 
0DB8:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0DBA:  BSF    F89.3
....................   delay_cycles(15); 
0DBC:  MOVLW  04
0DBE:  MOVWF  00
0DC0:  DECFSZ 00,F
0DC2:  BRA    0DC0
0DC4:  BRA    0DC6
....................   output_low(DA2_CLK); 
0DC6:  BCF    F89.3
....................   delay_cycles(15); 
0DC8:  MOVLW  04
0DCA:  MOVWF  00
0DCC:  DECFSZ 00,F
0DCE:  BRA    0DCC
0DD0:  BRA    0DD2
....................  
....................   output_low(DA2_DAT); 
0DD2:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0DD4:  BSF    F89.3
....................   delay_cycles(15); 
0DD6:  MOVLW  04
0DD8:  MOVWF  00
0DDA:  DECFSZ 00,F
0DDC:  BRA    0DDA
0DDE:  BRA    0DE0
....................   output_low(DA2_CLK); 
0DE0:  BCF    F89.3
....................   delay_cycles(15); 
0DE2:  MOVLW  04
0DE4:  MOVWF  00
0DE6:  DECFSZ 00,F
0DE8:  BRA    0DE6
0DEA:  BRA    0DEC
....................  
....................   output_high(DA2_CLK); 
0DEC:  BSF    F89.3
....................   delay_cycles(15); 
0DEE:  MOVLW  04
0DF0:  MOVWF  00
0DF2:  DECFSZ 00,F
0DF4:  BRA    0DF2
0DF6:  BRA    0DF8
....................   output_low(DA2_CLK); 
0DF8:  BCF    F89.3
....................   delay_cycles(15); 
0DFA:  MOVLW  04
0DFC:  MOVWF  00
0DFE:  DECFSZ 00,F
0E00:  BRA    0DFE
0E02:  BRA    0E04
....................  
....................   output_high(DA2_CLK); 
0E04:  BSF    F89.3
....................   delay_cycles(15); 
0E06:  MOVLW  04
0E08:  MOVWF  00
0E0A:  DECFSZ 00,F
0E0C:  BRA    0E0A
0E0E:  BRA    0E10
....................   output_low(DA2_CLK); 
0E10:  BCF    F89.3
....................   delay_cycles(15); 
0E12:  MOVLW  04
0E14:  MOVWF  00
0E16:  DECFSZ 00,F
0E18:  BRA    0E16
0E1A:  BRA    0E1C
....................  
....................  
....................   output_high(DA2_CLK); 
0E1C:  BSF    F89.3
....................   if (level & 0x0200) 
0E1E:  ANDLW  00
0E20:  MOVWF  00
0E22:  MOVF   x04,W
0E24:  ANDLW  02
0E26:  MOVWF  03
0E28:  MOVF   00,W
0E2A:  IORWF  03,W
0E2C:  BZ    0E32
....................     output_high(DA2_DAT); 
0E2E:  BSF    F89.4
....................   else 
0E30:  BRA    0E34
....................     output_low(DA2_DAT); 
0E32:  BCF    F89.4
....................   delay_cycles(15); 
0E34:  MOVLW  04
0E36:  MOVWF  00
0E38:  DECFSZ 00,F
0E3A:  BRA    0E38
0E3C:  BRA    0E3E
....................   output_low(DA2_CLK); 
0E3E:  BCF    F89.3
....................   delay_cycles(15); 
0E40:  MOVLW  04
0E42:  MOVWF  00
0E44:  DECFSZ 00,F
0E46:  BRA    0E44
0E48:  BRA    0E4A
....................  
....................   output_high(DA2_CLK); 
0E4A:  BSF    F89.3
....................   if (level & 0x0100) 
0E4C:  ANDLW  00
0E4E:  MOVWF  00
0E50:  MOVF   x04,W
0E52:  ANDLW  01
0E54:  MOVWF  03
0E56:  MOVF   00,W
0E58:  IORWF  03,W
0E5A:  BZ    0E60
....................     output_high(DA2_DAT); 
0E5C:  BSF    F89.4
....................   else 
0E5E:  BRA    0E62
....................     output_low(DA2_DAT); 
0E60:  BCF    F89.4
....................   output_low(DA2_CLK); 
0E62:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0E64:  BSF    F89.3
....................   if (level & 0x0080) 
0E66:  MOVF   x03,W
0E68:  ANDLW  80
0E6A:  MOVWF  00
0E6C:  CLRF   03
0E6E:  MOVF   00,W
0E70:  IORWF  03,W
0E72:  BZ    0E78
....................     output_high(DA2_DAT); 
0E74:  BSF    F89.4
....................   else 
0E76:  BRA    0E7A
....................     output_low(DA2_DAT); 
0E78:  BCF    F89.4
....................   delay_cycles(15); 
0E7A:  MOVLW  04
0E7C:  MOVWF  00
0E7E:  DECFSZ 00,F
0E80:  BRA    0E7E
0E82:  BRA    0E84
....................   output_low(DA2_CLK); 
0E84:  BCF    F89.3
....................   delay_cycles(15); 
0E86:  MOVLW  04
0E88:  MOVWF  00
0E8A:  DECFSZ 00,F
0E8C:  BRA    0E8A
0E8E:  BRA    0E90
....................  
....................   output_high(DA2_CLK); 
0E90:  BSF    F89.3
....................   if (level & 0x0040) 
0E92:  MOVF   x03,W
0E94:  ANDLW  40
0E96:  MOVWF  00
0E98:  CLRF   03
0E9A:  MOVF   00,W
0E9C:  IORWF  03,W
0E9E:  BZ    0EA4
....................     output_high(DA2_DAT); 
0EA0:  BSF    F89.4
....................   else 
0EA2:  BRA    0EA6
....................     output_low(DA2_DAT); 
0EA4:  BCF    F89.4
....................   delay_cycles(15); 
0EA6:  MOVLW  04
0EA8:  MOVWF  00
0EAA:  DECFSZ 00,F
0EAC:  BRA    0EAA
0EAE:  BRA    0EB0
....................   output_low(DA2_CLK); 
0EB0:  BCF    F89.3
....................   delay_cycles(15); 
0EB2:  MOVLW  04
0EB4:  MOVWF  00
0EB6:  DECFSZ 00,F
0EB8:  BRA    0EB6
0EBA:  BRA    0EBC
....................  
....................   output_high(DA2_CLK); 
0EBC:  BSF    F89.3
....................   if (level & 0x0020) 
0EBE:  MOVF   x03,W
0EC0:  ANDLW  20
0EC2:  MOVWF  00
0EC4:  CLRF   03
0EC6:  MOVF   00,W
0EC8:  IORWF  03,W
0ECA:  BZ    0ED0
....................     output_high(DA2_DAT); 
0ECC:  BSF    F89.4
....................   else 
0ECE:  BRA    0ED2
....................     output_low(DA2_DAT); 
0ED0:  BCF    F89.4
....................   output_low(DA2_CLK); 
0ED2:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0ED4:  BSF    F89.3
....................   if (level & 0x0010) 
0ED6:  MOVF   x03,W
0ED8:  ANDLW  10
0EDA:  MOVWF  00
0EDC:  CLRF   03
0EDE:  MOVF   00,W
0EE0:  IORWF  03,W
0EE2:  BZ    0EE8
....................     output_high(DA2_DAT); 
0EE4:  BSF    F89.4
....................   else 
0EE6:  BRA    0EEA
....................     output_low(DA2_DAT); 
0EE8:  BCF    F89.4
....................   delay_cycles(15); 
0EEA:  MOVLW  04
0EEC:  MOVWF  00
0EEE:  DECFSZ 00,F
0EF0:  BRA    0EEE
0EF2:  BRA    0EF4
....................   output_low(DA2_CLK); 
0EF4:  BCF    F89.3
....................   delay_cycles(15); 
0EF6:  MOVLW  04
0EF8:  MOVWF  00
0EFA:  DECFSZ 00,F
0EFC:  BRA    0EFA
0EFE:  BRA    0F00
....................  
....................   output_high(DA2_CLK); 
0F00:  BSF    F89.3
....................   if (level & 0x0008) 
0F02:  MOVF   x03,W
0F04:  ANDLW  08
0F06:  MOVWF  00
0F08:  CLRF   03
0F0A:  MOVF   00,W
0F0C:  IORWF  03,W
0F0E:  BZ    0F14
....................     output_high(DA2_DAT); 
0F10:  BSF    F89.4
....................   else 
0F12:  BRA    0F16
....................     output_low(DA2_DAT); 
0F14:  BCF    F89.4
....................   output_low(DA2_CLK); 
0F16:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0F18:  BSF    F89.3
....................   if (level & 0x0004) 
0F1A:  MOVF   x03,W
0F1C:  ANDLW  04
0F1E:  MOVWF  00
0F20:  CLRF   03
0F22:  MOVF   00,W
0F24:  IORWF  03,W
0F26:  BZ    0F2C
....................     output_high(DA2_DAT); 
0F28:  BSF    F89.4
....................   else 
0F2A:  BRA    0F2E
....................     output_low(DA2_DAT); 
0F2C:  BCF    F89.4
....................   delay_cycles(15); 
0F2E:  MOVLW  04
0F30:  MOVWF  00
0F32:  DECFSZ 00,F
0F34:  BRA    0F32
0F36:  BRA    0F38
....................   output_low(DA2_CLK); 
0F38:  BCF    F89.3
....................   delay_cycles(15); 
0F3A:  MOVLW  04
0F3C:  MOVWF  00
0F3E:  DECFSZ 00,F
0F40:  BRA    0F3E
0F42:  BRA    0F44
....................  
....................   output_high(DA2_CLK); 
0F44:  BSF    F89.3
....................   if (level & 0x0002) 
0F46:  MOVF   x03,W
0F48:  ANDLW  02
0F4A:  MOVWF  00
0F4C:  CLRF   03
0F4E:  MOVF   00,W
0F50:  IORWF  03,W
0F52:  BZ    0F58
....................     output_high(DA2_DAT); 
0F54:  BSF    F89.4
....................   else 
0F56:  BRA    0F5A
....................     output_low(DA2_DAT); 
0F58:  BCF    F89.4
....................   output_low(DA2_CLK); 
0F5A:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0F5C:  BSF    F89.3
....................   if (level & 0x0001) 
0F5E:  MOVF   x03,W
0F60:  ANDLW  01
0F62:  MOVWF  00
0F64:  CLRF   03
0F66:  MOVF   00,W
0F68:  IORWF  03,W
0F6A:  BZ    0F70
....................     output_high(DA2_DAT); 
0F6C:  BSF    F89.4
....................   else 
0F6E:  BRA    0F72
....................     output_low(DA2_DAT); 
0F70:  BCF    F89.4
....................   delay_cycles(15); 
0F72:  MOVLW  04
0F74:  MOVWF  00
0F76:  DECFSZ 00,F
0F78:  BRA    0F76
0F7A:  BRA    0F7C
....................   output_low(DA2_CLK); 
0F7C:  BCF    F89.3
....................   delay_cycles(15); 
0F7E:  MOVLW  04
0F80:  MOVWF  00
0F82:  DECFSZ 00,F
0F84:  BRA    0F82
0F86:  BRA    0F88
....................  
....................  
....................   output_high(DA2_CLK); 
0F88:  BSF    F89.3
....................   delay_cycles(15); 
0F8A:  MOVLW  04
0F8C:  MOVWF  00
0F8E:  DECFSZ 00,F
0F90:  BRA    0F8E
0F92:  BRA    0F94
....................   output_low(DA2_CLK); 
0F94:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0F96:  BSF    F89.3
....................   delay_cycles(15); 
0F98:  MOVLW  04
0F9A:  MOVWF  00
0F9C:  DECFSZ 00,F
0F9E:  BRA    0F9C
0FA0:  BRA    0FA2
....................   delay_cycles(15); 
0FA2:  MOVLW  04
0FA4:  MOVWF  00
0FA6:  DECFSZ 00,F
0FA8:  BRA    0FA6
0FAA:  BRA    0FAC
....................   output_low(DA2_CLK); 
0FAC:  BCF    F89.3
....................   delay_cycles(15); 
0FAE:  MOVLW  04
0FB0:  MOVWF  00
0FB2:  DECFSZ 00,F
0FB4:  BRA    0FB2
0FB6:  BRA    0FB8
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
0FB8:  BSF    F89.2
....................   delay_cycles(15); 
0FBA:  MOVLW  04
0FBC:  MOVWF  00
0FBE:  DECFSZ 00,F
0FC0:  BRA    0FBE
0FC2:  BRA    0FC4
....................   output_low(DA2_LAT); 
0FC4:  BCF    F89.1
....................   delay_cycles(15); 
0FC6:  MOVLW  04
0FC8:  MOVWF  00
0FCA:  DECFSZ 00,F
0FCC:  BRA    0FCA
0FCE:  BRA    0FD0
....................   output_high(DA2_LAT); 
0FD0:  BSF    F89.1
....................   delay_cycles(15); 
0FD2:  MOVLW  04
0FD4:  MOVWF  00
0FD6:  DECFSZ 00,F
0FD8:  BRA    0FD6
0FDA:  BRA    0FDC
....................   } 
0FDC:  MOVLB  0
0FDE:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
53FE:  BCF    F8A.1
....................   addr |= 0x80; 
5400:  MOVLB  1
5402:  BSF    xD4.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5404:  CLRF   xD6
5406:  MOVF   xD6,W
5408:  SUBLW  07
540A:  BNC   5432
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
540C:  MOVF   xD4,W
540E:  ANDLW  80
5410:  BNZ   5416
5412:  BCF    F8C.4
5414:  BRA    5418
5416:  BSF    F8C.4
....................     delay_us(1); 
5418:  BRA    541A
541A:  BRA    541C
....................     output_high(D2A_SCLK); 
541C:  BSF    F8C.0
....................     delay_us(1); 
541E:  BRA    5420
5420:  BRA    5422
....................     output_low(D2A_SCLK); 
5422:  BCF    F8C.0
....................     delay_us(1); 
5424:  BRA    5426
5426:  BRA    5428
....................     } 
5428:  MOVF   xD6,W
542A:  INCF   xD6,F
542C:  BCF    FD8.0
542E:  RLCF   xD4,F
5430:  BRA    5406
....................   for (ix = 0; ix < 8; ix++) 
5432:  CLRF   xD6
5434:  MOVF   xD6,W
5436:  SUBLW  07
5438:  BNC   5454
....................     { 
....................     output_high(D2A_SCLK); 
543A:  BSF    F8C.0
....................     delay_us(1); 
543C:  BRA    543E
543E:  BRA    5440
....................     output_low(D2A_SCLK); 
5440:  BCF    F8C.0
....................     delay_us(1); 
5442:  BRA    5444
5444:  BRA    5446
....................     dout <<= 1; 
5446:  BCF    FD8.0
5448:  RLCF   xD5,F
....................     if (input(D2A_MISO)) 
544A:  BTFSS  F83.1
544C:  BRA    5450
....................       dout |= 1; 
544E:  BSF    xD5.0
....................     } 
5450:  INCF   xD6,F
5452:  BRA    5434
....................   output_high(D2A_CSB); 
5454:  BSF    F8A.1
....................   return dout; 
5456:  MOVFF  1D5,01
....................   } 
545A:  MOVLB  0
545C:  GOTO   58A0 (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
4BBA:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
4BBC:  MOVLB  1
4BBE:  CLRF   xD7
4BC0:  MOVF   xD7,W
4BC2:  SUBLW  07
4BC4:  BNC   4BEC
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
4BC6:  MOVF   xD4,W
4BC8:  ANDLW  80
4BCA:  BNZ   4BD0
4BCC:  BCF    F8C.4
4BCE:  BRA    4BD2
4BD0:  BSF    F8C.4
....................     delay_us(1); 
4BD2:  BRA    4BD4
4BD4:  BRA    4BD6
....................     output_high(D2A_SCLK); 
4BD6:  BSF    F8C.0
....................     delay_us(1); 
4BD8:  BRA    4BDA
4BDA:  BRA    4BDC
....................     output_low(D2A_SCLK); 
4BDC:  BCF    F8C.0
....................     delay_us(1); 
4BDE:  BRA    4BE0
4BE0:  BRA    4BE2
....................     } 
4BE2:  MOVF   xD7,W
4BE4:  INCF   xD7,F
4BE6:  BCF    FD8.0
4BE8:  RLCF   xD4,F
4BEA:  BRA    4BC0
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
4BEC:  CLRF   xD7
4BEE:  MOVF   xD7,W
4BF0:  SUBLW  07
4BF2:  BNC   4C1A
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
4BF4:  MOVF   xD5,W
4BF6:  ANDLW  80
4BF8:  BNZ   4BFE
4BFA:  BCF    F8C.4
4BFC:  BRA    4C00
4BFE:  BSF    F8C.4
....................     delay_us(1); 
4C00:  BRA    4C02
4C02:  BRA    4C04
....................     output_high(D2A_SCLK); 
4C04:  BSF    F8C.0
....................     delay_us(1); 
4C06:  BRA    4C08
4C08:  BRA    4C0A
....................     output_low(D2A_SCLK); 
4C0A:  BCF    F8C.0
....................     delay_us(1); 
4C0C:  BRA    4C0E
4C0E:  BRA    4C10
....................     } 
4C10:  MOVF   xD7,W
4C12:  INCF   xD7,F
4C14:  BCF    FD8.0
4C16:  RLCF   xD5,F
4C18:  BRA    4BEE
....................   output_high(D2A_CSB); 
4C1A:  BSF    F8A.1
....................   return dout; 
4C1C:  MOVFF  1D6,01
....................   } 
4C20:  MOVLB  0
4C22:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
12FC:  MOVLW  08
12FE:  MOVLB  2
1300:  MOVWF  x10
1302:  MOVF   x10,F
1304:  BZ    1342
....................     { 
....................     if (data & 0X80) 
1306:  BTFSS  x0F.7
1308:  BRA    130E
....................       output_high(PLL_DAT); 
130A:  BSF    F8B.3
....................     else 
130C:  BRA    1310
....................       output_low(PLL_DAT); 
130E:  BCF    F8B.3
....................     delay_us(10); 
1310:  MOVLW  0C
1312:  MOVWF  00
1314:  DECFSZ 00,F
1316:  BRA    1314
1318:  BRA    131A
131A:  NOP   
....................     output_high(PLL_CLK); 
131C:  BSF    F8B.2
....................     delay_us(10); 
131E:  MOVLW  0C
1320:  MOVWF  00
1322:  DECFSZ 00,F
1324:  BRA    1322
1326:  BRA    1328
1328:  NOP   
....................     output_low(PLL_CLK); 
132A:  BCF    F8B.2
....................  
....................     delay_us(25); 
132C:  MOVLW  20
132E:  MOVWF  00
1330:  DECFSZ 00,F
1332:  BRA    1330
1334:  BRA    1336
1336:  NOP   
....................     } 
1338:  MOVF   x10,W
133A:  DECF   x10,F
133C:  BCF    FD8.0
133E:  RLCF   x0F,F
1340:  BRA    1302
....................   output_low(PLL_DAT); 
1342:  BCF    F8B.3
....................   output_low(PLL_CLK); 
1344:  BCF    F8B.2
....................   } 
1346:  MOVLB  0
1348:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
134A:  CLRWDT
....................   disable_interrupts(GLOBAL); 
134C:  BCF    FF2.6
134E:  BCF    FF2.7
1350:  BTFSC  FF2.7
1352:  BRA    134E
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
1354:  MOVFF  20D,20E
1358:  MOVFF  20D,20F
135C:  RCALL  12FC
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
135E:  MOVFF  20C,20E
1362:  MOVFF  20C,20F
1366:  RCALL  12FC
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1368:  MOVFF  20B,20E
136C:  MOVFF  20B,20F
1370:  RCALL  12FC
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
1372:  MOVFF  20A,20E
1376:  MOVFF  20A,20F
137A:  RCALL  12FC
....................   delay_us(40); 
137C:  MOVLW  34
137E:  MOVWF  00
1380:  DECFSZ 00,F
1382:  BRA    1380
1384:  BRA    1386
1386:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1388:  BSF    F8B.1
....................   delay_us(5); 
138A:  MOVLW  06
138C:  MOVWF  00
138E:  DECFSZ 00,F
1390:  BRA    138E
1392:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
1394:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
1396:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
1398:  MOVLW  C0
139A:  IORWF  FF2,F
....................   restart_wdt(); 
139C:  CLRWDT
....................   } 
139E:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
1E48:  MOVLB  1
1E4A:  CLRF   x89
1E4C:  MOVLW  05
1E4E:  MOVWF  x88
1E50:  MOVF   x89,W
1E52:  SUBLW  05
1E54:  BNC   1EC2
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
1E56:  MOVF   x88,W
1E58:  MULLW  04
1E5A:  MOVF   FF3,W
1E5C:  CLRF   03
1E5E:  MOVLB  0
1E60:  CALL   00DE
1E64:  TBLRD*+
1E66:  MOVFF  FF5,01
1E6A:  TBLRD*+
1E6C:  MOVFF  FF5,02
1E70:  TBLRD*+
1E72:  MOVFF  FF5,03
1E76:  MOVFF  03,187
1E7A:  MOVFF  02,186
1E7E:  MOVFF  01,185
1E82:  MOVFF  FE8,184
....................     prog |= (ULONG)idx; 
1E86:  MOVFF  188,00
1E8A:  CLRF   01
1E8C:  CLRF   02
1E8E:  CLRF   03
1E90:  MOVF   00,W
1E92:  MOVLB  1
1E94:  IORWF  x84,F
1E96:  MOVF   01,W
1E98:  IORWF  x85,F
1E9A:  MOVF   02,W
1E9C:  IORWF  x86,F
1E9E:  MOVF   03,W
1EA0:  IORWF  x87,F
....................     PLL_send_word(prog); 
1EA2:  MOVFF  187,20D
1EA6:  MOVFF  186,20C
1EAA:  MOVFF  185,20B
1EAE:  MOVFF  184,20A
1EB2:  MOVLB  0
1EB4:  CALL   134A
....................     } 
1EB8:  MOVLB  1
1EBA:  MOVF   x89,W
1EBC:  INCF   x89,F
1EBE:  DECF   x88,F
1EC0:  BRA    1E50
....................   delay_ms(250); 
1EC2:  MOVLW  FA
1EC4:  MOVLB  2
1EC6:  MOVWF  x15
1EC8:  MOVLB  0
1ECA:  CALL   0CD8
....................   PLL_send_word(prog); 
1ECE:  MOVFF  187,20D
1ED2:  MOVFF  186,20C
1ED6:  MOVFF  185,20B
1EDA:  MOVFF  184,20A
1EDE:  CALL   134A
....................   delay_ms(250); 
1EE2:  MOVLW  FA
1EE4:  MOVLB  2
1EE6:  MOVWF  x15
1EE8:  MOVLB  0
1EEA:  CALL   0CD8
....................   } 
1EEE:  GOTO   5DC4 (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
10D0:  MOVLB  2
10D2:  CLRF   x13
10D4:  CLRF   x12
10D6:  CLRF   x11
10D8:  MOVLW  02
10DA:  MOVWF  x10
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
10DC:  CLRWDT
....................   D = Frequest; 
10DE:  CLRF   x0F
10E0:  CLRF   x0E
10E2:  MOVFF  207,20D
10E6:  MOVFF  206,20C
....................   PLL_RFdiv = 0x0095003CL; 
10EA:  MOVLB  1
10EC:  CLRF   x0E
10EE:  MOVLW  95
10F0:  MOVWF  x0D
10F2:  CLRF   x0C
10F4:  MOVLW  3C
10F6:  MOVWF  x0B
....................   if (Frequest >= 22000) 
10F8:  MOVLB  2
10FA:  MOVF   x07,W
10FC:  SUBLW  54
10FE:  BC    1124
1100:  XORLW  FF
1102:  BNZ   110A
1104:  MOVF   x06,W
1106:  SUBLW  EF
1108:  BC    1124
....................     { 
....................     RFdiv = 1; 
110A:  CLRF   x13
110C:  CLRF   x12
110E:  CLRF   x11
1110:  MOVLW  01
1112:  MOVWF  x10
....................     PLL_RFdiv = 0x0085003CL; 
1114:  MOVLB  1
1116:  CLRF   x0E
1118:  MOVLW  85
111A:  MOVWF  x0D
111C:  CLRF   x0C
111E:  MOVLW  3C
1120:  MOVWF  x0B
1122:  MOVLB  2
....................     }   
....................   restart_wdt(); 
1124:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
1126:  MOVFF  20F,21C
112A:  MOVFF  20E,21B
112E:  MOVFF  20D,21A
1132:  MOVFF  20C,219
1136:  MOVFF  213,220
113A:  MOVFF  212,21F
113E:  MOVFF  211,21E
1142:  MOVFF  210,21D
1146:  MOVLB  0
1148:  RCALL  0FE0
114A:  MOVFF  03,217
114E:  MOVFF  02,216
1152:  MOVFF  01,215
1156:  MOVFF  00,214
115A:  MOVFF  03,21C
115E:  MOVFF  02,21B
1162:  MOVFF  01,21A
1166:  MOVFF  00,219
116A:  MOVLB  2
116C:  CLRF   x20
116E:  CLRF   x1F
1170:  CLRF   x1E
1172:  MOVLW  64
1174:  MOVWF  x1D
1176:  MOVLB  0
1178:  RCALL  0FE0
117A:  MOVFF  03,20F
117E:  MOVFF  02,20E
1182:  MOVFF  01,20D
1186:  MOVFF  00,20C
....................   restart_wdt(); 
118A:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
118C:  BCF    FD8.1
118E:  MOVFF  20F,21F
1192:  MOVFF  20E,21E
1196:  MOVFF  20D,21D
119A:  MOVFF  20C,21C
119E:  MOVLB  2
11A0:  CLRF   x23
11A2:  CLRF   x22
11A4:  MOVLW  27
11A6:  MOVWF  x21
11A8:  MOVLW  10
11AA:  MOVWF  x20
11AC:  MOVLB  0
11AE:  RCALL  103C
11B0:  MOVFF  03,FE
11B4:  MOVFF  02,FD
11B8:  MOVFF  01,FC
11BC:  MOVFF  00,FB
....................   restart_wdt(); 
11C0:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
11C2:  MOVFF  FE,21C
11C6:  MOVFF  FD,21B
11CA:  MOVFF  FC,21A
11CE:  MOVFF  FB,219
11D2:  MOVLB  2
11D4:  CLRF   x20
11D6:  CLRF   x1F
11D8:  MOVLW  27
11DA:  MOVWF  x1E
11DC:  MOVLW  10
11DE:  MOVWF  x1D
11E0:  MOVLB  0
11E2:  RCALL  0FE0
11E4:  MOVF   00,W
11E6:  MOVLB  2
11E8:  SUBWF  x0C,W
11EA:  MOVWF  x14
11EC:  MOVF   01,W
11EE:  SUBWFB x0D,W
11F0:  MOVWF  x15
11F2:  MOVF   02,W
11F4:  SUBWFB x0E,W
11F6:  MOVWF  x16
11F8:  MOVF   03,W
11FA:  SUBWFB x0F,W
11FC:  MOVWF  x17
11FE:  CLRF   x1C
1200:  CLRF   x1B
1202:  CLRF   x1A
1204:  MOVLW  64
1206:  MOVWF  x19
1208:  MOVFF  213,220
120C:  MOVFF  212,21F
1210:  MOVFF  211,21E
1214:  MOVFF  210,21D
1218:  MOVLB  0
121A:  RCALL  0FE0
121C:  MOVFF  03,21B
1220:  MOVFF  02,21A
1224:  MOVFF  01,219
1228:  MOVFF  00,218
122C:  BCF    FD8.1
122E:  MOVFF  217,21F
1232:  MOVFF  216,21E
1236:  MOVFF  215,21D
123A:  MOVFF  214,21C
123E:  MOVFF  03,223
1242:  MOVFF  02,222
1246:  MOVFF  01,221
124A:  MOVFF  00,220
124E:  RCALL  103C
1250:  MOVFF  03,102
1254:  MOVFF  02,101
1258:  MOVFF  01,100
125C:  MOVFF  00,FF
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
1260:  BCF    FD8.1
1262:  MOVLB  2
1264:  CLRF   x1F
1266:  CLRF   x1E
1268:  CLRF   x1D
126A:  MOVLW  64
126C:  MOVWF  x1C
126E:  MOVFF  213,223
1272:  MOVFF  212,222
1276:  MOVFF  211,221
127A:  MOVFF  210,220
127E:  MOVLB  0
1280:  RCALL  103C
1282:  MOVFF  03,217
1286:  MOVFF  02,216
128A:  MOVFF  01,215
128E:  MOVFF  00,214
1292:  MOVLB  2
1294:  RLCF   00,W
1296:  MOVWF  00
1298:  RLCF   01,W
129A:  MOVWF  01
129C:  RLCF   02,W
129E:  MOVWF  02
12A0:  RLCF   03,W
12A2:  MOVWF  03
12A4:  RLCF   00,F
12A6:  RLCF   01,F
12A8:  RLCF   02,F
12AA:  RLCF   03,F
12AC:  RLCF   00,F
12AE:  RLCF   01,F
12B0:  RLCF   02,F
12B2:  RLCF   03,F
12B4:  MOVLW  F8
12B6:  ANDWF  00,F
12B8:  MOVLW  08
12BA:  ADDWF  03,W
12BC:  MOVWF  x17
12BE:  MOVLW  01
12C0:  ADDWF  00,W
12C2:  MOVLB  1
12C4:  MOVWF  x03
12C6:  MOVLW  00
12C8:  MOVLB  2
12CA:  ADDWFC 01,W
12CC:  MOVLB  1
12CE:  MOVWF  x04
12D0:  MOVLW  00
12D2:  MOVLB  2
12D4:  ADDWFC 02,W
12D6:  MOVLB  1
12D8:  MOVWF  x05
12DA:  MOVLW  00
12DC:  MOVLB  2
12DE:  ADDWFC x17,W
12E0:  MOVLB  1
12E2:  MOVWF  x06
....................   restart_wdt(); 
12E4:  CLRWDT
....................   Fvco++; 
12E6:  MOVLW  01
12E8:  MOVLB  2
12EA:  ADDWF  x08,F
12EC:  BTFSC  FD8.0
12EE:  INCF   x09,F
12F0:  BTFSC  FD8.2
12F2:  INCF   x0A,F
12F4:  BTFSC  FD8.2
12F6:  INCF   x0B,F
....................   } 
12F8:  MOVLB  0
12FA:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
13A0:  MOVLB  2
13A2:  CLRF   x0B
13A4:  MOVLB  0
13A6:  RLCF   xFB,W
13A8:  MOVLB  2
13AA:  MOVWF  x0C
13AC:  MOVLB  0
13AE:  RLCF   xFC,W
13B0:  MOVLB  2
13B2:  MOVWF  x0D
13B4:  MOVLB  0
13B6:  RLCF   xFD,W
13B8:  MOVLB  2
13BA:  MOVWF  x0E
13BC:  RLCF   x0C,F
13BE:  RLCF   x0D,F
13C0:  RLCF   x0E,F
13C2:  RLCF   x0C,F
13C4:  RLCF   x0D,F
13C6:  RLCF   x0E,F
13C8:  RLCF   x0C,F
13CA:  RLCF   x0D,F
13CC:  RLCF   x0E,F
13CE:  RLCF   x0C,F
13D0:  RLCF   x0D,F
13D2:  RLCF   x0E,F
13D4:  RLCF   x0C,F
13D6:  RLCF   x0D,F
13D8:  RLCF   x0E,F
13DA:  RLCF   x0C,F
13DC:  RLCF   x0D,F
13DE:  RLCF   x0E,F
13E0:  MOVLW  80
13E2:  ANDWF  x0C,F
13E4:  MOVLB  0
13E6:  RLCF   xFF,W
13E8:  MOVWF  00
13EA:  MOVLB  1
13EC:  RLCF   x00,W
13EE:  MOVWF  01
13F0:  RLCF   x01,W
13F2:  MOVWF  02
13F4:  RLCF   x02,W
13F6:  MOVWF  03
13F8:  RLCF   00,F
13FA:  RLCF   01,F
13FC:  RLCF   02,F
13FE:  RLCF   03,F
1400:  RLCF   00,F
1402:  RLCF   01,F
1404:  RLCF   02,F
1406:  RLCF   03,F
1408:  MOVLW  F8
140A:  ANDWF  00,F
140C:  MOVF   00,W
140E:  MOVLB  2
1410:  ADDWF  x0B,W
1412:  MOVWF  x06
1414:  MOVF   01,W
1416:  ADDWFC x0C,W
1418:  MOVWF  x07
141A:  MOVF   02,W
141C:  ADDWFC x0D,W
141E:  MOVWF  x08
1420:  MOVF   03,W
1422:  ADDWFC x0E,W
1424:  MOVWF  x09
....................   PLL_frequency = prog; 
1426:  MOVFF  209,10A
142A:  MOVFF  208,109
142E:  MOVFF  207,108
1432:  MOVFF  206,107
....................   restart_wdt(); 
1436:  CLRWDT
....................   PLL_send_word(prog); 
1438:  MOVFF  209,20D
143C:  MOVFF  208,20C
1440:  MOVFF  207,20B
1444:  MOVFF  206,20A
1448:  MOVLB  0
144A:  RCALL  134A
....................   delay_us(20); 
144C:  MOVLW  1A
144E:  MOVWF  00
1450:  DECFSZ 00,F
1452:  BRA    1450
1454:  NOP   
....................   restart_wdt(); 
1456:  CLRWDT
....................   PLL_send_word(PLL_mod); 
1458:  MOVFF  106,20D
145C:  MOVFF  105,20C
1460:  MOVFF  104,20B
1464:  MOVFF  103,20A
1468:  RCALL  134A
....................   delay_us(20); 
146A:  MOVLW  1A
146C:  MOVWF  00
146E:  DECFSZ 00,F
1470:  BRA    146E
1472:  NOP   
....................   restart_wdt(); 
1474:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
1476:  MOVFF  10E,20D
147A:  MOVFF  10D,20C
147E:  MOVFF  10C,20B
1482:  MOVFF  10B,20A
1486:  RCALL  134A
....................    
....................   } 
1488:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
09AC:  BCF    F7E.0
09AE:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
09B2:  SETF   25
....................   TMR_1mS_Count++; 
09B4:  INCF   26,F
....................   if (++TMR_1mS_Cnt >= 10) 
09B6:  INCF   27,F
09B8:  MOVF   27,W
09BA:  SUBLW  09
09BC:  BC    09DC
....................     { 
....................     TMR_1mS_Cnt = 0; 
09BE:  CLRF   27
....................     TMR_10mS_Count++; 
09C0:  INCF   28,F
....................     TMR_10mS_Flags = 0xFF; 
09C2:  SETF   29
....................     if (++TMR_10mS_Cnt >= 10) 
09C4:  INCF   2A,F
09C6:  MOVF   2A,W
09C8:  SUBLW  09
09CA:  BC    09DC
....................       { 
....................       TMR_10mS_Cnt = 0; 
09CC:  CLRF   2A
....................       TMR_100mS_Flags = 0xFF; 
09CE:  SETF   2B
....................       if (++TMR_100mS_Cnt >= 10) 
09D0:  INCF   2C,F
09D2:  MOVF   2C,W
09D4:  SUBLW  09
09D6:  BC    09DC
....................         { 
....................         TMR_100mS_Cnt = 0; 
09D8:  CLRF   2C
....................         TMR_1sec_Flags = 0xFF; 
09DA:  SETF   2D
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
09DC:  BCF    F9E.1
09DE:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
09E2:  BCF    FF2.1
09E4:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
09E8:  BCF    FF0.0
09EA:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
09EE:  MOVFF  FAE,24E
....................   COM1_rbuf[COM1_rxi] = x; 
09F2:  CLRF   03
09F4:  MOVF   2F,W
09F6:  ADDLW  31
09F8:  MOVWF  FE9
09FA:  MOVLW  00
09FC:  ADDWFC 03,W
09FE:  MOVWF  FEA
0A00:  MOVFF  24E,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0A04:  INCF   2F,F
0A06:  MOVF   2F,W
0A08:  SUBLW  1F
0A0A:  BC    0A0E
....................     COM1_rxi = 0; 
0A0C:  CLRF   2F
....................   if (COM1_rcnt < COM1_RX_LEN) 
0A0E:  MOVF   2E,W
0A10:  SUBLW  1F
0A12:  BNC   0A16
....................     COM1_rcnt++; 
0A14:  INCF   2E,F
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0A16:  BCF    F9E.5
0A18:  GOTO   0090
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
.................... UCHAR ttccp_login = 0; 
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
1FBE:  CLRF   03
1FC0:  MOVF   30,W
1FC2:  ADDLW  31
1FC4:  MOVWF  FE9
1FC6:  MOVLW  00
1FC8:  ADDWFC 03,W
1FCA:  MOVWF  FEA
1FCC:  MOVFF  FEF,19D
1FD0:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
1FD2:  INCF   30,F
1FD4:  MOVF   30,W
1FD6:  SUBLW  1F
1FD8:  BC    1FDC
....................     COM1_rxo = 0; 
1FDA:  CLRF   30
....................   if (COM1_rcnt) 
1FDC:  MOVF   2E,F
1FDE:  BZ    1FE2
....................     COM1_rcnt--; 
1FE0:  DECF   2E,F
....................   return x; 
1FE2:  MOVFF  19D,01
....................   } 
1FE6:  MOVLB  0
1FE8:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
1F12:  BCF    F9D.5
....................   output_high(RS485_EN); 
1F14:  BSF    F8C.5
....................   delay_us(100); 
1F16:  MOVLW  84
1F18:  MOVWF  00
1F1A:  DECFSZ 00,F
1F1C:  BRA    1F1A
1F1E:  BRA    1F20
1F20:  NOP   
....................   pos = 0; 
1F22:  MOVLB  2
1F24:  CLRF   x40
....................   while (*str) 
....................     { 
1F26:  MOVFF  23E,03
1F2A:  MOVFF  23D,FE9
1F2E:  MOVFF  23E,FEA
1F32:  MOVF   FEF,F
1F34:  BZ    1FA6
....................     x = *str++; 
1F36:  MOVFF  23E,03
1F3A:  MOVF   x3D,W
1F3C:  INCF   x3D,F
1F3E:  BTFSC  FD8.2
1F40:  INCF   x3E,F
1F42:  MOVWF  FE9
1F44:  MOVFF  03,FEA
1F48:  MOVFF  FEF,23F
....................     if (x != '\t') 
1F4C:  MOVF   x3F,W
1F4E:  SUBLW  09
1F50:  BZ    1F70
....................       { 
....................       TXREG1 = x; 
1F52:  MOVFF  23F,FAD
....................       pos++; 
1F56:  INCF   x40,F
....................       delay_us(300); 
1F58:  MOVLW  02
1F5A:  MOVWF  x42
1F5C:  MOVLW  95
1F5E:  MOVWF  x43
1F60:  MOVLB  0
1F62:  RCALL  1EF2
1F64:  MOVLB  2
1F66:  DECFSZ x42,F
1F68:  BRA    1F5C
....................       x = RCREG1; 
1F6A:  MOVFF  FAE,23F
....................       } 
....................     else 
1F6E:  BRA    1FA4
....................       { 
....................       tab_stop = 32; 
1F70:  MOVLW  20
1F72:  MOVWF  x41
....................       if (pos >= tab_stop) 
1F74:  MOVF   x41,W
1F76:  SUBWF  x40,W
1F78:  BNC   1F80
....................         tab_stop = pos + 2; 
1F7A:  MOVLW  02
1F7C:  ADDWF  x40,W
1F7E:  MOVWF  x41
....................       while (pos < tab_stop) 
....................         { 
1F80:  MOVF   x41,W
1F82:  SUBWF  x40,W
1F84:  BC    1FA4
....................         TXREG1 = ' '; 
1F86:  MOVLW  20
1F88:  MOVWF  FAD
....................         pos++; 
1F8A:  INCF   x40,F
....................         delay_us(300); 
1F8C:  MOVLW  02
1F8E:  MOVWF  x42
1F90:  MOVLW  95
1F92:  MOVWF  x43
1F94:  MOVLB  0
1F96:  RCALL  1EF2
1F98:  MOVLB  2
1F9A:  DECFSZ x42,F
1F9C:  BRA    1F90
....................         x = RCREG1; 
1F9E:  MOVFF  FAE,23F
....................         } 
1FA2:  BRA    1F80
....................       } 
....................     } 
1FA4:  BRA    1F26
....................   delay_us(100); 
1FA6:  MOVLW  84
1FA8:  MOVWF  00
1FAA:  DECFSZ 00,F
1FAC:  BRA    1FAA
1FAE:  BRA    1FB0
1FB0:  NOP   
....................   output_low(RS485_EN); 
1FB2:  BCF    F8C.5
....................   x = RCREG1; 
1FB4:  MOVFF  FAE,23F
....................   enable_interrupts(int_RDA); 
1FB8:  BSF    F9D.5
....................   } 
1FBA:  MOVLB  0
1FBC:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0C5E:  MOVLB  1
0C60:  CLRF   x46
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0C62:  CLRF   2E
0C64:  MOVFF  2E,30
0C68:  MOVFF  30,2F
....................   comm_state = COMM_INIT; 
0C6C:  CLRF   51
....................   enable_interrupts(int_RDA); 
0C6E:  BSF    F9D.5
....................   } 
0C70:  MOVLB  0
0C72:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
2008:  MOVLB  1
200A:  MOVF   x0F,W
200C:  INCF   x0F,F
200E:  CLRF   03
2010:  ADDLW  53
2012:  MOVWF  FE9
2014:  MOVLW  00
2016:  ADDWFC 03,W
2018:  MOVWF  FEA
201A:  CLRF   03
201C:  MOVFF  FEF,01
2020:  MOVFF  03,02
....................   } 
2024:  MOVLB  0
2026:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
1FEA:  CLRF   03
1FEC:  MOVLB  1
1FEE:  MOVF   x0F,W
1FF0:  ADDLW  53
1FF2:  MOVWF  FE9
1FF4:  MOVLW  00
1FF6:  ADDWFC 03,W
1FF8:  MOVWF  FEA
1FFA:  CLRF   03
1FFC:  MOVFF  FEF,01
2000:  MOVFF  03,02
....................   } 
2004:  MOVLB  0
2006:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
2028:  CLRF   03
202A:  MOVLB  1
202C:  MOVF   x0F,W
202E:  ADDLW  53
2030:  MOVWF  FE9
2032:  MOVLW  00
2034:  ADDWFC 03,W
2036:  MOVWF  FEA
2038:  MOVF   FEF,F
203A:  BZ    206C
203C:  CLRF   03
203E:  MOVF   x0F,W
2040:  ADDLW  53
2042:  MOVWF  FE9
2044:  MOVLW  00
2046:  ADDWFC 03,W
2048:  MOVWF  FEA
204A:  MOVF   FEF,W
204C:  SUBLW  2C
204E:  BZ    2064
2050:  CLRF   03
2052:  MOVF   x0F,W
2054:  ADDLW  53
2056:  MOVWF  FE9
2058:  MOVLW  00
205A:  ADDWFC 03,W
205C:  MOVWF  FEA
205E:  MOVF   FEF,W
2060:  SUBLW  20
2062:  BNZ   206C
2064:  INCF   x0F,F
2066:  MOVLB  0
2068:  BRA    2028
206A:  MOVLB  1
....................   } 
206C:  MOVLB  0
206E:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
20C4:  MOVLB  2
20C6:  CLRF   x0B
20C8:  MOVLW  01
20CA:  MOVWF  x0A
....................   SINT num, sign = 1; 
....................   skip_spc(); 
20CC:  MOVLB  0
20CE:  RCALL  2028
....................   if (comm_buf[comm_ptr]) 
20D0:  CLRF   03
20D2:  MOVLB  1
20D4:  MOVF   x0F,W
20D6:  ADDLW  53
20D8:  MOVWF  FE9
20DA:  MOVLW  00
20DC:  ADDWFC 03,W
20DE:  MOVWF  FEA
20E0:  MOVF   FEF,F
20E2:  BZ    216C
....................     { 
....................     num = 0; 
20E4:  MOVLB  2
20E6:  CLRF   x09
20E8:  CLRF   x08
....................     if (peek_char() == '-') 
20EA:  MOVLB  0
20EC:  RCALL  1FEA
20EE:  MOVFF  02,20D
20F2:  MOVFF  01,20C
20F6:  MOVLB  2
20F8:  MOVF   01,W
20FA:  SUBLW  2D
20FC:  BNZ   210C
20FE:  MOVF   x0D,F
2100:  BNZ   210C
....................       { 
....................       sign = -1; 
2102:  SETF   x0B
2104:  SETF   x0A
....................       get_char(); 
2106:  MOVLB  0
2108:  RCALL  2008
210A:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
210C:  CLRF   03
210E:  MOVLB  1
2110:  MOVF   x0F,W
2112:  ADDLW  53
2114:  MOVWF  FE9
2116:  MOVLW  00
2118:  ADDWFC 03,W
211A:  MOVWF  FEA
211C:  MOVFF  FEF,20C
2120:  MOVLB  2
2122:  MOVF   x0C,W
2124:  SUBLW  2F
2126:  BC    216C
2128:  MOVF   x0C,W
212A:  SUBLW  39
212C:  BNC   216C
212E:  MOVFF  209,20D
2132:  MOVFF  208,20C
2136:  CLRF   x0F
2138:  MOVLW  0A
213A:  MOVWF  x0E
213C:  MOVLB  0
213E:  RCALL  2070
2140:  MOVFF  02,20D
2144:  MOVFF  01,20C
2148:  MOVLB  1
214A:  MOVF   x0F,W
214C:  INCF   x0F,F
214E:  CLRF   03
2150:  ADDLW  53
2152:  MOVWF  FE9
2154:  MOVLW  00
2156:  ADDWFC 03,W
2158:  MOVWF  FEA
215A:  MOVLW  30
215C:  SUBWF  FEF,W
215E:  MOVLB  2
2160:  ADDWF  01,W
2162:  MOVWF  x08
2164:  MOVLW  00
2166:  ADDWFC 02,W
2168:  MOVWF  x09
216A:  BRA    210C
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
216C:  MOVFF  209,20D
2170:  MOVFF  208,20C
2174:  MOVFF  20B,20F
2178:  MOVFF  20A,20E
217C:  MOVLB  0
217E:  RCALL  2070
2180:  MOVFF  02,03
2184:  MOVFF  02,02
....................   } 
2188:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
520C:  CALL   2028
....................   if (comm_buf[comm_ptr]) 
5210:  CLRF   03
5212:  MOVLB  1
5214:  MOVF   x0F,W
5216:  ADDLW  53
5218:  MOVWF  FE9
521A:  MOVLW  00
521C:  ADDWFC 03,W
521E:  MOVWF  FEA
5220:  MOVF   FEF,F
5222:  BZ    52AA
....................     { 
....................     num = 0; 
5224:  CLRF   xD7
5226:  CLRF   xD6
5228:  CLRF   xD5
522A:  CLRF   xD4
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
522C:  CLRF   03
522E:  MOVF   x0F,W
5230:  ADDLW  53
5232:  MOVWF  FE9
5234:  MOVLW  00
5236:  ADDWFC 03,W
5238:  MOVWF  FEA
523A:  MOVFF  FEF,1D8
523E:  MOVF   xD8,W
5240:  SUBLW  2F
5242:  BC    52AA
5244:  MOVF   xD8,W
5246:  SUBLW  39
5248:  BNC   52AA
524A:  MOVFF  1D7,21C
524E:  MOVFF  1D6,21B
5252:  MOVFF  1D5,21A
5256:  MOVFF  1D4,219
525A:  MOVLB  2
525C:  CLRF   x20
525E:  CLRF   x1F
5260:  CLRF   x1E
5262:  MOVLW  0A
5264:  MOVWF  x1D
5266:  MOVLB  0
5268:  CALL   0FE0
526C:  MOVFF  03,1DB
5270:  MOVFF  02,1DA
5274:  MOVFF  01,1D9
5278:  MOVFF  00,1D8
527C:  MOVLB  1
527E:  MOVF   x0F,W
5280:  INCF   x0F,F
5282:  CLRF   03
5284:  ADDLW  53
5286:  MOVWF  FE9
5288:  MOVLW  00
528A:  ADDWFC 03,W
528C:  MOVWF  FEA
528E:  MOVLW  30
5290:  SUBWF  FEF,W
5292:  ADDWF  00,W
5294:  MOVWF  xD4
5296:  MOVLW  00
5298:  ADDWFC 01,W
529A:  MOVWF  xD5
529C:  MOVLW  00
529E:  ADDWFC 02,W
52A0:  MOVWF  xD6
52A2:  MOVLW  00
52A4:  ADDWFC xDB,W
52A6:  MOVWF  xD7
52A8:  BRA    522C
....................     } 
.................... //  skip_spc(); 
....................   return num; 
52AA:  MOVFF  1D4,00
52AE:  MOVFF  1D5,01
52B2:  MOVFF  1D6,02
52B6:  MOVFF  1D7,03
....................   } 
52BA:  MOVLB  0
52BC:  GOTO   57CA (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
5114:  CALL   2028
....................   if (peek_char()) 
5118:  CALL   1FEA
511C:  MOVF   01,W
511E:  IORWF  02,W
5120:  BTFSC  FD8.2
5122:  BRA    51FA
....................     { 
....................     num = 0; 
5124:  MOVLB  1
5126:  CLRF   xD7
5128:  CLRF   xD6
512A:  CLRF   xD5
512C:  CLRF   xD4
....................     while (isxdigit(peek_char())) 
....................       { 
512E:  MOVLB  0
5130:  CALL   1FEA
5134:  MOVFF  02,1DA
5138:  MOVFF  01,1D9
513C:  MOVLB  1
513E:  MOVF   xDA,F
5140:  BNZ   5148
5142:  MOVF   xD9,W
5144:  SUBLW  2F
5146:  BC    5152
5148:  MOVF   xDA,F
514A:  BNZ   5152
514C:  MOVF   xD9,W
514E:  SUBLW  39
5150:  BC    517A
5152:  MOVF   xDA,F
5154:  BNZ   515C
5156:  MOVF   xD9,W
5158:  SUBLW  40
515A:  BC    5166
515C:  MOVF   xDA,F
515E:  BNZ   5166
5160:  MOVF   xD9,W
5162:  SUBLW  46
5164:  BC    517A
5166:  MOVF   xDA,F
5168:  BNZ   5170
516A:  MOVF   xD9,W
516C:  SUBLW  60
516E:  BC    51F8
5170:  MOVF   xDA,F
5172:  BNZ   51F8
5174:  MOVF   xD9,W
5176:  SUBLW  66
5178:  BNC   51F8
....................       chr = get_char(); 
517A:  MOVLB  0
517C:  CALL   2008
5180:  MOVFF  01,1D8
....................       chr = toupper(chr); 
5184:  MOVLB  1
5186:  MOVF   xD8,W
5188:  SUBLW  60
518A:  BC    5198
518C:  MOVF   xD8,W
518E:  SUBLW  7A
5190:  BNC   5198
5192:  MOVF   xD8,W
5194:  ANDLW  DF
5196:  BRA    519A
5198:  MOVF   xD8,W
519A:  MOVWF  xD8
....................       if (chr <= '9') 
519C:  MOVF   xD8,W
519E:  SUBLW  39
51A0:  BNC   51A8
....................         chr -= '0'; 
51A2:  MOVLW  30
51A4:  SUBWF  xD8,F
....................       else 
51A6:  BRA    51AC
....................         chr = chr - ('A' - 10); 
51A8:  MOVLW  37
51AA:  SUBWF  xD8,F
....................       num = num * 16 + (ULONG)chr; 
51AC:  RLCF   xD4,W
51AE:  MOVWF  xD9
51B0:  RLCF   xD5,W
51B2:  MOVWF  xDA
51B4:  RLCF   xD6,W
51B6:  MOVWF  xDB
51B8:  RLCF   xD7,W
51BA:  MOVWF  xDC
51BC:  RLCF   xD9,F
51BE:  RLCF   xDA,F
51C0:  RLCF   xDB,F
51C2:  RLCF   xDC,F
51C4:  RLCF   xD9,F
51C6:  RLCF   xDA,F
51C8:  RLCF   xDB,F
51CA:  RLCF   xDC,F
51CC:  RLCF   xD9,F
51CE:  RLCF   xDA,F
51D0:  RLCF   xDB,F
51D2:  RLCF   xDC,F
51D4:  MOVLW  F0
51D6:  ANDWF  xD9,F
51D8:  CLRF   01
51DA:  CLRF   02
51DC:  CLRF   03
51DE:  MOVF   xD8,W
51E0:  ADDWF  xD9,W
51E2:  MOVWF  xD4
51E4:  MOVF   01,W
51E6:  ADDWFC xDA,W
51E8:  MOVWF  xD5
51EA:  MOVF   02,W
51EC:  ADDWFC xDB,W
51EE:  MOVWF  xD6
51F0:  MOVF   03,W
51F2:  ADDWFC xDC,W
51F4:  MOVWF  xD7
....................       } 
51F6:  BRA    512E
51F8:  MOVLB  0
....................     } 
....................   return num; 
51FA:  MOVFF  1D4,00
51FE:  MOVFF  1D5,01
5202:  MOVFF  1D6,02
5206:  MOVFF  1D7,03
....................   } 
520A:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
2632:  RCALL  20C4
2634:  MOVFF  02,201
2638:  MOVFF  01,200
263C:  MOVFF  02,20D
2640:  MOVFF  01,20C
2644:  MOVLB  2
2646:  CLRF   x0F
2648:  MOVLW  0A
264A:  MOVWF  x0E
264C:  MOVLB  0
264E:  RCALL  2070
2650:  MOVFF  02,1FF
2654:  MOVLB  1
2656:  MOVFF  01,1FE
....................   if (peek_char() == '.') 
265A:  MOVLB  0
265C:  RCALL  1FEA
265E:  MOVFF  02,201
2662:  MOVFF  01,200
2666:  MOVLB  2
2668:  MOVF   01,W
266A:  SUBLW  2E
266C:  BNZ   2690
266E:  MOVF   x01,F
2670:  BNZ   2690
....................     { 
....................     get_char(); // skip '.' 
2672:  MOVLB  0
2674:  RCALL  2008
....................     freq += get_char() - '0'; 
2676:  RCALL  2008
2678:  MOVLW  30
267A:  MOVLB  2
267C:  SUBWF  01,W
267E:  MOVWF  00
2680:  MOVLW  00
2682:  SUBWFB 02,W
2684:  MOVWF  03
2686:  MOVF   00,W
2688:  MOVLB  1
268A:  ADDWF  xFE,F
268C:  MOVF   03,W
268E:  ADDWFC xFF,F
....................     } 
....................   return freq; 
2690:  MOVLB  1
2692:  MOVFF  1FE,01
2696:  MOVFF  1FF,02
....................   } 
269A:  MOVLB  0
269C:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
4C42:  MOVLB  1
4C44:  MOVF   x9D,W
4C46:  XORLW  69
4C48:  MOVLB  0
4C4A:  BZ    4C7E
4C4C:  XORLW  20
4C4E:  BZ    4CAC
4C50:  XORLW  2D
4C52:  BZ    4CDA
4C54:  XORLW  20
4C56:  BZ    4D0C
4C58:  XORLW  6F
4C5A:  BTFSC  FD8.2
4C5C:  BRA    4D3E
4C5E:  XORLW  16
4C60:  BTFSC  FD8.2
4C62:  BRA    4D8C
4C64:  XORLW  10
4C66:  BTFSC  FD8.2
4C68:  BRA    4DDA
4C6A:  XORLW  72
4C6C:  BTFSC  FD8.2
4C6E:  BRA    4E2C
4C70:  XORLW  61
4C72:  BTFSC  FD8.2
4C74:  BRA    4E7E
4C76:  XORLW  02
4C78:  BTFSC  FD8.2
4C7A:  BRA    4E96
4C7C:  BRA    4EAA
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
4C7E:  MOVLB  1
4C80:  INCF   x3D,F
4C82:  BNZ   4C90
....................         if (++D2A_image[12] > 3) 
4C84:  INCF   x3E,F
4C86:  MOVF   x3E,W
4C88:  SUBLW  03
4C8A:  BC    4C90
....................           { 
....................           D2A_image[11] = 0; 
4C8C:  CLRF   x3D
....................           D2A_image[12] = 0; 
4C8E:  CLRF   x3E
....................           } 
....................       write_D2A(11, D2A_image[11]); 
4C90:  MOVLW  0B
4C92:  MOVWF  xD4
4C94:  MOVFF  13D,1D5
4C98:  MOVLB  0
4C9A:  RCALL  4BBA
....................       write_D2A(12, D2A_image[12]); 
4C9C:  MOVLW  0C
4C9E:  MOVLB  1
4CA0:  MOVWF  xD4
4CA2:  MOVFF  13E,1D5
4CA6:  MOVLB  0
4CA8:  RCALL  4BBA
....................       break; 
4CAA:  BRA    4EAA
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
4CAC:  MOVLB  1
4CAE:  INCF   x41,F
4CB0:  BNZ   4CBE
....................         if (++D2A_image[16] > 3) 
4CB2:  INCF   x42,F
4CB4:  MOVF   x42,W
4CB6:  SUBLW  03
4CB8:  BC    4CBE
....................           { 
....................           D2A_image[15] = 0; 
4CBA:  CLRF   x41
....................           D2A_image[16] = 0; 
4CBC:  CLRF   x42
....................           } 
....................       write_D2A(15, D2A_image[15]); 
4CBE:  MOVLW  0F
4CC0:  MOVWF  xD4
4CC2:  MOVFF  141,1D5
4CC6:  MOVLB  0
4CC8:  RCALL  4BBA
....................       write_D2A(16, D2A_image[16]); 
4CCA:  MOVLW  10
4CCC:  MOVLB  1
4CCE:  MOVWF  xD4
4CD0:  MOVFF  142,1D5
4CD4:  MOVLB  0
4CD6:  RCALL  4BBA
....................       break; 
4CD8:  BRA    4EAA
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
4CDA:  MOVLB  1
4CDC:  DECF   x3D,F
4CDE:  INCFSZ x3D,W
4CE0:  BRA    4CF0
....................         if (--D2A_image[12] > 3) 
4CE2:  DECF   x3E,F
4CE4:  MOVF   x3E,W
4CE6:  SUBLW  03
4CE8:  BC    4CF0
....................           { 
....................           D2A_image[11] = 255; 
4CEA:  SETF   x3D
....................           D2A_image[12] = 3; 
4CEC:  MOVLW  03
4CEE:  MOVWF  x3E
....................           } 
....................       write_D2A(11, D2A_image[11]); 
4CF0:  MOVLW  0B
4CF2:  MOVWF  xD4
4CF4:  MOVFF  13D,1D5
4CF8:  MOVLB  0
4CFA:  RCALL  4BBA
....................       write_D2A(12, D2A_image[12]); 
4CFC:  MOVLW  0C
4CFE:  MOVLB  1
4D00:  MOVWF  xD4
4D02:  MOVFF  13E,1D5
4D06:  MOVLB  0
4D08:  RCALL  4BBA
....................       break; 
4D0A:  BRA    4EAA
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
4D0C:  MOVLB  1
4D0E:  DECF   x41,F
4D10:  INCFSZ x41,W
4D12:  BRA    4D22
....................         if (--D2A_image[16] > 3) 
4D14:  DECF   x42,F
4D16:  MOVF   x42,W
4D18:  SUBLW  03
4D1A:  BC    4D22
....................           { 
....................           D2A_image[15] = 255; 
4D1C:  SETF   x41
....................           D2A_image[16] = 3; 
4D1E:  MOVLW  03
4D20:  MOVWF  x42
....................           } 
....................       write_D2A(15, D2A_image[15]); 
4D22:  MOVLW  0F
4D24:  MOVWF  xD4
4D26:  MOVFF  141,1D5
4D2A:  MOVLB  0
4D2C:  RCALL  4BBA
....................       write_D2A(16, D2A_image[16]); 
4D2E:  MOVLW  10
4D30:  MOVLB  1
4D32:  MOVWF  xD4
4D34:  MOVFF  142,1D5
4D38:  MOVLB  0
4D3A:  RCALL  4BBA
....................       break; 
4D3C:  BRA    4EAA
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
4D3E:  MOVLB  1
4D40:  MOVFF  13F,19E
4D44:  MOVF   x40,W
4D46:  ANDLW  03
4D48:  MOVWF  x9F
....................       if (++incdec > 0x3FF) 
4D4A:  INCF   x9E,F
4D4C:  BTFSC  FD8.2
4D4E:  INCF   x9F,F
4D50:  MOVF   x9F,W
4D52:  SUBLW  03
4D54:  BC    4D5A
....................         incdec = 0; 
4D56:  CLRF   x9F
4D58:  CLRF   x9E
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
4D5A:  MOVF   x40,W
4D5C:  ANDLW  C0
4D5E:  MOVWF  xA0
4D60:  MOVLW  00
4D62:  IORWF  x9E,F
4D64:  MOVF   xA0,W
4D66:  IORWF  x9F,F
....................       D2A_image[13] = make8(incdec, 0); 
4D68:  MOVFF  19E,13F
....................       D2A_image[14] = make8(incdec, 1); 
4D6C:  MOVFF  19F,140
....................       write_D2A(11, D2A_image[13]); 
4D70:  MOVLW  0B
4D72:  MOVWF  xD4
4D74:  MOVFF  13F,1D5
4D78:  MOVLB  0
4D7A:  RCALL  4BBA
....................       write_D2A(12, D2A_image[14]); 
4D7C:  MOVLW  0C
4D7E:  MOVLB  1
4D80:  MOVWF  xD4
4D82:  MOVFF  140,1D5
4D86:  MOVLB  0
4D88:  RCALL  4BBA
....................       break; 
4D8A:  BRA    4EAA
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
4D8C:  MOVLB  1
4D8E:  MOVFF  143,19E
4D92:  MOVF   x44,W
4D94:  ANDLW  03
4D96:  MOVWF  x9F
....................       if (++incdec > 0x3FF) 
4D98:  INCF   x9E,F
4D9A:  BTFSC  FD8.2
4D9C:  INCF   x9F,F
4D9E:  MOVF   x9F,W
4DA0:  SUBLW  03
4DA2:  BC    4DA8
....................         incdec = 0; 
4DA4:  CLRF   x9F
4DA6:  CLRF   x9E
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
4DA8:  MOVF   x44,W
4DAA:  ANDLW  C0
4DAC:  MOVWF  xA0
4DAE:  MOVLW  00
4DB0:  IORWF  x9E,F
4DB2:  MOVF   xA0,W
4DB4:  IORWF  x9F,F
....................       D2A_image[17] = make8(incdec, 0); 
4DB6:  MOVFF  19E,143
....................       D2A_image[18] = make8(incdec, 1); 
4DBA:  MOVFF  19F,144
....................       write_D2A(11, D2A_image[17]); 
4DBE:  MOVLW  0B
4DC0:  MOVWF  xD4
4DC2:  MOVFF  143,1D5
4DC6:  MOVLB  0
4DC8:  RCALL  4BBA
....................       write_D2A(12, D2A_image[18]); 
4DCA:  MOVLW  0C
4DCC:  MOVLB  1
4DCE:  MOVWF  xD4
4DD0:  MOVFF  144,1D5
4DD4:  MOVLB  0
4DD6:  RCALL  4BBA
....................       break; 
4DD8:  BRA    4EAA
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
4DDA:  MOVLB  1
4DDC:  MOVFF  13F,19E
4DE0:  MOVF   x40,W
4DE2:  ANDLW  03
4DE4:  MOVWF  x9F
....................       if (--incdec > 0x3FF) 
4DE6:  MOVF   x9E,W
4DE8:  BTFSC  FD8.2
4DEA:  DECF   x9F,F
4DEC:  DECF   x9E,F
4DEE:  MOVF   x9F,W
4DF0:  SUBLW  03
4DF2:  BC    4DFA
....................         incdec = 0x3FF; 
4DF4:  MOVLW  03
4DF6:  MOVWF  x9F
4DF8:  SETF   x9E
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
4DFA:  MOVF   x40,W
4DFC:  ANDLW  C0
4DFE:  MOVWF  xA0
4E00:  MOVLW  00
4E02:  IORWF  x9E,F
4E04:  MOVF   xA0,W
4E06:  IORWF  x9F,F
....................       D2A_image[13] = make8(incdec, 0); 
4E08:  MOVFF  19E,13F
....................       D2A_image[14] = make8(incdec, 1); 
4E0C:  MOVFF  19F,140
....................       write_D2A(11, D2A_image[13]); 
4E10:  MOVLW  0B
4E12:  MOVWF  xD4
4E14:  MOVFF  13F,1D5
4E18:  MOVLB  0
4E1A:  RCALL  4BBA
....................       write_D2A(12, D2A_image[14]); 
4E1C:  MOVLW  0C
4E1E:  MOVLB  1
4E20:  MOVWF  xD4
4E22:  MOVFF  140,1D5
4E26:  MOVLB  0
4E28:  RCALL  4BBA
....................       break; 
4E2A:  BRA    4EAA
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
4E2C:  MOVLB  1
4E2E:  MOVFF  143,19E
4E32:  MOVF   x44,W
4E34:  ANDLW  03
4E36:  MOVWF  x9F
....................       if (--incdec > 0x3FF) 
4E38:  MOVF   x9E,W
4E3A:  BTFSC  FD8.2
4E3C:  DECF   x9F,F
4E3E:  DECF   x9E,F
4E40:  MOVF   x9F,W
4E42:  SUBLW  03
4E44:  BC    4E4C
....................         incdec = 0x3FF; 
4E46:  MOVLW  03
4E48:  MOVWF  x9F
4E4A:  SETF   x9E
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
4E4C:  MOVF   x44,W
4E4E:  ANDLW  C0
4E50:  MOVWF  xA0
4E52:  MOVLW  00
4E54:  IORWF  x9E,F
4E56:  MOVF   xA0,W
4E58:  IORWF  x9F,F
....................       D2A_image[17] = make8(incdec, 0); 
4E5A:  MOVFF  19E,143
....................       D2A_image[18] = make8(incdec, 1); 
4E5E:  MOVFF  19F,144
....................       write_D2A(11, D2A_image[17]); 
4E62:  MOVLW  0B
4E64:  MOVWF  xD4
4E66:  MOVFF  143,1D5
4E6A:  MOVLB  0
4E6C:  RCALL  4BBA
....................       write_D2A(12, D2A_image[18]); 
4E6E:  MOVLW  0C
4E70:  MOVLB  1
4E72:  MOVWF  xD4
4E74:  MOVFF  144,1D5
4E78:  MOVLB  0
4E7A:  RCALL  4BBA
....................       break; 
4E7C:  BRA    4EAA
....................     case '>': 
....................       if (setup.phase_offset < 255) 
4E7E:  INCFSZ xB7,W
4E80:  BRA    4E84
4E82:  BRA    4E86
....................         setup.phase_offset++; 
4E84:  INCF   xB7,F
....................       update_FPGA(1, setup.phase_offset); 
4E86:  MOVLW  01
4E88:  MOVLB  1
4E8A:  MOVWF  xA0
4E8C:  MOVFF  B7,1A1
4E90:  MOVLB  0
4E92:  RCALL  4C24
....................       break; 
4E94:  BRA    4EAA
....................     case '<': 
....................       if (setup.phase_offset) 
4E96:  MOVF   xB7,F
4E98:  BZ    4E9C
....................         setup.phase_offset--; 
4E9A:  DECF   xB7,F
....................       update_FPGA(1, setup.phase_offset); 
4E9C:  MOVLW  01
4E9E:  MOVLB  1
4EA0:  MOVWF  xA0
4EA2:  MOVFF  B7,1A1
4EA6:  MOVLB  0
4EA8:  RCALL  4C24
....................       break; 
....................     } 
....................   } 
4EAA:  GOTO   5B78 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
4EAE:  MOVLW  0D
4EB0:  MOVLB  1
4EB2:  MOVWF  xD4
4EB4:  MOVLW  0A
4EB6:  MOVWF  xD5
4EB8:  CLRF   xD6
4EBA:  MOVLW  01
4EBC:  MOVLB  2
4EBE:  MOVWF  x3E
4EC0:  MOVLW  D4
4EC2:  MOVWF  x3D
4EC4:  MOVLB  0
4EC6:  CALL   1F12
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
4ECA:  MOVLW  01
4ECC:  MOVWF  FEA
4ECE:  MOVLW  D4
4ED0:  MOVWF  FE9
4ED2:  MOVLW  3D
4ED4:  MOVWF  01
4ED6:  CLRF   FF7
4ED8:  MOVLW  00
4EDA:  CALL   0106
4EDE:  TBLRD*-
4EE0:  TBLRD*+
4EE2:  MOVFF  FF5,FEE
4EE6:  DECFSZ 01,F
4EE8:  BRA    4EE0
4EEA:  MOVLW  01
4EEC:  MOVLB  2
4EEE:  MOVWF  x3E
4EF0:  MOVLW  D4
4EF2:  MOVWF  x3D
4EF4:  MOVLB  0
4EF6:  CALL   1F12
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
4EFA:  MOVLW  01
4EFC:  MOVWF  FEA
4EFE:  MOVLW  D4
4F00:  MOVWF  FE9
4F02:  MOVLW  2E
4F04:  MOVWF  01
4F06:  CLRF   FF7
4F08:  MOVLW  00
4F0A:  CALL   0154
4F0E:  TBLRD*-
4F10:  TBLRD*+
4F12:  MOVFF  FF5,FEE
4F16:  DECFSZ 01,F
4F18:  BRA    4F10
4F1A:  MOVLW  01
4F1C:  MOVLB  2
4F1E:  MOVWF  x3E
4F20:  MOVLW  D4
4F22:  MOVWF  x3D
4F24:  MOVLB  0
4F26:  CALL   1F12
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
4F2A:  MOVLW  01
4F2C:  MOVWF  FEA
4F2E:  MOVLW  D4
4F30:  MOVWF  FE9
4F32:  MOVLW  42
4F34:  MOVWF  01
4F36:  CLRF   FF7
4F38:  MOVLW  00
4F3A:  CALL   0192
4F3E:  TBLRD*-
4F40:  TBLRD*+
4F42:  MOVFF  FF5,FEE
4F46:  DECFSZ 01,F
4F48:  BRA    4F40
4F4A:  MOVLW  01
4F4C:  MOVLB  2
4F4E:  MOVWF  x3E
4F50:  MOVLW  D4
4F52:  MOVWF  x3D
4F54:  MOVLB  0
4F56:  CALL   1F12
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
4F5A:  MOVLW  01
4F5C:  MOVWF  FEA
4F5E:  MOVLW  D4
4F60:  MOVWF  FE9
4F62:  MOVLW  23
4F64:  MOVWF  01
4F66:  CLRF   FF7
4F68:  MOVLW  00
4F6A:  CALL   01E4
4F6E:  TBLRD*-
4F70:  TBLRD*+
4F72:  MOVFF  FF5,FEE
4F76:  DECFSZ 01,F
4F78:  BRA    4F70
4F7A:  MOVLW  01
4F7C:  MOVLB  2
4F7E:  MOVWF  x3E
4F80:  MOVLW  D4
4F82:  MOVWF  x3D
4F84:  MOVLB  0
4F86:  CALL   1F12
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
4F8A:  MOVLW  01
4F8C:  MOVWF  FEA
4F8E:  MOVLW  D4
4F90:  MOVWF  FE9
4F92:  MOVLW  2D
4F94:  MOVWF  01
4F96:  CLRF   FF7
4F98:  MOVLW  00
4F9A:  CALL   0218
4F9E:  TBLRD*-
4FA0:  TBLRD*+
4FA2:  MOVFF  FF5,FEE
4FA6:  DECFSZ 01,F
4FA8:  BRA    4FA0
4FAA:  MOVLW  01
4FAC:  MOVLB  2
4FAE:  MOVWF  x3E
4FB0:  MOVLW  D4
4FB2:  MOVWF  x3D
4FB4:  MOVLB  0
4FB6:  CALL   1F12
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
4FBA:  MOVLW  01
4FBC:  MOVWF  FEA
4FBE:  MOVLW  D4
4FC0:  MOVWF  FE9
4FC2:  MOVLW  2E
4FC4:  MOVWF  01
4FC6:  CLRF   FF7
4FC8:  MOVLW  00
4FCA:  CALL   0256
4FCE:  TBLRD*-
4FD0:  TBLRD*+
4FD2:  MOVFF  FF5,FEE
4FD6:  DECFSZ 01,F
4FD8:  BRA    4FD0
4FDA:  MOVLW  01
4FDC:  MOVLB  2
4FDE:  MOVWF  x3E
4FE0:  MOVLW  D4
4FE2:  MOVWF  x3D
4FE4:  MOVLB  0
4FE6:  CALL   1F12
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
4FEA:  MOVLW  01
4FEC:  MOVWF  FEA
4FEE:  MOVLW  D4
4FF0:  MOVWF  FE9
4FF2:  MOVLW  36
4FF4:  MOVWF  01
4FF6:  CLRF   FF7
4FF8:  MOVLW  00
4FFA:  CALL   0294
4FFE:  TBLRD*-
5000:  TBLRD*+
5002:  MOVFF  FF5,FEE
5006:  DECFSZ 01,F
5008:  BRA    5000
500A:  MOVLW  01
500C:  MOVLB  2
500E:  MOVWF  x3E
5010:  MOVLW  D4
5012:  MOVWF  x3D
5014:  MOVLB  0
5016:  CALL   1F12
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
501A:  MOVLW  01
501C:  MOVWF  FEA
501E:  MOVLW  D4
5020:  MOVWF  FE9
5022:  MOVLW  16
5024:  MOVWF  01
5026:  CLRF   FF7
5028:  MOVLW  00
502A:  CALL   02DA
502E:  TBLRD*-
5030:  TBLRD*+
5032:  MOVFF  FF5,FEE
5036:  DECFSZ 01,F
5038:  BRA    5030
503A:  MOVLW  01
503C:  MOVLB  2
503E:  MOVWF  x3E
5040:  MOVLW  D4
5042:  MOVWF  x3D
5044:  MOVLB  0
5046:  CALL   1F12
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
504A:  MOVLW  01
504C:  MOVWF  FEA
504E:  MOVLW  D4
5050:  MOVWF  FE9
5052:  MOVLW  3C
5054:  MOVWF  01
5056:  CLRF   FF7
5058:  MOVLW  00
505A:  CALL   0300
505E:  TBLRD*-
5060:  TBLRD*+
5062:  MOVFF  FF5,FEE
5066:  DECFSZ 01,F
5068:  BRA    5060
506A:  MOVLW  01
506C:  MOVLB  2
506E:  MOVWF  x3E
5070:  MOVLW  D4
5072:  MOVWF  x3D
5074:  MOVLB  0
5076:  CALL   1F12
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
507A:  MOVLW  01
507C:  MOVWF  FEA
507E:  MOVLW  D4
5080:  MOVWF  FE9
5082:  MOVLW  3D
5084:  MOVWF  01
5086:  CLRF   FF7
5088:  MOVLW  00
508A:  CALL   034C
508E:  TBLRD*-
5090:  TBLRD*+
5092:  MOVFF  FF5,FEE
5096:  DECFSZ 01,F
5098:  BRA    5090
509A:  MOVLW  01
509C:  MOVLB  2
509E:  MOVWF  x3E
50A0:  MOVLW  D4
50A2:  MOVWF  x3D
50A4:  MOVLB  0
50A6:  CALL   1F12
....................   COM1_send_str("\r\n"); 
50AA:  MOVLW  0D
50AC:  MOVLB  1
50AE:  MOVWF  xD4
50B0:  MOVLW  0A
50B2:  MOVWF  xD5
50B4:  CLRF   xD6
50B6:  MOVLW  01
50B8:  MOVLB  2
50BA:  MOVWF  x3E
50BC:  MOVLW  D4
50BE:  MOVWF  x3D
50C0:  MOVLB  0
50C2:  CALL   1F12
....................   } 
50C6:  GOTO   54EA (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... bit set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
2940:  CALL   20C4
2944:  MOVFF  02,1FF
2948:  MOVFF  01,1FE
....................   if (idx <= 40 && idx >= 20) 
294C:  MOVLB  1
294E:  MOVF   xFF,F
2950:  BNZ   29A0
2952:  MOVF   xFE,W
2954:  SUBLW  28
2956:  BNC   29A0
2958:  MOVF   xFF,F
295A:  BNZ   2962
295C:  MOVF   xFE,W
295E:  SUBLW  13
2960:  BC    29A0
....................     { 
....................     setup.power_level = idx - 20; 
2962:  MOVLW  14
2964:  SUBWF  xFE,W
2966:  MOVLB  0
2968:  MOVWF  xB5
296A:  MOVLW  00
296C:  MOVLB  1
296E:  SUBWFB xFF,W
2970:  MOVLB  0
2972:  MOVWF  xB6
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
2974:  BCF    FD8.0
2976:  RLCF   xB5,W
2978:  MOVWF  02
297A:  RLCF   xB6,W
297C:  MOVWF  03
297E:  MOVF   02,W
2980:  ADDLW  BE
2982:  MOVWF  FE9
2984:  MOVLW  00
2986:  ADDWFC 03,W
2988:  MOVWF  FEA
298A:  MOVFF  FEC,03
298E:  MOVF   FED,F
2990:  MOVFF  FEF,1B
2994:  MOVFF  03,1C
....................     return 1; 
2998:  MOVLW  01
299A:  MOVWF  01
299C:  BRA    29A4
299E:  MOVLB  1
....................     } 
....................   return 0; 
29A0:  MOVLW  00
29A2:  MOVWF  01
29A4:  MOVLB  0
....................   } 
29A6:  GOTO   3FB8 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... bit set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
28D6:  CALL   20C4
28DA:  MOVFF  02,1FF
28DE:  MOVFF  01,1FE
....................   if (idx <= 40 && idx >= 20) 
28E2:  MOVLB  1
28E4:  MOVF   xFF,F
28E6:  BNZ   2936
28E8:  MOVF   xFE,W
28EA:  SUBLW  28
28EC:  BNC   2936
28EE:  MOVF   xFF,F
28F0:  BNZ   28F8
28F2:  MOVF   xFE,W
28F4:  SUBLW  13
28F6:  BC    2936
....................     { 
....................     setup.power_low_level = idx - 20; 
28F8:  MOVLW  14
28FA:  SUBWF  xFE,W
28FC:  MOVLB  0
28FE:  MOVWF  xED
2900:  MOVLW  00
2902:  MOVLB  1
2904:  SUBWFB xFF,W
2906:  MOVLB  0
2908:  MOVWF  xEE
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
290A:  BCF    FD8.0
290C:  RLCF   xED,W
290E:  MOVWF  02
2910:  RLCF   xEE,W
2912:  MOVWF  03
2914:  MOVF   02,W
2916:  ADDLW  BE
2918:  MOVWF  FE9
291A:  MOVLW  00
291C:  ADDWFC 03,W
291E:  MOVWF  FEA
2920:  MOVFF  FEC,03
2924:  MOVF   FED,F
2926:  MOVFF  FEF,19
292A:  MOVFF  03,1A
....................     return 1; 
292E:  MOVLW  01
2930:  MOVWF  01
2932:  BRA    293A
2934:  MOVLB  1
....................     } 
....................   return 0; 
2936:  MOVLW  00
2938:  MOVWF  01
293A:  MOVLB  0
....................   } 
293C:  GOTO   3F10 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
5460:  MOVLW  02
5462:  MOVLB  1
5464:  MOVWF  x9D
....................   comm_ptr = 0; 
5466:  CLRF   x0F
....................   switch (toupper(get_char())) 
....................     { 
5468:  MOVLB  0
546A:  CALL   2008
546E:  MOVFF  02,1D5
5472:  MOVFF  01,1D4
5476:  MOVLB  1
5478:  MOVF   xD5,F
547A:  BNZ   5482
547C:  MOVF   xD4,W
547E:  SUBLW  60
5480:  BC    5492
5482:  MOVF   xD5,F
5484:  BNZ   5492
5486:  MOVF   xD4,W
5488:  SUBLW  7A
548A:  BNC   5492
548C:  MOVF   xD4,W
548E:  ANDLW  DF
5490:  BRA    5494
5492:  MOVF   xD4,W
5494:  XORLW  48
5496:  MOVLB  0
5498:  BZ    54E8
549A:  XORLW  09
549C:  BZ    54F0
549E:  XORLW  02
54A0:  BTFSC  FD8.2
54A2:  BRA    55C0
54A4:  XORLW  07
54A6:  BTFSC  FD8.2
54A8:  BRA    569C
54AA:  XORLW  0B
54AC:  BTFSC  FD8.2
54AE:  BRA    5718
54B0:  XORLW  1D
54B2:  BTFSC  FD8.2
54B4:  BRA    5756
54B6:  XORLW  10
54B8:  BTFSC  FD8.2
54BA:  BRA    5798
54BC:  XORLW  05
54BE:  BTFSC  FD8.2
54C0:  BRA    57F0
54C2:  XORLW  01
54C4:  BTFSC  FD8.2
54C6:  BRA    590C
54C8:  XORLW  15
54CA:  BTFSC  FD8.2
54CC:  BRA    599A
54CE:  XORLW  07
54D0:  BTFSC  FD8.2
54D2:  BRA    5A3C
54D4:  XORLW  65
54D6:  BTFSC  FD8.2
54D8:  BRA    5B02
54DA:  XORLW  03
54DC:  BTFSC  FD8.2
54DE:  BRA    5B10
54E0:  XORLW  01
54E2:  BTFSC  FD8.2
54E4:  BRA    5B1A
54E6:  BRA    5B28
....................     case 'H': 
....................       list_help1(); 
54E8:  BRA    4EAE
....................       return 0; 
54EA:  MOVLW  00
54EC:  MOVWF  01
54EE:  BRA    5B32
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
54F0:  CALL   2008
54F4:  MOVFF  02,1D5
54F8:  MOVFF  01,1D4
54FC:  MOVLB  1
54FE:  MOVF   xD5,F
5500:  BNZ   5508
5502:  MOVF   xD4,W
5504:  SUBLW  60
5506:  BC    5518
5508:  MOVF   xD5,F
550A:  BNZ   5518
550C:  MOVF   xD4,W
550E:  SUBLW  7A
5510:  BNC   5518
5512:  MOVF   xD4,W
5514:  ANDLW  DF
5516:  BRA    551A
5518:  MOVF   xD4,W
551A:  XORLW  54
551C:  MOVLB  0
551E:  BZ    5526
5520:  XORLW  1D
5522:  BZ    5530
5524:  BRA    55BE
....................         case 'T': 
....................           idx = get_int(); 
5526:  CALL   20C4
552A:  MOVFF  01,19E
....................  
....................           // write to attenuator 
....................           break; 
552E:  BRA    55BE
....................         case 'I': 
....................           idx = get_int(); 
5530:  CALL   20C4
5534:  MOVFF  01,19E
....................           if (idx && idx < 4) 
5538:  MOVLB  1
553A:  MOVF   x9E,F
553C:  BZ    55BC
553E:  MOVF   x9E,W
5540:  SUBLW  03
5542:  BNC   55BC
....................             { 
....................             set_adc_channel(idx-1); 
5544:  MOVLW  01
5546:  SUBWF  x9E,W
5548:  MOVWF  xD4
554A:  RLCF   xD4,W
554C:  MOVWF  00
554E:  RLCF   00,F
5550:  MOVLW  FC
5552:  ANDWF  00,F
5554:  MOVF   FC2,W
5556:  ANDLW  83
5558:  IORWF  00,W
555A:  MOVWF  FC2
....................             delay_us(30); 
555C:  MOVLW  27
555E:  MOVWF  00
5560:  DECFSZ 00,F
5562:  BRA    5560
5564:  BRA    5566
....................             value = read_adc(); 
5566:  BSF    FC2.1
5568:  BTFSC  FC2.1
556A:  BRA    5568
556C:  MOVFF  FC3,1D2
5570:  MOVFF  FC4,1D3
....................             sprintf(buf, "$AR %lu\r", value); 
5574:  MOVLW  01
5576:  MOVWF  x72
5578:  MOVLW  A2
557A:  MOVWF  x71
557C:  MOVLW  1C
557E:  MOVWF  FF6
5580:  MOVLW  0A
5582:  MOVWF  FF7
5584:  MOVLW  04
5586:  MOVLB  2
5588:  MOVWF  x04
558A:  MOVLB  0
558C:  CALL   254E
5590:  MOVLW  10
5592:  MOVWF  FE9
5594:  MOVFF  1D3,205
5598:  MOVFF  1D2,204
559C:  CALL   2576
55A0:  MOVLW  0D
55A2:  MOVLB  2
55A4:  MOVWF  x0D
55A6:  MOVLB  0
55A8:  CALL   252C
....................             COM1_send_str(buf); 
55AC:  MOVLW  01
55AE:  MOVLB  2
55B0:  MOVWF  x3E
55B2:  MOVLW  A2
55B4:  MOVWF  x3D
55B6:  MOVLB  0
55B8:  CALL   1F12
....................             } 
....................           break; 
55BC:  MOVLB  0
....................         } 
....................       break; 
55BE:  BRA    5B2E
....................     case 'C': 
....................       if (chr = toupper(get_char()) == 'F') 
55C0:  CALL   2008
55C4:  MOVFF  02,1D5
55C8:  MOVFF  01,1D4
55CC:  MOVLB  1
55CE:  MOVF   xD5,F
55D0:  BNZ   55D8
55D2:  MOVF   xD4,W
55D4:  SUBLW  60
55D6:  BC    55E8
55D8:  MOVF   xD5,F
55DA:  BNZ   55E8
55DC:  MOVF   xD4,W
55DE:  SUBLW  7A
55E0:  BNC   55E8
55E2:  MOVF   xD4,W
55E4:  ANDLW  DF
55E6:  BRA    55EA
55E8:  MOVF   xD4,W
55EA:  SUBLW  46
55EC:  BZ    55F2
55EE:  MOVLW  00
55F0:  BRA    55F4
55F2:  MOVLW  01
55F4:  MOVWF  x9D
55F6:  MOVF   x9D,F
55F8:  BZ    562C
....................         { 
....................         freq = get_frequency(); 
55FA:  MOVLB  0
55FC:  CALL   2632
5600:  MOVLB  1
5602:  CLRF   xCD
5604:  CLRF   xCC
5606:  MOVFF  02,1CB
560A:  MOVFF  01,1CA
....................         PLL_compute_freq_parameters(freq); 
560E:  MOVFF  1CB,1D5
5612:  MOVFF  1CA,1D4
5616:  MOVFF  1CB,207
561A:  MOVFF  1CA,206
561E:  MOVLB  0
5620:  CALL   10D0
....................         PLL_update(); 
5624:  CALL   13A0
....................         } 
....................       else if (chr == 'P') 
5628:  BRA    5696
562A:  MOVLB  1
562C:  MOVF   x9D,W
562E:  SUBLW  50
5630:  BNZ   5698
....................         { 
....................         idx = get_int(); 
5632:  MOVLB  0
5634:  CALL   20C4
5638:  MOVFF  01,19E
....................         if (idx < 2) 
563C:  MOVLB  1
563E:  MOVF   x9E,W
5640:  SUBLW  01
5642:  BNC   5698
....................           { 
....................           setup.clock_polarity = idx & 1; 
5644:  MOVF   x9E,W
5646:  ANDLW  01
5648:  MOVLB  0
564A:  MOVWF  xAA
....................           sprintf(buf, "$CP %u\r", idx); 
564C:  MOVLW  01
564E:  MOVLB  1
5650:  MOVWF  x72
5652:  MOVLW  A2
5654:  MOVWF  x71
5656:  MOVLW  26
5658:  MOVWF  FF6
565A:  MOVLW  0A
565C:  MOVWF  FF7
565E:  MOVLW  04
5660:  MOVLB  2
5662:  MOVWF  x04
5664:  MOVLB  0
5666:  CALL   254E
566A:  MOVFF  19E,204
566E:  MOVLW  1B
5670:  MOVLB  2
5672:  MOVWF  x05
5674:  MOVLB  0
5676:  CALL   26CA
567A:  MOVLW  0D
567C:  MOVLB  2
567E:  MOVWF  x0D
5680:  MOVLB  0
5682:  CALL   252C
....................           COM1_send_str(buf); 
5686:  MOVLW  01
5688:  MOVLB  2
568A:  MOVWF  x3E
568C:  MOVLW  A2
568E:  MOVWF  x3D
5690:  MOVLB  0
5692:  CALL   1F12
5696:  MOVLB  1
....................           } 
....................         } 
....................       break; 
5698:  MOVLB  0
569A:  BRA    5B2E
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
569C:  CALL   2008
56A0:  MOVFF  02,1D5
56A4:  MOVFF  01,1D4
56A8:  MOVLB  1
56AA:  MOVF   xD5,F
56AC:  BNZ   56B4
56AE:  MOVF   xD4,W
56B0:  SUBLW  60
56B2:  BC    56C4
56B4:  MOVF   xD5,F
56B6:  BNZ   56C4
56B8:  MOVF   xD4,W
56BA:  SUBLW  7A
56BC:  BNC   56C4
56BE:  MOVF   xD4,W
56C0:  ANDLW  DF
56C2:  BRA    56C6
56C4:  MOVF   xD4,W
56C6:  SUBLW  49
56C8:  BNZ   5714
....................         { 
....................         idx = input_c(); // change to REAL input ports 
56CA:  MOVFF  F82,19E
....................         sprintf(buf, "$DR %02X\r", idx); 
56CE:  MOVLW  01
56D0:  MOVWF  x72
56D2:  MOVLW  A2
56D4:  MOVWF  x71
56D6:  MOVLW  2E
56D8:  MOVWF  FF6
56DA:  MOVLW  0A
56DC:  MOVWF  FF7
56DE:  MOVLW  04
56E0:  MOVLB  2
56E2:  MOVWF  x04
56E4:  MOVLB  0
56E6:  CALL   254E
56EA:  MOVFF  19E,1D4
56EE:  MOVLW  37
56F0:  MOVLB  1
56F2:  MOVWF  xD5
56F4:  MOVLB  0
56F6:  RCALL  50CA
56F8:  MOVLW  0D
56FA:  MOVLB  2
56FC:  MOVWF  x0D
56FE:  MOVLB  0
5700:  CALL   252C
....................         COM1_send_str(buf); 
5704:  MOVLW  01
5706:  MOVLB  2
5708:  MOVWF  x3E
570A:  MOVLW  A2
570C:  MOVWF  x3D
570E:  MOVLB  0
5710:  CALL   1F12
....................         } 
....................       break; 
5714:  MOVLB  0
5716:  BRA    5B2E
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
5718:  CALL   2008
571C:  MOVFF  02,1D5
5720:  MOVFF  01,1D4
5724:  MOVLB  1
5726:  MOVF   xD5,F
5728:  BNZ   5730
572A:  MOVF   xD4,W
572C:  SUBLW  60
572E:  BC    5740
5730:  MOVF   xD5,F
5732:  BNZ   5740
5734:  MOVF   xD4,W
5736:  SUBLW  7A
5738:  BNC   5740
573A:  MOVF   xD4,W
573C:  ANDLW  DF
573E:  BRA    5742
5740:  MOVF   xD4,W
5742:  SUBLW  54
5744:  BNZ   5752
....................         { 
....................         value = get_hex(); 
5746:  MOVLB  0
5748:  RCALL  5114
574A:  MOVFF  01,1D3
574E:  MOVFF  00,1D2
....................         // output bits 
....................         } 
....................       break; 
5752:  MOVLB  0
5754:  BRA    5B2E
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
5756:  CALL   2008
575A:  MOVFF  02,1D5
575E:  MOVFF  01,1D4
5762:  MOVLB  1
5764:  MOVF   xD5,F
5766:  BNZ   576E
5768:  MOVF   xD4,W
576A:  SUBLW  60
576C:  BC    577E
576E:  MOVF   xD5,F
5770:  BNZ   577E
5772:  MOVF   xD4,W
5774:  SUBLW  7A
5776:  BNC   577E
5778:  MOVF   xD4,W
577A:  ANDLW  DF
577C:  BRA    5780
577E:  MOVF   xD4,W
5780:  SUBLW  44
5782:  BNZ   5794
....................         { 
....................         output_high(D2A_RESET); 
5784:  BSF    F8A.3
....................         delay_ms(100); 
5786:  MOVLW  64
5788:  MOVLB  2
578A:  MOVWF  x15
578C:  MOVLB  0
578E:  CALL   0CD8
....................         output_low(D2A_RESET); 
5792:  BCF    F8A.3
....................         } 
....................       break; 
5794:  MOVLB  0
5796:  BRA    5B2E
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
5798:  CALL   2008
579C:  MOVFF  02,1D5
57A0:  MOVFF  01,1D4
57A4:  MOVLB  1
57A6:  MOVF   xD5,F
57A8:  BNZ   57B0
57AA:  MOVF   xD4,W
57AC:  SUBLW  60
57AE:  BC    57C0
57B0:  MOVF   xD5,F
57B2:  BNZ   57C0
57B4:  MOVF   xD4,W
57B6:  SUBLW  7A
57B8:  BNC   57C0
57BA:  MOVF   xD4,W
57BC:  ANDLW  DF
57BE:  BRA    57C2
57C0:  MOVF   xD4,W
57C2:  SUBLW  52
57C4:  BNZ   57EC
....................         { 
....................         bitrate = str_to_long(); 
57C6:  MOVLB  0
57C8:  BRA    520C
57CA:  MOVFF  03,1D1
57CE:  MOVFF  02,1D0
57D2:  MOVFF  01,1CF
57D6:  MOVFF  00,1CE
....................         set_bitrate(bitrate); 
57DA:  MOVFF  1CF,1D5
57DE:  MOVFF  1CE,1D4
57E2:  MOVFF  1CF,1D7
57E6:  MOVFF  1CE,1D6
57EA:  BRA    52C0
....................         } 
....................       break; 
57EC:  MOVLB  0
57EE:  BRA    5B2E
....................     case 'G': 
....................       device = get_char(); 
57F0:  CALL   2008
57F4:  MOVFF  01,19F
....................       addr = get_hex(); 
57F8:  RCALL  5114
57FA:  MOVFF  00,1A0
....................       switch (toupper(device)) 
....................         { 
57FE:  MOVLB  1
5800:  MOVF   x9F,W
5802:  SUBLW  60
5804:  BC    5812
5806:  MOVF   x9F,W
5808:  SUBLW  7A
580A:  BNC   5812
580C:  MOVF   x9F,W
580E:  ANDLW  DF
5810:  BRA    5814
5812:  MOVF   x9F,W
5814:  XORLW  46
5816:  MOVLB  0
5818:  BZ    5820
581A:  XORLW  02
581C:  BZ    589A
581E:  BRA    590A
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
5820:  MOVFF  1A0,1D4
5824:  MOVLW  01
5826:  MOVLB  1
5828:  MOVWF  xD6
582A:  MOVLW  A1
582C:  MOVWF  xD5
582E:  MOVLB  0
5830:  BRA    5354
5832:  MOVFF  01,19D
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
5836:  MOVLW  01
5838:  MOVLB  1
583A:  MOVWF  x72
583C:  MOVLW  A2
583E:  MOVWF  x71
5840:  MOVLW  38
5842:  MOVWF  FF6
5844:  MOVLW  0A
5846:  MOVWF  FF7
5848:  MOVLW  07
584A:  MOVLB  2
584C:  MOVWF  x04
584E:  MOVLB  0
5850:  CALL   254E
5854:  MOVFF  1A0,1D4
5858:  MOVLW  37
585A:  MOVLB  1
585C:  MOVWF  xD5
585E:  MOVLB  0
5860:  RCALL  50CA
5862:  MOVLW  20
5864:  MOVLB  2
5866:  MOVWF  x0D
5868:  MOVLB  0
586A:  CALL   252C
586E:  MOVFF  19D,1D4
5872:  MOVLW  37
5874:  MOVLB  1
5876:  MOVWF  xD5
5878:  MOVLB  0
587A:  RCALL  50CA
587C:  MOVLW  0D
587E:  MOVLB  2
5880:  MOVWF  x0D
5882:  MOVLB  0
5884:  CALL   252C
....................           COM1_send_str(buf); 
5888:  MOVLW  01
588A:  MOVLB  2
588C:  MOVWF  x3E
588E:  MOVLW  A2
5890:  MOVWF  x3D
5892:  MOVLB  0
5894:  CALL   1F12
....................           break; 
5898:  BRA    590A
....................         case 'D': 
....................           data = read_D2A(addr); 
589A:  MOVFF  1A0,1D4
589E:  BRA    53FE
58A0:  MOVFF  01,1A1
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
58A4:  MOVLW  01
58A6:  MOVLB  1
58A8:  MOVWF  x72
58AA:  MOVLW  A2
58AC:  MOVWF  x71
58AE:  MOVLW  4A
58B0:  MOVWF  FF6
58B2:  MOVLW  0A
58B4:  MOVWF  FF7
58B6:  MOVLW  07
58B8:  MOVLB  2
58BA:  MOVWF  x04
58BC:  MOVLB  0
58BE:  CALL   254E
58C2:  MOVFF  1A0,1D4
58C6:  MOVLW  37
58C8:  MOVLB  1
58CA:  MOVWF  xD5
58CC:  MOVLB  0
58CE:  CALL   50CA
58D2:  MOVLW  20
58D4:  MOVLB  2
58D6:  MOVWF  x0D
58D8:  MOVLB  0
58DA:  CALL   252C
58DE:  MOVFF  1A1,1D4
58E2:  MOVLW  37
58E4:  MOVLB  1
58E6:  MOVWF  xD5
58E8:  MOVLB  0
58EA:  CALL   50CA
58EE:  MOVLW  0D
58F0:  MOVLB  2
58F2:  MOVWF  x0D
58F4:  MOVLB  0
58F6:  CALL   252C
....................           COM1_send_str(buf); 
58FA:  MOVLW  01
58FC:  MOVLB  2
58FE:  MOVWF  x3E
5900:  MOVLW  A2
5902:  MOVWF  x3D
5904:  MOVLB  0
5906:  CALL   1F12
....................           break; 
....................         } 
....................       break; 
590A:  BRA    5B2E
....................     case 'F': // fill tables 
....................       skip_spc(); 
590C:  CALL   2028
....................       idx = get_char(); // get table designator 
5910:  CALL   2008
5914:  MOVFF  01,19E
....................       addr = get_int(); // get table index 
5918:  CALL   20C4
591C:  MOVFF  01,1A0
....................       value = get_int(); // get value to put into table 
5920:  CALL   20C4
5924:  MOVFF  02,1D3
5928:  MOVFF  01,1D2
....................       switch (toupper(idx)) 
....................         { 
592C:  MOVLB  1
592E:  MOVF   x9E,W
5930:  SUBLW  60
5932:  BC    5940
5934:  MOVF   x9E,W
5936:  SUBLW  7A
5938:  BNC   5940
593A:  MOVF   x9E,W
593C:  ANDLW  DF
593E:  BRA    5942
5940:  MOVF   x9E,W
5942:  XORLW  4E
5944:  MOVLB  0
5946:  BZ    594E
5948:  XORLW  1E
594A:  BZ    5974
594C:  BRA    5998
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
594E:  MOVLB  1
5950:  MOVF   xA0,W
5952:  SUBLW  02
5954:  BNC   5970
....................             { 
....................             setup.negative_voltage[addr] = value; 
5956:  BCF    FD8.0
5958:  RLCF   xA0,W
595A:  CLRF   03
595C:  ADDLW  B8
595E:  MOVWF  FE9
5960:  MOVLW  00
5962:  ADDWFC 03,W
5964:  MOVWF  FEA
5966:  MOVFF  1D3,FEC
596A:  MOVF   FED,F
596C:  MOVFF  1D2,FEF
....................             } 
....................           break; 
5970:  MOVLB  0
5972:  BRA    5998
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
5974:  MOVLB  1
5976:  MOVF   xA0,W
5978:  SUBLW  14
597A:  BNC   5996
....................             { 
....................             setup.power_in[addr] = value; 
597C:  BCF    FD8.0
597E:  RLCF   xA0,W
5980:  CLRF   03
5982:  ADDLW  BE
5984:  MOVWF  FE9
5986:  MOVLW  00
5988:  ADDWFC 03,W
598A:  MOVWF  FEA
598C:  MOVFF  1D3,FEC
5990:  MOVF   FED,F
5992:  MOVFF  1D2,FEF
....................             } 
....................           break; 
5996:  MOVLB  0
....................         } 
....................       break; 
5998:  BRA    5B2E
....................     case 'S': 
....................       device = get_char(); 
599A:  CALL   2008
599E:  MOVFF  01,19F
....................       addr = get_hex(); 
59A2:  CALL   5114
59A6:  MOVFF  00,1A0
....................       data = get_hex(); 
59AA:  CALL   5114
59AE:  MOVFF  00,1A1
....................       switch (toupper(device)) 
....................         { 
59B2:  MOVLB  1
59B4:  MOVF   x9F,W
59B6:  SUBLW  60
59B8:  BC    59C6
59BA:  MOVF   x9F,W
59BC:  SUBLW  7A
59BE:  BNC   59C6
59C0:  MOVF   x9F,W
59C2:  ANDLW  DF
59C4:  BRA    59C8
59C6:  MOVF   x9F,W
59C8:  XORLW  46
59CA:  MOVLB  0
59CC:  BZ    59D8
59CE:  XORLW  02
59D0:  BZ    5A0A
59D2:  XORLW  12
59D4:  BZ    5A2E
59D6:  BRA    5A3A
....................         case 'F': 
....................           buf[0] = addr; 
59D8:  MOVFF  1A0,1A2
....................           buf[1] = data; 
59DC:  MOVFF  1A1,1A3
....................           FPGA_image[addr] = data; 
59E0:  CLRF   03
59E2:  MOVLB  1
59E4:  MOVF   xA0,W
59E6:  ADDLW  12
59E8:  MOVWF  FE9
59EA:  MOVLW  01
59EC:  ADDWFC 03,W
59EE:  MOVWF  FEA
59F0:  MOVFF  1A1,FEF
....................           send_FPGA_command(2, buf); 
59F4:  MOVLW  02
59F6:  MOVLB  2
59F8:  MOVWF  x15
59FA:  MOVLW  01
59FC:  MOVWF  x17
59FE:  MOVLW  A2
5A00:  MOVWF  x16
5A02:  MOVLB  0
5A04:  CALL   148A
....................           break; 
5A08:  BRA    5A3A
....................         case 'D': 
....................           D2A_image[addr] = data; 
5A0A:  CLRF   03
5A0C:  MOVLB  1
5A0E:  MOVF   xA0,W
5A10:  ADDLW  32
5A12:  MOVWF  FE9
5A14:  MOVLW  01
5A16:  ADDWFC 03,W
5A18:  MOVWF  FEA
5A1A:  MOVFF  1A1,FEF
....................           write_D2A(addr, data); 
5A1E:  MOVFF  1A0,1D4
5A22:  MOVFF  1A1,1D5
5A26:  MOVLB  0
5A28:  CALL   4BBA
....................           break; 
5A2C:  BRA    5A3A
....................         case 'V': 
....................           allow_write = 2975; 
5A2E:  MOVLW  0B
5A30:  MOVWF  xF6
5A32:  MOVLW  9F
5A34:  MOVWF  xF5
....................           write_setup(); 
5A36:  CALL   27BA
....................           break; 
....................         } 
....................       break; 
5A3A:  BRA    5B2E
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
5A3C:  CALL   2008
5A40:  MOVFF  02,1D5
5A44:  MOVFF  01,1D4
5A48:  MOVLB  1
5A4A:  MOVF   xD5,F
5A4C:  BNZ   5A54
5A4E:  MOVF   xD4,W
5A50:  SUBLW  60
5A52:  BC    5A64
5A54:  MOVF   xD5,F
5A56:  BNZ   5A64
5A58:  MOVF   xD4,W
5A5A:  SUBLW  7A
5A5C:  BNC   5A64
5A5E:  MOVF   xD4,W
5A60:  ANDLW  DF
5A62:  BRA    5A66
5A64:  MOVF   xD4,W
5A66:  SUBLW  54
5A68:  BNZ   5AFE
....................         if (toupper(get_char()) == 'C') 
5A6A:  MOVLB  0
5A6C:  CALL   2008
5A70:  MOVFF  02,1D5
5A74:  MOVFF  01,1D4
5A78:  MOVLB  1
5A7A:  MOVF   xD5,F
5A7C:  BNZ   5A84
5A7E:  MOVF   xD4,W
5A80:  SUBLW  60
5A82:  BC    5A94
5A84:  MOVF   xD5,F
5A86:  BNZ   5A94
5A88:  MOVF   xD4,W
5A8A:  SUBLW  7A
5A8C:  BNC   5A94
5A8E:  MOVF   xD4,W
5A90:  ANDLW  DF
5A92:  BRA    5A96
5A94:  MOVF   xD4,W
5A96:  SUBLW  43
5A98:  BNZ   5AFE
....................           if (toupper(get_char()) == 'C') 
5A9A:  MOVLB  0
5A9C:  CALL   2008
5AA0:  MOVFF  02,1D5
5AA4:  MOVFF  01,1D4
5AA8:  MOVLB  1
5AAA:  MOVF   xD5,F
5AAC:  BNZ   5AB4
5AAE:  MOVF   xD4,W
5AB0:  SUBLW  60
5AB2:  BC    5AC4
5AB4:  MOVF   xD5,F
5AB6:  BNZ   5AC4
5AB8:  MOVF   xD4,W
5ABA:  SUBLW  7A
5ABC:  BNC   5AC4
5ABE:  MOVF   xD4,W
5AC0:  ANDLW  DF
5AC2:  BRA    5AC6
5AC4:  MOVF   xD4,W
5AC6:  SUBLW  43
5AC8:  BNZ   5AFE
....................             if (toupper(get_char()) == 'P') 
5ACA:  MOVLB  0
5ACC:  CALL   2008
5AD0:  MOVFF  02,1D5
5AD4:  MOVFF  01,1D4
5AD8:  MOVLB  1
5ADA:  MOVF   xD5,F
5ADC:  BNZ   5AE4
5ADE:  MOVF   xD4,W
5AE0:  SUBLW  60
5AE2:  BC    5AF4
5AE4:  MOVF   xD5,F
5AE6:  BNZ   5AF4
5AE8:  MOVF   xD4,W
5AEA:  SUBLW  7A
5AEC:  BNC   5AF4
5AEE:  MOVF   xD4,W
5AF0:  ANDLW  DF
5AF2:  BRA    5AF6
5AF4:  MOVF   xD4,W
5AF6:  SUBLW  50
5AF8:  BNZ   5AFE
....................               ttccp = 1; 
5AFA:  MOVLW  01
5AFC:  MOVWF  x10
....................       break; 
5AFE:  MOVLB  0
5B00:  BRA    5B2E
....................     case '1': // year 
....................       setup.year = get_int(); 
5B02:  CALL   20C4
5B06:  MOVFF  02,E9
5B0A:  MOVFF  01,E8
....................       break; 
5B0E:  BRA    5B2E
....................     case '2': // week 
....................       setup.week = get_int(); 
5B10:  CALL   20C4
5B14:  MOVFF  01,EA
....................       break; 
5B18:  BRA    5B2E
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
5B1A:  CALL   20C4
5B1E:  MOVFF  02,EC
5B22:  MOVFF  01,EB
....................       break; 
5B26:  BRA    5B2E
....................     default: 
....................       return 0; 
5B28:  MOVLW  00
5B2A:  MOVWF  01
5B2C:  BRA    5B32
....................     } 
....................   return 0; 
5B2E:  MOVLW  00
5B30:  MOVWF  01
....................   } 
5B32:  GOTO   5BC0 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
27E4:  RCALL  20C4
27E6:  MOVFF  01,00
27EA:  MOVFF  02,01
27EE:  CLRF   02
27F0:  CLRF   03
27F2:  MOVFF  03,201
27F6:  MOVFF  02,200
27FA:  MOVFF  01,1FF
27FE:  MOVFF  00,1FE
....................             get_char(); 
2802:  RCALL  2008
....................             sub = get_int(); 
2804:  RCALL  20C4
2806:  MOVFF  01,00
280A:  MOVFF  02,01
280E:  CLRF   02
2810:  CLRF   03
2812:  MOVFF  03,205
2816:  MOVFF  02,204
281A:  MOVFF  01,203
281E:  MOVFF  00,202
....................  
....................             if (peek_char() == '.') 
2822:  CALL   1FEA
2826:  MOVFF  02,207
282A:  MOVFF  01,206
282E:  MOVLB  2
2830:  MOVF   01,W
2832:  SUBLW  2E
2834:  BNZ   2878
2836:  MOVF   x07,F
2838:  BNZ   2878
....................               { 
....................               get_char(); 
283A:  MOVLB  0
283C:  CALL   2008
....................               sub = get_int(); 
2840:  RCALL  20C4
2842:  MOVFF  01,00
2846:  MOVFF  02,01
284A:  CLRF   02
284C:  CLRF   03
284E:  MOVFF  03,205
2852:  MOVFF  02,204
2856:  MOVFF  01,203
285A:  MOVFF  00,202
....................               bitrate += sub; 
285E:  MOVLB  2
2860:  MOVF   x02,W
2862:  MOVLB  1
2864:  ADDWF  xFE,F
2866:  MOVLB  2
2868:  MOVF   x03,W
286A:  MOVLB  1
286C:  ADDWFC xFF,F
286E:  MOVLB  2
2870:  MOVF   x04,W
2872:  ADDWFC x00,F
2874:  MOVF   x05,W
2876:  ADDWFC x01,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
2878:  MOVFF  201,21C
287C:  MOVFF  200,21B
2880:  MOVFF  1FF,21A
2884:  MOVFF  1FE,219
2888:  CLRF   x20
288A:  CLRF   x1F
288C:  CLRF   x1E
288E:  MOVLW  64
2890:  MOVWF  x1D
2892:  MOVLB  0
2894:  CALL   0FE0
2898:  MOVLB  2
289A:  MOVF   x02,W
289C:  ADDWF  00,W
289E:  MOVLB  0
28A0:  MOVWF  xA5
28A2:  MOVLB  2
28A4:  MOVF   x03,W
28A6:  ADDWFC 01,W
28A8:  MOVLB  0
28AA:  MOVWF  xA6
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
28AC:  CALL   1952
....................  
....................   } 
28B0:  GOTO   3DC8 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
*
218A:  MOVLW  0D
218C:  MOVLB  1
218E:  MOVWF  xFE
2190:  MOVLW  0A
2192:  MOVWF  xFF
2194:  MOVLB  2
2196:  CLRF   x00
2198:  MOVLW  01
219A:  MOVWF  x3E
219C:  MOVLW  FE
219E:  MOVWF  x3D
21A0:  MOVLB  0
21A2:  RCALL  1F12
....................   COM1_send_str("DS <data soure><cr>  \tSet data sourse (0-1)\r\n"); 
21A4:  MOVLW  01
21A6:  MOVWF  FEA
21A8:  MOVLW  FE
21AA:  MOVWF  FE9
21AC:  MOVLW  2E
21AE:  MOVWF  01
21B0:  CLRF   FF7
21B2:  MOVLW  00
21B4:  CALL   039A
21B8:  TBLRD*-
21BA:  TBLRD*+
21BC:  MOVFF  FF5,FEE
21C0:  DECFSZ 01,F
21C2:  BRA    21BA
21C4:  MOVLW  01
21C6:  MOVLB  2
21C8:  MOVWF  x3E
21CA:  MOVLW  FE
21CC:  MOVWF  x3D
21CE:  MOVLB  0
21D0:  RCALL  1F12
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
21D2:  MOVLW  01
21D4:  MOVWF  FEA
21D6:  MOVLW  FE
21D8:  MOVWF  FE9
21DA:  MOVLW  33
21DC:  MOVWF  01
21DE:  CLRF   FF7
21E0:  MOVLW  00
21E2:  CALL   03D8
21E6:  TBLRD*-
21E8:  TBLRD*+
21EA:  MOVFF  FF5,FEE
21EE:  DECFSZ 01,F
21F0:  BRA    21E8
21F2:  MOVLW  01
21F4:  MOVLB  2
21F6:  MOVWF  x3E
21F8:  MOVLW  FE
21FA:  MOVWF  x3D
21FC:  MOVLB  0
21FE:  RCALL  1F12
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2200:  MOVLW  01
2202:  MOVWF  FEA
2204:  MOVLW  FE
2206:  MOVWF  FE9
2208:  MOVLW  31
220A:  MOVWF  01
220C:  CLRF   FF7
220E:  MOVLW  00
2210:  CALL   041C
2214:  TBLRD*-
2216:  TBLRD*+
2218:  MOVFF  FF5,FEE
221C:  DECFSZ 01,F
221E:  BRA    2216
2220:  MOVLW  01
2222:  MOVLB  2
2224:  MOVWF  x3E
2226:  MOVLW  FE
2228:  MOVWF  x3D
222A:  MOVLB  0
222C:  RCALL  1F12
....................   COM1_send_str("RP <power higth><cr>  \tSet power higth (0-1)\r\n"); 
222E:  MOVLW  01
2230:  MOVWF  FEA
2232:  MOVLW  FE
2234:  MOVWF  FE9
2236:  MOVLW  2F
2238:  MOVWF  01
223A:  CLRF   FF7
223C:  MOVLW  00
223E:  CALL   045E
2242:  TBLRD*-
2244:  TBLRD*+
2246:  MOVFF  FF5,FEE
224A:  DECFSZ 01,F
224C:  BRA    2244
224E:  MOVLW  01
2250:  MOVLB  2
2252:  MOVWF  x3E
2254:  MOVLW  FE
2256:  MOVWF  x3D
2258:  MOVLB  0
225A:  RCALL  1F12
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
225C:  MOVLW  01
225E:  MOVWF  FEA
2260:  MOVLW  FE
2262:  MOVWF  FE9
2264:  MOVLW  31
2266:  MOVWF  01
2268:  CLRF   FF7
226A:  MOVLW  00
226C:  CALL   049E
2270:  TBLRD*-
2272:  TBLRD*+
2274:  MOVFF  FF5,FEE
2278:  DECFSZ 01,F
227A:  BRA    2272
227C:  MOVLW  01
227E:  MOVLB  2
2280:  MOVWF  x3E
2282:  MOVLW  FE
2284:  MOVWF  x3D
2286:  MOVLB  0
2288:  RCALL  1F12
....................   COM1_send_str("RA <randomizer><cr>  \tset with/without randomizer (0-1)\r\n"); 
228A:  MOVLW  01
228C:  MOVWF  FEA
228E:  MOVLW  FE
2290:  MOVWF  FE9
2292:  MOVLW  3A
2294:  MOVWF  01
2296:  CLRF   FF7
2298:  MOVLW  00
229A:  CALL   04E0
229E:  TBLRD*-
22A0:  TBLRD*+
22A2:  MOVFF  FF5,FEE
22A6:  DECFSZ 01,F
22A8:  BRA    22A0
22AA:  MOVLW  01
22AC:  MOVLB  2
22AE:  MOVWF  x3E
22B0:  MOVLW  FE
22B2:  MOVWF  x3D
22B4:  MOVLB  0
22B6:  RCALL  1F12
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
22B8:  MOVLW  01
22BA:  MOVWF  FEA
22BC:  MOVLW  FE
22BE:  MOVWF  FE9
22C0:  MOVLW  35
22C2:  MOVWF  01
22C4:  CLRF   FF7
22C6:  MOVLW  00
22C8:  CALL   052A
22CC:  TBLRD*-
22CE:  TBLRD*+
22D0:  MOVFF  FF5,FEE
22D4:  DECFSZ 01,F
22D6:  BRA    22CE
22D8:  MOVLW  01
22DA:  MOVLB  2
22DC:  MOVWF  x3E
22DE:  MOVLW  FE
22E0:  MOVWF  x3D
22E2:  MOVLB  0
22E4:  RCALL  1F12
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
22E6:  MOVLW  01
22E8:  MOVWF  FEA
22EA:  MOVLW  FE
22EC:  MOVWF  FE9
22EE:  MOVLW  21
22F0:  MOVWF  01
22F2:  CLRF   FF7
22F4:  MOVLW  00
22F6:  CALL   0570
22FA:  TBLRD*-
22FC:  TBLRD*+
22FE:  MOVFF  FF5,FEE
2302:  DECFSZ 01,F
2304:  BRA    22FC
2306:  MOVLW  01
2308:  MOVLB  2
230A:  MOVWF  x3E
230C:  MOVLW  FE
230E:  MOVWF  x3D
2310:  MOVLB  0
2312:  RCALL  1F12
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2314:  MOVLW  01
2316:  MOVWF  FEA
2318:  MOVLW  FE
231A:  MOVWF  FE9
231C:  MOVLW  32
231E:  MOVWF  01
2320:  CLRF   FF7
2322:  MOVLW  00
2324:  CALL   05A2
2328:  TBLRD*-
232A:  TBLRD*+
232C:  MOVFF  FF5,FEE
2330:  DECFSZ 01,F
2332:  BRA    232A
2334:  MOVLW  01
2336:  MOVLB  2
2338:  MOVWF  x3E
233A:  MOVLW  FE
233C:  MOVWF  x3D
233E:  MOVLB  0
2340:  RCALL  1F12
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2342:  MOVLW  01
2344:  MOVWF  FEA
2346:  MOVLW  FE
2348:  MOVWF  FE9
234A:  MOVLW  39
234C:  MOVWF  01
234E:  CLRF   FF7
2350:  MOVLW  00
2352:  CALL   05E4
2356:  TBLRD*-
2358:  TBLRD*+
235A:  MOVFF  FF5,FEE
235E:  DECFSZ 01,F
2360:  BRA    2358
2362:  MOVLW  01
2364:  MOVLB  2
2366:  MOVWF  x3E
2368:  MOVLW  FE
236A:  MOVWF  x3D
236C:  MOVLB  0
236E:  RCALL  1F12
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2370:  MOVLW  01
2372:  MOVWF  FEA
2374:  MOVLW  FE
2376:  MOVWF  FE9
2378:  MOVLW  31
237A:  MOVWF  01
237C:  CLRF   FF7
237E:  MOVLW  00
2380:  CALL   062E
2384:  TBLRD*-
2386:  TBLRD*+
2388:  MOVFF  FF5,FEE
238C:  DECFSZ 01,F
238E:  BRA    2386
2390:  MOVLW  01
2392:  MOVLB  2
2394:  MOVWF  x3E
2396:  MOVLW  FE
2398:  MOVWF  x3D
239A:  MOVLB  0
239C:  RCALL  1F12
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
239E:  MOVLW  01
23A0:  MOVWF  FEA
23A2:  MOVLW  FE
23A4:  MOVWF  FE9
23A6:  MOVLW  35
23A8:  MOVWF  01
23AA:  CLRF   FF7
23AC:  MOVLW  00
23AE:  CALL   0670
23B2:  TBLRD*-
23B4:  TBLRD*+
23B6:  MOVFF  FF5,FEE
23BA:  DECFSZ 01,F
23BC:  BRA    23B4
23BE:  MOVLW  01
23C0:  MOVLB  2
23C2:  MOVWF  x3E
23C4:  MOVLW  FE
23C6:  MOVWF  x3D
23C8:  MOVLB  0
23CA:  RCALL  1F12
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
23CC:  MOVLW  01
23CE:  MOVWF  FEA
23D0:  MOVLW  FE
23D2:  MOVWF  FE9
23D4:  MOVLW  3B
23D6:  MOVWF  01
23D8:  CLRF   FF7
23DA:  MOVLW  00
23DC:  CALL   06B6
23E0:  TBLRD*-
23E2:  TBLRD*+
23E4:  MOVFF  FF5,FEE
23E8:  DECFSZ 01,F
23EA:  BRA    23E2
23EC:  MOVLW  01
23EE:  MOVLB  2
23F0:  MOVWF  x3E
23F2:  MOVLW  FE
23F4:  MOVWF  x3D
23F6:  MOVLB  0
23F8:  RCALL  1F12
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
23FA:  MOVLW  01
23FC:  MOVWF  FEA
23FE:  MOVLW  FE
2400:  MOVWF  FE9
2402:  MOVLW  3B
2404:  MOVWF  01
2406:  CLRF   FF7
2408:  MOVLW  00
240A:  CALL   0702
240E:  TBLRD*-
2410:  TBLRD*+
2412:  MOVFF  FF5,FEE
2416:  DECFSZ 01,F
2418:  BRA    2410
241A:  MOVLW  01
241C:  MOVLB  2
241E:  MOVWF  x3E
2420:  MOVLW  FE
2422:  MOVWF  x3D
2424:  MOVLB  0
2426:  RCALL  1F12
....................   COM1_send_str("CP <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2428:  MOVLW  01
242A:  MOVWF  FEA
242C:  MOVLW  FE
242E:  MOVWF  FE9
2430:  MOVLW  2F
2432:  MOVWF  01
2434:  CLRF   FF7
2436:  MOVLW  00
2438:  CALL   074E
243C:  TBLRD*-
243E:  TBLRD*+
2440:  MOVFF  FF5,FEE
2444:  DECFSZ 01,F
2446:  BRA    243E
2448:  MOVLW  01
244A:  MOVLB  2
244C:  MOVWF  x3E
244E:  MOVLW  FE
2450:  MOVWF  x3D
2452:  MOVLB  0
2454:  RCALL  1F12
....................   COM1_send_str("CS <clock source><cr>  \tSet clock source (0-1)\r\n"); 
2456:  MOVLW  01
2458:  MOVWF  FEA
245A:  MOVLW  FE
245C:  MOVWF  FE9
245E:  MOVLW  31
2460:  MOVWF  01
2462:  CLRF   FF7
2464:  MOVLW  00
2466:  CALL   078E
246A:  TBLRD*-
246C:  TBLRD*+
246E:  MOVFF  FF5,FEE
2472:  DECFSZ 01,F
2474:  BRA    246C
2476:  MOVLW  01
2478:  MOVLB  2
247A:  MOVWF  x3E
247C:  MOVLW  FE
247E:  MOVWF  x3D
2480:  MOVLB  0
2482:  RCALL  1F12
....................   COM1_send_str("TE <temperature><cr>  \tSet display temperature\r\n"); 
2484:  MOVLW  01
2486:  MOVWF  FEA
2488:  MOVLW  FE
248A:  MOVWF  FE9
248C:  MOVLW  31
248E:  MOVWF  01
2490:  CLRF   FF7
2492:  MOVLW  00
2494:  CALL   07D0
2498:  TBLRD*-
249A:  TBLRD*+
249C:  MOVFF  FF5,FEE
24A0:  DECFSZ 01,F
24A2:  BRA    249A
24A4:  MOVLW  01
24A6:  MOVLB  2
24A8:  MOVWF  x3E
24AA:  MOVLW  FE
24AC:  MOVWF  x3D
24AE:  MOVLB  0
24B0:  RCALL  1F12
....................   COM1_send_str("Q  <status><cr>  \tSet display parameters status\r\n"); 
24B2:  MOVLW  01
24B4:  MOVWF  FEA
24B6:  MOVLW  FE
24B8:  MOVWF  FE9
24BA:  MOVLW  32
24BC:  MOVWF  01
24BE:  CLRF   FF7
24C0:  MOVLW  00
24C2:  CALL   0812
24C6:  TBLRD*-
24C8:  TBLRD*+
24CA:  MOVFF  FF5,FEE
24CE:  DECFSZ 01,F
24D0:  BRA    24C8
24D2:  MOVLW  01
24D4:  MOVLB  2
24D6:  MOVWF  x3E
24D8:  MOVLW  FE
24DA:  MOVWF  x3D
24DC:  MOVLB  0
24DE:  RCALL  1F12
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r\n"); 
24E0:  MOVLW  01
24E2:  MOVWF  FEA
24E4:  MOVLW  FE
24E6:  MOVWF  FE9
24E8:  MOVLW  26
24EA:  MOVWF  01
24EC:  CLRF   FF7
24EE:  MOVLW  00
24F0:  CALL   0854
24F4:  TBLRD*-
24F6:  TBLRD*+
24F8:  MOVFF  FF5,FEE
24FC:  DECFSZ 01,F
24FE:  BRA    24F6
2500:  MOVLW  01
2502:  MOVLB  2
2504:  MOVWF  x3E
2506:  MOVLW  FE
2508:  MOVWF  x3D
250A:  MOVLB  0
250C:  RCALL  1F12
....................   COM1_send_str("\r\n"); 
250E:  MOVLW  0D
2510:  MOVLB  1
2512:  MOVWF  xFE
2514:  MOVLW  0A
2516:  MOVWF  xFF
2518:  MOVLB  2
251A:  CLRF   x00
251C:  MOVLW  01
251E:  MOVWF  x3E
2520:  MOVLW  FE
2522:  MOVWF  x3D
2524:  MOVLB  0
2526:  RCALL  1F12
....................   } 
2528:  GOTO   4A32 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
2E9C:  MOVLB  1
2E9E:  CLRF   x90
2EA0:  CLRF   xBA
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, bitrate, sub; 
....................   float temp; 
....................   UINT  val, revp, rp; 
....................   chr = 2; 
2EA2:  MOVLW  02
2EA4:  MOVWF  x91
....................   comm_ptr = 0; 
2EA6:  CLRF   x0F
....................     if (peek_char() == ':') // addressed message? 
2EA8:  MOVLB  0
2EAA:  CALL   1FEA
2EAE:  MOVFF  02,1FF
2EB2:  MOVFF  01,1FE
2EB6:  MOVLB  1
2EB8:  MOVF   01,W
2EBA:  SUBLW  3A
2EBC:  BNZ   2EFA
2EBE:  MOVF   xFF,F
2EC0:  BNZ   2EFA
....................     { 
....................     get_char(); // skip ':' 
2EC2:  MOVLB  0
2EC4:  CALL   2008
....................     addr = get_int(); 
2EC8:  CALL   20C4
2ECC:  MOVFF  01,1C9
....................     if (get_char() != ':') 
2ED0:  CALL   2008
2ED4:  MOVFF  02,1FF
2ED8:  MOVFF  01,1FE
2EDC:  MOVLB  1
2EDE:  MOVF   01,W
2EE0:  SUBLW  3A
2EE2:  BNZ   2EE8
2EE4:  MOVF   xFF,F
2EE6:  BNZ   2EE8
....................       break; 
....................     if (setup.unit_id != addr) 
2EE8:  MOVF   xC9,W
2EEA:  MOVLB  0
2EEC:  SUBWF  xEB,W
2EEE:  BNZ   2EF4
2EF0:  MOVF   xEC,F
2EF2:  BZ    2EF8
....................       goto aaa; 
2EF4:  GOTO   4A32
2EF8:  MOVLB  1
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
2EFA:  MOVLB  0
2EFC:  CALL   2008
2F00:  MOVFF  02,1FF
2F04:  MOVFF  01,1FE
2F08:  MOVLB  1
2F0A:  MOVF   xFF,F
2F0C:  BNZ   2F14
2F0E:  MOVF   xFE,W
2F10:  SUBLW  60
2F12:  BC    2F24
2F14:  MOVF   xFF,F
2F16:  BNZ   2F24
2F18:  MOVF   xFE,W
2F1A:  SUBLW  7A
2F1C:  BNC   2F24
2F1E:  MOVF   xFE,W
2F20:  ANDLW  DF
2F22:  BRA    2F26
2F24:  MOVF   xFE,W
2F26:  MOVWF  xBB
....................   c2 = toupper(get_char()); 
2F28:  MOVLB  0
2F2A:  CALL   2008
2F2E:  MOVFF  02,1FF
2F32:  MOVFF  01,1FE
2F36:  MOVLB  1
2F38:  MOVF   xFF,F
2F3A:  BNZ   2F42
2F3C:  MOVF   xFE,W
2F3E:  SUBLW  60
2F40:  BC    2F52
2F42:  MOVF   xFF,F
2F44:  BNZ   2F52
2F46:  MOVF   xFE,W
2F48:  SUBLW  7A
2F4A:  BNC   2F52
2F4C:  MOVF   xFE,W
2F4E:  ANDLW  DF
2F50:  BRA    2F54
2F52:  MOVF   xFE,W
2F54:  MOVWF  xBC
....................   skip_spc(); 
2F56:  MOVLB  0
2F58:  CALL   2028
....................  
....................   if (peek_char() == 13) // is this a query? 
2F5C:  CALL   1FEA
2F60:  MOVFF  02,1FF
2F64:  MOVFF  01,1FE
2F68:  MOVLB  1
2F6A:  MOVF   01,W
2F6C:  SUBLW  0D
2F6E:  BNZ   2F78
2F70:  MOVF   xFF,F
2F72:  BNZ   2F78
....................     query = 1; // YES 
2F74:  MOVLW  01
2F76:  MOVWF  xBA
....................   switch (c1) 
....................     { 
2F78:  MOVF   xBB,W
2F7A:  XORLW  4C
2F7C:  MOVLB  0
2F7E:  BZ    2FE6
2F80:  XORLW  68
2F82:  BZ    3026
2F84:  XORLW  6C
2F86:  BTFSC  FD8.2
2F88:  BRA    3082
2F8A:  XORLW  0E
2F8C:  BTFSC  FD8.2
2F8E:  BRA    30CA
2F90:  XORLW  0B
2F92:  BTFSC  FD8.2
2F94:  BRA    31C2
2F96:  XORLW  09
2F98:  BTFSC  FD8.2
2F9A:  BRA    32C6
2F9C:  XORLW  16
2F9E:  BTFSC  FD8.2
2FA0:  BRA    35D4
2FA2:  XORLW  05
2FA4:  BTFSC  FD8.2
2FA6:  GOTO   3BFE
2FAA:  XORLW  04
2FAC:  BTFSC  FD8.2
2FAE:  GOTO   3C1C
2FB2:  XORLW  1A
2FB4:  BTFSC  FD8.2
2FB6:  GOTO   3C5A
2FBA:  XORLW  1D
2FBC:  BTFSC  FD8.2
2FBE:  GOTO   3DD4
2FC2:  XORLW  02
2FC4:  BTFSC  FD8.2
2FC6:  GOTO   3DF0
2FCA:  XORLW  15
2FCC:  BTFSC  FD8.2
2FCE:  GOTO   40B6
2FD2:  XORLW  04
2FD4:  BTFSC  FD8.2
2FD6:  GOTO   42C0
2FDA:  XORLW  16
2FDC:  BTFSC  FD8.2
2FDE:  GOTO   456E
2FE2:  GOTO   4A02
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
2FE6:  MOVLB  1
2FE8:  MOVF   xBC,W
2FEA:  XORLW  49
2FEC:  MOVLB  0
2FEE:  BZ    2FF6
2FF0:  XORLW  06
2FF2:  BZ    301C
2FF4:  BRA    3022
....................         case 'I':               // login 
....................           val = get_int(); 
2FF6:  CALL   20C4
2FFA:  MOVFF  02,1DB
2FFE:  MOVFF  01,1DA
....................           if (val == 17592) 
3002:  MOVLB  1
3004:  MOVF   xDA,W
3006:  SUBLW  B8
3008:  BNZ   3014
300A:  MOVF   xDB,W
300C:  SUBLW  44
300E:  BNZ   3014
....................             ttccp_login = 1; 
3010:  MOVLW  01
3012:  MOVWF  x6E
.................... 			debug_mode = 1; 
3014:  MOVLW  01
3016:  MOVWF  x11
....................           break; 
3018:  MOVLB  0
301A:  BRA    3022
....................         case 'O':               // logout 
....................           ttccp_login = 0; 
301C:  MOVLB  1
301E:  CLRF   x6E
....................           break; 
3020:  MOVLB  0
....................         } 
....................       break; 
3022:  GOTO   4A32
....................     case '$': 
....................       if (!ttccp_login) break; 
3026:  MOVLB  1
3028:  MOVF   x6E,F
302A:  BNZ   3034
302C:  MOVLB  0
302E:  GOTO   4A32
3032:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
3034:  MOVF   xBC,W
3036:  SUBLW  52
3038:  BNZ   307C
....................         { 
....................         val = get_int(); 
303A:  MOVLB  0
303C:  CALL   20C4
3040:  MOVFF  02,1DB
3044:  MOVFF  01,1DA
....................           if (val != 17591) 
3048:  MOVLB  1
304A:  MOVF   xDA,W
304C:  SUBLW  B7
304E:  BNZ   3056
3050:  MOVF   xDB,W
3052:  SUBLW  44
3054:  BZ    305A
....................             return; 
3056:  GOTO   4A34
....................         ttccp = 0; 
305A:  CLRF   x10
....................         COM1_send_str("\r\n\n*"); 
305C:  MOVLW  0D
305E:  MOVWF  xE0
3060:  MOVLW  0A
3062:  MOVWF  xE1
3064:  MOVWF  xE2
3066:  MOVLW  2A
3068:  MOVWF  xE3
306A:  CLRF   xE4
306C:  MOVLW  01
306E:  MOVLB  2
3070:  MOVWF  x3E
3072:  MOVLW  E0
3074:  MOVWF  x3D
3076:  MOVLB  0
3078:  CALL   1F12
....................         } 
....................       break; 
307C:  MOVLB  0
307E:  GOTO   4A32
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
3082:  MOVLB  1
3084:  MOVF   x6E,F
3086:  BNZ   3090
3088:  MOVLB  0
308A:  GOTO   4A32
308E:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r\n"); 
3090:  MOVLW  01
3092:  MOVWF  FEA
3094:  MOVLW  E5
3096:  MOVWF  FE9
3098:  MOVLW  10
309A:  MOVWF  01
309C:  CLRF   FF7
309E:  MOVLW  00
30A0:  MOVLB  0
30A2:  CALL   088A
30A6:  TBLRD*-
30A8:  TBLRD*+
30AA:  MOVFF  FF5,FEE
30AE:  DECFSZ 01,F
30B0:  BRA    30A8
30B2:  MOVLW  01
30B4:  MOVLB  2
30B6:  MOVWF  x3E
30B8:  MOVLW  E5
30BA:  MOVWF  x3D
30BC:  MOVLB  0
30BE:  CALL   1F12
....................       list_help(); 
30C2:  GOTO   218A
....................     break; 
30C6:  GOTO   4A32
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
30CA:  MOVLB  1
30CC:  MOVF   x6E,F
30CE:  BNZ   30D8
30D0:  MOVLB  0
30D2:  GOTO   4A32
30D6:  MOVLB  1
....................       switch (c2) 
....................         { 
30D8:  MOVF   xBC,W
30DA:  XORLW  52
30DC:  MOVLB  0
30DE:  BZ    30E2
30E0:  BRA    31BE
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
30E2:  MOVLB  1
30E4:  MOVF   xBC,W
30E6:  SUBLW  52
30E8:  BNZ   318C
....................             { 
....................             if (query) 
30EA:  MOVF   xBA,F
30EC:  BZ    313A
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
30EE:  MOVLW  01
30F0:  MOVWF  x72
30F2:  MOVLW  92
30F4:  MOVWF  x71
30F6:  MOVLW  5C
30F8:  MOVWF  FF6
30FA:  MOVLW  0A
30FC:  MOVWF  FF7
30FE:  MOVLW  03
3100:  MOVLB  2
3102:  MOVWF  x04
3104:  MOVLB  0
3106:  CALL   254E
310A:  MOVLW  10
310C:  MOVWF  FE9
310E:  MOVFF  B4,205
3112:  MOVFF  B3,204
3116:  CALL   2576
311A:  MOVLW  0D
311C:  MOVLB  2
311E:  MOVWF  x0D
3120:  MOVLB  0
3122:  CALL   252C
....................               COM1_send_str(buf); 
3126:  MOVLW  01
3128:  MOVLB  2
312A:  MOVWF  x3E
312C:  MOVLW  92
312E:  MOVWF  x3D
3130:  MOVLB  0
3132:  CALL   1F12
....................               } 
....................               else 
3136:  BRA    3188
3138:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
313A:  MOVLB  0
313C:  CALL   2632
3140:  MOVLB  1
3142:  CLRF   xCD
3144:  CLRF   xCC
3146:  MOVFF  02,1CB
314A:  MOVFF  01,1CA
....................                 setup.frequency = freq; 
314E:  MOVFF  1CB,B4
3152:  MOVFF  1CA,B3
....................                 PLL_compute_freq_parameters(freq); 
3156:  MOVFF  1CB,1FF
315A:  MOVFF  1CA,1FE
315E:  MOVFF  1CB,207
3162:  MOVFF  1CA,206
3166:  MOVLB  0
3168:  CALL   10D0
....................                 PLL_update(); 
316C:  CALL   13A0
.................... 				delay_ms(50); 
3170:  MOVLW  32
3172:  MOVLB  2
3174:  MOVWF  x15
3176:  MOVLB  0
3178:  CALL   0CD8
.................... 				PLL_update(); 
317C:  CALL   13A0
....................                 ret = 1; 
3180:  MOVLW  01
3182:  MOVLB  1
3184:  MOVWF  x90
3186:  MOVLB  0
....................               } 
....................             } 
....................             else 
3188:  BRA    31BE
318A:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
318C:  MOVLW  01
318E:  MOVWF  FEA
3190:  MOVLW  E5
3192:  MOVWF  FE9
3194:  MOVLW  0A
3196:  MOVWF  01
3198:  CLRF   FF7
319A:  MOVLW  00
319C:  MOVLB  0
319E:  CALL   08AA
31A2:  TBLRD*-
31A4:  TBLRD*+
31A6:  MOVFF  FF5,FEE
31AA:  DECFSZ 01,F
31AC:  BRA    31A4
31AE:  MOVLW  01
31B0:  MOVLB  2
31B2:  MOVWF  x3E
31B4:  MOVLW  E5
31B6:  MOVWF  x3D
31B8:  MOVLB  0
31BA:  CALL   1F12
....................           break; 
....................         } 
....................       break; 
31BE:  GOTO   4A32
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
31C2:  MOVLB  1
31C4:  MOVF   x6E,F
31C6:  BNZ   31D0
31C8:  MOVLB  0
31CA:  GOTO   4A32
31CE:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
31D0:  MOVF   xBC,W
31D2:  SUBLW  4F
31D4:  BNZ   328E
....................           { 
....................             if(query) 
31D6:  MOVF   xBA,F
31D8:  BZ    3222
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
31DA:  MOVLW  01
31DC:  MOVWF  x72
31DE:  MOVLW  92
31E0:  MOVWF  x71
31E2:  MOVLW  64
31E4:  MOVWF  FF6
31E6:  MOVLW  0A
31E8:  MOVWF  FF7
31EA:  MOVLW  03
31EC:  MOVLB  2
31EE:  MOVWF  x04
31F0:  MOVLB  0
31F2:  CALL   254E
31F6:  MOVFF  A9,204
31FA:  MOVLW  1B
31FC:  MOVLB  2
31FE:  MOVWF  x05
3200:  MOVLB  0
3202:  CALL   26CA
3206:  MOVLW  0D
3208:  MOVLB  2
320A:  MOVWF  x0D
320C:  MOVLB  0
320E:  CALL   252C
....................             COM1_send_str(buf); 
3212:  MOVLW  01
3214:  MOVLB  2
3216:  MOVWF  x3E
3218:  MOVLW  92
321A:  MOVWF  x3D
321C:  MOVLB  0
321E:  CALL   1F12
....................             } 
....................           val = get_int(); 
3222:  MOVLB  0
3224:  CALL   20C4
3228:  MOVFF  02,1DB
322C:  MOVFF  01,1DA
....................           if (val <= 3) 
3230:  MOVLB  1
3232:  MOVF   xDB,F
3234:  BNZ   324E
3236:  MOVF   xDA,W
3238:  SUBLW  03
323A:  BNC   324E
....................             { 
....................             setup.mode = val; 
323C:  MOVFF  1DA,A9
....................             FPGA_set_reg0(); 
3240:  MOVLB  0
3242:  CALL   14F8
....................             ret = 1; 
3246:  MOVLW  01
3248:  MOVLB  1
324A:  MOVWF  x90
....................             } 
....................           else 
324C:  BRA    328C
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
324E:  MOVLW  01
3250:  MOVWF  FEA
3252:  MOVLW  E5
3254:  MOVWF  FE9
3256:  MOVLW  09
3258:  MOVWF  01
325A:  CLRF   FF7
325C:  MOVLW  00
325E:  MOVLB  0
3260:  CALL   08C4
3264:  TBLRD*-
3266:  TBLRD*+
3268:  MOVFF  FF5,FEE
326C:  DECFSZ 01,F
326E:  BRA    3266
3270:  MOVLW  01
3272:  MOVLB  2
3274:  MOVWF  x3E
3276:  MOVLW  E5
3278:  MOVWF  x3D
327A:  MOVLB  0
327C:  CALL   1F12
....................             ret = 0; 
3280:  MOVLB  1
3282:  CLRF   x90
....................             break; 
3284:  MOVLB  0
3286:  GOTO   4A32
328A:  MOVLB  1
....................             } 
....................           } 
....................           else 
328C:  BRA    32C0
....................               COM1_send_str("\r\nFAIL\r\n"); 
328E:  MOVLW  01
3290:  MOVWF  FEA
3292:  MOVLW  E5
3294:  MOVWF  FE9
3296:  MOVLW  09
3298:  MOVWF  01
329A:  CLRF   FF7
329C:  MOVLW  00
329E:  MOVLB  0
32A0:  CALL   08C4
32A4:  TBLRD*-
32A6:  TBLRD*+
32A8:  MOVFF  FF5,FEE
32AC:  DECFSZ 01,F
32AE:  BRA    32A6
32B0:  MOVLW  01
32B2:  MOVLB  2
32B4:  MOVWF  x3E
32B6:  MOVLW  E5
32B8:  MOVWF  x3D
32BA:  MOVLB  0
32BC:  CALL   1F12
....................       break; 
32C0:  MOVLB  0
32C2:  GOTO   4A32
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
32C6:  MOVLB  1
32C8:  MOVF   x6E,F
32CA:  BNZ   32D4
32CC:  MOVLB  0
32CE:  GOTO   4A32
32D2:  MOVLB  1
....................       switch (c2) 
....................         { 
32D4:  MOVF   xBC,W
32D6:  XORLW  53
32D8:  MOVLB  0
32DA:  BZ    32EA
32DC:  XORLW  03
32DE:  BTFSC  FD8.2
32E0:  BRA    33E2
32E2:  XORLW  15
32E4:  BTFSC  FD8.2
32E6:  BRA    34DA
32E8:  BRA    35D0
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
32EA:  MOVLB  1
32EC:  MOVF   xBA,F
32EE:  BZ    333C
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
32F0:  MOVLW  01
32F2:  MOVWF  x72
32F4:  MOVLW  92
32F6:  MOVWF  x71
32F8:  MOVLW  6C
32FA:  MOVWF  FF6
32FC:  MOVLW  0A
32FE:  MOVWF  FF7
3300:  MOVLW  03
3302:  MOVLB  2
3304:  MOVWF  x04
3306:  MOVLB  0
3308:  CALL   254E
330C:  MOVFF  AD,204
3310:  MOVLW  1B
3312:  MOVLB  2
3314:  MOVWF  x05
3316:  MOVLB  0
3318:  CALL   26CA
331C:  MOVLW  0D
331E:  MOVLB  2
3320:  MOVWF  x0D
3322:  MOVLB  0
3324:  CALL   252C
....................             COM1_send_str(buf); 
3328:  MOVLW  01
332A:  MOVLB  2
332C:  MOVWF  x3E
332E:  MOVLW  92
3330:  MOVWF  x3D
3332:  MOVLB  0
3334:  CALL   1F12
....................             } 
....................           else 
3338:  BRA    33D8
333A:  MOVLB  1
....................             { 
....................             val = get_int(); 
333C:  MOVLB  0
333E:  CALL   20C4
3342:  MOVFF  02,1DB
3346:  MOVFF  01,1DA
....................             if (val < 2) 
334A:  MOVLB  1
334C:  MOVF   xDB,F
334E:  BNZ   3364
3350:  MOVF   xDA,W
3352:  SUBLW  01
3354:  BNC   3364
....................               { 
....................               setup.data_source = val; 
3356:  MOVFF  1DA,AD
....................               FPGA_set_reg6(); 
335A:  MOVLB  0
335C:  CALL   1554
....................               } 
....................             else 
3360:  BRA    33D8
3362:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3364:  MOVLW  01
3366:  MOVWF  FEA
3368:  MOVLW  E5
336A:  MOVWF  FE9
336C:  MOVLW  09
336E:  MOVWF  01
3370:  CLRF   FF7
3372:  MOVLW  00
3374:  MOVLB  0
3376:  CALL   08C4
337A:  TBLRD*-
337C:  TBLRD*+
337E:  MOVFF  FF5,FEE
3382:  DECFSZ 01,F
3384:  BRA    337C
3386:  MOVLW  01
3388:  MOVLB  2
338A:  MOVWF  x3E
338C:  MOVLW  E5
338E:  MOVWF  x3D
3390:  MOVLB  0
3392:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3396:  MOVLW  01
3398:  MOVLB  1
339A:  MOVWF  x72
339C:  MOVLW  46
339E:  MOVWF  x71
33A0:  MOVLW  74
33A2:  MOVWF  FF6
33A4:  MOVLW  0A
33A6:  MOVWF  FF7
33A8:  MOVLW  07
33AA:  MOVLB  2
33AC:  MOVWF  x04
33AE:  MOVLB  0
33B0:  CALL   254E
33B4:  MOVFF  AD,204
33B8:  MOVLW  1B
33BA:  MOVLB  2
33BC:  MOVWF  x05
33BE:  MOVLB  0
33C0:  CALL   26CA
33C4:  MOVLW  0D
33C6:  MOVLB  2
33C8:  MOVWF  x0D
33CA:  MOVLB  0
33CC:  CALL   252C
....................               ret = 0; 
33D0:  MOVLB  1
33D2:  CLRF   x90
....................               break; 
33D4:  MOVLB  0
33D6:  BRA    35D0
....................               } 
....................             } 
....................           ret = 1; 
33D8:  MOVLW  01
33DA:  MOVLB  1
33DC:  MOVWF  x90
....................           break; 
33DE:  MOVLB  0
33E0:  BRA    35D0
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
33E2:  MOVLB  1
33E4:  MOVF   xBA,F
33E6:  BZ    3434
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
33E8:  MOVLW  01
33EA:  MOVWF  x72
33EC:  MOVLW  92
33EE:  MOVWF  x71
33F0:  MOVLW  80
33F2:  MOVWF  FF6
33F4:  MOVLW  0A
33F6:  MOVWF  FF7
33F8:  MOVLW  03
33FA:  MOVLB  2
33FC:  MOVWF  x04
33FE:  MOVLB  0
3400:  CALL   254E
3404:  MOVFF  AB,204
3408:  MOVLW  1B
340A:  MOVLB  2
340C:  MOVWF  x05
340E:  MOVLB  0
3410:  CALL   26CA
3414:  MOVLW  0D
3416:  MOVLB  2
3418:  MOVWF  x0D
341A:  MOVLB  0
341C:  CALL   252C
....................             COM1_send_str(buf); 
3420:  MOVLW  01
3422:  MOVLB  2
3424:  MOVWF  x3E
3426:  MOVLW  92
3428:  MOVWF  x3D
342A:  MOVLB  0
342C:  CALL   1F12
....................             } 
....................           else 
3430:  BRA    34D0
3432:  MOVLB  1
....................             { 
....................             val = get_int(); 
3434:  MOVLB  0
3436:  CALL   20C4
343A:  MOVFF  02,1DB
343E:  MOVFF  01,1DA
....................             if (val < 2) 
3442:  MOVLB  1
3444:  MOVF   xDB,F
3446:  BNZ   345C
3448:  MOVF   xDA,W
344A:  SUBLW  01
344C:  BNC   345C
....................               { 
....................               setup.data_polarity = val; 
344E:  MOVFF  1DA,AB
....................               FPGA_set_reg0(); 
3452:  MOVLB  0
3454:  CALL   14F8
....................               } 
....................             else 
3458:  BRA    34D0
345A:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
345C:  MOVLW  01
345E:  MOVWF  FEA
3460:  MOVLW  E5
3462:  MOVWF  FE9
3464:  MOVLW  09
3466:  MOVWF  01
3468:  CLRF   FF7
346A:  MOVLW  00
346C:  MOVLB  0
346E:  CALL   08C4
3472:  TBLRD*-
3474:  TBLRD*+
3476:  MOVFF  FF5,FEE
347A:  DECFSZ 01,F
347C:  BRA    3474
347E:  MOVLW  01
3480:  MOVLB  2
3482:  MOVWF  x3E
3484:  MOVLW  E5
3486:  MOVWF  x3D
3488:  MOVLB  0
348A:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
348E:  MOVLW  01
3490:  MOVLB  1
3492:  MOVWF  x72
3494:  MOVLW  46
3496:  MOVWF  x71
3498:  MOVLW  88
349A:  MOVWF  FF6
349C:  MOVLW  0A
349E:  MOVWF  FF7
34A0:  MOVLW  07
34A2:  MOVLB  2
34A4:  MOVWF  x04
34A6:  MOVLB  0
34A8:  CALL   254E
34AC:  MOVFF  AB,204
34B0:  MOVLW  1B
34B2:  MOVLB  2
34B4:  MOVWF  x05
34B6:  MOVLB  0
34B8:  CALL   26CA
34BC:  MOVLW  0D
34BE:  MOVLB  2
34C0:  MOVWF  x0D
34C2:  MOVLB  0
34C4:  CALL   252C
....................               ret = 0; 
34C8:  MOVLB  1
34CA:  CLRF   x90
....................               break; 
34CC:  MOVLB  0
34CE:  BRA    35D0
....................               } 
....................             } 
....................           ret = 1; 
34D0:  MOVLW  01
34D2:  MOVLB  1
34D4:  MOVWF  x90
....................           break; 
34D6:  MOVLB  0
34D8:  BRA    35D0
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
34DA:  MOVLB  1
34DC:  MOVF   xBA,F
34DE:  BZ    352C
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
34E0:  MOVLW  01
34E2:  MOVWF  x72
34E4:  MOVLW  92
34E6:  MOVWF  x71
34E8:  MOVLW  94
34EA:  MOVWF  FF6
34EC:  MOVLW  0A
34EE:  MOVWF  FF7
34F0:  MOVLW  03
34F2:  MOVLB  2
34F4:  MOVWF  x04
34F6:  MOVLB  0
34F8:  CALL   254E
34FC:  MOVFF  B1,204
3500:  MOVLW  1B
3502:  MOVLB  2
3504:  MOVWF  x05
3506:  MOVLB  0
3508:  CALL   26CA
350C:  MOVLW  0D
350E:  MOVLB  2
3510:  MOVWF  x0D
3512:  MOVLB  0
3514:  CALL   252C
....................             COM1_send_str(buf); 
3518:  MOVLW  01
351A:  MOVLB  2
351C:  MOVWF  x3E
351E:  MOVLW  92
3520:  MOVWF  x3D
3522:  MOVLB  0
3524:  CALL   1F12
....................             } 
....................           else 
3528:  BRA    35C8
352A:  MOVLB  1
....................             { 
....................             val = get_int(); 
352C:  MOVLB  0
352E:  CALL   20C4
3532:  MOVFF  02,1DB
3536:  MOVFF  01,1DA
....................             if (val < 2) 
353A:  MOVLB  1
353C:  MOVF   xDB,F
353E:  BNZ   3554
3540:  MOVF   xDA,W
3542:  SUBLW  01
3544:  BNC   3554
....................               { 
....................               setup.SOQPSK = val; 
3546:  MOVFF  1DA,B1
....................               FPGA_set_reg0(); 
354A:  MOVLB  0
354C:  CALL   14F8
....................               } 
....................             else 
3550:  BRA    35C8
3552:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3554:  MOVLW  01
3556:  MOVWF  FEA
3558:  MOVLW  E5
355A:  MOVWF  FE9
355C:  MOVLW  09
355E:  MOVWF  01
3560:  CLRF   FF7
3562:  MOVLW  00
3564:  MOVLB  0
3566:  CALL   08C4
356A:  TBLRD*-
356C:  TBLRD*+
356E:  MOVFF  FF5,FEE
3572:  DECFSZ 01,F
3574:  BRA    356C
3576:  MOVLW  01
3578:  MOVLB  2
357A:  MOVWF  x3E
357C:  MOVLW  E5
357E:  MOVWF  x3D
3580:  MOVLB  0
3582:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3586:  MOVLW  01
3588:  MOVLB  1
358A:  MOVWF  x72
358C:  MOVLW  46
358E:  MOVWF  x71
3590:  MOVLW  9C
3592:  MOVWF  FF6
3594:  MOVLW  0A
3596:  MOVWF  FF7
3598:  MOVLW  07
359A:  MOVLB  2
359C:  MOVWF  x04
359E:  MOVLB  0
35A0:  CALL   254E
35A4:  MOVFF  B1,204
35A8:  MOVLW  1B
35AA:  MOVLB  2
35AC:  MOVWF  x05
35AE:  MOVLB  0
35B0:  CALL   26CA
35B4:  MOVLW  0D
35B6:  MOVLB  2
35B8:  MOVWF  x0D
35BA:  MOVLB  0
35BC:  CALL   252C
....................               ret = 0; 
35C0:  MOVLB  1
35C2:  CLRF   x90
....................               break; 
35C4:  MOVLB  0
35C6:  BRA    35D0
....................               } 
....................             } 
....................           ret = 1; 
35C8:  MOVLW  01
35CA:  MOVLB  1
35CC:  MOVWF  x90
....................           break; 
35CE:  MOVLB  0
....................         } 
....................       break; 
35D0:  GOTO   4A32
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
35D4:  MOVLB  1
35D6:  MOVF   x6E,F
35D8:  BNZ   35E2
35DA:  MOVLB  0
35DC:  GOTO   4A32
35E0:  MOVLB  1
....................       switch (c2) 
....................         { 
35E2:  MOVLW  41
35E4:  SUBWF  xBC,W
35E6:  ADDLW  F0
35E8:  BTFSC  FD8.0
35EA:  BRA    3BF8
35EC:  ADDLW  10
35EE:  MOVLB  0
35F0:  GOTO   4A3A
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
35F4:  MOVLB  1
35F6:  MOVF   xBA,F
35F8:  BZ    3646
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
35FA:  MOVLW  01
35FC:  MOVWF  x72
35FE:  MOVLW  92
3600:  MOVWF  x71
3602:  MOVLW  A8
3604:  MOVWF  FF6
3606:  MOVLW  0A
3608:  MOVWF  FF7
360A:  MOVLW  03
360C:  MOVLB  2
360E:  MOVWF  x04
3610:  MOVLB  0
3612:  CALL   254E
3616:  MOVFF  B0,204
361A:  MOVLW  1B
361C:  MOVLB  2
361E:  MOVWF  x05
3620:  MOVLB  0
3622:  CALL   26CA
3626:  MOVLW  0D
3628:  MOVLB  2
362A:  MOVWF  x0D
362C:  MOVLB  0
362E:  CALL   252C
....................             COM1_send_str(buf); 
3632:  MOVLW  01
3634:  MOVLB  2
3636:  MOVWF  x3E
3638:  MOVLW  92
363A:  MOVWF  x3D
363C:  MOVLB  0
363E:  CALL   1F12
....................             } 
....................           else 
3642:  BRA    3740
3644:  MOVLB  1
....................             { 
....................             val = get_int(); 
3646:  MOVLB  0
3648:  CALL   20C4
364C:  MOVFF  02,1DB
3650:  MOVFF  01,1DA
....................             if (val < 2) 
3654:  MOVLB  1
3656:  MOVF   xDB,F
3658:  BNZ   36CC
365A:  MOVF   xDA,W
365C:  SUBLW  01
365E:  BNC   36CC
....................               { 
.................... 	          if(setup.rc == 1) 
3660:  MOVLB  0
3662:  DECFSZ xF1,W
3664:  BRA    3684
3666:  MOVF   xF2,F
3668:  BNZ   3684
.................... 	            { 
.................... 	            if(val == 0) 
366A:  MOVLB  1
366C:  MOVF   xDA,F
366E:  BNZ   367E
3670:  MOVF   xDB,F
3672:  BNZ   367E
.................... 	            { 
.................... 	            setup.rp =1; 
3674:  MOVLB  0
3676:  CLRF   xF4
3678:  MOVLW  01
367A:  MOVWF  xF3
.................... 	            } 
.................... 	          else 
367C:  BRA    3684
....................  
.................... 	          setup.rp = 0; 
367E:  MOVLB  0
3680:  CLRF   xF4
3682:  CLRF   xF3
.................... 	          } 
.................... 	          if(val == 1) 
3684:  MOVLB  1
3686:  DECFSZ xDA,W
3688:  BRA    36AC
368A:  MOVF   xDB,F
368C:  BNZ   36AC
.................... 	          { 
....................               rp_command = setup.rp = 0; 
368E:  MOVLB  0
3690:  CLRF   xF4
3692:  CLRF   xF3
3694:  MOVFF  F3,16F
....................               delay_ms(50); 
3698:  MOVLW  32
369A:  MOVLB  2
369C:  MOVWF  x15
369E:  MOVLB  0
36A0:  CALL   0CD8
....................               update_all(); 
36A4:  CALL   1A46
....................               } 
....................               else 
36A8:  BRA    36C8
36AA:  MOVLB  1
....................                { 
....................               rp_command = setup.rp = 1; 
36AC:  MOVLB  0
36AE:  CLRF   xF4
36B0:  MOVLW  01
36B2:  MOVWF  xF3
36B4:  MOVFF  F3,16F
....................               delay_ms(50); 
36B8:  MOVLW  32
36BA:  MOVLB  2
36BC:  MOVWF  x15
36BE:  MOVLB  0
36C0:  CALL   0CD8
....................               update_all(); 
36C4:  CALL   1A46
....................               } 
....................               } 
....................             else 
36C8:  BRA    3740
36CA:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
36CC:  MOVLW  01
36CE:  MOVWF  FEA
36D0:  MOVLW  E5
36D2:  MOVWF  FE9
36D4:  MOVLW  09
36D6:  MOVWF  01
36D8:  CLRF   FF7
36DA:  MOVLW  00
36DC:  MOVLB  0
36DE:  CALL   08C4
36E2:  TBLRD*-
36E4:  TBLRD*+
36E6:  MOVFF  FF5,FEE
36EA:  DECFSZ 01,F
36EC:  BRA    36E4
36EE:  MOVLW  01
36F0:  MOVLB  2
36F2:  MOVWF  x3E
36F4:  MOVLW  E5
36F6:  MOVWF  x3D
36F8:  MOVLB  0
36FA:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
36FE:  MOVLW  01
3700:  MOVLB  1
3702:  MOVWF  x72
3704:  MOVLW  46
3706:  MOVWF  x71
3708:  MOVLW  B0
370A:  MOVWF  FF6
370C:  MOVLW  0A
370E:  MOVWF  FF7
3710:  MOVLW  07
3712:  MOVLB  2
3714:  MOVWF  x04
3716:  MOVLB  0
3718:  CALL   254E
371C:  MOVFF  16F,204
3720:  MOVLW  1B
3722:  MOVLB  2
3724:  MOVWF  x05
3726:  MOVLB  0
3728:  CALL   26CA
372C:  MOVLW  0D
372E:  MOVLB  2
3730:  MOVWF  x0D
3732:  MOVLB  0
3734:  CALL   252C
....................               ret = 0; 
3738:  MOVLB  1
373A:  CLRF   x90
....................               break; 
373C:  BRA    3BF8
373E:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
3740:  MOVLW  01
3742:  MOVLB  1
3744:  MOVWF  x90
....................           break; 
3746:  BRA    3BF8
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
3748:  MOVLB  1
374A:  MOVF   xBA,F
374C:  BZ    379A
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
374E:  MOVLW  01
3750:  MOVWF  x72
3752:  MOVLW  92
3754:  MOVWF  x71
3756:  MOVLW  BC
3758:  MOVWF  FF6
375A:  MOVLW  0A
375C:  MOVWF  FF7
375E:  MOVLW  03
3760:  MOVLB  2
3762:  MOVWF  x04
3764:  MOVLB  0
3766:  CALL   254E
376A:  MOVFF  170,204
376E:  MOVLW  1B
3770:  MOVLB  2
3772:  MOVWF  x05
3774:  MOVLB  0
3776:  CALL   26CA
377A:  MOVLW  0D
377C:  MOVLB  2
377E:  MOVWF  x0D
3780:  MOVLB  0
3782:  CALL   252C
....................             COM1_send_str(buf); 
3786:  MOVLW  01
3788:  MOVLB  2
378A:  MOVWF  x3E
378C:  MOVLW  92
378E:  MOVWF  x3D
3790:  MOVLB  0
3792:  CALL   1F12
....................             } 
....................           else 
3796:  BRA    38FA
3798:  MOVLB  1
....................             { 
....................             val = get_int(); 
379A:  MOVLB  0
379C:  CALL   20C4
37A0:  MOVFF  02,1DB
37A4:  MOVFF  01,1DA
....................             if (val == 0) 
37A8:  MOVLB  1
37AA:  MOVF   xDA,F
37AC:  BNZ   3814
37AE:  MOVF   xDB,F
37B0:  BNZ   3814
....................               { 
.................... 			  if(setup.cot || setup.rc) 
37B2:  MOVLB  0
37B4:  MOVF   xEF,W
37B6:  IORWF  xF0,W
37B8:  BNZ   37C0
37BA:  MOVF   xF1,W
37BC:  IORWF  xF2,W
37BE:  BZ    37E6
.................... 				{ 
....................                 pwr_command = 0; 
37C0:  MOVLB  1
37C2:  CLRF   x70
....................                 setup.pwr = pwr_command; 
37C4:  MOVLB  0
37C6:  CLRF   xA8
37C8:  MOVFF  170,A7
....................                 delay_ms(60); 
37CC:  MOVLW  3C
37CE:  MOVLB  2
37D0:  MOVWF  x15
37D2:  MOVLB  0
37D4:  CALL   0CD8
.................... 			 	update_all(); 
37D8:  CALL   1A46
.................... 			 	ret = 1; 
37DC:  MOVLW  01
37DE:  MOVLB  1
37E0:  MOVWF  x90
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
37E2:  BRA    3812
37E4:  MOVLB  0
37E6:  MOVF   xEF,F
37E8:  BNZ   37EE
37EA:  MOVF   xF0,F
37EC:  BZ    37F4
37EE:  MOVF   xF1,W
37F0:  IORWF  xF2,W
37F2:  BZ    3810
.................... 				  { 
....................                   pwr_command = 0; 
37F4:  MOVLB  1
37F6:  CLRF   x70
....................                 setup.pwr = pwr_command; 
37F8:  MOVLB  0
37FA:  CLRF   xA8
37FC:  MOVFF  170,A7
....................                 delay_ms(60); 
3800:  MOVLW  3C
3802:  MOVLB  2
3804:  MOVWF  x15
3806:  MOVLB  0
3808:  CALL   0CD8
.................... 			 	update_all(); 
380C:  CALL   1A46
3810:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
3812:  BRA    38F8
.................... 				{ 
.................... 				if (val == 1) 
3814:  DECFSZ xDA,W
3816:  BRA    3886
3818:  MOVF   xDB,F
381A:  BNZ   3886
.................... 				  { 
.................... 				  if(setup.cot) 
381C:  MOVLB  0
381E:  MOVF   xEF,W
3820:  IORWF  xF0,W
3822:  BZ    3850
.................... 				   { 
.................... 				   pwr_command = 1; 
3824:  MOVLW  01
3826:  MOVLB  1
3828:  MOVWF  x70
.................... 				   setup.pwr = pwr_command; 
382A:  MOVLB  0
382C:  CLRF   xA8
382E:  MOVFF  170,A7
.................... 				   power_output(); 
3832:  CALL   1AB0
....................                    delay_ms(50); 
3836:  MOVLW  32
3838:  MOVLB  2
383A:  MOVWF  x15
383C:  MOVLB  0
383E:  CALL   0CD8
.................... 				   ret = 1; 
3842:  MOVLW  01
3844:  MOVLB  1
3846:  MOVWF  x90
....................                    update_all(); 
3848:  MOVLB  0
384A:  CALL   1A46
.................... 				   } 
.................... 					else if(setup.cot == 0) 
384E:  BRA    3882
3850:  MOVF   xEF,F
3852:  BNZ   3882
3854:  MOVF   xF0,F
3856:  BNZ   3882
.................... 				  { 
....................                   pwr_command = 1; 
3858:  MOVLW  01
385A:  MOVLB  1
385C:  MOVWF  x70
....................                   setup.pwr = pwr_command; 
385E:  MOVLB  0
3860:  CLRF   xA8
3862:  MOVFF  170,A7
....................                   power_output(); 
3866:  CALL   1AB0
.................... 				  delay_ms(50); 
386A:  MOVLW  32
386C:  MOVLB  2
386E:  MOVWF  x15
3870:  MOVLB  0
3872:  CALL   0CD8
.................... 				  ret = 1; 
3876:  MOVLW  01
3878:  MOVLB  1
387A:  MOVWF  x90
....................                   update_all(); 
387C:  MOVLB  0
387E:  CALL   1A46
....................                   } 
.................... 				} 
....................             else 
3882:  BRA    38FA
3884:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3886:  MOVLW  01
3888:  MOVWF  FEA
388A:  MOVLW  E5
388C:  MOVWF  FE9
388E:  MOVLW  09
3890:  MOVWF  01
3892:  CLRF   FF7
3894:  MOVLW  00
3896:  MOVLB  0
3898:  CALL   08C4
389C:  TBLRD*-
389E:  TBLRD*+
38A0:  MOVFF  FF5,FEE
38A4:  DECFSZ 01,F
38A6:  BRA    389E
38A8:  MOVLW  01
38AA:  MOVLB  2
38AC:  MOVWF  x3E
38AE:  MOVLW  E5
38B0:  MOVWF  x3D
38B2:  MOVLB  0
38B4:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
38B8:  MOVLW  01
38BA:  MOVLB  1
38BC:  MOVWF  x72
38BE:  MOVLW  46
38C0:  MOVWF  x71
38C2:  MOVLW  C4
38C4:  MOVWF  FF6
38C6:  MOVLW  0A
38C8:  MOVWF  FF7
38CA:  MOVLW  07
38CC:  MOVLB  2
38CE:  MOVWF  x04
38D0:  MOVLB  0
38D2:  CALL   254E
38D6:  MOVFF  170,204
38DA:  MOVLW  1B
38DC:  MOVLB  2
38DE:  MOVWF  x05
38E0:  MOVLB  0
38E2:  CALL   26CA
38E6:  MOVLW  0D
38E8:  MOVLB  2
38EA:  MOVWF  x0D
38EC:  MOVLB  0
38EE:  CALL   252C
....................               ret = 0; 
38F2:  MOVLB  1
38F4:  CLRF   x90
....................               break; 
38F6:  BRA    3BF8
38F8:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
38FA:  MOVLW  01
38FC:  MOVLB  1
38FE:  MOVWF  x90
....................           break; 
3900:  BRA    3BF8
....................  
....................          case 'C': 
....................          	if (query) 
3902:  MOVLB  1
3904:  MOVF   xBA,F
3906:  BZ    3954
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
3908:  MOVLW  01
390A:  MOVWF  x72
390C:  MOVLW  92
390E:  MOVWF  x71
3910:  MOVLW  D0
3912:  MOVWF  FF6
3914:  MOVLW  0A
3916:  MOVWF  FF7
3918:  MOVLW  03
391A:  MOVLB  2
391C:  MOVWF  x04
391E:  MOVLB  0
3920:  CALL   254E
3924:  MOVLW  10
3926:  MOVWF  FE9
3928:  MOVFF  F2,205
392C:  MOVFF  F1,204
3930:  CALL   2576
3934:  MOVLW  0D
3936:  MOVLB  2
3938:  MOVWF  x0D
393A:  MOVLB  0
393C:  CALL   252C
....................             COM1_send_str(buf); 
3940:  MOVLW  01
3942:  MOVLB  2
3944:  MOVWF  x3E
3946:  MOVLW  92
3948:  MOVWF  x3D
394A:  MOVLB  0
394C:  CALL   1F12
....................             } 
....................           else 
3950:  BRA    39E4
3952:  MOVLB  1
....................             { 
....................           val = get_int(); 
3954:  MOVLB  0
3956:  CALL   20C4
395A:  MOVFF  02,1DB
395E:  MOVFF  01,1DA
....................           if(val < 2) 
3962:  MOVLB  1
3964:  MOVF   xDB,F
3966:  BNZ   39B2
3968:  MOVF   xDA,W
396A:  SUBLW  01
396C:  BNC   39B2
....................           	{ 
.................... 	          	if(val == 0) 
396E:  MOVF   xDA,F
3970:  BNZ   398E
3972:  MOVF   xDB,F
3974:  BNZ   398E
.................... 	          	{ 
.................... 	              setup.rc = 0; 
3976:  MOVLB  0
3978:  CLRF   xF2
397A:  CLRF   xF1
.................... 	              delay_ms(50); 
397C:  MOVLW  32
397E:  MOVLB  2
3980:  MOVWF  x15
3982:  MOVLB  0
3984:  CALL   0CD8
.................... 	              update_all(); 
3988:  CALL   1A46
398C:  MOVLB  1
.................... 	            } 
.................... 	            if(val == 1) 
398E:  DECFSZ xDA,W
3990:  BRA    39B0
3992:  MOVF   xDB,F
3994:  BNZ   39B0
.................... 	              { 
.................... 	              setup.rc = 1; 
3996:  MOVLB  0
3998:  CLRF   xF2
399A:  MOVLW  01
399C:  MOVWF  xF1
.................... 	              delay_ms(50); 
399E:  MOVLW  32
39A0:  MOVLB  2
39A2:  MOVWF  x15
39A4:  MOVLB  0
39A6:  CALL   0CD8
.................... 	              update_all(); 
39AA:  CALL   1A46
39AE:  MOVLB  1
.................... 	              } 
....................            } 
....................           else 
39B0:  BRA    39E6
....................             COM1_send_str("\r\nFAULT\r\n"); 
39B2:  MOVLW  01
39B4:  MOVWF  FEA
39B6:  MOVLW  E5
39B8:  MOVWF  FE9
39BA:  MOVLW  0A
39BC:  MOVWF  01
39BE:  CLRF   FF7
39C0:  MOVLW  00
39C2:  MOVLB  0
39C4:  CALL   08AA
39C8:  TBLRD*-
39CA:  TBLRD*+
39CC:  MOVFF  FF5,FEE
39D0:  DECFSZ 01,F
39D2:  BRA    39CA
39D4:  MOVLW  01
39D6:  MOVLB  2
39D8:  MOVWF  x3E
39DA:  MOVLW  E5
39DC:  MOVWF  x3D
39DE:  MOVLB  0
39E0:  CALL   1F12
39E4:  MOVLB  1
....................             } 
....................           break; 
39E6:  BRA    3BF8
....................  
....................           case 'B': 
....................             if (query) 
39E8:  MOVLB  1
39EA:  MOVF   xBA,F
39EC:  BZ    3A3A
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
39EE:  MOVLW  01
39F0:  MOVWF  x72
39F2:  MOVLW  92
39F4:  MOVWF  x71
39F6:  MOVLW  D8
39F8:  MOVWF  FF6
39FA:  MOVLW  0A
39FC:  MOVWF  FF7
39FE:  MOVLW  03
3A00:  MOVLB  2
3A02:  MOVWF  x04
3A04:  MOVLB  0
3A06:  CALL   254E
3A0A:  MOVLW  10
3A0C:  MOVWF  FE9
3A0E:  MOVFF  F0,205
3A12:  MOVFF  EF,204
3A16:  CALL   2576
3A1A:  MOVLW  0D
3A1C:  MOVLB  2
3A1E:  MOVWF  x0D
3A20:  MOVLB  0
3A22:  CALL   252C
....................             COM1_send_str(buf); 
3A26:  MOVLW  01
3A28:  MOVLB  2
3A2A:  MOVWF  x3E
3A2C:  MOVLW  92
3A2E:  MOVWF  x3D
3A30:  MOVLB  0
3A32:  CALL   1F12
....................             } 
....................           else 
3A36:  BRA    3AE8
3A38:  MOVLB  1
....................             { 
....................           val = get_int(); 
3A3A:  MOVLB  0
3A3C:  CALL   20C4
3A40:  MOVFF  02,1DB
3A44:  MOVFF  01,1DA
....................           if(val < 2) 
3A48:  MOVLB  1
3A4A:  MOVF   xDB,F
3A4C:  BNZ   3AB6
3A4E:  MOVF   xDA,W
3A50:  SUBLW  01
3A52:  BNC   3AB6
....................           	{ 
.................... 	          if(val) 
3A54:  MOVF   xDA,W
3A56:  IORWF  xDB,W
3A58:  BZ    3A9A
.................... 	          	{ 
....................               setup.cot = val; 
3A5A:  MOVFF  1DB,F0
3A5E:  MOVFF  1DA,EF
....................               if(pwr_command == 0) 
3A62:  MOVF   x70,F
3A64:  BNZ   3A82
....................               { 
....................               pwr_command == 1; 
3A66:  DECFSZ x70,W
3A68:  BRA    3A6C
3A6A:  BRA    3A6E
3A6C:  MOVLW  00
....................               delay_ms(50); 
3A6E:  MOVLW  32
3A70:  MOVLB  2
3A72:  MOVWF  x15
3A74:  MOVLB  0
3A76:  CALL   0CD8
....................               update_all(); 
3A7A:  CALL   1A46
....................               } 
....................               else 
3A7E:  BRA    3A88
3A80:  MOVLB  1
....................               	pwr_command == 0; 
3A82:  MOVF   x70,F
3A84:  BZ    3A88
3A86:  MOVLW  00
....................                delay_ms(50); 
3A88:  MOVLW  32
3A8A:  MOVLB  2
3A8C:  MOVWF  x15
3A8E:  MOVLB  0
3A90:  CALL   0CD8
....................               update_all(); 
3A94:  CALL   1A46
3A98:  MOVLB  1
....................             } 
....................             setup.cot = val; 
3A9A:  MOVFF  1DB,F0
3A9E:  MOVFF  1DA,EF
....................               delay_ms(70); 
3AA2:  MOVLW  46
3AA4:  MOVLB  2
3AA6:  MOVWF  x15
3AA8:  MOVLB  0
3AAA:  CALL   0CD8
....................               update_all(); 
3AAE:  CALL   1A46
....................            } 
....................           else 
3AB2:  BRA    3AE8
3AB4:  MOVLB  1
....................             COM1_send_str("\r\nFAULT\r\n"); 
3AB6:  MOVLW  01
3AB8:  MOVWF  FEA
3ABA:  MOVLW  E5
3ABC:  MOVWF  FE9
3ABE:  MOVLW  0A
3AC0:  MOVWF  01
3AC2:  CLRF   FF7
3AC4:  MOVLW  00
3AC6:  MOVLB  0
3AC8:  CALL   08AA
3ACC:  TBLRD*-
3ACE:  TBLRD*+
3AD0:  MOVFF  FF5,FEE
3AD4:  DECFSZ 01,F
3AD6:  BRA    3ACE
3AD8:  MOVLW  01
3ADA:  MOVLB  2
3ADC:  MOVWF  x3E
3ADE:  MOVLW  E5
3AE0:  MOVWF  x3D
3AE2:  MOVLB  0
3AE4:  CALL   1F12
....................             } 
....................           break; 
3AE8:  MOVLB  1
3AEA:  BRA    3BF8
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
3AEC:  MOVLB  1
3AEE:  MOVF   xBA,F
3AF0:  BZ    3B3E
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
3AF2:  MOVLW  01
3AF4:  MOVWF  x72
3AF6:  MOVLW  92
3AF8:  MOVWF  x71
3AFA:  MOVLW  E0
3AFC:  MOVWF  FF6
3AFE:  MOVLW  0A
3B00:  MOVWF  FF7
3B02:  MOVLW  03
3B04:  MOVLB  2
3B06:  MOVWF  x04
3B08:  MOVLB  0
3B0A:  CALL   254E
3B0E:  MOVFF  AF,204
3B12:  MOVLW  1B
3B14:  MOVLB  2
3B16:  MOVWF  x05
3B18:  MOVLB  0
3B1A:  CALL   26CA
3B1E:  MOVLW  0D
3B20:  MOVLB  2
3B22:  MOVWF  x0D
3B24:  MOVLB  0
3B26:  CALL   252C
....................             COM1_send_str(buf); 
3B2A:  MOVLW  01
3B2C:  MOVLB  2
3B2E:  MOVWF  x3E
3B30:  MOVLW  92
3B32:  MOVWF  x3D
3B34:  MOVLB  0
3B36:  CALL   1F12
....................             } 
....................           else 
3B3A:  BRA    3BDC
3B3C:  MOVLB  1
....................             { 
....................             val = get_int(); 
3B3E:  MOVLB  0
3B40:  CALL   20C4
3B44:  MOVFF  02,1DB
3B48:  MOVFF  01,1DA
....................             if (val < 2) 
3B4C:  MOVLB  1
3B4E:  MOVF   xDB,F
3B50:  BNZ   3B6A
3B52:  MOVF   xDA,W
3B54:  SUBLW  01
3B56:  BNC   3B6A
....................               { 
....................               setup.randomizer = val; 
3B58:  MOVFF  1DA,AF
....................               FPGA_set_reg0(); 
3B5C:  MOVLB  0
3B5E:  CALL   14F8
....................               ret = 1; 
3B62:  MOVLW  01
3B64:  MOVLB  1
3B66:  MOVWF  x90
....................               } 
....................             else 
3B68:  BRA    3BDC
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3B6A:  MOVLW  01
3B6C:  MOVWF  FEA
3B6E:  MOVLW  E5
3B70:  MOVWF  FE9
3B72:  MOVLW  09
3B74:  MOVWF  01
3B76:  CLRF   FF7
3B78:  MOVLW  00
3B7A:  MOVLB  0
3B7C:  CALL   08C4
3B80:  TBLRD*-
3B82:  TBLRD*+
3B84:  MOVFF  FF5,FEE
3B88:  DECFSZ 01,F
3B8A:  BRA    3B82
3B8C:  MOVLW  01
3B8E:  MOVLB  2
3B90:  MOVWF  x3E
3B92:  MOVLW  E5
3B94:  MOVWF  x3D
3B96:  MOVLB  0
3B98:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
3B9C:  MOVLW  01
3B9E:  MOVLB  1
3BA0:  MOVWF  x72
3BA2:  MOVLW  46
3BA4:  MOVWF  x71
3BA6:  MOVLW  E8
3BA8:  MOVWF  FF6
3BAA:  MOVLW  0A
3BAC:  MOVWF  FF7
3BAE:  MOVLW  07
3BB0:  MOVLB  2
3BB2:  MOVWF  x04
3BB4:  MOVLB  0
3BB6:  CALL   254E
3BBA:  MOVFF  AF,204
3BBE:  MOVLW  1B
3BC0:  MOVLB  2
3BC2:  MOVWF  x05
3BC4:  MOVLB  0
3BC6:  CALL   26CA
3BCA:  MOVLW  0D
3BCC:  MOVLB  2
3BCE:  MOVWF  x0D
3BD0:  MOVLB  0
3BD2:  CALL   252C
....................               ret = 0; 
3BD6:  MOVLB  1
3BD8:  CLRF   x90
....................               break; 
3BDA:  BRA    3BF8
....................               } 
....................             } 
....................           ret = 1; 
3BDC:  MOVLW  01
3BDE:  MOVLB  1
3BE0:  MOVWF  x90
....................           break; 
3BE2:  BRA    3BF8
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
3BE4:  CALL   0D78
....................           update_all(); 
3BE8:  CALL   1A46
....................           ret = 1; 
3BEC:  MOVLW  01
3BEE:  MOVLB  1
3BF0:  MOVWF  x90
....................           break; 
3BF2:  BRA    3BF8
....................         case 'E':   // reset 
....................           reset_cpu(); 
3BF4:  RESET
....................           break; 
3BF6:  MOVLB  1
....................         } 
....................       break; 
3BF8:  MOVLB  0
3BFA:  GOTO   4A32
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
3BFE:  MOVLB  1
3C00:  MOVF   x6E,F
3C02:  BNZ   3C0C
3C04:  MOVLB  0
3C06:  GOTO   4A32
3C0A:  MOVLB  1
....................       if (c2 == 'A') 
3C0C:  MOVF   xBC,W
3C0E:  SUBLW  41
3C10:  BNZ   3C16
....................         { 
....................         //xxxx 
....................         ret = 1; 
3C12:  MOVLW  01
3C14:  MOVWF  x90
....................         } 
....................       break; 
3C16:  MOVLB  0
3C18:  GOTO   4A32
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
3C1C:  MOVLB  1
3C1E:  MOVF   x6E,F
3C20:  BNZ   3C2A
3C22:  MOVLB  0
3C24:  GOTO   4A32
3C28:  MOVLB  1
....................       switch (c2) 
....................         { 
3C2A:  MOVF   xBC,W
3C2C:  XORLW  50
3C2E:  MOVLB  0
3C30:  BZ    3C38
3C32:  XORLW  06
3C34:  BZ    3C42
3C36:  BRA    3C56
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
3C38:  MOVLW  01
3C3A:  MOVLB  1
3C3C:  MOVWF  x90
....................           break; 
3C3E:  MOVLB  0
3C40:  BRA    3C56
....................         case 'V': 
....................           allow_write = 2975; 
3C42:  MOVLW  0B
3C44:  MOVWF  xF6
3C46:  MOVLW  9F
3C48:  MOVWF  xF5
....................           write_setup(); 
3C4A:  CALL   27BA
....................           ret = 1; 
3C4E:  MOVLW  01
3C50:  MOVLB  1
3C52:  MOVWF  x90
....................           break; 
3C54:  MOVLB  0
....................         } 
....................       break; 
3C56:  GOTO   4A32
....................  
....................     case 'I': 
....................       if (!ttccp_login) break; 
3C5A:  MOVLB  1
3C5C:  MOVF   x6E,F
3C5E:  BNZ   3C68
3C60:  MOVLB  0
3C62:  GOTO   4A32
3C66:  MOVLB  1
....................       switch (c2) 
....................         { 
3C68:  MOVF   xBC,W
3C6A:  XORLW  44
3C6C:  MOVLB  0
3C6E:  BZ    3C78
3C70:  XORLW  07
3C72:  BTFSC  FD8.2
3C74:  BRA    3D70
3C76:  BRA    3DD0
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
3C78:  MOVLB  1
3C7A:  MOVF   xBA,F
3C7C:  BZ    3CCA
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
3C7E:  MOVLW  01
3C80:  MOVWF  x72
3C82:  MOVLW  92
3C84:  MOVWF  x71
3C86:  MOVLW  F4
3C88:  MOVWF  FF6
3C8A:  MOVLW  0A
3C8C:  MOVWF  FF7
3C8E:  MOVLW  03
3C90:  MOVLB  2
3C92:  MOVWF  x04
3C94:  MOVLB  0
3C96:  CALL   254E
3C9A:  MOVFF  AE,204
3C9E:  MOVLW  1B
3CA0:  MOVLB  2
3CA2:  MOVWF  x05
3CA4:  MOVLB  0
3CA6:  CALL   26CA
3CAA:  MOVLW  0D
3CAC:  MOVLB  2
3CAE:  MOVWF  x0D
3CB0:  MOVLB  0
3CB2:  CALL   252C
....................             COM1_send_str(buf); 
3CB6:  MOVLW  01
3CB8:  MOVLB  2
3CBA:  MOVWF  x3E
3CBC:  MOVLW  92
3CBE:  MOVWF  x3D
3CC0:  MOVLB  0
3CC2:  CALL   1F12
....................             } 
....................           else 
3CC6:  BRA    3D66
3CC8:  MOVLB  1
....................             { 
....................             val = get_int(); 
3CCA:  MOVLB  0
3CCC:  CALL   20C4
3CD0:  MOVFF  02,1DB
3CD4:  MOVFF  01,1DA
....................             if (val < 4) 
3CD8:  MOVLB  1
3CDA:  MOVF   xDB,F
3CDC:  BNZ   3CF2
3CDE:  MOVF   xDA,W
3CE0:  SUBLW  03
3CE2:  BNC   3CF2
....................               { 
....................               setup.internal_pattern = val; 
3CE4:  MOVFF  1DA,AE
....................               FPGA_set_reg6(); 
3CE8:  MOVLB  0
3CEA:  CALL   1554
....................               } 
....................             else 
3CEE:  BRA    3D66
3CF0:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3CF2:  MOVLW  01
3CF4:  MOVWF  FEA
3CF6:  MOVLW  E5
3CF8:  MOVWF  FE9
3CFA:  MOVLW  09
3CFC:  MOVWF  01
3CFE:  CLRF   FF7
3D00:  MOVLW  00
3D02:  MOVLB  0
3D04:  CALL   08C4
3D08:  TBLRD*-
3D0A:  TBLRD*+
3D0C:  MOVFF  FF5,FEE
3D10:  DECFSZ 01,F
3D12:  BRA    3D0A
3D14:  MOVLW  01
3D16:  MOVLB  2
3D18:  MOVWF  x3E
3D1A:  MOVLW  E5
3D1C:  MOVWF  x3D
3D1E:  MOVLB  0
3D20:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
3D24:  MOVLW  01
3D26:  MOVLB  1
3D28:  MOVWF  x72
3D2A:  MOVLW  46
3D2C:  MOVWF  x71
3D2E:  MOVLW  FC
3D30:  MOVWF  FF6
3D32:  MOVLW  0A
3D34:  MOVWF  FF7
3D36:  MOVLW  07
3D38:  MOVLB  2
3D3A:  MOVWF  x04
3D3C:  MOVLB  0
3D3E:  CALL   254E
3D42:  MOVFF  AE,204
3D46:  MOVLW  1B
3D48:  MOVLB  2
3D4A:  MOVWF  x05
3D4C:  MOVLB  0
3D4E:  CALL   26CA
3D52:  MOVLW  0D
3D54:  MOVLB  2
3D56:  MOVWF  x0D
3D58:  MOVLB  0
3D5A:  CALL   252C
....................               ret = 0; 
3D5E:  MOVLB  1
3D60:  CLRF   x90
....................               break; 
3D62:  MOVLB  0
3D64:  BRA    3DD0
....................               } 
....................             } 
....................           ret = 1; 
3D66:  MOVLW  01
3D68:  MOVLB  1
3D6A:  MOVWF  x90
....................           break; 
3D6C:  MOVLB  0
3D6E:  BRA    3DD0
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
3D70:  MOVLB  1
3D72:  MOVF   xBA,F
3D74:  BZ    3DC2
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
3D76:  MOVLW  01
3D78:  MOVWF  x72
3D7A:  MOVLW  92
3D7C:  MOVWF  x71
3D7E:  MOVLW  08
3D80:  MOVWF  FF6
3D82:  MOVLW  0B
3D84:  MOVWF  FF7
3D86:  MOVLW  03
3D88:  MOVLB  2
3D8A:  MOVWF  x04
3D8C:  MOVLB  0
3D8E:  CALL   254E
3D92:  MOVLW  10
3D94:  MOVWF  FE9
3D96:  MOVFF  A6,205
3D9A:  MOVFF  A5,204
3D9E:  CALL   2576
3DA2:  MOVLW  0D
3DA4:  MOVLB  2
3DA6:  MOVWF  x0D
3DA8:  MOVLB  0
3DAA:  CALL   252C
....................             COM1_send_str(buf); 
3DAE:  MOVLW  01
3DB0:  MOVLB  2
3DB2:  MOVWF  x3E
3DB4:  MOVLW  92
3DB6:  MOVWF  x3D
3DB8:  MOVLB  0
3DBA:  CALL   1F12
....................             } 
....................           else 
3DBE:  BRA    3DC8
3DC0:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
3DC2:  MOVLB  0
3DC4:  GOTO   27E4
....................             } 
....................           ret = 1; 
3DC8:  MOVLW  01
3DCA:  MOVLB  1
3DCC:  MOVWF  x90
....................           break; 
3DCE:  MOVLB  0
....................         } 
....................       break; 
3DD0:  GOTO   4A32
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
3DD4:  MOVLB  1
3DD6:  MOVF   x6E,F
3DD8:  BNZ   3DE2
3DDA:  MOVLB  0
3DDC:  GOTO   4A32
3DE0:  MOVLB  1
....................       if (c2 == 'E') 
3DE2:  MOVF   xBC,W
3DE4:  SUBLW  45
3DE6:  BNZ   3DEA
....................         { 
....................         goto get_temp; 
3DE8:  BRA    4354
....................         } 
....................       break; 
3DEA:  MOVLB  0
3DEC:  GOTO   4A32
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
3DF0:  MOVLB  1
3DF2:  MOVF   x6E,F
3DF4:  BNZ   3DFE
3DF6:  MOVLB  0
3DF8:  GOTO   4A32
3DFC:  MOVLB  1
....................       switch (c2) 
....................         { 
3DFE:  MOVF   xBC,W
3E00:  XORLW  45
3E02:  MOVLB  0
3E04:  BZ    3E20
3E06:  XORLW  09
3E08:  BTFSC  FD8.2
3E0A:  BRA    3F02
3E0C:  XORLW  1C
3E0E:  BTFSC  FD8.2
3E10:  BRA    3F4E
3E12:  XORLW  1D
3E14:  BTFSC  FD8.2
3E16:  BRA    3FC2
3E18:  XORLW  0E
3E1A:  BTFSC  FD8.2
3E1C:  BRA    4038
3E1E:  BRA    40B2
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
3E20:  MOVLB  1
3E22:  MOVF   xBC,W
3E24:  SUBLW  45
3E26:  BNZ   3ECC
.................... 		{ 
....................           sprintf(buf, "VE %s ID=%02lu DT=%02lu%02u\r", VERSION, setup.unit_ID, setup.year, setup.week); 
3E28:  MOVLW  01
3E2A:  MOVWF  x72
3E2C:  MOVLW  92
3E2E:  MOVWF  x71
3E30:  MOVLW  10
3E32:  MOVWF  FF6
3E34:  MOVLW  0B
3E36:  MOVWF  FF7
3E38:  MOVLW  03
3E3A:  MOVLB  2
3E3C:  MOVWF  x04
3E3E:  MOVLB  0
3E40:  CALL   254E
3E44:  MOVLW  EE
3E46:  MOVWF  FF6
3E48:  MOVLW  08
3E4A:  MOVWF  FF7
3E4C:  GOTO   28B4
3E50:  MOVLW  15
3E52:  MOVWF  FF6
3E54:  MOVLW  0B
3E56:  MOVWF  FF7
3E58:  MOVLW  04
3E5A:  MOVLB  2
3E5C:  MOVWF  x04
3E5E:  MOVLB  0
3E60:  CALL   254E
3E64:  MOVLW  0B
3E66:  MOVWF  FE9
3E68:  MOVFF  EC,205
3E6C:  MOVFF  EB,204
3E70:  CALL   2576
3E74:  MOVLW  1E
3E76:  MOVWF  FF6
3E78:  MOVLW  0B
3E7A:  MOVWF  FF7
3E7C:  MOVLW  04
3E7E:  MOVLB  2
3E80:  MOVWF  x04
3E82:  MOVLB  0
3E84:  CALL   254E
3E88:  MOVLW  0B
3E8A:  MOVWF  FE9
3E8C:  MOVFF  E9,205
3E90:  MOVFF  E8,204
3E94:  CALL   2576
3E98:  MOVFF  EA,204
3E9C:  MOVLW  01
3E9E:  MOVLB  2
3EA0:  MOVWF  x05
3EA2:  MOVLB  0
3EA4:  CALL   26CA
3EA8:  MOVLW  0D
3EAA:  MOVLB  2
3EAC:  MOVWF  x0D
3EAE:  MOVLB  0
3EB0:  CALL   252C
....................           COM1_send_str(buf); 
3EB4:  MOVLW  01
3EB6:  MOVLB  2
3EB8:  MOVWF  x3E
3EBA:  MOVLW  92
3EBC:  MOVWF  x3D
3EBE:  MOVLB  0
3EC0:  CALL   1F12
....................           ret = 1; 
3EC4:  MOVLW  01
3EC6:  MOVLB  1
3EC8:  MOVWF  x90
.................... 		} 
.................... 		else 
3ECA:  BRA    3EFE
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
3ECC:  MOVLW  01
3ECE:  MOVWF  FEA
3ED0:  MOVLW  E5
3ED2:  MOVWF  FE9
3ED4:  MOVLW  09
3ED6:  MOVWF  01
3ED8:  CLRF   FF7
3EDA:  MOVLW  00
3EDC:  MOVLB  0
3EDE:  CALL   08C4
3EE2:  TBLRD*-
3EE4:  TBLRD*+
3EE6:  MOVFF  FF5,FEE
3EEA:  DECFSZ 01,F
3EEC:  BRA    3EE4
3EEE:  MOVLW  01
3EF0:  MOVLB  2
3EF2:  MOVWF  x3E
3EF4:  MOVLW  E5
3EF6:  MOVWF  x3D
3EF8:  MOVLB  0
3EFA:  CALL   1F12
....................           break; 
3EFE:  MOVLB  0
3F00:  BRA    40B2
....................  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
3F02:  MOVLB  1
3F04:  MOVF   xBC,W
3F06:  SUBLW  4C
3F08:  BNZ   3F18
.................... 		{ 
....................  
....................           set_low_power_level(); 
3F0A:  MOVLB  0
3F0C:  GOTO   28D6
....................           ret = 1; 
3F10:  MOVLW  01
3F12:  MOVLB  1
3F14:  MOVWF  x90
.................... 		} 
.................... 		else 
3F16:  BRA    3F4A
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
3F18:  MOVLW  01
3F1A:  MOVWF  FEA
3F1C:  MOVLW  E5
3F1E:  MOVWF  FE9
3F20:  MOVLW  09
3F22:  MOVWF  01
3F24:  CLRF   FF7
3F26:  MOVLW  00
3F28:  MOVLB  0
3F2A:  CALL   08C4
3F2E:  TBLRD*-
3F30:  TBLRD*+
3F32:  MOVFF  FF5,FEE
3F36:  DECFSZ 01,F
3F38:  BRA    3F30
3F3A:  MOVLW  01
3F3C:  MOVLB  2
3F3E:  MOVWF  x3E
3F40:  MOVLW  E5
3F42:  MOVWF  x3D
3F44:  MOVLB  0
3F46:  CALL   1F12
....................           break; 
3F4A:  MOVLB  0
3F4C:  BRA    40B2
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
3F4E:  MOVLB  1
3F50:  MOVF   xBA,F
3F52:  BZ    3FB2
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
3F54:  MOVLW  14
3F56:  MOVLB  0
3F58:  ADDWF  xB5,W
3F5A:  MOVLB  1
3F5C:  MOVWF  xFE
3F5E:  MOVLW  00
3F60:  MOVLB  0
3F62:  ADDWFC xB6,W
3F64:  MOVLB  1
3F66:  MOVWF  xFF
3F68:  MOVLW  01
3F6A:  MOVWF  x72
3F6C:  MOVLW  92
3F6E:  MOVWF  x71
3F70:  MOVLW  2E
3F72:  MOVWF  FF6
3F74:  MOVLW  0B
3F76:  MOVWF  FF7
3F78:  MOVLW  03
3F7A:  MOVLB  2
3F7C:  MOVWF  x04
3F7E:  MOVLB  0
3F80:  CALL   254E
3F84:  MOVLW  10
3F86:  MOVWF  FE9
3F88:  MOVFF  1FF,205
3F8C:  MOVFF  1FE,204
3F90:  CALL   2576
3F94:  MOVLW  0D
3F96:  MOVLB  2
3F98:  MOVWF  x0D
3F9A:  MOVLB  0
3F9C:  CALL   252C
....................             COM1_send_str(buf); 
3FA0:  MOVLW  01
3FA2:  MOVLB  2
3FA4:  MOVWF  x3E
3FA6:  MOVLW  92
3FA8:  MOVWF  x3D
3FAA:  MOVLB  0
3FAC:  CALL   1F12
....................             } 
....................           else 
3FB0:  BRA    3FB8
....................             set_power_level(); 
3FB2:  MOVLB  0
3FB4:  GOTO   2940
....................             ret = 1; 
3FB8:  MOVLW  01
3FBA:  MOVLB  1
3FBC:  MOVWF  x90
....................           break; 
3FBE:  MOVLB  0
3FC0:  BRA    40B2
....................  
....................         case 'M': // manual power level 
....................           if (query) 
3FC2:  MOVLB  1
3FC4:  MOVF   xBA,F
3FC6:  BZ    4014
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
3FC8:  MOVLW  01
3FCA:  MOVWF  x72
3FCC:  MOVLW  92
3FCE:  MOVWF  x71
3FD0:  MOVLW  36
3FD2:  MOVWF  FF6
3FD4:  MOVLW  0B
3FD6:  MOVWF  FF7
3FD8:  MOVLW  03
3FDA:  MOVLB  2
3FDC:  MOVWF  x04
3FDE:  MOVLB  0
3FE0:  CALL   254E
3FE4:  MOVLW  10
3FE6:  MOVWF  FE9
3FE8:  MOVFF  22,205
3FEC:  MOVFF  21,204
3FF0:  CALL   2576
3FF4:  MOVLW  0D
3FF6:  MOVLB  2
3FF8:  MOVWF  x0D
3FFA:  MOVLB  0
3FFC:  CALL   252C
....................             COM1_send_str(buf); 
4000:  MOVLW  01
4002:  MOVLB  2
4004:  MOVWF  x3E
4006:  MOVLW  92
4008:  MOVWF  x3D
400A:  MOVLB  0
400C:  CALL   1F12
....................             } 
....................           else 
4010:  BRA    4036
4012:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
4014:  MOVLB  0
4016:  CALL   20C4
401A:  MOVFF  02,22
401E:  MOVFF  01,21
....................             set_AD5312(DAC_NEG_VOLT, val); 
4022:  MOVLW  01
4024:  MOVLB  2
4026:  MOVWF  x02
4028:  MOVFF  1DB,204
402C:  MOVFF  1DA,203
4030:  MOVLB  0
4032:  CALL   0DAC
....................             } 
....................           break; 
4036:  BRA    40B2
....................         case 'C': // manual power level 
....................           if (query) 
4038:  MOVLB  1
403A:  MOVF   xBA,F
403C:  BZ    408A
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
403E:  MOVLW  01
4040:  MOVWF  x72
4042:  MOVLW  92
4044:  MOVWF  x71
4046:  MOVLW  3E
4048:  MOVWF  FF6
404A:  MOVLW  0B
404C:  MOVWF  FF7
404E:  MOVLW  03
4050:  MOVLB  2
4052:  MOVWF  x04
4054:  MOVLB  0
4056:  CALL   254E
405A:  MOVLW  10
405C:  MOVWF  FE9
405E:  MOVFF  24,205
4062:  MOVFF  23,204
4066:  CALL   2576
406A:  MOVLW  0D
406C:  MOVLB  2
406E:  MOVWF  x0D
4070:  MOVLB  0
4072:  CALL   252C
....................             COM1_send_str(buf); 
4076:  MOVLW  01
4078:  MOVLB  2
407A:  MOVWF  x3E
407C:  MOVLW  92
407E:  MOVWF  x3D
4080:  MOVLB  0
4082:  CALL   1F12
....................             } 
....................           else 
4086:  BRA    40B2
4088:  MOVLB  1
....................             { 
....................             val = get_int(); 
408A:  MOVLB  0
408C:  CALL   20C4
4090:  MOVFF  02,1DB
4094:  MOVFF  01,1DA
....................             manual_pos = val; 
4098:  MOVFF  1DB,24
409C:  MOVFF  1DA,23
....................             set_AD5312(DAC_POS_VOLT, val); 
40A0:  MOVLB  2
40A2:  CLRF   x02
40A4:  MOVFF  1DB,204
40A8:  MOVFF  1DA,203
40AC:  MOVLB  0
40AE:  CALL   0DAC
....................             } 
....................           break; 
.................... 		} 
....................       break; 
40B2:  GOTO   4A32
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
40B6:  MOVLB  1
40B8:  MOVF   x6E,F
40BA:  BNZ   40C4
40BC:  MOVLB  0
40BE:  GOTO   4A32
40C2:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
40C4:  MOVF   xBC,W
40C6:  SUBLW  53
40C8:  BTFSS  FD8.2
40CA:  BRA    41C2
....................         { 
....................           if (query) 
40CC:  MOVF   xBA,F
40CE:  BZ    411C
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
40D0:  MOVLW  01
40D2:  MOVWF  x72
40D4:  MOVLW  92
40D6:  MOVWF  x71
40D8:  MOVLW  46
40DA:  MOVWF  FF6
40DC:  MOVLW  0B
40DE:  MOVWF  FF7
40E0:  MOVLW  03
40E2:  MOVLB  2
40E4:  MOVWF  x04
40E6:  MOVLB  0
40E8:  CALL   254E
40EC:  MOVFF  AC,204
40F0:  MOVLW  1B
40F2:  MOVLB  2
40F4:  MOVWF  x05
40F6:  MOVLB  0
40F8:  CALL   26CA
40FC:  MOVLW  0D
40FE:  MOVLB  2
4100:  MOVWF  x0D
4102:  MOVLB  0
4104:  CALL   252C
....................             COM1_send_str(buf); 
4108:  MOVLW  01
410A:  MOVLB  2
410C:  MOVWF  x3E
410E:  MOVLW  92
4110:  MOVWF  x3D
4112:  MOVLB  0
4114:  CALL   1F12
....................             } 
....................           else 
4118:  BRA    41BA
411A:  MOVLB  1
....................             { 
....................             val = get_int(); 
411C:  MOVLB  0
411E:  CALL   20C4
4122:  MOVFF  02,1DB
4126:  MOVFF  01,1DA
....................             if (val < 2) 
412A:  MOVLB  1
412C:  MOVF   xDB,F
412E:  BNZ   4144
4130:  MOVF   xDA,W
4132:  SUBLW  01
4134:  BNC   4144
....................               { 
....................               setup.clock_source = val; 
4136:  MOVFF  1DA,AC
....................               FPGA_set_reg6(); 
413A:  MOVLB  0
413C:  CALL   1554
....................               } 
....................             else 
4140:  BRA    41BA
4142:  MOVLB  1
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4144:  MOVLW  01
4146:  MOVWF  FEA
4148:  MOVLW  E5
414A:  MOVWF  FE9
414C:  MOVLW  09
414E:  MOVWF  01
4150:  CLRF   FF7
4152:  MOVLW  00
4154:  MOVLB  0
4156:  CALL   08C4
415A:  TBLRD*-
415C:  TBLRD*+
415E:  MOVFF  FF5,FEE
4162:  DECFSZ 01,F
4164:  BRA    415C
4166:  MOVLW  01
4168:  MOVLB  2
416A:  MOVWF  x3E
416C:  MOVLW  E5
416E:  MOVWF  x3D
4170:  MOVLB  0
4172:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
4176:  MOVLW  01
4178:  MOVLB  1
417A:  MOVWF  x72
417C:  MOVLW  46
417E:  MOVWF  x71
4180:  MOVLW  4E
4182:  MOVWF  FF6
4184:  MOVLW  0B
4186:  MOVWF  FF7
4188:  MOVLW  07
418A:  MOVLB  2
418C:  MOVWF  x04
418E:  MOVLB  0
4190:  CALL   254E
4194:  MOVFF  AC,204
4198:  MOVLW  1B
419A:  MOVLB  2
419C:  MOVWF  x05
419E:  MOVLB  0
41A0:  CALL   26CA
41A4:  MOVLW  0D
41A6:  MOVLB  2
41A8:  MOVWF  x0D
41AA:  MOVLB  0
41AC:  CALL   252C
....................               ret = 0; 
41B0:  MOVLB  1
41B2:  CLRF   x90
....................               break; 
41B4:  MOVLB  0
41B6:  GOTO   4A32
....................               } 
....................             } 
....................  
....................         ret = 1; 
41BA:  MOVLW  01
41BC:  MOVLB  1
41BE:  MOVWF  x90
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
41C0:  BRA    42BC
41C2:  MOVF   xBC,W
41C4:  SUBLW  50
41C6:  BTFSS  FD8.2
41C8:  BRA    42BC
....................         { 
....................           if (query) 
41CA:  MOVF   xBA,F
41CC:  BZ    421A
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
41CE:  MOVLW  01
41D0:  MOVWF  x72
41D2:  MOVLW  92
41D4:  MOVWF  x71
41D6:  MOVLW  5A
41D8:  MOVWF  FF6
41DA:  MOVLW  0B
41DC:  MOVWF  FF7
41DE:  MOVLW  03
41E0:  MOVLB  2
41E2:  MOVWF  x04
41E4:  MOVLB  0
41E6:  CALL   254E
41EA:  MOVFF  AA,204
41EE:  MOVLW  1B
41F0:  MOVLB  2
41F2:  MOVWF  x05
41F4:  MOVLB  0
41F6:  CALL   26CA
41FA:  MOVLW  0D
41FC:  MOVLB  2
41FE:  MOVWF  x0D
4200:  MOVLB  0
4202:  CALL   252C
....................             COM1_send_str(buf); 
4206:  MOVLW  01
4208:  MOVLB  2
420A:  MOVWF  x3E
420C:  MOVLW  92
420E:  MOVWF  x3D
4210:  MOVLB  0
4212:  CALL   1F12
....................             } 
....................           else 
4216:  BRA    42B6
4218:  MOVLB  1
....................             { 
....................             val = get_int(); 
421A:  MOVLB  0
421C:  CALL   20C4
4220:  MOVFF  02,1DB
4224:  MOVFF  01,1DA
....................             if (val < 2) 
4228:  MOVLB  1
422A:  MOVF   xDB,F
422C:  BNZ   4242
422E:  MOVF   xDA,W
4230:  SUBLW  01
4232:  BNC   4242
....................               { 
....................               setup.clock_polarity = val; 
4234:  MOVFF  1DA,AA
....................               FPGA_set_reg0(); 
4238:  MOVLB  0
423A:  CALL   14F8
....................               } 
....................             else 
423E:  BRA    42B6
4240:  MOVLB  1
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4242:  MOVLW  01
4244:  MOVWF  FEA
4246:  MOVLW  E5
4248:  MOVWF  FE9
424A:  MOVLW  09
424C:  MOVWF  01
424E:  CLRF   FF7
4250:  MOVLW  00
4252:  MOVLB  0
4254:  CALL   08C4
4258:  TBLRD*-
425A:  TBLRD*+
425C:  MOVFF  FF5,FEE
4260:  DECFSZ 01,F
4262:  BRA    425A
4264:  MOVLW  01
4266:  MOVLB  2
4268:  MOVWF  x3E
426A:  MOVLW  E5
426C:  MOVWF  x3D
426E:  MOVLB  0
4270:  CALL   1F12
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4274:  MOVLW  01
4276:  MOVLB  1
4278:  MOVWF  x72
427A:  MOVLW  46
427C:  MOVWF  x71
427E:  MOVLW  62
4280:  MOVWF  FF6
4282:  MOVLW  0B
4284:  MOVWF  FF7
4286:  MOVLW  07
4288:  MOVLB  2
428A:  MOVWF  x04
428C:  MOVLB  0
428E:  CALL   254E
4292:  MOVFF  AA,204
4296:  MOVLW  1B
4298:  MOVLB  2
429A:  MOVWF  x05
429C:  MOVLB  0
429E:  CALL   26CA
42A2:  MOVLW  0D
42A4:  MOVLB  2
42A6:  MOVWF  x0D
42A8:  MOVLB  0
42AA:  CALL   252C
....................               ret = 0; 
42AE:  MOVLB  1
42B0:  CLRF   x90
....................               break; 
42B2:  MOVLB  0
42B4:  BRA    4A32
....................               } 
....................             } 
....................  
....................         ret = 1; 
42B6:  MOVLW  01
42B8:  MOVLB  1
42BA:  MOVWF  x90
....................         } 
....................       break; 
42BC:  MOVLB  0
42BE:  BRA    4A32
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
42C0:  MOVLB  1
42C2:  MOVF   x6E,F
42C4:  BNZ   42CC
42C6:  MOVLB  0
42C8:  BRA    4A32
42CA:  MOVLB  1
....................       switch (c2) 
....................         { 
42CC:  MOVF   xBC,W
42CE:  XORLW  50
42D0:  MOVLB  0
42D2:  BZ    42E0
42D4:  XORLW  04
42D6:  BZ    4352
42D8:  XORLW  06
42DA:  BTFSC  FD8.2
42DC:  BRA    4542
42DE:  BRA    456A
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
42E0:  MOVLW  14
42E2:  MOVWF  01
42E4:  MOVF   FC2,W
42E6:  ANDLW  83
42E8:  IORWF  01,W
42EA:  MOVWF  FC2
....................           delay_us(50); 
42EC:  MOVLW  42
42EE:  MOVWF  00
42F0:  DECFSZ 00,F
42F2:  BRA    42F0
42F4:  NOP   
....................           val = read_adc(); 
42F6:  BSF    FC2.1
42F8:  BTFSC  FC2.1
42FA:  BRA    42F8
42FC:  MOVFF  FC4,1DB
4300:  MOVLB  1
4302:  MOVFF  FC3,1DA
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
4306:  MOVLW  01
4308:  MOVWF  x72
430A:  MOVLW  46
430C:  MOVWF  x71
430E:  MOVLW  6E
4310:  MOVWF  FF6
4312:  MOVLW  0B
4314:  MOVWF  FF7
4316:  MOVLW  04
4318:  MOVLB  2
431A:  MOVWF  x04
431C:  MOVLB  0
431E:  CALL   254E
4322:  MOVLW  10
4324:  MOVWF  FE9
4326:  MOVFF  1DB,205
432A:  MOVFF  1DA,204
432E:  CALL   2576
4332:  MOVLW  0D
4334:  MOVLB  2
4336:  MOVWF  x0D
4338:  MOVLB  0
433A:  CALL   252C
433E:  MOVLW  0A
4340:  MOVLB  2
4342:  MOVWF  x0D
4344:  MOVLB  0
4346:  CALL   252C
....................           ret = 0; 
434A:  MOVLB  1
434C:  CLRF   x90
....................           break; 
434E:  MOVLB  0
4350:  BRA    456A
4352:  MOVLB  1
....................         case 'T': 
.................... get_temp: 
....................           set_adc_channel(A2D_TEMP); // read temperature 
4354:  MOVLW  18
4356:  MOVWF  01
4358:  MOVF   FC2,W
435A:  ANDLW  83
435C:  IORWF  01,W
435E:  MOVWF  FC2
....................           delay_us(50); 
4360:  MOVLW  42
4362:  MOVWF  00
4364:  DECFSZ 00,F
4366:  BRA    4364
4368:  NOP   
....................           val = read_adc(); 
436A:  BSF    FC2.1
436C:  BTFSC  FC2.1
436E:  BRA    436C
4370:  MOVFF  FC3,1DA
4374:  MOVFF  FC4,1DB
....................           temp = (float)val / 1024.0 * 3.3; 
4378:  MOVFF  1DB,1FF
437C:  MOVFF  1DA,1FE
4380:  MOVLB  0
4382:  GOTO   29AA
4386:  MOVFF  00,1FE
438A:  MOVFF  01,1FF
438E:  MOVFF  02,200
4392:  MOVFF  03,201
4396:  MOVFF  03,228
439A:  MOVFF  02,227
439E:  MOVFF  01,226
43A2:  MOVFF  00,225
43A6:  MOVLB  2
43A8:  CLRF   x2C
43AA:  CLRF   x2B
43AC:  CLRF   x2A
43AE:  MOVLW  89
43B0:  MOVWF  x29
43B2:  MOVLB  0
43B4:  CALL   15C4
43B8:  MOVFF  00,1FE
43BC:  MOVFF  01,1FF
43C0:  MOVFF  02,200
43C4:  MOVFF  03,201
43C8:  MOVFF  03,228
43CC:  MOVFF  02,227
43D0:  MOVFF  01,226
43D4:  MOVFF  00,225
43D8:  MOVLW  33
43DA:  MOVLB  2
43DC:  MOVWF  x2C
43DE:  MOVWF  x2B
43E0:  MOVLW  53
43E2:  MOVWF  x2A
43E4:  MOVLW  80
43E6:  MOVWF  x29
43E8:  MOVLB  0
43EA:  CALL   1722
43EE:  MOVFF  03,1D9
43F2:  MOVFF  02,1D8
43F6:  MOVFF  01,1D7
43FA:  MOVFF  00,1D6
....................           temp -= 0.75; 
43FE:  BSF    FD8.1
4400:  MOVFF  1D9,201
4404:  MOVFF  1D8,200
4408:  MOVFF  1D7,1FF
440C:  MOVFF  1D6,1FE
4410:  MOVLB  2
4412:  CLRF   x05
4414:  CLRF   x04
4416:  MOVLW  40
4418:  MOVWF  x03
441A:  MOVLW  7E
441C:  MOVWF  x02
441E:  MOVLB  0
4420:  CALL   29E2
4424:  MOVFF  03,1D9
4428:  MOVFF  02,1D8
442C:  MOVFF  01,1D7
4430:  MOVFF  00,1D6
....................           temp *= 100; 
4434:  MOVFF  1D9,228
4438:  MOVFF  1D8,227
443C:  MOVFF  1D7,226
4440:  MOVFF  1D6,225
4444:  MOVLB  2
4446:  CLRF   x2C
4448:  CLRF   x2B
444A:  MOVLW  48
444C:  MOVWF  x2A
444E:  MOVLW  85
4450:  MOVWF  x29
4452:  MOVLB  0
4454:  CALL   1722
4458:  MOVFF  03,1D9
445C:  MOVFF  02,1D8
4460:  MOVFF  01,1D7
4464:  MOVFF  00,1D6
....................           temp += 25.0; 
4468:  BCF    FD8.1
446A:  MOVFF  1D9,201
446E:  MOVFF  1D8,200
4472:  MOVFF  1D7,1FF
4476:  MOVFF  1D6,1FE
447A:  MOVLB  2
447C:  CLRF   x05
447E:  CLRF   x04
4480:  MOVLW  48
4482:  MOVWF  x03
4484:  MOVLW  83
4486:  MOVWF  x02
4488:  MOVLB  0
448A:  CALL   29E2
448E:  MOVFF  03,1D9
4492:  MOVFF  02,1D8
4496:  MOVFF  01,1D7
449A:  MOVFF  00,1D6
....................           if(setup.pwr) 
449E:  MOVF   xA7,W
44A0:  IORWF  xA8,W
44A2:  BZ    44FE
....................             { 
....................             sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", temp); 
44A4:  MOVLW  01
44A6:  MOVLB  1
44A8:  MOVWF  x72
44AA:  MOVLW  46
44AC:  MOVWF  x71
44AE:  MOVLW  78
44B0:  MOVWF  FF6
44B2:  MOVLW  0B
44B4:  MOVWF  FF7
44B6:  MOVLW  06
44B8:  MOVLB  2
44BA:  MOVWF  x04
44BC:  MOVLB  0
44BE:  CALL   254E
44C2:  MOVLW  05
44C4:  MOVWF  FE9
44C6:  MOVFF  1D9,201
44CA:  MOVFF  1D8,200
44CE:  MOVFF  1D7,1FF
44D2:  MOVFF  1D6,1FE
44D6:  MOVLW  02
44D8:  MOVLB  2
44DA:  MOVWF  x02
44DC:  MOVLB  0
44DE:  GOTO   2C64
44E2:  MOVLW  83
44E4:  MOVWF  FF6
44E6:  MOVLW  0B
44E8:  MOVWF  FF7
44EA:  MOVLW  08
44EC:  MOVLB  2
44EE:  MOVWF  x04
44F0:  MOVLB  0
44F2:  CALL   254E
....................             ret = 0; 
44F6:  MOVLB  1
44F8:  CLRF   x90
....................             } 
....................             else 
44FA:  BRA    453E
44FC:  MOVLB  0
....................             { 
....................             temp = 0; 
44FE:  MOVLB  1
4500:  CLRF   xD9
4502:  CLRF   xD8
4504:  CLRF   xD7
4506:  CLRF   xD6
....................             COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
4508:  MOVLW  01
450A:  MOVWF  FEA
450C:  MOVLW  E5
450E:  MOVWF  FE9
4510:  MOVLW  15
4512:  MOVWF  01
4514:  CLRF   FF7
4516:  MOVLW  00
4518:  MOVLB  0
451A:  CALL   08FE
451E:  TBLRD*-
4520:  TBLRD*+
4522:  MOVFF  FF5,FEE
4526:  DECFSZ 01,F
4528:  BRA    4520
452A:  MOVLW  01
452C:  MOVLB  2
452E:  MOVWF  x3E
4530:  MOVLW  E5
4532:  MOVWF  x3D
4534:  MOVLB  0
4536:  CALL   1F12
....................             ret = 0; 
453A:  MOVLB  1
453C:  CLRF   x90
....................             } 
....................           break; 
453E:  MOVLB  0
4540:  BRA    456A
....................  
....................         case 'R': 
....................                 set_adc_channel(A2D_PREV); // select forward power input 
4542:  MOVLW  10
4544:  MOVWF  01
4546:  MOVF   FC2,W
4548:  ANDLW  83
454A:  IORWF  01,W
454C:  MOVWF  FC2
....................                 delay_us(20); 
454E:  MOVLW  1A
4550:  MOVWF  00
4552:  DECFSZ 00,F
4554:  BRA    4552
4556:  NOP   
....................                 revp = read_adc(); 
4558:  BSF    FC2.1
455A:  BTFSC  FC2.1
455C:  BRA    455A
455E:  MOVFF  FC4,1DD
4562:  MOVLB  1
4564:  MOVFF  FC3,1DC
4568:  MOVLB  0
....................                 } 
....................               break; 
456A:  BRA    4A32
....................       break; 
456C:  BRA    4A32
....................  
....................       case 'Q': //status without LI____ customer requirement 
....................      // if (!ttccp_login) break; 
....................  
....................       COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
456E:  MOVLW  01
4570:  MOVWF  FEA
4572:  MOVLW  E5
4574:  MOVWF  FE9
4576:  MOVLW  19
4578:  MOVWF  01
457A:  CLRF   FF7
457C:  MOVLW  00
457E:  CALL   0924
4582:  TBLRD*-
4584:  TBLRD*+
4586:  MOVFF  FF5,FEE
458A:  DECFSZ 01,F
458C:  BRA    4584
458E:  MOVLW  01
4590:  MOVLB  2
4592:  MOVWF  x3E
4594:  MOVLW  E5
4596:  MOVWF  x3D
4598:  MOVLB  0
459A:  CALL   1F12
....................       COM1_send_str(VERSION); 
459E:  MOVLW  01
45A0:  MOVWF  FEA
45A2:  MOVLW  E5
45A4:  MOVWF  FE9
45A6:  MOVLW  0F
45A8:  MOVWF  01
45AA:  CLRF   FF7
45AC:  MOVLW  00
45AE:  CALL   08DE
45B2:  TBLRD*-
45B4:  TBLRD*+
45B6:  MOVFF  FF5,FEE
45BA:  DECFSZ 01,F
45BC:  BRA    45B4
45BE:  MOVLW  01
45C0:  MOVLB  2
45C2:  MOVWF  x3E
45C4:  MOVLW  E5
45C6:  MOVWF  x3D
45C8:  MOVLB  0
45CA:  CALL   1F12
....................       sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................               setup.unit_ID, setup.year, setup.week); 
45CE:  MOVLW  01
45D0:  MOVLB  1
45D2:  MOVWF  x72
45D4:  MOVLW  92
45D6:  MOVWF  x71
45D8:  MOVLW  8C
45DA:  MOVWF  FF6
45DC:  MOVLW  0B
45DE:  MOVWF  FF7
45E0:  MOVLW  05
45E2:  MOVLB  2
45E4:  MOVWF  x04
45E6:  MOVLB  0
45E8:  CALL   254E
45EC:  MOVLW  10
45EE:  MOVWF  FE9
45F0:  MOVFF  EC,205
45F4:  MOVFF  EB,204
45F8:  CALL   2576
45FC:  MOVLW  94
45FE:  MOVWF  FF6
4600:  MOVLW  0B
4602:  MOVWF  FF7
4604:  MOVLW  04
4606:  MOVLB  2
4608:  MOVWF  x04
460A:  MOVLB  0
460C:  CALL   254E
4610:  MOVLW  0B
4612:  MOVWF  FE9
4614:  MOVFF  E9,205
4618:  MOVFF  E8,204
461C:  CALL   2576
4620:  MOVFF  EA,204
4624:  MOVLW  01
4626:  MOVLB  2
4628:  MOVWF  x05
462A:  MOVLB  0
462C:  CALL   26CA
4630:  MOVLW  0D
4632:  MOVLB  2
4634:  MOVWF  x0D
4636:  MOVLB  0
4638:  CALL   252C
....................       COM1_send_str(buf); 
463C:  MOVLW  01
463E:  MOVLB  2
4640:  MOVWF  x3E
4642:  MOVLW  92
4644:  MOVWF  x3D
4646:  MOVLB  0
4648:  CALL   1F12
....................  
....................                 set_adc_channel(A2D_PREV); // select forward power input 
464C:  MOVLW  10
464E:  MOVWF  01
4650:  MOVF   FC2,W
4652:  ANDLW  83
4654:  IORWF  01,W
4656:  MOVWF  FC2
....................                 delay_us(20); 
4658:  MOVLW  1A
465A:  MOVWF  00
465C:  DECFSZ 00,F
465E:  BRA    465C
4660:  NOP   
....................                 revp = read_adc(); 
4662:  BSF    FC2.1
4664:  BTFSC  FC2.1
4666:  BRA    4664
4668:  MOVFF  FC4,1DD
466C:  MOVLB  1
466E:  MOVFF  FC3,1DC
....................  
....................           if (revp <= 580) 
4672:  MOVF   xDD,W
4674:  SUBLW  02
4676:  BNC   46A0
4678:  BNZ   4680
467A:  MOVF   xDC,W
467C:  SUBLW  44
467E:  BNC   46A0
....................           strcpy(revstat, "GOOD"); 
4680:  MOVLW  01
4682:  MOVWF  FEA
4684:  MOVLW  BD
4686:  MOVWF  FE9
4688:  MOVLW  00
468A:  MOVLB  0
468C:  CALL   094E
4690:  TBLRD*-
4692:  TBLRD*+
4694:  MOVF   FF5,W
4696:  MOVWF  FEE
4698:  IORLW  00
469A:  BNZ   4692
....................           else 
469C:  BRA    46BC
469E:  MOVLB  1
....................           strcpy(revstat, "BAD"); 
46A0:  MOVLW  01
46A2:  MOVWF  FEA
46A4:  MOVLW  BD
46A6:  MOVWF  FE9
46A8:  MOVLW  00
46AA:  MOVLB  0
46AC:  CALL   0964
46B0:  TBLRD*-
46B2:  TBLRD*+
46B4:  MOVF   FF5,W
46B6:  MOVWF  FEE
46B8:  IORLW  00
46BA:  BNZ   46B2
....................  
....................           if(setup.rp) 
46BC:  MOVF   xF3,W
46BE:  IORWF  xF4,W
46C0:  BZ    46CA
....................             rp=0; 
46C2:  MOVLB  1
46C4:  CLRF   xDF
46C6:  CLRF   xDE
....................             else 
46C8:  BRA    46D2
....................               rp=1; 
46CA:  MOVLB  1
46CC:  CLRF   xDF
46CE:  MOVLW  01
46D0:  MOVWF  xDE
....................  
....................  
....................       sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................               setup.frequency, revstat, setup.power_level+20, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
46D2:  MOVLW  14
46D4:  MOVLB  0
46D6:  ADDWF  xB5,W
46D8:  MOVLB  1
46DA:  MOVWF  xFE
46DC:  MOVLW  00
46DE:  MOVLB  0
46E0:  ADDWFC xB6,W
46E2:  MOVLB  1
46E4:  MOVWF  xFF
46E6:  MOVFF  A6,203
46EA:  MOVFF  A5,202
46EE:  MOVLB  2
46F0:  CLRF   x05
46F2:  MOVLW  64
46F4:  MOVWF  x04
46F6:  MOVLB  0
46F8:  CALL   2E2E
46FC:  MOVFF  02,201
4700:  MOVFF  01,200
4704:  MOVFF  A6,203
4708:  MOVFF  A5,202
470C:  MOVLB  2
470E:  CLRF   x05
4710:  MOVLW  64
4712:  MOVWF  x04
4714:  MOVLB  0
4716:  CALL   2E2E
471A:  MOVFF  00,202
471E:  MOVFF  03,203
4722:  MOVLW  01
4724:  MOVLB  1
4726:  MOVWF  x72
4728:  MOVLW  92
472A:  MOVWF  x71
472C:  MOVLW  A4
472E:  MOVWF  FF6
4730:  MOVLW  0B
4732:  MOVWF  FF7
4734:  MOVLW  08
4736:  MOVLB  2
4738:  MOVWF  x04
473A:  MOVLB  0
473C:  CALL   254E
4740:  MOVLW  10
4742:  MOVWF  FE9
4744:  MOVFF  B4,205
4748:  MOVFF  B3,204
474C:  CALL   2576
4750:  MOVLW  AF
4752:  MOVWF  FF6
4754:  MOVLW  0B
4756:  MOVWF  FF7
4758:  MOVLW  06
475A:  MOVLB  2
475C:  MOVWF  x04
475E:  MOVLB  0
4760:  CALL   254E
4764:  MOVLW  01
4766:  MOVWF  FEA
4768:  MOVLW  BD
476A:  MOVWF  FE9
476C:  GOTO   2E74
4770:  MOVLW  B7
4772:  MOVWF  FF6
4774:  MOVLW  0B
4776:  MOVWF  FF7
4778:  MOVLW  07
477A:  MOVLB  2
477C:  MOVWF  x04
477E:  MOVLB  0
4780:  CALL   254E
4784:  MOVLW  10
4786:  MOVWF  FE9
4788:  MOVFF  1FF,205
478C:  MOVFF  1FE,204
4790:  CALL   2576
4794:  MOVLW  C1
4796:  MOVWF  FF6
4798:  MOVLW  0B
479A:  MOVWF  FF7
479C:  MOVLW  05
479E:  MOVLB  2
47A0:  MOVWF  x04
47A2:  MOVLB  0
47A4:  CALL   254E
47A8:  MOVLW  10
47AA:  MOVWF  FE9
47AC:  MOVFF  201,205
47B0:  MOVFF  200,204
47B4:  CALL   2576
47B8:  MOVLW  2E
47BA:  MOVLB  2
47BC:  MOVWF  x0D
47BE:  MOVLB  0
47C0:  CALL   252C
47C4:  MOVLW  10
47C6:  MOVWF  FE9
47C8:  MOVFF  203,205
47CC:  MOVFF  202,204
47D0:  CALL   2576
47D4:  MOVLW  CD
47D6:  MOVWF  FF6
47D8:  MOVLW  0B
47DA:  MOVWF  FF7
47DC:  MOVLW  09
47DE:  MOVLB  2
47E0:  MOVWF  x04
47E2:  MOVLB  0
47E4:  CALL   254E
47E8:  MOVFF  A9,204
47EC:  MOVLW  1B
47EE:  MOVLB  2
47F0:  MOVWF  x05
47F2:  MOVLB  0
47F4:  CALL   26CA
47F8:  MOVLW  D8
47FA:  MOVWF  FF6
47FC:  MOVLW  0B
47FE:  MOVWF  FF7
4800:  MOVLW  05
4802:  MOVLB  2
4804:  MOVWF  x04
4806:  MOVLB  0
4808:  CALL   254E
480C:  MOVFF  AC,204
4810:  MOVLW  1B
4812:  MOVLB  2
4814:  MOVWF  x05
4816:  MOVLB  0
4818:  CALL   26CA
481C:  MOVLW  DF
481E:  MOVWF  FF6
4820:  MOVLW  0B
4822:  MOVWF  FF7
4824:  MOVLW  05
4826:  MOVLB  2
4828:  MOVWF  x04
482A:  MOVLB  0
482C:  CALL   254E
4830:  MOVLW  10
4832:  MOVWF  FE9
4834:  MOVFF  A8,205
4838:  MOVFF  A7,204
483C:  CALL   2576
4840:  MOVLW  0D
4842:  MOVLB  2
4844:  MOVWF  x0D
4846:  MOVLB  0
4848:  CALL   252C
....................       COM1_send_str(buf); 
484C:  MOVLW  01
484E:  MOVLB  2
4850:  MOVWF  x3E
4852:  MOVLW  92
4854:  MOVWF  x3D
4856:  MOVLB  0
4858:  CALL   1F12
....................  
....................       sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                 setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                         setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                         setup.clock_polarity); 
485C:  MOVLW  14
485E:  ADDWF  xED,W
4860:  MOVLB  1
4862:  MOVWF  xFE
4864:  MOVLW  00
4866:  MOVLB  0
4868:  ADDWFC xEE,W
486A:  MOVLB  1
486C:  MOVWF  xFF
486E:  MOVLW  01
4870:  MOVWF  x72
4872:  MOVLW  92
4874:  MOVWF  x71
4876:  MOVLW  EA
4878:  MOVWF  FF6
487A:  MOVLW  0B
487C:  MOVWF  FF7
487E:  MOVLW  06
4880:  MOVLB  2
4882:  MOVWF  x04
4884:  MOVLB  0
4886:  CALL   254E
488A:  MOVFF  B1,204
488E:  MOVLW  1B
4890:  MOVLB  2
4892:  MOVWF  x05
4894:  MOVLB  0
4896:  CALL   26CA
489A:  MOVLW  F2
489C:  MOVWF  FF6
489E:  MOVLW  0B
48A0:  MOVWF  FF7
48A2:  MOVLW  05
48A4:  MOVLB  2
48A6:  MOVWF  x04
48A8:  MOVLB  0
48AA:  CALL   254E
48AE:  MOVFF  AF,204
48B2:  MOVLW  1B
48B4:  MOVLB  2
48B6:  MOVWF  x05
48B8:  MOVLB  0
48BA:  CALL   26CA
48BE:  MOVLW  F9
48C0:  MOVWF  FF6
48C2:  MOVLW  0B
48C4:  MOVWF  FF7
48C6:  MOVLW  05
48C8:  MOVLB  2
48CA:  MOVWF  x04
48CC:  MOVLB  0
48CE:  CALL   254E
48D2:  MOVFF  AB,204
48D6:  MOVLW  1B
48D8:  MOVLB  2
48DA:  MOVWF  x05
48DC:  MOVLB  0
48DE:  CALL   26CA
48E2:  MOVLW  00
48E4:  MOVWF  FF6
48E6:  MOVLW  0C
48E8:  MOVWF  FF7
48EA:  MOVLW  05
48EC:  MOVLB  2
48EE:  MOVWF  x04
48F0:  MOVLB  0
48F2:  CALL   254E
48F6:  MOVLW  10
48F8:  MOVWF  FE9
48FA:  MOVFF  1DF,205
48FE:  MOVFF  1DE,204
4902:  CALL   2576
4906:  MOVLW  08
4908:  MOVWF  FF6
490A:  MOVLW  0C
490C:  MOVWF  FF7
490E:  MOVLW  05
4910:  MOVLB  2
4912:  MOVWF  x04
4914:  MOVLB  0
4916:  CALL   254E
491A:  MOVFF  AD,204
491E:  MOVLW  1B
4920:  MOVLB  2
4922:  MOVWF  x05
4924:  MOVLB  0
4926:  CALL   26CA
492A:  MOVLW  0F
492C:  MOVWF  FF6
492E:  MOVLW  0C
4930:  MOVWF  FF7
4932:  MOVLW  05
4934:  MOVLB  2
4936:  MOVWF  x04
4938:  MOVLB  0
493A:  CALL   254E
493E:  MOVFF  AE,204
4942:  MOVLW  1B
4944:  MOVLB  2
4946:  MOVWF  x05
4948:  MOVLB  0
494A:  CALL   26CA
494E:  MOVLW  16
4950:  MOVWF  FF6
4952:  MOVLW  0C
4954:  MOVWF  FF7
4956:  MOVLW  05
4958:  MOVLB  2
495A:  MOVWF  x04
495C:  MOVLB  0
495E:  CALL   254E
4962:  MOVLW  10
4964:  MOVWF  FE9
4966:  MOVFF  1FF,205
496A:  MOVFF  1FE,204
496E:  CALL   2576
4972:  MOVLW  1E
4974:  MOVWF  FF6
4976:  MOVLW  0C
4978:  MOVWF  FF7
497A:  MOVLW  05
497C:  MOVLB  2
497E:  MOVWF  x04
4980:  MOVLB  0
4982:  CALL   254E
4986:  MOVLW  10
4988:  MOVWF  FE9
498A:  MOVFF  F0,205
498E:  MOVFF  EF,204
4992:  CALL   2576
4996:  MOVLW  26
4998:  MOVWF  FF6
499A:  MOVLW  0C
499C:  MOVWF  FF7
499E:  MOVLW  05
49A0:  MOVLB  2
49A2:  MOVWF  x04
49A4:  MOVLB  0
49A6:  CALL   254E
49AA:  MOVLW  10
49AC:  MOVWF  FE9
49AE:  MOVFF  F2,205
49B2:  MOVFF  F1,204
49B6:  CALL   2576
49BA:  MOVLW  2E
49BC:  MOVWF  FF6
49BE:  MOVLW  0C
49C0:  MOVWF  FF7
49C2:  MOVLW  05
49C4:  MOVLB  2
49C6:  MOVWF  x04
49C8:  MOVLB  0
49CA:  CALL   254E
49CE:  MOVFF  AA,204
49D2:  MOVLW  1B
49D4:  MOVLB  2
49D6:  MOVWF  x05
49D8:  MOVLB  0
49DA:  CALL   26CA
49DE:  MOVLW  0D
49E0:  MOVLB  2
49E2:  MOVWF  x0D
49E4:  MOVLB  0
49E6:  CALL   252C
....................                                         COM1_send_str(buf); 
49EA:  MOVLW  01
49EC:  MOVLB  2
49EE:  MOVWF  x3E
49F0:  MOVLW  92
49F2:  MOVWF  x3D
49F4:  MOVLB  0
49F6:  CALL   1F12
....................  
....................       goto get_temp; 
49FA:  MOVLB  1
49FC:  BRA    4354
....................       break; 
49FE:  MOVLB  0
4A00:  BRA    4A32
....................       default: 
....................          COM1_send_str("\r\nFAIL\r\n"); 
4A02:  MOVLW  01
4A04:  MOVWF  FEA
4A06:  MOVLW  E5
4A08:  MOVWF  FE9
4A0A:  MOVLW  09
4A0C:  MOVWF  01
4A0E:  CLRF   FF7
4A10:  MOVLW  00
4A12:  CALL   08C4
4A16:  TBLRD*-
4A18:  TBLRD*+
4A1A:  MOVFF  FF5,FEE
4A1E:  DECFSZ 01,F
4A20:  BRA    4A18
4A22:  MOVLW  01
4A24:  MOVLB  2
4A26:  MOVWF  x3E
4A28:  MOVLW  E5
4A2A:  MOVWF  x3D
4A2C:  MOVLB  0
4A2E:  CALL   1F12
4A32:  MOVLB  1
....................     } 
.................... aaa: 
....................   return; 
....................   } 
4A34:  MOVLB  0
4A36:  GOTO   4B28 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
4A74:  MOVF   51,W
4A76:  XORLW  00
4A78:  BZ    4A86
4A7A:  XORLW  02
4A7C:  BZ    4AAE
4A7E:  XORLW  01
4A80:  BTFSC  FD8.2
4A82:  BRA    4BB6
4A84:  BRA    4BB6
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
4A86:  CLRF   52
....................       comm_state = COMM_WAIT_CR; 
4A88:  MOVLW  02
4A8A:  MOVWF  51
....................       comm_timeout = 0; 
4A8C:  CLRF   xA4
4A8E:  CLRF   xA3
....................       COM1_send_str("\r>"); 
4A90:  MOVLW  0D
4A92:  MOVLB  1
4A94:  MOVWF  x8A
4A96:  MOVLW  3E
4A98:  MOVWF  x8B
4A9A:  CLRF   x8C
4A9C:  MOVLW  01
4A9E:  MOVLB  2
4AA0:  MOVWF  x3E
4AA2:  MOVLW  8A
4AA4:  MOVWF  x3D
4AA6:  MOVLB  0
4AA8:  CALL   1F12
....................       break; 
4AAC:  BRA    4BB6
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
4AAE:  MOVF   2E,F
4AB0:  BTFSC  FD8.2
4AB2:  BRA    4B8A
....................         { 
....................         comm_timeout = 0; 
4AB4:  CLRF   xA4
4AB6:  CLRF   xA3
....................         chr = COM1_get_chr(); 
4AB8:  CALL   1FBE
4ABC:  MOVLB  1
4ABE:  CLRF   x87
4AC0:  MOVFF  01,186
....................         comm_buf[comm_ridx++] = chr; 
4AC4:  MOVF   52,W
4AC6:  INCF   52,F
4AC8:  CLRF   03
4ACA:  ADDLW  53
4ACC:  MOVWF  FE9
4ACE:  MOVLW  00
4AD0:  ADDWFC 03,W
4AD2:  MOVWF  FEA
4AD4:  MOVFF  186,FEF
....................         if (comm_ridx > 70) 
4AD8:  MOVF   52,W
4ADA:  SUBLW  46
4ADC:  BC    4AE6
....................           { 
....................           comm_state = 0; 
4ADE:  CLRF   51
....................           break; 
4AE0:  MOVLB  0
4AE2:  BRA    4BB6
4AE4:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
4AE6:  MOVF   x86,W
4AE8:  SUBLW  0D
4AEA:  BNZ   4AF0
4AEC:  MOVF   x87,F
4AEE:  BZ    4AFA
4AF0:  MOVF   x86,W
4AF2:  SUBLW  3B
4AF4:  BNZ   4B8C
4AF6:  MOVF   x87,F
4AF8:  BNZ   4B8C
....................           { 
....................           if (chr == ';') 
4AFA:  MOVF   x86,W
4AFC:  SUBLW  3B
4AFE:  BNZ   4B1C
4B00:  MOVF   x87,F
4B02:  BNZ   4B1C
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
4B04:  MOVLW  01
4B06:  SUBWF  52,W
4B08:  CLRF   03
4B0A:  ADDLW  53
4B0C:  MOVWF  FE9
4B0E:  MOVLW  00
4B10:  ADDWFC 03,W
4B12:  MOVWF  FEA
4B14:  MOVLW  0D
4B16:  MOVWF  FEF
....................             comm_ridx = 0; 
4B18:  CLRF   52
....................             } 
....................           else 
4B1A:  BRA    4B22
....................             COM1_init(); 
4B1C:  MOVLB  0
4B1E:  CALL   0C5E
....................           process_ttccp_commands(); 
4B22:  MOVLB  0
4B24:  GOTO   2E9C
....................           if (debug_mode) 
4B28:  MOVLB  1
4B2A:  MOVF   x11,F
4B2C:  BZ    4B56
....................             COM1_send_str("\r\nOK\n"); 
4B2E:  MOVLW  0D
4B30:  MOVWF  x8A
4B32:  MOVLW  0A
4B34:  MOVWF  x8B
4B36:  MOVLW  4F
4B38:  MOVWF  x8C
4B3A:  MOVLW  4B
4B3C:  MOVWF  x8D
4B3E:  MOVLW  0A
4B40:  MOVWF  x8E
4B42:  CLRF   x8F
4B44:  MOVLW  01
4B46:  MOVLB  2
4B48:  MOVWF  x3E
4B4A:  MOVLW  8A
4B4C:  MOVWF  x3D
4B4E:  MOVLB  0
4B50:  CALL   1F12
4B54:  MOVLB  1
....................           if (ret == 1) 
4B56:  DECFSZ x88,W
4B58:  BRA    4B7A
4B5A:  MOVF   x89,F
4B5C:  BNZ   4B7A
....................             { 
....................             COM1_send_str("\n\r"); 
4B5E:  MOVLW  0A
4B60:  MOVWF  x8A
4B62:  MOVLW  0D
4B64:  MOVWF  x8B
4B66:  CLRF   x8C
4B68:  MOVLW  01
4B6A:  MOVLB  2
4B6C:  MOVWF  x3E
4B6E:  MOVLW  8A
4B70:  MOVWF  x3D
4B72:  MOVLB  0
4B74:  CALL   1F12
....................             } 
....................           else 
4B78:  BRA    4B8A
....................             COM1_send_str(ttccp_error_message); 
4B7A:  MOVLW  01
4B7C:  MOVLB  2
4B7E:  MOVWF  x3E
4B80:  MOVLW  46
4B82:  MOVWF  x3D
4B84:  MOVLB  0
4B86:  CALL   1F12
4B8A:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
4B8C:  MOVF   51,W
4B8E:  SUBLW  01
4B90:  BC    4BB2
....................         if (TMR_100MS_COMM_TO) 
4B92:  BTFSS  2B.1
4B94:  BRA    4BB2
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
4B96:  BCF    2B.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
4B98:  MOVLB  0
4B9A:  INCF   xA3,F
4B9C:  BTFSC  FD8.2
4B9E:  INCF   xA4,F
4BA0:  MOVF   xA4,W
4BA2:  SUBLW  26
4BA4:  BC    4BB2
4BA6:  XORLW  FF
4BA8:  BNZ   4BB0
4BAA:  MOVF   xA3,W
4BAC:  SUBLW  10
4BAE:  BC    4BB2
....................             comm_state = 0; 
4BB0:  CLRF   51
....................           } 
....................       break; 
4BB2:  MOVLB  0
4BB4:  BRA    4BB6
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
4BB6:  GOTO   5CDA (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
5B36:  MOVF   51,W
5B38:  ADDLW  FC
5B3A:  BTFSC  FD8.0
5B3C:  BRA    5C7E
5B3E:  ADDLW  04
5B40:  GOTO   5C82
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
5B44:  CLRF   52
....................       comm_state++; 
5B46:  INCF   51,F
....................       break; 
5B48:  BRA    5C7E
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
5B4A:  MOVF   2E,F
5B4C:  BZ    5B78
....................         if ((chr = COM1_get_chr()) == '$') 
5B4E:  CALL   1FBE
5B52:  MOVLB  1
5B54:  CLRF   x87
5B56:  MOVFF  01,186
5B5A:  MOVF   x86,W
5B5C:  SUBLW  24
5B5E:  BNZ   5B6E
5B60:  MOVF   x87,F
5B62:  BNZ   5B6E
....................           { 
....................           comm_state++; 
5B64:  INCF   51,F
....................           comm_timeout = 0; 
5B66:  MOVLB  0
5B68:  CLRF   xA4
5B6A:  CLRF   xA3
....................           } 
....................         else 
5B6C:  BRA    5B78
....................           inc_dec(chr); 
5B6E:  MOVFF  186,19D
5B72:  MOVLB  0
5B74:  GOTO   4C42
....................       break; 
5B78:  BRA    5C7E
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
5B7A:  MOVF   2E,F
5B7C:  BTFSC  FD8.2
5B7E:  BRA    5C52
....................         { 
....................         comm_timeout = 0; 
5B80:  CLRF   xA4
5B82:  CLRF   xA3
....................         chr = COM1_get_chr(); 
5B84:  CALL   1FBE
5B88:  MOVLB  1
5B8A:  CLRF   x87
5B8C:  MOVFF  01,186
....................         comm_buf[comm_ridx++] = chr; 
5B90:  MOVF   52,W
5B92:  INCF   52,F
5B94:  CLRF   03
5B96:  ADDLW  53
5B98:  MOVWF  FE9
5B9A:  MOVLW  00
5B9C:  ADDWFC 03,W
5B9E:  MOVWF  FEA
5BA0:  MOVFF  186,FEF
....................         if (comm_ridx > 70) 
5BA4:  MOVF   52,W
5BA6:  SUBLW  46
5BA8:  BC    5BB2
....................           { 
....................           comm_state = 0; 
5BAA:  CLRF   51
....................           break; 
5BAC:  MOVLB  0
5BAE:  BRA    5C7E
5BB0:  MOVLB  1
....................           } 
....................         if (chr == 13) 
5BB2:  MOVF   x86,W
5BB4:  SUBLW  0D
5BB6:  BNZ   5C14
5BB8:  MOVF   x87,F
5BBA:  BNZ   5C14
....................           { 
....................           ret = process_dollar_commands(); 
5BBC:  MOVLB  0
5BBE:  BRA    5460
5BC0:  MOVLB  1
5BC2:  CLRF   x89
5BC4:  MOVFF  01,188
....................           if (ret == 1) 
5BC8:  DECFSZ x88,W
5BCA:  BRA    5BD0
5BCC:  MOVF   x89,F
5BCE:  BNZ   5BD0
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
5BD0:  INCFSZ x88,W
5BD2:  BRA    5BD8
5BD4:  MOVF   x89,F
5BD6:  BZ    5C0A
....................             COM1_send_str("\r\nOK\r\n*"); 
5BD8:  MOVLW  01
5BDA:  MOVWF  FEA
5BDC:  MOVLW  8A
5BDE:  MOVWF  FE9
5BE0:  MOVLW  08
5BE2:  MOVWF  01
5BE4:  CLRF   FF7
5BE6:  MOVLW  00
5BE8:  MOVLB  0
5BEA:  CALL   0978
5BEE:  TBLRD*-
5BF0:  TBLRD*+
5BF2:  MOVFF  FF5,FEE
5BF6:  DECFSZ 01,F
5BF8:  BRA    5BF0
5BFA:  MOVLW  01
5BFC:  MOVLB  2
5BFE:  MOVWF  x3E
5C00:  MOVLW  8A
5C02:  MOVWF  x3D
5C04:  MOVLB  0
5C06:  CALL   1F12
....................           COM1_init(); 
5C0A:  MOVLB  0
5C0C:  CALL   0C5E
....................           } 
....................         else if (chr == 27) 
5C10:  BRA    5C52
5C12:  MOVLB  1
5C14:  MOVF   x86,W
5C16:  SUBLW  1B
5C18:  BNZ   5C54
5C1A:  MOVF   x87,F
5C1C:  BNZ   5C54
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
5C1E:  MOVLW  01
5C20:  MOVWF  FEA
5C22:  MOVLW  92
5C24:  MOVWF  FE9
5C26:  MOVLW  0B
5C28:  MOVWF  01
5C2A:  CLRF   FF7
5C2C:  MOVLW  00
5C2E:  MOVLB  0
5C30:  CALL   0990
5C34:  TBLRD*-
5C36:  TBLRD*+
5C38:  MOVFF  FF5,FEE
5C3C:  DECFSZ 01,F
5C3E:  BRA    5C36
5C40:  MOVLW  01
5C42:  MOVLB  2
5C44:  MOVWF  x3E
5C46:  MOVLW  92
5C48:  MOVWF  x3D
5C4A:  MOVLB  0
5C4C:  CALL   1F12
....................           comm_state = 0; 
5C50:  CLRF   51
5C52:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
5C54:  MOVF   51,W
5C56:  SUBLW  01
5C58:  BC    5C7A
....................         if (TMR_100MS_COMM_TO) 
5C5A:  BTFSS  2B.1
5C5C:  BRA    5C7A
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
5C5E:  BCF    2B.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
5C60:  MOVLB  0
5C62:  INCF   xA3,F
5C64:  BTFSC  FD8.2
5C66:  INCF   xA4,F
5C68:  MOVF   xA4,W
5C6A:  SUBLW  26
5C6C:  BC    5C7A
5C6E:  XORLW  FF
5C70:  BNZ   5C78
5C72:  MOVF   xA3,W
5C74:  SUBLW  10
5C76:  BC    5C7A
....................             comm_state = 0; 
5C78:  CLRF   51
....................           } 
....................       break; 
5C7A:  MOVLB  0
5C7C:  BRA    5C7E
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
5C7E:  GOTO   5CDA (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
5CA4:  BTFSS  FAB.1
5CA6:  BRA    5CB8
....................     { 
....................     OERR = 0; 
5CA8:  BCF    FAB.1
....................     CREN = 0; 
5CAA:  BCF    FAB.4
....................     delay_us(5); 
5CAC:  MOVLW  06
5CAE:  MOVWF  00
5CB0:  DECFSZ 00,F
5CB2:  BRA    5CB0
5CB4:  NOP   
....................     CREN = 1; 
5CB6:  BSF    FAB.4
....................     } 
....................   if (FERR) 
5CB8:  BTFSS  FAB.2
5CBA:  BRA    5CC6
....................     { 
....................     FERR = 0; 
5CBC:  BCF    FAB.2
....................     chr = RCREG1; 
5CBE:  MOVLB  1
5CC0:  CLRF   x85
5CC2:  MOVFF  FAE,184
....................     } 
....................   if (ttccp) 
5CC6:  MOVLB  1
5CC8:  MOVF   x10,F
5CCA:  BZ    5CD6
....................     ttccp_handler(); 
5CCC:  MOVLB  0
5CCE:  GOTO   4A74
....................   else 
5CD2:  MOVLB  0
5CD4:  BRA    5CDA
....................     dollar_handler(); 
5CD6:  MOVLB  0
5CD8:  BRA    5B36
....................   } 
5CDA:  GOTO   5E8E (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
148A:  BCF    F8A.2
....................   delay_us(10); 
148C:  MOVLW  0C
148E:  MOVWF  00
1490:  DECFSZ 00,F
1492:  BRA    1490
1494:  BRA    1496
1496:  NOP   
....................   while (length--) 
....................     { 
1498:  MOVLB  2
149A:  MOVF   x15,W
149C:  DECF   x15,F
149E:  XORLW  00
14A0:  BZ    14E6
....................     xbyte = *data++; 
14A2:  MOVFF  217,03
14A6:  MOVF   x16,W
14A8:  INCF   x16,F
14AA:  BTFSC  FD8.2
14AC:  INCF   x17,F
14AE:  MOVWF  FE9
14B0:  MOVFF  03,FEA
14B4:  MOVFF  FEF,218
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
14B8:  CLRF   x19
14BA:  MOVF   x19,W
14BC:  SUBLW  07
14BE:  BNC   14E4
....................       { 
....................       if (xbyte & 0x80) 
14C0:  BTFSS  x18.7
14C2:  BRA    14C8
....................         output_high(D2A_MOSI); 
14C4:  BSF    F8C.4
....................       else 
14C6:  BRA    14CA
....................         output_low(D2A_MOSI); 
14C8:  BCF    F8C.4
....................       delay_us(1); 
14CA:  BRA    14CC
14CC:  BRA    14CE
....................       output_high(D2A_SCLK); 
14CE:  BSF    F8C.0
....................       delay_us(1); 
14D0:  BRA    14D2
14D2:  BRA    14D4
....................       output_low(D2A_SCLK); 
14D4:  BCF    F8C.0
....................       delay_us(1); 
14D6:  BRA    14D8
14D8:  BRA    14DA
....................       } 
14DA:  MOVF   x19,W
14DC:  INCF   x19,F
14DE:  BCF    FD8.0
14E0:  RLCF   x18,F
14E2:  BRA    14BA
....................     } 
14E4:  BRA    149A
....................   delay_us(10); 
14E6:  MOVLW  0C
14E8:  MOVWF  00
14EA:  DECFSZ 00,F
14EC:  BRA    14EA
14EE:  BRA    14F0
14F0:  NOP   
....................   output_high(CSN); 
14F2:  BSF    F8A.2
....................   } 
14F4:  MOVLB  0
14F6:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5354:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5356:  MOVLB  1
5358:  CLRF   xD8
535A:  MOVF   xD8,W
535C:  SUBLW  07
535E:  BNC   5396
....................     { 
....................     if (addr & 0x80) 
5360:  BTFSS  xD4.7
5362:  BRA    5368
....................       output_high(D2A_MOSI); 
5364:  BSF    F8C.4
....................     else 
5366:  BRA    536A
....................       output_low(D2A_MOSI); 
5368:  BCF    F8C.4
....................     delay_us(5); 
536A:  MOVLW  06
536C:  MOVWF  00
536E:  DECFSZ 00,F
5370:  BRA    536E
5372:  NOP   
....................     output_high(D2A_SCLK); 
5374:  BSF    F8C.0
....................     delay_us(5); 
5376:  MOVLW  06
5378:  MOVWF  00
537A:  DECFSZ 00,F
537C:  BRA    537A
537E:  NOP   
....................     output_low(D2A_SCLK); 
5380:  BCF    F8C.0
....................     delay_us(5); 
5382:  MOVLW  06
5384:  MOVWF  00
5386:  DECFSZ 00,F
5388:  BRA    5386
538A:  NOP   
....................     } 
538C:  MOVF   xD8,W
538E:  INCF   xD8,F
5390:  BCF    FD8.0
5392:  RLCF   xD4,F
5394:  BRA    535A
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5396:  CLRF   xD7
5398:  CLRF   xD8
539A:  MOVF   xD8,W
539C:  SUBLW  07
539E:  BNC   53E4
....................     { 
....................     xbyte <<= 1; 
53A0:  BCF    FD8.0
53A2:  RLCF   xD7,F
....................     delay_us(5); 
53A4:  MOVLW  06
53A6:  MOVWF  00
53A8:  DECFSZ 00,F
53AA:  BRA    53A8
53AC:  NOP   
....................     output_high(D2A_SCLK); 
53AE:  BSF    F8C.0
....................     delay_us(3); 
53B0:  MOVLW  03
53B2:  MOVWF  00
53B4:  DECFSZ 00,F
53B6:  BRA    53B4
53B8:  BRA    53BA
....................     if (input(D2A_MISO)) 
53BA:  BTFSS  F83.1
53BC:  BRA    53CA
....................       { 
....................       xbyte |= 1; 
53BE:  BSF    xD7.0
....................       delay_us(2); 
53C0:  MOVLW  02
53C2:  MOVWF  00
53C4:  DECFSZ 00,F
53C6:  BRA    53C4
53C8:  NOP   
....................       } 
....................     delay_us(2); 
53CA:  MOVLW  02
53CC:  MOVWF  00
53CE:  DECFSZ 00,F
53D0:  BRA    53CE
53D2:  NOP   
....................     output_low(D2A_SCLK); 
53D4:  BCF    F8C.0
....................     delay_us(3); 
53D6:  MOVLW  03
53D8:  MOVWF  00
53DA:  DECFSZ 00,F
53DC:  BRA    53DA
53DE:  BRA    53E0
....................     } 
53E0:  INCF   xD8,F
53E2:  BRA    539A
....................   *data = xbyte; 
53E4:  MOVFF  1D5,FE9
53E8:  MOVFF  1D6,FEA
53EC:  MOVFF  1D7,FEF
....................   output_high(CSN); 
53F0:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
53F2:  BCF    F8C.0
....................   return xbyte; 
53F4:  MOVFF  1D7,01
....................   } 
53F8:  MOVLB  0
53FA:  GOTO   5832 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
185A:  MOVFF  21C,228
185E:  MOVFF  21B,227
1862:  MOVFF  21A,226
1866:  MOVFF  219,225
186A:  BRA    158A
186C:  MOVFF  03,220
1870:  MOVFF  02,21F
1874:  MOVFF  01,21E
1878:  MOVFF  00,21D
....................   temp = bitspersec / 240000000.0; 
187C:  MOVFF  220,228
1880:  MOVFF  21F,227
1884:  MOVFF  21E,226
1888:  MOVFF  21D,225
188C:  MOVLW  C0
188E:  MOVLB  2
1890:  MOVWF  x2C
1892:  MOVLW  E1
1894:  MOVWF  x2B
1896:  MOVLW  64
1898:  MOVWF  x2A
189A:  MOVLW  9A
189C:  MOVWF  x29
189E:  MOVLB  0
18A0:  RCALL  15C4
18A2:  MOVFF  03,224
18A6:  MOVFF  02,223
18AA:  MOVFF  01,222
18AE:  MOVFF  00,221
....................   temp *= 65536.0; 
18B2:  MOVFF  224,228
18B6:  MOVFF  223,227
18BA:  MOVFF  222,226
18BE:  MOVFF  221,225
18C2:  MOVLB  2
18C4:  CLRF   x2C
18C6:  CLRF   x2B
18C8:  CLRF   x2A
18CA:  MOVLW  8F
18CC:  MOVWF  x29
18CE:  MOVLB  0
18D0:  RCALL  1722
18D2:  MOVFF  03,224
18D6:  MOVFF  02,223
18DA:  MOVFF  01,222
18DE:  MOVFF  00,221
....................   temp *= 65536.0; 
18E2:  MOVFF  224,228
18E6:  MOVFF  223,227
18EA:  MOVFF  222,226
18EE:  MOVFF  221,225
18F2:  MOVLB  2
18F4:  CLRF   x2C
18F6:  CLRF   x2B
18F8:  CLRF   x2A
18FA:  MOVLW  8F
18FC:  MOVWF  x29
18FE:  MOVLB  0
1900:  RCALL  1722
1902:  MOVFF  03,224
1906:  MOVFF  02,223
190A:  MOVFF  01,222
190E:  MOVFF  00,221
....................   return (ULONG)temp - 1; 
1912:  MOVFF  224,228
1916:  MOVFF  223,227
191A:  MOVFF  222,226
191E:  MOVFF  221,225
1922:  RCALL  1818
1924:  MOVFF  03,228
1928:  MOVFF  02,227
192C:  MOVFF  01,226
1930:  MOVFF  00,225
1934:  MOVLW  01
1936:  MOVLB  2
1938:  SUBWF  00,W
193A:  MOVWF  00
193C:  MOVLW  00
193E:  SUBWFB 01,W
1940:  MOVWF  01
1942:  MOVLW  00
1944:  SUBWFB 02,W
1946:  MOVWF  02
1948:  MOVLW  00
194A:  SUBWFB 03,W
194C:  MOVWF  03
....................   } 
194E:  MOVLB  0
1950:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
4C24:  MOVFF  1A0,1A2
....................   buf[1] = value; 
4C28:  MOVFF  1A1,1A3
....................   send_FPGA_command(2, buf); 
4C2C:  MOVLW  02
4C2E:  MOVLB  2
4C30:  MOVWF  x15
4C32:  MOVLW  01
4C34:  MOVWF  x17
4C36:  MOVLW  A2
4C38:  MOVWF  x16
4C3A:  MOVLB  0
4C3C:  CALL   148A
....................   } 
4C40:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
52C0:  MOVLB  1
52C2:  CLRF   xE6
52C4:  CLRF   xE5
52C6:  MOVFF  1D7,1E4
52CA:  MOVFF  1D6,1E3
52CE:  MOVFF  1E6,21C
52D2:  MOVFF  1E5,21B
52D6:  MOVFF  1D7,21A
52DA:  MOVFF  1D6,219
52DE:  MOVLB  2
52E0:  CLRF   x20
52E2:  CLRF   x1F
52E4:  MOVLW  27
52E6:  MOVWF  x1E
52E8:  MOVLW  10
52EA:  MOVWF  x1D
52EC:  MOVLB  0
52EE:  CALL   0FE0
52F2:  MOVFF  03,1E6
52F6:  MOVFF  02,1E5
52FA:  MOVFF  01,1E4
52FE:  MOVFF  00,1E3
5302:  MOVFF  03,21C
5306:  MOVFF  02,21B
530A:  MOVFF  01,21A
530E:  MOVFF  00,219
5312:  CALL   185A
5316:  MOVFF  03,1E2
531A:  MOVFF  02,1E1
531E:  MOVFF  01,1E0
5322:  MOVFF  00,1DF
....................   buf[0] = 2; 
5326:  MOVLW  02
5328:  MOVLB  1
532A:  MOVWF  xD8
....................   buf[1] = make8(bitf, 0); 
532C:  MOVFF  1DF,1D9
....................   buf[2] = make8(bitf, 1); 
5330:  MOVFF  1E0,1DA
....................   buf[3] = make8(bitf, 2); 
5334:  MOVFF  1E1,1DB
....................   buf[4] = make8(bitf, 3); 
5338:  MOVFF  1E2,1DC
....................   send_FPGA_command(5, buf); 
533C:  MOVLW  05
533E:  MOVLB  2
5340:  MOVWF  x15
5342:  MOVLW  01
5344:  MOVWF  x17
5346:  MOVLW  D8
5348:  MOVWF  x16
534A:  MOVLB  0
534C:  CALL   148A
....................   } 
5350:  GOTO   57EC (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 0; 
*
14F8:  MOVLB  2
14FA:  CLRF   x06
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
14FC:  MOVLB  0
14FE:  SWAPF  xAA,W
1500:  MOVWF  00
1502:  MOVLW  F0
1504:  ANDWF  00,F
1506:  MOVF   00,W
1508:  IORWF  xA9,W
150A:  MOVLB  2
150C:  MOVWF  x0F
150E:  MOVLB  0
1510:  SWAPF  xAB,W
1512:  MOVWF  00
1514:  RLCF   00,F
1516:  MOVLW  E0
1518:  ANDWF  00,F
151A:  MOVF   00,W
151C:  MOVLB  2
151E:  IORWF  x0F,F
1520:  MOVLB  0
1522:  SWAPF  xAF,W
1524:  MOVWF  00
1526:  RLCF   00,F
1528:  RLCF   00,F
152A:  MOVLW  C0
152C:  ANDWF  00,F
152E:  MOVF   00,W
1530:  MOVLB  2
1532:  IORWF  x0F,F
1534:  CLRF   00
1536:  MOVLB  0
1538:  BTFSC  xB1.0
153A:  BSF    00.7
153C:  MOVF   00,W
153E:  MOVLB  2
1540:  IORWF  x0F,W
1542:  MOVWF  x07
....................   send_FPGA_command(2, buf); 
1544:  MOVLW  02
1546:  MOVWF  x15
1548:  MOVWF  x17
154A:  MOVLW  06
154C:  MOVWF  x16
154E:  MOVLB  0
1550:  RCALL  148A
....................   } 
1552:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 6; 
1554:  MOVLW  06
1556:  MOVLB  2
1558:  MOVWF  x06
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
155A:  BCF    FD8.0
155C:  MOVLB  0
155E:  RLCF   xAD,W
1560:  IORWF  xAC,W
1562:  MOVLB  2
1564:  MOVWF  x0F
1566:  MOVLB  0
1568:  RLCF   xAE,W
156A:  MOVWF  00
156C:  RLCF   00,F
156E:  MOVLW  FC
1570:  ANDWF  00,F
1572:  MOVF   00,W
1574:  MOVLB  2
1576:  IORWF  x0F,W
1578:  MOVWF  x07
....................   send_FPGA_command(2, buf); 
157A:  MOVLW  02
157C:  MOVWF  x15
157E:  MOVWF  x17
1580:  MOVLW  06
1582:  MOVWF  x16
1584:  MOVLB  0
1586:  RCALL  148A
....................   } 
1588:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1952:  MOVLB  2
1954:  CLRF   x18
1956:  CLRF   x17
1958:  MOVFF  A6,216
195C:  MOVFF  A5,215
1960:  MOVFF  218,21C
1964:  MOVFF  217,21B
1968:  MOVFF  A6,21A
196C:  MOVFF  A5,219
1970:  CLRF   x20
1972:  CLRF   x1F
1974:  MOVLW  27
1976:  MOVWF  x1E
1978:  MOVLW  10
197A:  MOVWF  x1D
197C:  MOVLB  0
197E:  CALL   0FE0
1982:  MOVFF  03,218
1986:  MOVFF  02,217
198A:  MOVFF  01,216
198E:  MOVFF  00,215
1992:  MOVFF  03,21C
1996:  MOVFF  02,21B
199A:  MOVFF  01,21A
199E:  MOVFF  00,219
19A2:  RCALL  185A
19A4:  MOVFF  03,214
19A8:  MOVFF  02,213
19AC:  MOVFF  01,212
19B0:  MOVFF  00,211
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
19B4:  MOVLW  02
19B6:  MOVLB  2
19B8:  MOVWF  x08
19BA:  MOVFF  211,209
....................   send_FPGA_command(2, buf); delay_ms(10); 
19BE:  MOVLW  02
19C0:  MOVWF  x15
19C2:  MOVWF  x17
19C4:  MOVLW  08
19C6:  MOVWF  x16
19C8:  MOVLB  0
19CA:  RCALL  148A
19CC:  MOVLW  0A
19CE:  MOVLB  2
19D0:  MOVWF  x15
19D2:  MOVLB  0
19D4:  CALL   0CD8
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
19D8:  MOVLW  03
19DA:  MOVLB  2
19DC:  MOVWF  x08
19DE:  MOVFF  212,209
....................   send_FPGA_command(2, buf); delay_ms(10); 
19E2:  MOVLW  02
19E4:  MOVWF  x15
19E6:  MOVWF  x17
19E8:  MOVLW  08
19EA:  MOVWF  x16
19EC:  MOVLB  0
19EE:  RCALL  148A
19F0:  MOVLW  0A
19F2:  MOVLB  2
19F4:  MOVWF  x15
19F6:  MOVLB  0
19F8:  CALL   0CD8
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
19FC:  MOVLW  04
19FE:  MOVLB  2
1A00:  MOVWF  x08
1A02:  MOVFF  213,209
....................   send_FPGA_command(2, buf); delay_ms(10); 
1A06:  MOVLW  02
1A08:  MOVWF  x15
1A0A:  MOVWF  x17
1A0C:  MOVLW  08
1A0E:  MOVWF  x16
1A10:  MOVLB  0
1A12:  RCALL  148A
1A14:  MOVLW  0A
1A16:  MOVLB  2
1A18:  MOVWF  x15
1A1A:  MOVLB  0
1A1C:  CALL   0CD8
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1A20:  MOVLW  05
1A22:  MOVLB  2
1A24:  MOVWF  x08
1A26:  MOVFF  214,209
....................   send_FPGA_command(2, buf); delay_ms(10); 
1A2A:  MOVLW  02
1A2C:  MOVWF  x15
1A2E:  MOVWF  x17
1A30:  MOVLW  08
1A32:  MOVWF  x16
1A34:  MOVLB  0
1A36:  RCALL  148A
1A38:  MOVLW  0A
1A3A:  MOVLB  2
1A3C:  MOVWF  x15
1A3E:  MOVLB  0
1A40:  CALL   0CD8
....................   } 
1A44:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
2746:  MOVLB  2
2748:  MOVF   x03,W
274A:  MOVWF  03
274C:  MOVF   x02,W
274E:  BTFSC  FD8.2
2750:  DECF   x03,F
2752:  DECF   x02,F
2754:  IORWF  03,W
2756:  BZ    27B4
2758:  MOVLB  1
275A:  MOVF   xFF,W
275C:  MOVWF  03
275E:  MOVF   xFE,W
2760:  INCF   xFE,F
2762:  BTFSC  FD8.2
2764:  INCF   xFF,F
2766:  MOVLB  2
2768:  MOVWF  x04
276A:  MOVFF  03,205
276E:  MOVF   x01,W
2770:  MOVWF  03
2772:  MOVF   x00,W
2774:  INCF   x00,F
2776:  BTFSC  FD8.2
2778:  INCF   x01,F
277A:  MOVWF  FE9
277C:  MOVFF  03,FEA
2780:  MOVFF  FEF,206
2784:  MOVF   FF2,W
2786:  MOVWF  00
2788:  BCF    FF2.7
278A:  MOVFF  204,FA9
278E:  MOVFF  206,FA8
2792:  BCF    FA6.6
2794:  BCF    FA6.7
2796:  BSF    FA6.2
2798:  MOVLB  F
279A:  MOVLW  55
279C:  MOVWF  FA7
279E:  MOVLW  AA
27A0:  MOVWF  FA7
27A2:  BSF    FA6.1
27A4:  BTFSC  FA6.1
27A6:  BRA    27A4
27A8:  BCF    FA6.2
27AA:  MOVF   00,W
27AC:  IORWF  FF2,F
27AE:  MOVLB  0
27B0:  BRA    2746
27B2:  MOVLB  2
....................   } 
27B4:  MOVLB  0
27B6:  GOTO   27DE (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0D02:  MOVLB  2
0D04:  MOVF   x03,W
0D06:  MOVWF  03
0D08:  MOVF   x02,W
0D0A:  BTFSC  FD8.2
0D0C:  DECF   x03,F
0D0E:  DECF   x02,F
0D10:  IORWF  03,W
0D12:  BZ    0D56
0D14:  MOVF   x01,W
0D16:  MOVWF  03
0D18:  MOVF   x00,W
0D1A:  INCF   x00,F
0D1C:  BTFSC  FD8.2
0D1E:  INCF   x01,F
0D20:  MOVWF  FE9
0D22:  MOVFF  03,FEA
0D26:  MOVLB  1
0D28:  MOVF   xFF,W
0D2A:  MOVWF  03
0D2C:  MOVF   xFE,W
0D2E:  INCF   xFE,F
0D30:  BTFSC  FD8.2
0D32:  INCF   xFF,F
0D34:  MOVLB  2
0D36:  MOVWF  x06
0D38:  MOVFF  03,207
0D3C:  MOVFF  FF2,208
0D40:  BCF    FF2.7
0D42:  MOVFF  206,FA9
0D46:  BCF    FA6.6
0D48:  BCF    FA6.7
0D4A:  BSF    FA6.0
0D4C:  MOVF   FA8,W
0D4E:  BTFSC  x08.7
0D50:  BSF    FF2.7
0D52:  MOVWF  FEF
0D54:  BRA    0D04
....................   } 
0D56:  MOVLB  0
0D58:  GOTO   0D90 (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
27BA:  MOVF   xF5,W
27BC:  SUBLW  9F
27BE:  BNZ   27DE
27C0:  MOVF   xF6,W
27C2:  SUBLW  0B
27C4:  BNZ   27DE
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
27C6:  MOVLB  1
27C8:  CLRF   xFF
27CA:  CLRF   xFE
27CC:  MOVLB  2
27CE:  CLRF   x01
27D0:  MOVLW  A5
27D2:  MOVWF  x00
27D4:  CLRF   x03
27D6:  MOVLW  50
27D8:  MOVWF  x02
27DA:  MOVLB  0
27DC:  BRA    2746
....................   allow_write = 0; 
27DE:  CLRF   xF6
27E0:  CLRF   xF5
....................   } 
27E2:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0D78:  MOVLB  1
0D7A:  CLRF   xFF
0D7C:  CLRF   xFE
0D7E:  MOVLB  2
0D80:  CLRF   x01
0D82:  MOVLW  A5
0D84:  MOVWF  x00
0D86:  CLRF   x03
0D88:  MOVLW  50
0D8A:  MOVWF  x02
0D8C:  MOVLB  0
0D8E:  BRA    0D02
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0D90:  INCFSZ xAC,W
0D92:  BRA    0D96
0D94:  BRA    0D9A
0D96:  INCFSZ xAD,W
0D98:  BRA    0DAA
....................     memset(&setup, 0, sizeof(setup)); 
0D9A:  CLRF   FEA
0D9C:  MOVLW  A5
0D9E:  MOVWF  FE9
0DA0:  CLRF   00
0DA2:  CLRF   02
0DA4:  MOVLW  50
0DA6:  MOVWF  01
0DA8:  BRA    0D5C
....................   } 
0DAA:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
*
1AB0:  INCFSZ 23,W
1AB2:  BRA    1ABA
1AB4:  INCFSZ 24,W
1AB6:  BRA    1ABA
1AB8:  BRA    1AFC
....................     { 
....................     if (TMR_100MS_POWER) 
1ABA:  BTFSS  2B.3
1ABC:  BRA    1AFA
....................       { 
....................       TMR_100MS_POWER = 0; 
1ABE:  BCF    2B.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1AC0:  MOVLB  2
1AC2:  CLRF   x02
1AC4:  MOVFF  24,204
1AC8:  MOVFF  23,203
1ACC:  MOVLB  0
1ACE:  CALL   0DAC
....................       set_adc_channel(A2D_POWER); // select forward power input 
1AD2:  MOVLW  14
1AD4:  MOVWF  01
1AD6:  MOVF   FC2,W
1AD8:  ANDLW  83
1ADA:  IORWF  01,W
1ADC:  MOVWF  FC2
....................       delay_us(20); 
1ADE:  MOVLW  1A
1AE0:  MOVWF  00
1AE2:  DECFSZ 00,F
1AE4:  BRA    1AE2
1AE6:  NOP   
....................       power = read_adc(); 
1AE8:  BSF    FC2.1
1AEA:  BTFSC  FC2.1
1AEC:  BRA    1AEA
1AEE:  MOVFF  FC4,1FF
1AF2:  MOVLB  1
1AF4:  MOVFF  FC3,1FE
1AF8:  MOVLB  0
....................       } 
....................     return; 
1AFA:  BRA    1E42
....................     } 
....................      
....................      if (input(STANDBY) && setup.cot ==0) 
1AFC:  BTFSS  F83.7
1AFE:  BRA    1B50
1B00:  MOVF   xEF,F
1B02:  BNZ   1B50
1B04:  MOVF   xF0,F
1B06:  BNZ   1B50
....................     { 
....................     if (setup.pwr == 1) 
1B08:  DECFSZ xA7,W
1B0A:  BRA    1B48
1B0C:  MOVF   xA8,F
1B0E:  BNZ   1B48
....................       { 
....................       output_high(POWER_EN); 
1B10:  BSF    F8C.6
....................       a++; 
1B12:  INCF   xF7,F
1B14:  BTFSC  FD8.2
1B16:  INCF   xF8,F
....................        if(a==1) 
1B18:  DECFSZ xF7,W
1B1A:  BRA    1B30
1B1C:  MOVF   xF8,F
1B1E:  BNZ   1B30
.................... 	{ 
.................... 	output_high(POWER_EN); 
1B20:  BSF    F8C.6
.................... 	delay_ms(50); 
1B22:  MOVLW  32
1B24:  MOVLB  2
1B26:  MOVWF  x15
1B28:  MOVLB  0
1B2A:  CALL   0CD8
.................... 	update_all(); 
1B2E:  RCALL  1A46
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1B30:  MOVF   xF8,W
1B32:  SUBLW  E9
1B34:  BC    1B46
1B36:  XORLW  FF
1B38:  BNZ   1B40
1B3A:  MOVF   xF7,W
1B3C:  SUBLW  60
1B3E:  BC    1B46
....................       { 
....................       a=2; 
1B40:  CLRF   xF8
1B42:  MOVLW  02
1B44:  MOVWF  xF7
....................       } 
....................       }   
....................     else 
1B46:  BRA    1B4E
....................     	{ 
....................       	output_low(POWER_EN); 
1B48:  BCF    F8C.6
....................      	a=0; 
1B4A:  CLRF   xF8
1B4C:  CLRF   xF7
....................     	} 	 
....................     } 
....................     else if(!input(STANDBY) && setup.cot ==0) 
1B4E:  BRA    1BA2
1B50:  BTFSC  F83.7
1B52:  BRA    1BA2
1B54:  MOVF   xEF,F
1B56:  BNZ   1BA2
1B58:  MOVF   xF0,F
1B5A:  BNZ   1BA2
....................       { 
....................        if(setup.pwr == 1) 
1B5C:  DECFSZ xA7,W
1B5E:  BRA    1B6C
1B60:  MOVF   xA8,F
1B62:  BNZ   1B6C
....................        	{ 
....................          output_low(POWER_EN);  
1B64:  BCF    F8C.6
....................          a=0; 
1B66:  CLRF   xF8
1B68:  CLRF   xF7
....................         } 
....................        else 
1B6A:  BRA    1B74
....................        { 
....................          output_high(POWER_EN); 
1B6C:  BSF    F8C.6
....................           a++; 
1B6E:  INCF   xF7,F
1B70:  BTFSC  FD8.2
1B72:  INCF   xF8,F
....................        }    
....................        if(a==1) 
1B74:  DECFSZ xF7,W
1B76:  BRA    1B8C
1B78:  MOVF   xF8,F
1B7A:  BNZ   1B8C
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1B7C:  BSF    F8C.6
.................... 	delay_ms(50); 
1B7E:  MOVLW  32
1B80:  MOVLB  2
1B82:  MOVWF  x15
1B84:  MOVLB  0
1B86:  CALL   0CD8
.................... 	update_all(); 
1B8A:  RCALL  1A46
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1B8C:  MOVF   xF8,W
1B8E:  SUBLW  E9
1B90:  BC    1BA2
1B92:  XORLW  FF
1B94:  BNZ   1B9C
1B96:  MOVF   xF7,W
1B98:  SUBLW  60
1B9A:  BC    1BA2
....................       { 
....................       a=2; 
1B9C:  CLRF   xF8
1B9E:  MOVLW  02
1BA0:  MOVWF  xF7
....................       } 
....................       BREAK; 
....................       }  
....................       {  
.................... } 
....................  
....................  
.................... if (!input(STANDBY) && setup.cot ==1) 
1BA2:  BTFSC  F83.7
1BA4:  BRA    1C0A
1BA6:  DECFSZ xEF,W
1BA8:  BRA    1C0A
1BAA:  MOVF   xF0,F
1BAC:  BNZ   1C0A
....................     { 
....................     if (setup.pwr == 1) 
1BAE:  DECFSZ xA7,W
1BB0:  BRA    1BEC
1BB2:  MOVF   xA8,F
1BB4:  BNZ   1BEC
....................       { 
....................       output_high(POWER_EN); 
1BB6:  BSF    F8C.6
....................       b++; 
1BB8:  INCF   xF9,F
1BBA:  BTFSC  FD8.2
1BBC:  INCF   xFA,F
....................        if(b==1) 
1BBE:  DECFSZ xF9,W
1BC0:  BRA    1BD6
1BC2:  MOVF   xFA,F
1BC4:  BNZ   1BD6
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1BC6:  BSF    F8C.6
.................... 	delay_ms(60); 
1BC8:  MOVLW  3C
1BCA:  MOVLB  2
1BCC:  MOVWF  x15
1BCE:  MOVLB  0
1BD0:  CALL   0CD8
.................... 	update_all(); 
1BD4:  RCALL  1A46
.................... 	} 
.................... 	break; 
....................       if(b>60000) 
1BD6:  MOVF   xFA,W
1BD8:  SUBLW  E9
1BDA:  BC    1BEC
1BDC:  XORLW  FF
1BDE:  BNZ   1BE6
1BE0:  MOVF   xF9,W
1BE2:  SUBLW  60
1BE4:  BC    1BEC
....................       { 
....................       b=2; 
1BE6:  CLRF   xFA
1BE8:  MOVLW  02
1BEA:  MOVWF  xF9
....................       } 
....................       }   
....................     if(setup.pwr == 0) 
1BEC:  MOVF   xA7,F
1BEE:  BNZ   1C08
1BF0:  MOVF   xA8,F
1BF2:  BNZ   1C08
....................     	{ 
....................       	output_low(POWER_EN); 
1BF4:  BCF    F8C.6
....................      	set_AD5312(DAC_POS_VOLT, 0); 
1BF6:  MOVLB  2
1BF8:  CLRF   x02
1BFA:  CLRF   x04
1BFC:  CLRF   x03
1BFE:  MOVLB  0
1C00:  CALL   0DAC
....................      	b=0; 
1C04:  CLRF   xFA
1C06:  CLRF   xF9
....................      	} 	 
....................     } 
....................     else if(input(STANDBY) && setup.cot ==1) 
1C08:  BRA    1C86
1C0A:  BTFSS  F83.7
1C0C:  BRA    1C86
1C0E:  DECFSZ xEF,W
1C10:  BRA    1C86
1C12:  MOVF   xF0,F
1C14:  BNZ   1C86
....................       { 
....................        if(setup.pwr == 1) 
1C16:  DECFSZ xA7,W
1C18:  BRA    1C32
1C1A:  MOVF   xA8,F
1C1C:  BNZ   1C32
....................        	{ 
....................          output_low(POWER_EN);  
1C1E:  BCF    F8C.6
....................          set_AD5312(DAC_POS_VOLT, 0); 
1C20:  MOVLB  2
1C22:  CLRF   x02
1C24:  CLRF   x04
1C26:  CLRF   x03
1C28:  MOVLB  0
1C2A:  CALL   0DAC
....................          b=0; 
1C2E:  CLRF   xFA
1C30:  CLRF   xF9
....................         } 
....................        if(setup.pwr == 0) 
1C32:  MOVF   xA7,F
1C34:  BNZ   1C58
1C36:  MOVF   xA8,F
1C38:  BNZ   1C58
....................        { 
.................... 	       if(b==1) 
1C3A:  DECFSZ xF9,W
1C3C:  BRA    1C58
1C3E:  MOVF   xFA,F
1C40:  BNZ   1C58
.................... 	       { 
....................  
....................          output_high(POWER_EN); 
1C42:  BSF    F8C.6
....................          	delay_ms(60); 
1C44:  MOVLW  3C
1C46:  MOVLB  2
1C48:  MOVWF  x15
1C4A:  MOVLB  0
1C4C:  CALL   0CD8
.................... 			update_all(); 
1C50:  RCALL  1A46
....................           b++; 
1C52:  INCF   xF9,F
1C54:  BTFSC  FD8.2
1C56:  INCF   xFA,F
....................         }   
....................        }    
....................        if(b==1) 
1C58:  DECFSZ xF9,W
1C5A:  BRA    1C70
1C5C:  MOVF   xFA,F
1C5E:  BNZ   1C70
.................... 	{ 
.................... 	output_high(POWER_EN); 
1C60:  BSF    F8C.6
.................... 	delay_ms(50); 
1C62:  MOVLW  32
1C64:  MOVLB  2
1C66:  MOVWF  x15
1C68:  MOVLB  0
1C6A:  CALL   0CD8
.................... 	update_all(); 
1C6E:  RCALL  1A46
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1C70:  MOVF   xF8,W
1C72:  SUBLW  E9
1C74:  BC    1C86
1C76:  XORLW  FF
1C78:  BNZ   1C80
1C7A:  MOVF   xF7,W
1C7C:  SUBLW  60
1C7E:  BC    1C86
....................       { 
....................       b=2; 
1C80:  CLRF   xFA
1C82:  MOVLW  02
1C84:  MOVWF  xF9
....................       } 
....................        
....................       }  
....................       break; 
....................       {  
....................     } 
....................      
....................      if (setup.frequency < FREQ_LOW_THRESH) 
1C86:  MOVF   xB4,W
1C88:  SUBLW  58
1C8A:  BNC   1CAA
1C8C:  BNZ   1C94
1C8E:  MOVF   xB3,W
1C90:  SUBLW  29
1C92:  BNC   1CAA
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1C94:  MOVLW  01
1C96:  MOVLB  2
1C98:  MOVWF  x02
1C9A:  MOVFF  B9,204
1C9E:  MOVFF  B8,203
1CA2:  MOVLB  0
1CA4:  CALL   0DAC
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1CA8:  BRA    1CE2
1CAA:  MOVF   xB4,W
1CAC:  SUBLW  5A
1CAE:  BNC   1CCE
1CB0:  BNZ   1CB8
1CB2:  MOVF   xB3,W
1CB4:  SUBLW  F9
1CB6:  BNC   1CCE
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1CB8:  MOVLW  01
1CBA:  MOVLB  2
1CBC:  MOVWF  x02
1CBE:  MOVFF  BB,204
1CC2:  MOVFF  BA,203
1CC6:  MOVLB  0
1CC8:  CALL   0DAC
....................   else 
1CCC:  BRA    1CE2
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1CCE:  MOVLW  01
1CD0:  MOVLB  2
1CD2:  MOVWF  x02
1CD4:  MOVFF  BD,204
1CD8:  MOVFF  BC,203
1CDC:  MOVLB  0
1CDE:  CALL   0DAC
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input 
1CE2:  MOVLW  14
1CE4:  MOVWF  01
1CE6:  MOVF   FC2,W
1CE8:  ANDLW  83
1CEA:  IORWF  01,W
1CEC:  MOVWF  FC2
....................   delay_us(20); 
1CEE:  MOVLW  1A
1CF0:  MOVWF  00
1CF2:  DECFSZ 00,F
1CF4:  BRA    1CF2
1CF6:  NOP   
....................   power = read_adc(); 
1CF8:  BSF    FC2.1
1CFA:  BTFSC  FC2.1
1CFC:  BRA    1CFA
1CFE:  MOVFF  FC4,1FF
1D02:  MOVLB  1
1D04:  MOVFF  FC3,1FE
....................   
....................      
.................... if(setup.rc == 1) 
1D08:  MOVLB  0
1D0A:  DECFSZ xF1,W
1D0C:  BRA    1D5C
1D0E:  MOVF   xF2,F
1D10:  BNZ   1D5C
.................... {      
.................... 	 if (input(HILO) && setup.rp == 1) 
1D12:  BTFSS  F83.2
1D14:  BRA    1D28
1D16:  DECFSZ xF3,W
1D18:  BRA    1D28
1D1A:  MOVF   xF4,F
1D1C:  BNZ   1D28
.................... 	 { 
....................     level = power_level;  //SV 
1D1E:  MOVFF  1C,201
1D22:  MOVFF  1B,200
....................      }   
....................   else if (input(HILO) && setup.rp == 0) 
1D26:  BRA    1D5C
1D28:  BTFSS  F83.2
1D2A:  BRA    1D3E
1D2C:  MOVF   xF3,F
1D2E:  BNZ   1D3E
1D30:  MOVF   xF4,F
1D32:  BNZ   1D3E
....................     { 
....................     level = low_power_level; //VL 
1D34:  MOVFF  1A,201
1D38:  MOVFF  19,200
....................     } 
....................     else if(!input(HILO) && setup.rp == 0) 
1D3C:  BRA    1D5C
1D3E:  BTFSC  F83.2
1D40:  BRA    1D54
1D42:  MOVF   xF3,F
1D44:  BNZ   1D54
1D46:  MOVF   xF4,F
1D48:  BNZ   1D54
....................     { 
....................     level = power_level;  //SV 
1D4A:  MOVFF  1C,201
1D4E:  MOVFF  1B,200
....................     } 
....................   else 
1D52:  BRA    1D5C
....................   { 
....................     level = low_power_level;  // VL 
1D54:  MOVFF  1A,201
1D58:  MOVFF  19,200
....................   }   
.................... } 
.................... 	 
.................... 	if(setup.rc == 0) 
1D5C:  MOVF   xF1,F
1D5E:  BNZ   1DAE
1D60:  MOVF   xF2,F
1D62:  BNZ   1DAE
.................... 	{ 
.................... 	  if (input(HILO) && setup.rp == 0) 
1D64:  BTFSS  F83.2
1D66:  BRA    1D7A
1D68:  MOVF   xF3,F
1D6A:  BNZ   1D7A
1D6C:  MOVF   xF4,F
1D6E:  BNZ   1D7A
.................... 	    { 
....................     level = power_level;  //SV  
1D70:  MOVFF  1C,201
1D74:  MOVFF  1B,200
....................         }    
....................   else if (!input(HILO) && setup.rp == 1) 
1D78:  BRA    1DAE
1D7A:  BTFSC  F83.2
1D7C:  BRA    1D90
1D7E:  DECFSZ xF3,W
1D80:  BRA    1D90
1D82:  MOVF   xF4,F
1D84:  BNZ   1D90
....................     { 
....................     level = power_level; 
1D86:  MOVFF  1C,201
1D8A:  MOVFF  1B,200
....................     } 
....................     else if(input(HILO) && setup.rp == 1) 
1D8E:  BRA    1DAE
1D90:  BTFSS  F83.2
1D92:  BRA    1DA6
1D94:  DECFSZ xF3,W
1D96:  BRA    1DA6
1D98:  MOVF   xF4,F
1D9A:  BNZ   1DA6
....................     { 
....................     level = low_power_level; 
1D9C:  MOVFF  1A,201
1DA0:  MOVFF  19,200
....................     } 
....................   else 
1DA4:  BRA    1DAE
....................     level = low_power_level; // VL 
1DA6:  MOVFF  1A,201
1DAA:  MOVFF  19,200
.................... } 
....................  
....................  
....................  
....................      
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
1DAE:  MOVLW  06
1DB0:  MOVLB  2
1DB2:  ADDWF  x00,W
1DB4:  MOVWF  01
1DB6:  MOVLW  00
1DB8:  ADDWFC x01,W
1DBA:  MOVWF  03
1DBC:  MOVF   03,W
1DBE:  MOVLB  1
1DC0:  SUBWF  xFF,W
1DC2:  BNC   1DCC
1DC4:  BNZ   1DEE
1DC6:  MOVF   xFE,W
1DC8:  SUBWF  01,W
1DCA:  BNC   1DEE
1DCC:  MOVLW  06
1DCE:  MOVLB  2
1DD0:  SUBWF  x00,W
1DD2:  MOVWF  00
1DD4:  MOVLW  00
1DD6:  SUBWFB x01,W
1DD8:  MOVWF  03
1DDA:  MOVFF  00,01
1DDE:  MOVLB  1
1DE0:  MOVF   xFF,W
1DE2:  SUBWF  03,W
1DE4:  BNC   1E44
1DE6:  BNZ   1DEE
1DE8:  MOVF   01,W
1DEA:  SUBWF  xFE,W
1DEC:  BC    1E44
....................     { 
....................     if (power < level) 
1DEE:  MOVF   xFF,W
1DF0:  MOVLB  2
1DF2:  SUBWF  x01,W
1DF4:  BNC   1E1C
1DF6:  BNZ   1E08
1DF8:  MOVF   x00,W
1DFA:  MOVLB  1
1DFC:  SUBWF  xFE,W
1DFE:  BTFSS  FD8.0
1E00:  BRA    1E06
1E02:  MOVLB  2
1E04:  BRA    1E1C
1E06:  MOVLB  2
....................       { 
....................       if (power_control >= 150) 
1E08:  MOVF   1E,F
1E0A:  BNZ   1E12
1E0C:  MOVF   1D,W
1E0E:  SUBLW  95
1E10:  BC    1E1A
....................         power_control -= DEADBAND / 2; 
1E12:  MOVLW  03
1E14:  SUBWF  1D,F
1E16:  MOVLW  00
1E18:  SUBWFB 1E,F
....................       } 
....................     else if (power_control <= 1010) 
1E1A:  BRA    1E32
1E1C:  MOVF   1E,W
1E1E:  SUBLW  03
1E20:  BNC   1E32
1E22:  BNZ   1E2A
1E24:  MOVF   1D,W
1E26:  SUBLW  F2
1E28:  BNC   1E32
....................       { 
....................       power_control += DEADBAND / 2; 
1E2A:  MOVLW  03
1E2C:  ADDWF  1D,F
1E2E:  MOVLW  00
1E30:  ADDWFC 1E,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
1E32:  CLRF   x02
1E34:  MOVFF  1E,204
1E38:  MOVFF  1D,203
1E3C:  MOVLB  0
1E3E:  CALL   0DAC
1E42:  MOVLB  1
....................     }	 
....................  
....................  
....................   } 
1E44:  MOVLB  0
1E46:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0C38:  CLRF   F89
....................   output_b(0); 
0C3A:  CLRF   F8A
....................   output_c(0); 
0C3C:  CLRF   F8B
....................   output_d(0); 
0C3E:  CLRF   F8C
....................   output_e(0); 
0C40:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0C42:  MOVLW  E1
0C44:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0C46:  MOVLW  C1
0C48:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0C4A:  MOVLW  F1
0C4C:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0C4E:  MOVLW  8E
0C50:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0C52:  BSF    F96.0
0C54:  BSF    F96.1
0C56:  BCF    F96.2
0C58:  BSF    F96.3
....................   } 
0C5A:  GOTO   0C9E (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0C74:  MOVLW  48
0C76:  IORLW  05
0C78:  MOVWF  FBA
0C7A:  MOVLW  63
0C7C:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0C7E:  CLRF   FB4
0C80:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0C82:  MOVLW  00
0C84:  IORLW  05
0C86:  MOVLB  F
0C88:  MOVWF  x51
0C8A:  MOVLW  63
0C8C:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0C8E:  CLRF   x4D
0C90:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0C92:  MOVLW  00
0C94:  MOVWF  x4A
0C96:  MOVLW  00
0C98:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0C9A:  MOVLB  0
0C9C:  BRA    0C38
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0C9E:  MOVF   FC1,W
0CA0:  ANDLW  F0
0CA2:  MOVWF  FC1
0CA4:  MOVLW  21
0CA6:  MOVLB  F
0CA8:  MOVWF  x38
0CAA:  MOVLW  03
0CAC:  MOVWF  x3C
0CAE:  MOVLW  00
0CB0:  MOVWF  x39
0CB2:  MOVWF  x3A
0CB4:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0CB6:  MOVF   FC0,W
0CB8:  ANDLW  C0
0CBA:  IORLW  25
0CBC:  MOVWF  FC0
0CBE:  BSF    FC0.7
0CC0:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0CC2:  CLRF   F77
0CC4:  MOVLW  04
0CC6:  MOVWF  F78
0CC8:  MOVWF  F79
....................  
....................   COM1_init(); 
0CCA:  MOVLB  0
0CCC:  RCALL  0C5E
....................   enable_interrupts(INT_TIMER2); 
0CCE:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0CD0:  MOVLW  C0
0CD2:  IORWF  FF2,F
....................   } 
0CD4:  GOTO   5D5A (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1A46:  MOVFF  B4,203
1A4A:  MOVFF  B3,202
....................   delay_ms(5); 
1A4E:  MOVLW  05
1A50:  MOVLB  2
1A52:  MOVWF  x15
1A54:  MOVLB  0
1A56:  CALL   0CD8
....................   PLL_compute_freq_parameters(freq); 
1A5A:  MOVFF  203,207
1A5E:  MOVFF  202,206
1A62:  CALL   10D0
....................   delay_ms(5); 
1A66:  MOVLW  05
1A68:  MOVLB  2
1A6A:  MOVWF  x15
1A6C:  MOVLB  0
1A6E:  CALL   0CD8
....................   PLL_update(); 
1A72:  RCALL  13A0
....................   delay_ms(5); 
1A74:  MOVLW  05
1A76:  MOVLB  2
1A78:  MOVWF  x15
1A7A:  MOVLB  0
1A7C:  CALL   0CD8
....................   FPGA_set_reg0(); 
1A80:  RCALL  14F8
....................   delay_ms(5); 
1A82:  MOVLW  05
1A84:  MOVLB  2
1A86:  MOVWF  x15
1A88:  MOVLB  0
1A8A:  CALL   0CD8
....................   FPGA_set_reg6(); 
1A8E:  RCALL  1554
....................   delay_ms(5); 
1A90:  MOVLW  05
1A92:  MOVLB  2
1A94:  MOVWF  x15
1A96:  MOVLB  0
1A98:  CALL   0CD8
....................   FPGA_set_bitrate(); 
1A9C:  RCALL  1952
....................   bitr = setup.bitrate; 
1A9E:  MOVFF  A6,205
1AA2:  MOVFF  A5,204
....................   power_control = 1000; 
1AA6:  MOVLW  03
1AA8:  MOVWF  1E
1AAA:  MOVLW  E8
1AAC:  MOVWF  1D
....................   } 
1AAE:  RETURN 0
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
5CDE:  CLRF   FF8
5CE0:  BCF    FD0.7
5CE2:  BSF    07.7
5CE4:  CLRF   FEA
5CE6:  CLRF   FE9
5CE8:  MOVLW  70
5CEA:  MOVWF  FD3
5CEC:  BCF    F9B.6
5CEE:  BCF    F9B.7
5CF0:  BCF    FB8.3
5CF2:  MOVLW  19
5CF4:  MOVWF  FAF
5CF6:  MOVLW  A6
5CF8:  MOVWF  FAC
5CFA:  MOVLW  90
5CFC:  MOVWF  FAB
5CFE:  SETF   20
5D00:  SETF   1F
5D02:  SETF   22
5D04:  SETF   21
5D06:  SETF   24
5D08:  SETF   23
5D0A:  CLRF   xF6
5D0C:  CLRF   xF5
5D0E:  CLRF   xF8
5D10:  MOVLW  02
5D12:  MOVWF  xF7
5D14:  CLRF   xFA
5D16:  MOVWF  xF9
5D18:  MOVLW  01
5D1A:  MOVLB  1
5D1C:  MOVWF  x10
5D1E:  CLRF   x11
5D20:  CLRF   x6E
5D22:  MOVFF  F3,16F
5D26:  MOVFF  A7,170
5D2A:  CLRF   x72
5D2C:  CLRF   x71
5D2E:  MOVF   FC1,W
5D30:  ANDLW  F0
5D32:  MOVWF  FC1
5D34:  MOVLW  00
5D36:  MOVLB  F
5D38:  MOVWF  x38
5D3A:  MOVWF  x3C
5D3C:  MOVWF  x39
5D3E:  MOVWF  x3A
5D40:  MOVWF  x3B
5D42:  MOVLB  1
5D44:  CLRF   x88
5D46:  CLRF   F77
5D48:  CLRF   F78
5D4A:  CLRF   F79
5D4C:  MOVLW  03
5D4E:  MOVWF  x74
5D50:  MOVLW  E8
5D52:  MOVWF  x73
....................   int16 vouta = 1000; 
....................   init_system();  
5D54:  MOVLB  0
5D56:  GOTO   0C74
....................   output_high(D2A_CSB); 
5D5A:  BSF    F8A.1
....................   delay_ms(100); 
5D5C:  MOVLW  64
5D5E:  MOVLB  2
5D60:  MOVWF  x15
5D62:  MOVLB  0
5D64:  CALL   0CD8
....................   read_setup(); 
5D68:  CALL   0D78
....................  
....................   power_level = setup.power_in[setup.power_level]; 
5D6C:  BCF    FD8.0
5D6E:  RLCF   xB5,W
5D70:  MOVWF  02
5D72:  RLCF   xB6,W
5D74:  MOVWF  03
5D76:  MOVF   02,W
5D78:  ADDLW  BE
5D7A:  MOVWF  FE9
5D7C:  MOVLW  00
5D7E:  ADDWFC 03,W
5D80:  MOVWF  FEA
5D82:  MOVFF  FEC,03
5D86:  MOVF   FED,F
5D88:  MOVFF  FEF,1B
5D8C:  MOVFF  03,1C
....................   low_power_level = setup.power_in[setup.power_low_level]; 
5D90:  BCF    FD8.0
5D92:  RLCF   xED,W
5D94:  MOVWF  02
5D96:  RLCF   xEE,W
5D98:  MOVWF  03
5D9A:  MOVF   02,W
5D9C:  ADDLW  BE
5D9E:  MOVWF  FE9
5DA0:  MOVLW  00
5DA2:  ADDWFC 03,W
5DA4:  MOVWF  FEA
5DA6:  MOVFF  FEC,03
5DAA:  MOVF   FED,F
5DAC:  MOVFF  FEF,19
5DB0:  MOVFF  03,1A
....................   power_control = 1000; 
5DB4:  MOVLW  03
5DB6:  MOVWF  1E
5DB8:  MOVLW  E8
5DBA:  MOVWF  1D
....................   power_output(); 
5DBC:  CALL   1AB0
....................    
....................  
....................   PLL_initialize(); 
5DC0:  GOTO   1E48
....................   delay_ms(50); 
5DC4:  MOVLW  32
5DC6:  MOVLB  2
5DC8:  MOVWF  x15
5DCA:  MOVLB  0
5DCC:  CALL   0CD8
....................   update_all(); 
5DD0:  CALL   1A46
....................  
....................   output_high(D2A_RESET); 
5DD4:  BSF    F8A.3
....................   delay_ms(50); 
5DD6:  MOVLW  32
5DD8:  MOVLB  2
5DDA:  MOVWF  x15
5DDC:  MOVLB  0
5DDE:  CALL   0CD8
....................   output_low(D2A_RESET); 
5DE2:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
5DE4:  MOVLW  0D
5DE6:  MOVLB  1
5DE8:  MOVWF  x75
5DEA:  MOVLW  0A
5DEC:  MOVWF  x76
5DEE:  CLRF   x77
5DF0:  MOVLW  01
5DF2:  MOVLB  2
5DF4:  MOVWF  x3E
5DF6:  MOVLW  75
5DF8:  MOVWF  x3D
5DFA:  MOVLB  0
5DFC:  CALL   1F12
....................   COM1_send_str(VERSION); 
5E00:  MOVLW  01
5E02:  MOVWF  FEA
5E04:  MOVLW  75
5E06:  MOVWF  FE9
5E08:  MOVLW  0F
5E0A:  MOVWF  01
5E0C:  CLRF   FF7
5E0E:  MOVLW  00
5E10:  CALL   08DE
5E14:  TBLRD*-
5E16:  TBLRD*+
5E18:  MOVFF  FF5,FEE
5E1C:  DECFSZ 01,F
5E1E:  BRA    5E16
5E20:  MOVLW  01
5E22:  MOVLB  2
5E24:  MOVWF  x3E
5E26:  MOVLW  75
5E28:  MOVWF  x3D
5E2A:  MOVLB  0
5E2C:  CALL   1F12
....................   COM1_send_str("\r\n"); 
5E30:  MOVLW  0D
5E32:  MOVLB  1
5E34:  MOVWF  x75
5E36:  MOVLW  0A
5E38:  MOVWF  x76
5E3A:  CLRF   x77
5E3C:  MOVLW  01
5E3E:  MOVLB  2
5E40:  MOVWF  x3E
5E42:  MOVLW  75
5E44:  MOVWF  x3D
5E46:  MOVLB  0
5E48:  CALL   1F12
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
5E4C:  MOVLB  2
5E4E:  CLRF   x02
5E50:  MOVFF  174,204
5E54:  MOVFF  173,203
5E58:  MOVLB  0
5E5A:  CALL   0DAC
....................  
....................  
....................   delay_ms(500); 
5E5E:  MOVLW  02
5E60:  MOVLB  1
5E62:  MOVWF  x84
5E64:  MOVLW  FA
5E66:  MOVLB  2
5E68:  MOVWF  x15
5E6A:  MOVLB  0
5E6C:  CALL   0CD8
5E70:  MOVLB  1
5E72:  DECFSZ x84,F
5E74:  BRA    5E64
....................   output_high(POWER_EN); 
5E76:  BSF    F8C.6
....................  
.................... update_all(); 
5E78:  MOVLB  0
5E7A:  CALL   1A46
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
5E7E:  CLRWDT
....................     if (TMR_100mS_BLINK) 
5E80:  BTFSS  2B.0
5E82:  BRA    5E8C
....................       { 
....................       TMR_100mS_BLINK = 0; 
5E84:  BCF    2B.0
....................       output_toggle(LED1); 
5E86:  BTG    F8A.4
....................       delay_us(1); 
5E88:  BRA    5E8A
5E8A:  BRA    5E8C
....................       } 
....................     comm_handler(); 
5E8C:  BRA    5CA4
....................     power_output(); 
5E8E:  CALL   1AB0
....................     } 
5E92:  BRA    5E7E
....................   } 
....................  
....................  
....................  
5E94:  SLEEP 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
