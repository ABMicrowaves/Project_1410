CCS PCH C Compiler, Version 4.137, 5799               04-אפר-16 14:05

               Filename: D:\nati\projects\1410TX\BA1410TX-V3.2 New Update Status Block\twentieth\BA1410TX.lst

               ROM used: 27368 bytes (84%)
                         Largest free fragment is 5396
               RAM used: 428 (28%) at main() level
                         630 (41%) worst case
               Stack:    10 worst case (8 in main + 2 for interrupts)

*
0000:  GOTO   68BC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   0A3E
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   0AEA
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0AF0
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   0AF6
0084:  BTFSS  F9D.4
0086:  GOTO   0090
008A:  BTFSC  F9E.4
008C:  GOTO   0B44
0090:  BTFSS  F7D.0
0092:  GOTO   009C
0096:  BTFSC  F7E.0
0098:  GOTO   0A22
009C:  MOVFF  0E,00
00A0:  MOVFF  0F,01
00A4:  MOVFF  10,02
00A8:  MOVFF  11,03
00AC:  MOVFF  0C,FE9
00B0:  MOVFF  07,FEA
00B4:  BSF    07.7
00B6:  MOVFF  08,FE1
00BA:  MOVFF  09,FE2
00BE:  MOVFF  0A,FD9
00C2:  MOVFF  0B,FDA
00C6:  MOVFF  12,FF3
00CA:  MOVFF  13,FF4
00CE:  MOVFF  14,FFA
00D2:  MOVFF  15,FF5
00D6:  MOVFF  16,FF6
00DA:  MOVFF  17,FF7
00DE:  MOVF   04,W
00E0:  MOVFF  06,FE0
00E4:  MOVFF  05,FD8
00E8:  RETFIE 0
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0B24:  MOVLW  04
0B26:  MOVLB  2
0B28:  SUBWF  x73,F
0B2A:  BNC   0B40
0B2C:  MOVLW  02
0B2E:  MOVWF  FEA
0B30:  MOVLW  73
0B32:  MOVWF  FE9
0B34:  MOVF   FEF,W
0B36:  BZ    0B40
0B38:  BRA    0B3C
0B3A:  NOP   
0B3C:  DECFSZ FEF,F
0B3E:  BRA    0B3A
0B40:  MOVLB  0
0B42:  RETURN 0
*
0EAA:  MOVLW  02
0EAC:  MOVWF  FEA
0EAE:  MOVLW  42
0EB0:  MOVWF  FE9
0EB2:  MOVF   FEF,W
0EB4:  BZ    0ED2
0EB6:  MOVLW  05
0EB8:  MOVWF  01
0EBA:  CLRF   00
0EBC:  DECFSZ 00,F
0EBE:  BRA    0EBC
0EC0:  DECFSZ 01,F
0EC2:  BRA    0EBA
0EC4:  MOVLW  2E
0EC6:  MOVWF  00
0EC8:  DECFSZ 00,F
0ECA:  BRA    0EC8
0ECC:  BRA    0ECE
0ECE:  DECFSZ FEF,F
0ED0:  BRA    0EB6
0ED2:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION " BA1410TX V3.3" 
.................... // VERSION 3.3 Custmmer chenge Add Status Block 14.4.2016 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UINT  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
....................  
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... // To delet status check 
.................... //UINT  test_status = 0; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
.................... 	  	 UINT  cot; 
.................... 	  	 UINT  rc; 
.................... 	  	 UINT  rp; 
.................... 	  	 UCHAR UART_Time; // VERSION 3.3 UT 
.................... 	  	 UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
.................... 	  	 byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
.................... 	  	 byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
.................... 	     UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT a=2, b=2; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[24]; 
....................  
.................... UCHAR ttccp_login = 0; 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0F78:  BCF    F89.2
....................  
....................   if (channel) 
0F7A:  MOVLB  2
0F7C:  MOVF   x31,F
0F7E:  BZ    0F84
....................     output_high(DA2_DAT);    // send to VOUTB 
0F80:  BSF    F89.4
....................   else 
0F82:  BRA    0F86
....................     output_low(DA2_DAT);    // send to VOUTA 
0F84:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0F86:  BSF    F89.3
....................   delay_cycles(15); 
0F88:  MOVLW  04
0F8A:  MOVWF  00
0F8C:  DECFSZ 00,F
0F8E:  BRA    0F8C
0F90:  BRA    0F92
....................   output_low(DA2_CLK); 
0F92:  BCF    F89.3
....................   delay_cycles(15); 
0F94:  MOVLW  04
0F96:  MOVWF  00
0F98:  DECFSZ 00,F
0F9A:  BRA    0F98
0F9C:  BRA    0F9E
....................  
....................   output_low(DA2_DAT); 
0F9E:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0FA0:  BSF    F89.3
....................   delay_cycles(15); 
0FA2:  MOVLW  04
0FA4:  MOVWF  00
0FA6:  DECFSZ 00,F
0FA8:  BRA    0FA6
0FAA:  BRA    0FAC
....................   output_low(DA2_CLK); 
0FAC:  BCF    F89.3
....................   delay_cycles(15); 
0FAE:  MOVLW  04
0FB0:  MOVWF  00
0FB2:  DECFSZ 00,F
0FB4:  BRA    0FB2
0FB6:  BRA    0FB8
....................  
....................   output_high(DA2_CLK); 
0FB8:  BSF    F89.3
....................   delay_cycles(15); 
0FBA:  MOVLW  04
0FBC:  MOVWF  00
0FBE:  DECFSZ 00,F
0FC0:  BRA    0FBE
0FC2:  BRA    0FC4
....................   output_low(DA2_CLK); 
0FC4:  BCF    F89.3
....................   delay_cycles(15); 
0FC6:  MOVLW  04
0FC8:  MOVWF  00
0FCA:  DECFSZ 00,F
0FCC:  BRA    0FCA
0FCE:  BRA    0FD0
....................  
....................   output_high(DA2_CLK); 
0FD0:  BSF    F89.3
....................   delay_cycles(15); 
0FD2:  MOVLW  04
0FD4:  MOVWF  00
0FD6:  DECFSZ 00,F
0FD8:  BRA    0FD6
0FDA:  BRA    0FDC
....................   output_low(DA2_CLK); 
0FDC:  BCF    F89.3
....................   delay_cycles(15); 
0FDE:  MOVLW  04
0FE0:  MOVWF  00
0FE2:  DECFSZ 00,F
0FE4:  BRA    0FE2
0FE6:  BRA    0FE8
....................  
....................  
....................   output_high(DA2_CLK); 
0FE8:  BSF    F89.3
....................   if (level & 0x0200) 
0FEA:  ANDLW  00
0FEC:  MOVWF  00
0FEE:  MOVF   x33,W
0FF0:  ANDLW  02
0FF2:  MOVWF  03
0FF4:  MOVF   00,W
0FF6:  IORWF  03,W
0FF8:  BZ    0FFE
....................     output_high(DA2_DAT); 
0FFA:  BSF    F89.4
....................   else 
0FFC:  BRA    1000
....................     output_low(DA2_DAT); 
0FFE:  BCF    F89.4
....................   delay_cycles(15); 
1000:  MOVLW  04
1002:  MOVWF  00
1004:  DECFSZ 00,F
1006:  BRA    1004
1008:  BRA    100A
....................   output_low(DA2_CLK); 
100A:  BCF    F89.3
....................   delay_cycles(15); 
100C:  MOVLW  04
100E:  MOVWF  00
1010:  DECFSZ 00,F
1012:  BRA    1010
1014:  BRA    1016
....................  
....................   output_high(DA2_CLK); 
1016:  BSF    F89.3
....................   if (level & 0x0100) 
1018:  ANDLW  00
101A:  MOVWF  00
101C:  MOVF   x33,W
101E:  ANDLW  01
1020:  MOVWF  03
1022:  MOVF   00,W
1024:  IORWF  03,W
1026:  BZ    102C
....................     output_high(DA2_DAT); 
1028:  BSF    F89.4
....................   else 
102A:  BRA    102E
....................     output_low(DA2_DAT); 
102C:  BCF    F89.4
....................   output_low(DA2_CLK); 
102E:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1030:  BSF    F89.3
....................   if (level & 0x0080) 
1032:  MOVF   x32,W
1034:  ANDLW  80
1036:  MOVWF  00
1038:  CLRF   03
103A:  MOVF   00,W
103C:  IORWF  03,W
103E:  BZ    1044
....................     output_high(DA2_DAT); 
1040:  BSF    F89.4
....................   else 
1042:  BRA    1046
....................     output_low(DA2_DAT); 
1044:  BCF    F89.4
....................   delay_cycles(15); 
1046:  MOVLW  04
1048:  MOVWF  00
104A:  DECFSZ 00,F
104C:  BRA    104A
104E:  BRA    1050
....................   output_low(DA2_CLK); 
1050:  BCF    F89.3
....................   delay_cycles(15); 
1052:  MOVLW  04
1054:  MOVWF  00
1056:  DECFSZ 00,F
1058:  BRA    1056
105A:  BRA    105C
....................  
....................   output_high(DA2_CLK); 
105C:  BSF    F89.3
....................   if (level & 0x0040) 
105E:  MOVF   x32,W
1060:  ANDLW  40
1062:  MOVWF  00
1064:  CLRF   03
1066:  MOVF   00,W
1068:  IORWF  03,W
106A:  BZ    1070
....................     output_high(DA2_DAT); 
106C:  BSF    F89.4
....................   else 
106E:  BRA    1072
....................     output_low(DA2_DAT); 
1070:  BCF    F89.4
....................   delay_cycles(15); 
1072:  MOVLW  04
1074:  MOVWF  00
1076:  DECFSZ 00,F
1078:  BRA    1076
107A:  BRA    107C
....................   output_low(DA2_CLK); 
107C:  BCF    F89.3
....................   delay_cycles(15); 
107E:  MOVLW  04
1080:  MOVWF  00
1082:  DECFSZ 00,F
1084:  BRA    1082
1086:  BRA    1088
....................  
....................   output_high(DA2_CLK); 
1088:  BSF    F89.3
....................   if (level & 0x0020) 
108A:  MOVF   x32,W
108C:  ANDLW  20
108E:  MOVWF  00
1090:  CLRF   03
1092:  MOVF   00,W
1094:  IORWF  03,W
1096:  BZ    109C
....................     output_high(DA2_DAT); 
1098:  BSF    F89.4
....................   else 
109A:  BRA    109E
....................     output_low(DA2_DAT); 
109C:  BCF    F89.4
....................   output_low(DA2_CLK); 
109E:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
10A0:  BSF    F89.3
....................   if (level & 0x0010) 
10A2:  MOVF   x32,W
10A4:  ANDLW  10
10A6:  MOVWF  00
10A8:  CLRF   03
10AA:  MOVF   00,W
10AC:  IORWF  03,W
10AE:  BZ    10B4
....................     output_high(DA2_DAT); 
10B0:  BSF    F89.4
....................   else 
10B2:  BRA    10B6
....................     output_low(DA2_DAT); 
10B4:  BCF    F89.4
....................   delay_cycles(15); 
10B6:  MOVLW  04
10B8:  MOVWF  00
10BA:  DECFSZ 00,F
10BC:  BRA    10BA
10BE:  BRA    10C0
....................   output_low(DA2_CLK); 
10C0:  BCF    F89.3
....................   delay_cycles(15); 
10C2:  MOVLW  04
10C4:  MOVWF  00
10C6:  DECFSZ 00,F
10C8:  BRA    10C6
10CA:  BRA    10CC
....................  
....................   output_high(DA2_CLK); 
10CC:  BSF    F89.3
....................   if (level & 0x0008) 
10CE:  MOVF   x32,W
10D0:  ANDLW  08
10D2:  MOVWF  00
10D4:  CLRF   03
10D6:  MOVF   00,W
10D8:  IORWF  03,W
10DA:  BZ    10E0
....................     output_high(DA2_DAT); 
10DC:  BSF    F89.4
....................   else 
10DE:  BRA    10E2
....................     output_low(DA2_DAT); 
10E0:  BCF    F89.4
....................   output_low(DA2_CLK); 
10E2:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
10E4:  BSF    F89.3
....................   if (level & 0x0004) 
10E6:  MOVF   x32,W
10E8:  ANDLW  04
10EA:  MOVWF  00
10EC:  CLRF   03
10EE:  MOVF   00,W
10F0:  IORWF  03,W
10F2:  BZ    10F8
....................     output_high(DA2_DAT); 
10F4:  BSF    F89.4
....................   else 
10F6:  BRA    10FA
....................     output_low(DA2_DAT); 
10F8:  BCF    F89.4
....................   delay_cycles(15); 
10FA:  MOVLW  04
10FC:  MOVWF  00
10FE:  DECFSZ 00,F
1100:  BRA    10FE
1102:  BRA    1104
....................   output_low(DA2_CLK); 
1104:  BCF    F89.3
....................   delay_cycles(15); 
1106:  MOVLW  04
1108:  MOVWF  00
110A:  DECFSZ 00,F
110C:  BRA    110A
110E:  BRA    1110
....................  
....................   output_high(DA2_CLK); 
1110:  BSF    F89.3
....................   if (level & 0x0002) 
1112:  MOVF   x32,W
1114:  ANDLW  02
1116:  MOVWF  00
1118:  CLRF   03
111A:  MOVF   00,W
111C:  IORWF  03,W
111E:  BZ    1124
....................     output_high(DA2_DAT); 
1120:  BSF    F89.4
....................   else 
1122:  BRA    1126
....................     output_low(DA2_DAT); 
1124:  BCF    F89.4
....................   output_low(DA2_CLK); 
1126:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1128:  BSF    F89.3
....................   if (level & 0x0001) 
112A:  MOVF   x32,W
112C:  ANDLW  01
112E:  MOVWF  00
1130:  CLRF   03
1132:  MOVF   00,W
1134:  IORWF  03,W
1136:  BZ    113C
....................     output_high(DA2_DAT); 
1138:  BSF    F89.4
....................   else 
113A:  BRA    113E
....................     output_low(DA2_DAT); 
113C:  BCF    F89.4
....................   delay_cycles(15); 
113E:  MOVLW  04
1140:  MOVWF  00
1142:  DECFSZ 00,F
1144:  BRA    1142
1146:  BRA    1148
....................   output_low(DA2_CLK); 
1148:  BCF    F89.3
....................   delay_cycles(15); 
114A:  MOVLW  04
114C:  MOVWF  00
114E:  DECFSZ 00,F
1150:  BRA    114E
1152:  BRA    1154
....................  
....................  
....................   output_high(DA2_CLK); 
1154:  BSF    F89.3
....................   delay_cycles(15); 
1156:  MOVLW  04
1158:  MOVWF  00
115A:  DECFSZ 00,F
115C:  BRA    115A
115E:  BRA    1160
....................   output_low(DA2_CLK); 
1160:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1162:  BSF    F89.3
....................   delay_cycles(15); 
1164:  MOVLW  04
1166:  MOVWF  00
1168:  DECFSZ 00,F
116A:  BRA    1168
116C:  BRA    116E
....................   delay_cycles(15); 
116E:  MOVLW  04
1170:  MOVWF  00
1172:  DECFSZ 00,F
1174:  BRA    1172
1176:  BRA    1178
....................   output_low(DA2_CLK); 
1178:  BCF    F89.3
....................   delay_cycles(15); 
117A:  MOVLW  04
117C:  MOVWF  00
117E:  DECFSZ 00,F
1180:  BRA    117E
1182:  BRA    1184
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
1184:  BSF    F89.2
....................   delay_cycles(15); 
1186:  MOVLW  04
1188:  MOVWF  00
118A:  DECFSZ 00,F
118C:  BRA    118A
118E:  BRA    1190
....................   output_low(DA2_LAT); 
1190:  BCF    F89.1
....................   delay_cycles(15); 
1192:  MOVLW  04
1194:  MOVWF  00
1196:  DECFSZ 00,F
1198:  BRA    1196
119A:  BRA    119C
....................   output_high(DA2_LAT); 
119C:  BSF    F89.1
....................   delay_cycles(15); 
119E:  MOVLW  04
11A0:  MOVWF  00
11A2:  DECFSZ 00,F
11A4:  BRA    11A2
11A6:  BRA    11A8
....................   } 
11A8:  MOVLB  0
11AA:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5FD0:  BCF    F8A.1
....................   addr |= 0x80; 
5FD2:  MOVLB  2
5FD4:  BSF    x05.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5FD6:  CLRF   x07
5FD8:  MOVF   x07,W
5FDA:  SUBLW  07
5FDC:  BNC   6004
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5FDE:  MOVF   x05,W
5FE0:  ANDLW  80
5FE2:  BNZ   5FE8
5FE4:  BCF    F8C.4
5FE6:  BRA    5FEA
5FE8:  BSF    F8C.4
....................     delay_us(1); 
5FEA:  BRA    5FEC
5FEC:  BRA    5FEE
....................     output_high(D2A_SCLK); 
5FEE:  BSF    F8C.0
....................     delay_us(1); 
5FF0:  BRA    5FF2
5FF2:  BRA    5FF4
....................     output_low(D2A_SCLK); 
5FF4:  BCF    F8C.0
....................     delay_us(1); 
5FF6:  BRA    5FF8
5FF8:  BRA    5FFA
....................     } 
5FFA:  MOVF   x07,W
5FFC:  INCF   x07,F
5FFE:  BCF    FD8.0
6000:  RLCF   x05,F
6002:  BRA    5FD8
....................   for (ix = 0; ix < 8; ix++) 
6004:  CLRF   x07
6006:  MOVF   x07,W
6008:  SUBLW  07
600A:  BNC   6026
....................     { 
....................     output_high(D2A_SCLK); 
600C:  BSF    F8C.0
....................     delay_us(1); 
600E:  BRA    6010
6010:  BRA    6012
....................     output_low(D2A_SCLK); 
6012:  BCF    F8C.0
....................     delay_us(1); 
6014:  BRA    6016
6016:  BRA    6018
....................     dout <<= 1; 
6018:  BCF    FD8.0
601A:  RLCF   x06,F
....................     if (input(D2A_MISO)) 
601C:  BTFSS  F83.1
601E:  BRA    6022
....................       dout |= 1; 
6020:  BSF    x06.0
....................     } 
6022:  INCF   x07,F
6024:  BRA    6006
....................   output_high(D2A_CSB); 
6026:  BSF    F8A.1
....................   return dout; 
6028:  MOVFF  206,01
....................   } 
602C:  MOVLB  0
602E:  GOTO   6478 (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
577C:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
577E:  MOVLB  2
5780:  CLRF   x08
5782:  MOVF   x08,W
5784:  SUBLW  07
5786:  BNC   57AE
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5788:  MOVF   x05,W
578A:  ANDLW  80
578C:  BNZ   5792
578E:  BCF    F8C.4
5790:  BRA    5794
5792:  BSF    F8C.4
....................     delay_us(1); 
5794:  BRA    5796
5796:  BRA    5798
....................     output_high(D2A_SCLK); 
5798:  BSF    F8C.0
....................     delay_us(1); 
579A:  BRA    579C
579C:  BRA    579E
....................     output_low(D2A_SCLK); 
579E:  BCF    F8C.0
....................     delay_us(1); 
57A0:  BRA    57A2
57A2:  BRA    57A4
....................     } 
57A4:  MOVF   x08,W
57A6:  INCF   x08,F
57A8:  BCF    FD8.0
57AA:  RLCF   x05,F
57AC:  BRA    5782
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
57AE:  CLRF   x08
57B0:  MOVF   x08,W
57B2:  SUBLW  07
57B4:  BNC   57DC
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
57B6:  MOVF   x06,W
57B8:  ANDLW  80
57BA:  BNZ   57C0
57BC:  BCF    F8C.4
57BE:  BRA    57C2
57C0:  BSF    F8C.4
....................     delay_us(1); 
57C2:  BRA    57C4
57C4:  BRA    57C6
....................     output_high(D2A_SCLK); 
57C6:  BSF    F8C.0
....................     delay_us(1); 
57C8:  BRA    57CA
57CA:  BRA    57CC
....................     output_low(D2A_SCLK); 
57CC:  BCF    F8C.0
....................     delay_us(1); 
57CE:  BRA    57D0
57D0:  BRA    57D2
....................     } 
57D2:  MOVF   x08,W
57D4:  INCF   x08,F
57D6:  BCF    FD8.0
57D8:  RLCF   x06,F
57DA:  BRA    57B0
....................   output_high(D2A_CSB); 
57DC:  BSF    F8A.1
....................   return dout; 
57DE:  MOVFF  207,01
....................   } 
57E2:  MOVLB  0
57E4:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
14C8:  MOVLW  08
14CA:  MOVLB  2
14CC:  MOVWF  x3F
14CE:  MOVF   x3F,F
14D0:  BZ    150E
....................     { 
....................     if (data & 0X80) 
14D2:  BTFSS  x3E.7
14D4:  BRA    14DA
....................       output_high(PLL_DAT); 
14D6:  BSF    F8B.3
....................     else 
14D8:  BRA    14DC
....................       output_low(PLL_DAT); 
14DA:  BCF    F8B.3
....................     delay_us(10); 
14DC:  MOVLW  0C
14DE:  MOVWF  00
14E0:  DECFSZ 00,F
14E2:  BRA    14E0
14E4:  BRA    14E6
14E6:  NOP   
....................     output_high(PLL_CLK); 
14E8:  BSF    F8B.2
....................     delay_us(10); 
14EA:  MOVLW  0C
14EC:  MOVWF  00
14EE:  DECFSZ 00,F
14F0:  BRA    14EE
14F2:  BRA    14F4
14F4:  NOP   
....................     output_low(PLL_CLK); 
14F6:  BCF    F8B.2
....................  
....................     delay_us(25); 
14F8:  MOVLW  20
14FA:  MOVWF  00
14FC:  DECFSZ 00,F
14FE:  BRA    14FC
1500:  BRA    1502
1502:  NOP   
....................     } 
1504:  MOVF   x3F,W
1506:  DECF   x3F,F
1508:  BCF    FD8.0
150A:  RLCF   x3E,F
150C:  BRA    14CE
....................   output_low(PLL_DAT); 
150E:  BCF    F8B.3
....................   output_low(PLL_CLK); 
1510:  BCF    F8B.2
....................   } 
1512:  MOVLB  0
1514:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
1516:  CLRWDT
....................   disable_interrupts(GLOBAL); 
1518:  BCF    FF2.6
151A:  BCF    FF2.7
151C:  BTFSC  FF2.7
151E:  BRA    151A
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
1520:  MOVFF  23C,23D
1524:  MOVFF  23C,23E
1528:  RCALL  14C8
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
152A:  MOVFF  23B,23D
152E:  MOVFF  23B,23E
1532:  RCALL  14C8
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1534:  MOVFF  23A,23D
1538:  MOVFF  23A,23E
153C:  RCALL  14C8
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
153E:  MOVFF  239,23D
1542:  MOVFF  239,23E
1546:  RCALL  14C8
....................   delay_us(40); 
1548:  MOVLW  34
154A:  MOVWF  00
154C:  DECFSZ 00,F
154E:  BRA    154C
1550:  BRA    1552
1552:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1554:  BSF    F8B.1
....................   delay_us(5); 
1556:  MOVLW  06
1558:  MOVWF  00
155A:  DECFSZ 00,F
155C:  BRA    155A
155E:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
1560:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
1562:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
1564:  MOVLW  C0
1566:  IORWF  FF2,F
....................   restart_wdt(); 
1568:  CLRWDT
....................   } 
156A:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
202C:  MOVLB  1
202E:  CLRF   xBA
2030:  MOVLW  05
2032:  MOVWF  xB9
2034:  MOVF   xBA,W
2036:  SUBLW  05
2038:  BNC   20A6
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
203A:  MOVF   xB9,W
203C:  MULLW  04
203E:  MOVF   FF3,W
2040:  CLRF   03
2042:  MOVLB  0
2044:  CALL   00EA
2048:  TBLRD*+
204A:  MOVFF  FF5,01
204E:  TBLRD*+
2050:  MOVFF  FF5,02
2054:  TBLRD*+
2056:  MOVFF  FF5,03
205A:  MOVFF  03,1B8
205E:  MOVFF  02,1B7
2062:  MOVFF  01,1B6
2066:  MOVFF  FE8,1B5
....................     prog |= (ULONG)idx; 
206A:  MOVFF  1B9,00
206E:  CLRF   01
2070:  CLRF   02
2072:  CLRF   03
2074:  MOVF   00,W
2076:  MOVLB  1
2078:  IORWF  xB5,F
207A:  MOVF   01,W
207C:  IORWF  xB6,F
207E:  MOVF   02,W
2080:  IORWF  xB7,F
2082:  MOVF   03,W
2084:  IORWF  xB8,F
....................     PLL_send_word(prog); 
2086:  MOVFF  1B8,23C
208A:  MOVFF  1B7,23B
208E:  MOVFF  1B6,23A
2092:  MOVFF  1B5,239
2096:  MOVLB  0
2098:  CALL   1516
....................     } 
209C:  MOVLB  1
209E:  MOVF   xBA,W
20A0:  INCF   xBA,F
20A2:  DECF   xB9,F
20A4:  BRA    2034
....................   delay_ms(250); 
20A6:  MOVLW  FA
20A8:  MOVLB  2
20AA:  MOVWF  x42
20AC:  MOVLB  0
20AE:  CALL   0EAA
....................   PLL_send_word(prog); 
20B2:  MOVFF  1B8,23C
20B6:  MOVFF  1B7,23B
20BA:  MOVFF  1B6,23A
20BE:  MOVFF  1B5,239
20C2:  CALL   1516
....................   delay_ms(250); 
20C6:  MOVLW  FA
20C8:  MOVLB  2
20CA:  MOVWF  x42
20CC:  MOVLB  0
20CE:  CALL   0EAA
....................   } 
20D2:  GOTO   69BC (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
129C:  MOVLB  2
129E:  CLRF   x42
12A0:  CLRF   x41
12A2:  CLRF   x40
12A4:  MOVLW  02
12A6:  MOVWF  x3F
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
12A8:  CLRWDT
....................   D = Frequest; 
12AA:  CLRF   x3E
12AC:  CLRF   x3D
12AE:  MOVFF  236,23C
12B2:  MOVFF  235,23B
....................   PLL_RFdiv = 0x0095003CL; 
12B6:  MOVLB  1
12B8:  CLRF   x3F
12BA:  MOVLW  95
12BC:  MOVWF  x3E
12BE:  CLRF   x3D
12C0:  MOVLW  3C
12C2:  MOVWF  x3C
....................   if (Frequest >= 22000) 
12C4:  MOVLB  2
12C6:  MOVF   x36,W
12C8:  SUBLW  54
12CA:  BC    12F0
12CC:  XORLW  FF
12CE:  BNZ   12D6
12D0:  MOVF   x35,W
12D2:  SUBLW  EF
12D4:  BC    12F0
....................     { 
....................     RFdiv = 1; 
12D6:  CLRF   x42
12D8:  CLRF   x41
12DA:  CLRF   x40
12DC:  MOVLW  01
12DE:  MOVWF  x3F
....................     PLL_RFdiv = 0x0085003CL; 
12E0:  MOVLB  1
12E2:  CLRF   x3F
12E4:  MOVLW  85
12E6:  MOVWF  x3E
12E8:  CLRF   x3D
12EA:  MOVLW  3C
12EC:  MOVWF  x3C
12EE:  MOVLB  2
....................     }   
....................   restart_wdt(); 
12F0:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
12F2:  MOVFF  23E,24A
12F6:  MOVFF  23D,249
12FA:  MOVFF  23C,248
12FE:  MOVFF  23B,247
1302:  MOVFF  242,24E
1306:  MOVFF  241,24D
130A:  MOVFF  240,24C
130E:  MOVFF  23F,24B
1312:  MOVLB  0
1314:  RCALL  11AC
1316:  MOVFF  03,246
131A:  MOVFF  02,245
131E:  MOVFF  01,244
1322:  MOVFF  00,243
1326:  MOVFF  03,24A
132A:  MOVFF  02,249
132E:  MOVFF  01,248
1332:  MOVFF  00,247
1336:  MOVLB  2
1338:  CLRF   x4E
133A:  CLRF   x4D
133C:  CLRF   x4C
133E:  MOVLW  64
1340:  MOVWF  x4B
1342:  MOVLB  0
1344:  RCALL  11AC
1346:  MOVFF  03,23E
134A:  MOVFF  02,23D
134E:  MOVFF  01,23C
1352:  MOVFF  00,23B
....................   restart_wdt(); 
1356:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
1358:  BCF    FD8.1
135A:  MOVFF  23E,24E
135E:  MOVFF  23D,24D
1362:  MOVFF  23C,24C
1366:  MOVFF  23B,24B
136A:  MOVLB  2
136C:  CLRF   x52
136E:  CLRF   x51
1370:  MOVLW  27
1372:  MOVWF  x50
1374:  MOVLW  10
1376:  MOVWF  x4F
1378:  MOVLB  0
137A:  RCALL  1208
137C:  MOVFF  03,12F
1380:  MOVFF  02,12E
1384:  MOVFF  01,12D
1388:  MOVFF  00,12C
....................   restart_wdt(); 
138C:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
138E:  MOVFF  12F,24A
1392:  MOVFF  12E,249
1396:  MOVFF  12D,248
139A:  MOVFF  12C,247
139E:  MOVLB  2
13A0:  CLRF   x4E
13A2:  CLRF   x4D
13A4:  MOVLW  27
13A6:  MOVWF  x4C
13A8:  MOVLW  10
13AA:  MOVWF  x4B
13AC:  MOVLB  0
13AE:  RCALL  11AC
13B0:  MOVF   00,W
13B2:  MOVLB  2
13B4:  SUBWF  x3B,W
13B6:  MOVWF  x43
13B8:  MOVF   01,W
13BA:  SUBWFB x3C,W
13BC:  MOVWF  x44
13BE:  MOVF   02,W
13C0:  SUBWFB x3D,W
13C2:  MOVWF  x45
13C4:  MOVF   03,W
13C6:  SUBWFB x3E,W
13C8:  MOVWF  x46
13CA:  CLRF   x4A
13CC:  CLRF   x49
13CE:  CLRF   x48
13D0:  MOVLW  64
13D2:  MOVWF  x47
13D4:  MOVFF  242,24E
13D8:  MOVFF  241,24D
13DC:  MOVFF  240,24C
13E0:  MOVFF  23F,24B
13E4:  MOVLB  0
13E6:  RCALL  11AC
13E8:  MOVFF  03,24A
13EC:  MOVFF  02,249
13F0:  MOVFF  01,248
13F4:  MOVFF  00,247
13F8:  BCF    FD8.1
13FA:  MOVFF  246,24E
13FE:  MOVFF  245,24D
1402:  MOVFF  244,24C
1406:  MOVFF  243,24B
140A:  MOVFF  03,252
140E:  MOVFF  02,251
1412:  MOVFF  01,250
1416:  MOVFF  00,24F
141A:  RCALL  1208
141C:  MOVFF  03,133
1420:  MOVFF  02,132
1424:  MOVFF  01,131
1428:  MOVFF  00,130
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
142C:  BCF    FD8.1
142E:  MOVLB  2
1430:  CLRF   x4E
1432:  CLRF   x4D
1434:  CLRF   x4C
1436:  MOVLW  64
1438:  MOVWF  x4B
143A:  MOVFF  242,252
143E:  MOVFF  241,251
1442:  MOVFF  240,250
1446:  MOVFF  23F,24F
144A:  MOVLB  0
144C:  RCALL  1208
144E:  MOVFF  03,246
1452:  MOVFF  02,245
1456:  MOVFF  01,244
145A:  MOVFF  00,243
145E:  MOVLB  2
1460:  RLCF   00,W
1462:  MOVWF  00
1464:  RLCF   01,W
1466:  MOVWF  01
1468:  RLCF   02,W
146A:  MOVWF  02
146C:  RLCF   03,W
146E:  MOVWF  03
1470:  RLCF   00,F
1472:  RLCF   01,F
1474:  RLCF   02,F
1476:  RLCF   03,F
1478:  RLCF   00,F
147A:  RLCF   01,F
147C:  RLCF   02,F
147E:  RLCF   03,F
1480:  MOVLW  F8
1482:  ANDWF  00,F
1484:  MOVLW  08
1486:  ADDWF  03,W
1488:  MOVWF  x46
148A:  MOVLW  01
148C:  ADDWF  00,W
148E:  MOVLB  1
1490:  MOVWF  x34
1492:  MOVLW  00
1494:  MOVLB  2
1496:  ADDWFC 01,W
1498:  MOVLB  1
149A:  MOVWF  x35
149C:  MOVLW  00
149E:  MOVLB  2
14A0:  ADDWFC 02,W
14A2:  MOVLB  1
14A4:  MOVWF  x36
14A6:  MOVLW  00
14A8:  MOVLB  2
14AA:  ADDWFC x46,W
14AC:  MOVLB  1
14AE:  MOVWF  x37
....................   restart_wdt(); 
14B0:  CLRWDT
....................   Fvco++; 
14B2:  MOVLW  01
14B4:  MOVLB  2
14B6:  ADDWF  x37,F
14B8:  BTFSC  FD8.0
14BA:  INCF   x38,F
14BC:  BTFSC  FD8.2
14BE:  INCF   x39,F
14C0:  BTFSC  FD8.2
14C2:  INCF   x3A,F
....................   } 
14C4:  MOVLB  0
14C6:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
156C:  MOVLB  2
156E:  CLRF   x3A
1570:  MOVLB  1
1572:  RLCF   x2C,W
1574:  MOVLB  2
1576:  MOVWF  x3B
1578:  MOVLB  1
157A:  RLCF   x2D,W
157C:  MOVLB  2
157E:  MOVWF  x3C
1580:  MOVLB  1
1582:  RLCF   x2E,W
1584:  MOVLB  2
1586:  MOVWF  x3D
1588:  RLCF   x3B,F
158A:  RLCF   x3C,F
158C:  RLCF   x3D,F
158E:  RLCF   x3B,F
1590:  RLCF   x3C,F
1592:  RLCF   x3D,F
1594:  RLCF   x3B,F
1596:  RLCF   x3C,F
1598:  RLCF   x3D,F
159A:  RLCF   x3B,F
159C:  RLCF   x3C,F
159E:  RLCF   x3D,F
15A0:  RLCF   x3B,F
15A2:  RLCF   x3C,F
15A4:  RLCF   x3D,F
15A6:  RLCF   x3B,F
15A8:  RLCF   x3C,F
15AA:  RLCF   x3D,F
15AC:  MOVLW  80
15AE:  ANDWF  x3B,F
15B0:  MOVLB  1
15B2:  RLCF   x30,W
15B4:  MOVWF  00
15B6:  RLCF   x31,W
15B8:  MOVWF  01
15BA:  RLCF   x32,W
15BC:  MOVWF  02
15BE:  RLCF   x33,W
15C0:  MOVWF  03
15C2:  RLCF   00,F
15C4:  RLCF   01,F
15C6:  RLCF   02,F
15C8:  RLCF   03,F
15CA:  RLCF   00,F
15CC:  RLCF   01,F
15CE:  RLCF   02,F
15D0:  RLCF   03,F
15D2:  MOVLW  F8
15D4:  ANDWF  00,F
15D6:  MOVF   00,W
15D8:  MOVLB  2
15DA:  ADDWF  x3A,W
15DC:  MOVWF  x35
15DE:  MOVF   01,W
15E0:  ADDWFC x3B,W
15E2:  MOVWF  x36
15E4:  MOVF   02,W
15E6:  ADDWFC x3C,W
15E8:  MOVWF  x37
15EA:  MOVF   03,W
15EC:  ADDWFC x3D,W
15EE:  MOVWF  x38
....................   PLL_frequency = prog; 
15F0:  MOVFF  238,13B
15F4:  MOVFF  237,13A
15F8:  MOVFF  236,139
15FC:  MOVFF  235,138
....................   restart_wdt(); 
1600:  CLRWDT
....................   PLL_send_word(prog); 
1602:  MOVFF  238,23C
1606:  MOVFF  237,23B
160A:  MOVFF  236,23A
160E:  MOVFF  235,239
1612:  MOVLB  0
1614:  RCALL  1516
....................   delay_us(20); 
1616:  MOVLW  1A
1618:  MOVWF  00
161A:  DECFSZ 00,F
161C:  BRA    161A
161E:  NOP   
....................   restart_wdt(); 
1620:  CLRWDT
....................   PLL_send_word(PLL_mod); 
1622:  MOVFF  137,23C
1626:  MOVFF  136,23B
162A:  MOVFF  135,23A
162E:  MOVFF  134,239
1632:  RCALL  1516
....................   delay_us(20); 
1634:  MOVLW  1A
1636:  MOVWF  00
1638:  DECFSZ 00,F
163A:  BRA    1638
163C:  NOP   
....................   restart_wdt(); 
163E:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
1640:  MOVFF  13F,23C
1644:  MOVFF  13E,23B
1648:  MOVFF  13D,23A
164C:  MOVFF  13C,239
1650:  RCALL  1516
....................    
....................   } 
1652:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0A22:  BCF    F7E.0
0A24:  GOTO   009C
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
*
0A3E:  SETF   26
....................   TMR_1mS_Count++; 
0A40:  INCF   27,F
....................    if (++TMR_SendStatus >= setup.Block_per_second && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
0A42:  INCF   2F,F
0A44:  BTFSC  FD8.2
0A46:  INCF   30,F
0A48:  MOVLB  1
0A4A:  MOVF   x00,W
0A4C:  SUBWF  30,W
0A4E:  BNC   0AA4
0A50:  BNZ   0A62
0A52:  MOVLB  0
0A54:  MOVF   xFF,W
0A56:  SUBWF  2F,W
0A58:  BTFSC  FD8.0
0A5A:  BRA    0A60
0A5C:  MOVLB  1
0A5E:  BRA    0AA4
0A60:  MOVLB  1
0A62:  DECFSZ 33,W
0A64:  BRA    0AA4
0A66:  MOVLB  0
0A68:  DECFSZ xFC,W
0A6A:  BRA    0A6E
0A6C:  BRA    0A72
0A6E:  MOVLB  1
0A70:  BRA    0AA4
0A72:  MOVLB  1
0A74:  DECFSZ x0B,W
0A76:  BRA    0A7C
0A78:  MOVF   x0C,F
0A7A:  BZ    0A84
0A7C:  MOVF   x0B,F
0A7E:  BNZ   0AA4
0A80:  MOVF   x0C,F
0A82:  BNZ   0AA4
....................     { 
....................     TMR_SendStatus = 0; 
0A84:  CLRF   30
0A86:  CLRF   2F
....................     SendStatusFlag = 1; 
0A88:  MOVLW  01
0A8A:  MOVWF  31
....................     TX_Counter++; //VERSION 3.3 21.3.2016 cunt the number of time block is sent 
0A8C:  INCF   x0F,F
0A8E:  BTFSC  FD8.2
0A90:  INCF   x10,F
....................     //if (StartStatusFlag == 1 && setup.UART_Status == 1) 
....................     if (!ttccp_login) 
0A92:  MOVF   x2B,F
0A94:  BNZ   0AA4
....................       { 
....................       	COM1_send_block(24); 
0A96:  MOVLB  2
0A98:  CLRF   x73
0A9A:  MOVLW  18
0A9C:  MOVWF  x72
0A9E:  MOVLB  0
0AA0:  BRA    0A28
0AA2:  MOVLB  1
....................       } 
....................     } 
....................   if (++TMR_1mS_Cnt >= 10) 
0AA4:  INCF   28,F
0AA6:  MOVF   28,W
0AA8:  SUBLW  09
0AAA:  BC    0AE2
....................     { 
....................     TMR_1mS_Cnt = 0; 
0AAC:  CLRF   28
....................     ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
0AAE:  INCF   2F,F
0AB0:  BTFSC  FD8.2
0AB2:  INCF   30,F
....................     TMR_10mS_Count++; 
0AB4:  INCF   29,F
....................     TMR_10mS_Flags = 0xFF; 
0AB6:  SETF   2A
....................     if (++TMR_10mS_Cnt >= 10) 
0AB8:  INCF   2B,F
0ABA:  MOVF   2B,W
0ABC:  SUBLW  09
0ABE:  BC    0AE2
....................       { 
....................       TMR_10mS_Cnt = 0; 
0AC0:  CLRF   2B
....................       TMR_100mS_Flags = 0xFF; 
0AC2:  SETF   2C
....................       if (++TMR_100mS_Cnt >= 10) 
0AC4:  INCF   2D,F
0AC6:  MOVF   2D,W
0AC8:  SUBLW  09
0ACA:  BC    0AE2
....................         { 
....................         TMR_100mS_Cnt = 0; 
0ACC:  CLRF   2D
....................         TMR_1sec_Flags = 0xFF; 
0ACE:  SETF   2E
....................         if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
0AD0:  INCF   32,F
0AD2:  MOVLB  0
0AD4:  MOVF   xFB,W
0AD6:  SUBWF  32,W
0AD8:  BNC   0AE0
....................    				 { 
....................    					 TMR_StartStatus = 0; 
0ADA:  CLRF   32
....................     				 StartStatusFlag = 1; 
0ADC:  MOVLW  01
0ADE:  MOVWF  33
0AE0:  MOVLB  1
....................     				 //test_status++; 
....................     				 //setup.Block_per_second = convert_power(test_status); 
.................... 			     } 
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0AE2:  BCF    F9E.1
0AE4:  MOVLB  0
0AE6:  GOTO   009C
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
0AEA:  BCF    FF2.1
0AEC:  GOTO   009C
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0AF0:  BCF    FF0.0
0AF2:  GOTO   009C
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0AF6:  MOVFF  FAE,272
....................   COM1_rbuf[COM1_rxi] = x; 
0AFA:  CLRF   03
0AFC:  MOVF   35,W
0AFE:  ADDLW  37
0B00:  MOVWF  FE9
0B02:  MOVLW  00
0B04:  ADDWFC 03,W
0B06:  MOVWF  FEA
0B08:  MOVFF  272,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0B0C:  INCF   35,F
0B0E:  MOVF   35,W
0B10:  SUBLW  1F
0B12:  BC    0B16
....................     COM1_rxi = 0; 
0B14:  CLRF   35
....................   if (COM1_rcnt < COM1_RX_LEN) 
0B16:  MOVF   34,W
0B18:  SUBLW  1F
0B1A:  BNC   0B1E
....................     COM1_rcnt++; 
0B1C:  INCF   34,F
....................   } 
....................    
0B1E:  BCF    F9E.5
0B20:  GOTO   009C
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
....................   { 
.................... 	  output_high(RS485_EN); 
*
0B44:  BSF    F8C.5
.................... 	  status_tx_index = 0; 
0B46:  MOVLB  1
0B48:  CLRF   x12
0B4A:  CLRF   x11
.................... 	  while (tx_block_len--) 
.................... 	  { 
0B4C:  MOVFF  10E,03
0B50:  MOVF   x0D,W
0B52:  BTFSC  FD8.2
0B54:  DECF   x0E,F
0B56:  DECF   x0D,F
0B58:  IORWF  03,W
0B5A:  BZ    0B96
.................... 		  output_high(RS485_EN); 
0B5C:  BSF    F8C.5
.................... 		 	TXREG1 = status_buffer[status_tx_index++]; 
0B5E:  MOVFF  112,03
0B62:  MOVF   x11,W
0B64:  INCF   x11,F
0B66:  BTFSC  FD8.2
0B68:  INCF   x12,F
0B6A:  MOVLB  2
0B6C:  MOVWF  x72
0B6E:  MOVLW  13
0B70:  ADDWF  x72,W
0B72:  MOVWF  FE9
0B74:  MOVLW  01
0B76:  ADDWFC 03,W
0B78:  MOVWF  FEA
0B7A:  MOVFF  FEF,FAD
.................... 		 	delay_us(500);  
0B7E:  MOVLW  02
0B80:  MOVWF  x72
0B82:  MOVLW  F9
0B84:  MOVWF  x73
0B86:  MOVLB  0
0B88:  RCALL  0B24
0B8A:  MOVLB  2
0B8C:  DECFSZ x72,F
0B8E:  BRA    0B82
.................... 		 	output_low(RS485_EN); 
0B90:  BCF    F8C.5
.................... 		} 
0B92:  MOVLB  1
0B94:  BRA    0B4C
.................... 		 
.................... 		disable_interrupts(int_TBE);     
0B96:  BCF    F9D.4
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0B98:  BCF    F9E.4
0B9A:  MOVLB  0
0B9C:  GOTO   009C
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
28F2:  CLRF   03
28F4:  MOVF   36,W
28F6:  ADDLW  37
28F8:  MOVWF  FE9
28FA:  MOVLW  00
28FC:  ADDWFC 03,W
28FE:  MOVWF  FEA
2900:  MOVFF  FEF,1CE
2904:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
2906:  INCF   36,F
2908:  MOVF   36,W
290A:  SUBLW  1F
290C:  BC    2910
....................     COM1_rxo = 0; 
290E:  CLRF   36
....................   if (COM1_rcnt) 
2910:  MOVF   34,F
2912:  BZ    2916
....................     COM1_rcnt--; 
2914:  DECF   34,F
....................   return x; 
2916:  MOVFF  1CE,01
....................   } 
291A:  MOVLB  0
291C:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
20D6:  BCF    F9D.5
....................   output_high(RS485_EN); 
20D8:  BSF    F8C.5
....................   delay_us(100); 
20DA:  MOVLW  84
20DC:  MOVWF  00
20DE:  DECFSZ 00,F
20E0:  BRA    20DE
20E2:  BRA    20E4
20E4:  NOP   
....................   pos = 0; 
20E6:  MOVLB  2
20E8:  CLRF   x6E
....................   while (*str) 
....................     { 
20EA:  MOVFF  26C,03
20EE:  MOVFF  26B,FE9
20F2:  MOVFF  26C,FEA
20F6:  MOVF   FEF,F
20F8:  BZ    2186
....................     x = *str++; 
20FA:  MOVFF  26C,03
20FE:  MOVF   x6B,W
2100:  INCF   x6B,F
2102:  BTFSC  FD8.2
2104:  INCF   x6C,F
2106:  MOVWF  FE9
2108:  MOVFF  03,FEA
210C:  MOVFF  FEF,26D
....................     if (x != '\t') 
2110:  MOVF   x6D,W
2112:  SUBLW  09
2114:  BZ    2142
....................       { 
....................       TXREG1 = x; 
2116:  MOVFF  26D,FAD
....................       pos++; 
211A:  INCF   x6E,F
....................       delay_us(300);  
211C:  MOVLW  02
211E:  MOVWF  x70
2120:  CLRF   19
2122:  BTFSC  FF2.7
2124:  BSF    19.7
2126:  BCF    FF2.7
2128:  MOVLW  95
212A:  MOVWF  x73
212C:  MOVLB  0
212E:  CALL   0B24
2132:  BTFSC  19.7
2134:  BSF    FF2.7
2136:  MOVLB  2
2138:  DECFSZ x70,F
213A:  BRA    2120
....................       x = RCREG1; 
213C:  MOVFF  FAE,26D
....................       } 
....................     else 
2140:  BRA    2184
....................       { 
....................       tab_stop = 32; 
2142:  MOVLW  20
2144:  MOVWF  x6F
....................       if (pos >= tab_stop) 
2146:  MOVF   x6F,W
2148:  SUBWF  x6E,W
214A:  BNC   2152
....................         tab_stop = pos + 2; 
214C:  MOVLW  02
214E:  ADDWF  x6E,W
2150:  MOVWF  x6F
....................       while (pos < tab_stop) 
....................         { 
2152:  MOVF   x6F,W
2154:  SUBWF  x6E,W
2156:  BC    2184
....................         TXREG1 = ' '; 
2158:  MOVLW  20
215A:  MOVWF  FAD
....................         pos++; 
215C:  INCF   x6E,F
....................         delay_us(300); 
215E:  MOVLW  02
2160:  MOVWF  x70
2162:  CLRF   19
2164:  BTFSC  FF2.7
2166:  BSF    19.7
2168:  BCF    FF2.7
216A:  MOVLW  95
216C:  MOVWF  x73
216E:  MOVLB  0
2170:  CALL   0B24
2174:  BTFSC  19.7
2176:  BSF    FF2.7
2178:  MOVLB  2
217A:  DECFSZ x70,F
217C:  BRA    2162
....................         x = RCREG1; 
217E:  MOVFF  FAE,26D
....................         } 
2182:  BRA    2152
....................       } 
....................     } 
2184:  BRA    20EA
....................   delay_us(100); 
2186:  MOVLW  84
2188:  MOVWF  00
218A:  DECFSZ 00,F
218C:  BRA    218A
218E:  BRA    2190
2190:  NOP   
....................   output_low(RS485_EN); 
2192:  BCF    F8C.5
....................   x = RCREG1; 
2194:  MOVFF  FAE,26D
....................   enable_interrupts(int_RDA); 
2198:  BSF    F9D.5
....................   } 
219A:  MOVLB  0
219C:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
....................   { 
....................   UCHAR pos;//, tab_stop; 
....................   pos = 0; 
*
0A28:  MOVLB  2
0A2A:  CLRF   x74
....................   tx_block_len = len ; 
0A2C:  MOVFF  273,10E
0A30:  MOVFF  272,10D
....................   //status_tx_index = 0; 
....................    
....................   //TXREG1 = status_buffer[0]; 
....................   clear_interrupt(int_TBE); 
0A34:  BCF    F9E.4
....................   enable_interrupts(int_TBE); 
0A36:  BSF    F9D.4
....................   //TXREG1 = status_buffer[0]; 
....................   //output_high(RS485_EN);  
....................   } 
0A38:  MOVLB  0
0A3A:  GOTO   0AA2 (RETURN)
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0E30:  MOVLB  1
0E32:  CLRF   x77
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0E34:  CLRF   34
0E36:  MOVFF  34,36
0E3A:  MOVFF  36,35
....................   comm_state = COMM_INIT; 
0E3E:  CLRF   57
....................   enable_interrupts(int_RDA); 
0E40:  BSF    F9D.5
....................   } 
0E42:  MOVLB  0
0E44:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
293C:  MOVLB  1
293E:  MOVF   x40,W
2940:  INCF   x40,F
2942:  CLRF   03
2944:  ADDLW  59
2946:  MOVWF  FE9
2948:  MOVLW  00
294A:  ADDWFC 03,W
294C:  MOVWF  FEA
294E:  CLRF   03
2950:  MOVFF  FEF,01
2954:  MOVFF  03,02
....................   } 
2958:  MOVLB  0
295A:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
291E:  CLRF   03
2920:  MOVLB  1
2922:  MOVF   x40,W
2924:  ADDLW  59
2926:  MOVWF  FE9
2928:  MOVLW  00
292A:  ADDWFC 03,W
292C:  MOVWF  FEA
292E:  CLRF   03
2930:  MOVFF  FEF,01
2934:  MOVFF  03,02
....................   } 
2938:  MOVLB  0
293A:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
295C:  CLRF   03
295E:  MOVLB  1
2960:  MOVF   x40,W
2962:  ADDLW  59
2964:  MOVWF  FE9
2966:  MOVLW  00
2968:  ADDWFC 03,W
296A:  MOVWF  FEA
296C:  MOVF   FEF,F
296E:  BZ    29A0
2970:  CLRF   03
2972:  MOVF   x40,W
2974:  ADDLW  59
2976:  MOVWF  FE9
2978:  MOVLW  00
297A:  ADDWFC 03,W
297C:  MOVWF  FEA
297E:  MOVF   FEF,W
2980:  SUBLW  2C
2982:  BZ    2998
2984:  CLRF   03
2986:  MOVF   x40,W
2988:  ADDLW  59
298A:  MOVWF  FE9
298C:  MOVLW  00
298E:  ADDWFC 03,W
2990:  MOVWF  FEA
2992:  MOVF   FEF,W
2994:  SUBLW  20
2996:  BNZ   29A0
2998:  INCF   x40,F
299A:  MOVLB  0
299C:  BRA    295C
299E:  MOVLB  1
....................   } 
29A0:  MOVLB  0
29A2:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
29F8:  MOVLB  2
29FA:  CLRF   x38
29FC:  MOVLW  01
29FE:  MOVWF  x37
....................   SINT num, sign = 1; 
....................   skip_spc(); 
2A00:  MOVLB  0
2A02:  RCALL  295C
....................   if (comm_buf[comm_ptr]) 
2A04:  CLRF   03
2A06:  MOVLB  1
2A08:  MOVF   x40,W
2A0A:  ADDLW  59
2A0C:  MOVWF  FE9
2A0E:  MOVLW  00
2A10:  ADDWFC 03,W
2A12:  MOVWF  FEA
2A14:  MOVF   FEF,F
2A16:  BZ    2AA0
....................     { 
....................     num = 0; 
2A18:  MOVLB  2
2A1A:  CLRF   x36
2A1C:  CLRF   x35
....................     if (peek_char() == '-') 
2A1E:  MOVLB  0
2A20:  RCALL  291E
2A22:  MOVFF  02,23A
2A26:  MOVFF  01,239
2A2A:  MOVLB  2
2A2C:  MOVF   01,W
2A2E:  SUBLW  2D
2A30:  BNZ   2A40
2A32:  MOVF   x3A,F
2A34:  BNZ   2A40
....................       { 
....................       sign = -1; 
2A36:  SETF   x38
2A38:  SETF   x37
....................       get_char(); 
2A3A:  MOVLB  0
2A3C:  RCALL  293C
2A3E:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2A40:  CLRF   03
2A42:  MOVLB  1
2A44:  MOVF   x40,W
2A46:  ADDLW  59
2A48:  MOVWF  FE9
2A4A:  MOVLW  00
2A4C:  ADDWFC 03,W
2A4E:  MOVWF  FEA
2A50:  MOVFF  FEF,239
2A54:  MOVLB  2
2A56:  MOVF   x39,W
2A58:  SUBLW  2F
2A5A:  BC    2AA0
2A5C:  MOVF   x39,W
2A5E:  SUBLW  39
2A60:  BNC   2AA0
2A62:  MOVFF  236,23A
2A66:  MOVFF  235,239
2A6A:  CLRF   x3C
2A6C:  MOVLW  0A
2A6E:  MOVWF  x3B
2A70:  MOVLB  0
2A72:  RCALL  29A4
2A74:  MOVFF  02,23A
2A78:  MOVFF  01,239
2A7C:  MOVLB  1
2A7E:  MOVF   x40,W
2A80:  INCF   x40,F
2A82:  CLRF   03
2A84:  ADDLW  59
2A86:  MOVWF  FE9
2A88:  MOVLW  00
2A8A:  ADDWFC 03,W
2A8C:  MOVWF  FEA
2A8E:  MOVLW  30
2A90:  SUBWF  FEF,W
2A92:  MOVLB  2
2A94:  ADDWF  01,W
2A96:  MOVWF  x35
2A98:  MOVLW  00
2A9A:  ADDWFC 02,W
2A9C:  MOVWF  x36
2A9E:  BRA    2A40
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
2AA0:  MOVFF  236,23A
2AA4:  MOVFF  235,239
2AA8:  MOVFF  238,23C
2AAC:  MOVFF  237,23B
2AB0:  MOVLB  0
2AB2:  RCALL  29A4
2AB4:  MOVFF  02,03
2AB8:  MOVFF  02,02
....................   } 
2ABC:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
5DDA:  CALL   295C
....................   if (comm_buf[comm_ptr]) 
5DDE:  CLRF   03
5DE0:  MOVLB  1
5DE2:  MOVF   x40,W
5DE4:  ADDLW  59
5DE6:  MOVWF  FE9
5DE8:  MOVLW  00
5DEA:  ADDWFC 03,W
5DEC:  MOVWF  FEA
5DEE:  MOVF   FEF,F
5DF0:  BZ    5E80
....................     { 
....................     num = 0; 
5DF2:  MOVLB  2
5DF4:  CLRF   x08
5DF6:  CLRF   x07
5DF8:  CLRF   x06
5DFA:  CLRF   x05
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5DFC:  CLRF   03
5DFE:  MOVLB  1
5E00:  MOVF   x40,W
5E02:  ADDLW  59
5E04:  MOVWF  FE9
5E06:  MOVLW  00
5E08:  ADDWFC 03,W
5E0A:  MOVWF  FEA
5E0C:  MOVFF  FEF,209
5E10:  MOVLB  2
5E12:  MOVF   x09,W
5E14:  SUBLW  2F
5E16:  BC    5E7E
5E18:  MOVF   x09,W
5E1A:  SUBLW  39
5E1C:  BNC   5E7E
5E1E:  MOVFF  208,24A
5E22:  MOVFF  207,249
5E26:  MOVFF  206,248
5E2A:  MOVFF  205,247
5E2E:  CLRF   x4E
5E30:  CLRF   x4D
5E32:  CLRF   x4C
5E34:  MOVLW  0A
5E36:  MOVWF  x4B
5E38:  MOVLB  0
5E3A:  CALL   11AC
5E3E:  MOVFF  03,20C
5E42:  MOVFF  02,20B
5E46:  MOVFF  01,20A
5E4A:  MOVFF  00,209
5E4E:  MOVLB  1
5E50:  MOVF   x40,W
5E52:  INCF   x40,F
5E54:  CLRF   03
5E56:  ADDLW  59
5E58:  MOVWF  FE9
5E5A:  MOVLW  00
5E5C:  ADDWFC 03,W
5E5E:  MOVWF  FEA
5E60:  MOVLW  30
5E62:  SUBWF  FEF,W
5E64:  MOVLB  2
5E66:  ADDWF  00,W
5E68:  MOVWF  x05
5E6A:  MOVLW  00
5E6C:  ADDWFC 01,W
5E6E:  MOVWF  x06
5E70:  MOVLW  00
5E72:  ADDWFC 02,W
5E74:  MOVWF  x07
5E76:  MOVLW  00
5E78:  ADDWFC x0C,W
5E7A:  MOVWF  x08
5E7C:  BRA    5DFC
5E7E:  MOVLB  1
....................     } 
.................... //  skip_spc(); 
....................   return num; 
5E80:  MOVFF  205,00
5E84:  MOVFF  206,01
5E88:  MOVFF  207,02
5E8C:  MOVFF  208,03
....................   } 
5E90:  MOVLB  0
5E92:  GOTO   63A2 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
5CE2:  CALL   295C
....................   if (peek_char()) 
5CE6:  CALL   291E
5CEA:  MOVF   01,W
5CEC:  IORWF  02,W
5CEE:  BTFSC  FD8.2
5CF0:  BRA    5DC8
....................     { 
....................     num = 0; 
5CF2:  MOVLB  2
5CF4:  CLRF   x08
5CF6:  CLRF   x07
5CF8:  CLRF   x06
5CFA:  CLRF   x05
....................     while (isxdigit(peek_char())) 
....................       { 
5CFC:  MOVLB  0
5CFE:  CALL   291E
5D02:  MOVFF  02,20B
5D06:  MOVFF  01,20A
5D0A:  MOVLB  2
5D0C:  MOVF   x0B,F
5D0E:  BNZ   5D16
5D10:  MOVF   x0A,W
5D12:  SUBLW  2F
5D14:  BC    5D20
5D16:  MOVF   x0B,F
5D18:  BNZ   5D20
5D1A:  MOVF   x0A,W
5D1C:  SUBLW  39
5D1E:  BC    5D48
5D20:  MOVF   x0B,F
5D22:  BNZ   5D2A
5D24:  MOVF   x0A,W
5D26:  SUBLW  40
5D28:  BC    5D34
5D2A:  MOVF   x0B,F
5D2C:  BNZ   5D34
5D2E:  MOVF   x0A,W
5D30:  SUBLW  46
5D32:  BC    5D48
5D34:  MOVF   x0B,F
5D36:  BNZ   5D3E
5D38:  MOVF   x0A,W
5D3A:  SUBLW  60
5D3C:  BC    5DC6
5D3E:  MOVF   x0B,F
5D40:  BNZ   5DC6
5D42:  MOVF   x0A,W
5D44:  SUBLW  66
5D46:  BNC   5DC6
....................       chr = get_char(); 
5D48:  MOVLB  0
5D4A:  CALL   293C
5D4E:  MOVFF  01,209
....................       chr = toupper(chr); 
5D52:  MOVLB  2
5D54:  MOVF   x09,W
5D56:  SUBLW  60
5D58:  BC    5D66
5D5A:  MOVF   x09,W
5D5C:  SUBLW  7A
5D5E:  BNC   5D66
5D60:  MOVF   x09,W
5D62:  ANDLW  DF
5D64:  BRA    5D68
5D66:  MOVF   x09,W
5D68:  MOVWF  x09
....................       if (chr <= '9') 
5D6A:  MOVF   x09,W
5D6C:  SUBLW  39
5D6E:  BNC   5D76
....................         chr -= '0'; 
5D70:  MOVLW  30
5D72:  SUBWF  x09,F
....................       else 
5D74:  BRA    5D7A
....................         chr = chr - ('A' - 10); 
5D76:  MOVLW  37
5D78:  SUBWF  x09,F
....................       num = num * 16 + (ULONG)chr; 
5D7A:  RLCF   x05,W
5D7C:  MOVWF  x0A
5D7E:  RLCF   x06,W
5D80:  MOVWF  x0B
5D82:  RLCF   x07,W
5D84:  MOVWF  x0C
5D86:  RLCF   x08,W
5D88:  MOVWF  x0D
5D8A:  RLCF   x0A,F
5D8C:  RLCF   x0B,F
5D8E:  RLCF   x0C,F
5D90:  RLCF   x0D,F
5D92:  RLCF   x0A,F
5D94:  RLCF   x0B,F
5D96:  RLCF   x0C,F
5D98:  RLCF   x0D,F
5D9A:  RLCF   x0A,F
5D9C:  RLCF   x0B,F
5D9E:  RLCF   x0C,F
5DA0:  RLCF   x0D,F
5DA2:  MOVLW  F0
5DA4:  ANDWF  x0A,F
5DA6:  CLRF   01
5DA8:  CLRF   02
5DAA:  CLRF   03
5DAC:  MOVF   x09,W
5DAE:  ADDWF  x0A,W
5DB0:  MOVWF  x05
5DB2:  MOVF   01,W
5DB4:  ADDWFC x0B,W
5DB6:  MOVWF  x06
5DB8:  MOVF   02,W
5DBA:  ADDWFC x0C,W
5DBC:  MOVWF  x07
5DBE:  MOVF   03,W
5DC0:  ADDWFC x0D,W
5DC2:  MOVWF  x08
....................       } 
5DC4:  BRA    5CFC
5DC6:  MOVLB  0
....................     } 
....................   return num; 
5DC8:  MOVFF  205,00
5DCC:  MOVFF  206,01
5DD0:  MOVFF  207,02
5DD4:  MOVFF  208,03
....................   } 
5DD8:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
2F8C:  RCALL  29F8
2F8E:  MOVFF  02,230
2F92:  MOVFF  01,22F
2F96:  MOVFF  02,23A
2F9A:  MOVFF  01,239
2F9E:  MOVLB  2
2FA0:  CLRF   x3C
2FA2:  MOVLW  0A
2FA4:  MOVWF  x3B
2FA6:  MOVLB  0
2FA8:  RCALL  29A4
2FAA:  MOVFF  02,22E
2FAE:  MOVLB  2
2FB0:  MOVFF  01,22D
....................   if (peek_char() == '.') 
2FB4:  MOVLB  0
2FB6:  RCALL  291E
2FB8:  MOVFF  02,230
2FBC:  MOVFF  01,22F
2FC0:  MOVLB  2
2FC2:  MOVF   01,W
2FC4:  SUBLW  2E
2FC6:  BNZ   2FE8
2FC8:  MOVF   x30,F
2FCA:  BNZ   2FE8
....................     { 
....................     get_char(); // skip '.' 
2FCC:  MOVLB  0
2FCE:  RCALL  293C
....................     freq += get_char() - '0'; 
2FD0:  RCALL  293C
2FD2:  MOVLW  30
2FD4:  MOVLB  2
2FD6:  SUBWF  01,W
2FD8:  MOVWF  00
2FDA:  MOVLW  00
2FDC:  SUBWFB 02,W
2FDE:  MOVWF  03
2FE0:  MOVF   00,W
2FE2:  ADDWF  x2D,F
2FE4:  MOVF   03,W
2FE6:  ADDWFC x2E,F
....................     } 
....................   return freq; 
2FE8:  MOVFF  22D,01
2FEC:  MOVFF  22E,02
....................   } 
2FF0:  MOVLB  0
2FF2:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
5804:  MOVLB  1
5806:  MOVF   xCE,W
5808:  XORLW  69
580A:  MOVLB  0
580C:  BZ    5840
580E:  XORLW  20
5810:  BZ    5870
5812:  XORLW  2D
5814:  BZ    58A0
5816:  XORLW  20
5818:  BZ    58D4
581A:  XORLW  6F
581C:  BTFSC  FD8.2
581E:  BRA    5908
5820:  XORLW  16
5822:  BTFSC  FD8.2
5824:  BRA    5958
5826:  XORLW  10
5828:  BTFSC  FD8.2
582A:  BRA    59A8
582C:  XORLW  72
582E:  BTFSC  FD8.2
5830:  BRA    59FC
5832:  XORLW  61
5834:  BTFSC  FD8.2
5836:  BRA    5A50
5838:  XORLW  02
583A:  BTFSC  FD8.2
583C:  BRA    5A68
583E:  BRA    5A7C
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
5840:  MOVLB  1
5842:  INCF   x6E,F
5844:  BNZ   5852
....................         if (++D2A_image[12] > 3) 
5846:  INCF   x6F,F
5848:  MOVF   x6F,W
584A:  SUBLW  03
584C:  BC    5852
....................           { 
....................           D2A_image[11] = 0; 
584E:  CLRF   x6E
....................           D2A_image[12] = 0; 
5850:  CLRF   x6F
....................           } 
....................       write_D2A(11, D2A_image[11]); 
5852:  MOVLW  0B
5854:  MOVLB  2
5856:  MOVWF  x05
5858:  MOVFF  16E,206
585C:  MOVLB  0
585E:  RCALL  577C
....................       write_D2A(12, D2A_image[12]); 
5860:  MOVLW  0C
5862:  MOVLB  2
5864:  MOVWF  x05
5866:  MOVFF  16F,206
586A:  MOVLB  0
586C:  RCALL  577C
....................       break; 
586E:  BRA    5A7C
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
5870:  MOVLB  1
5872:  INCF   x72,F
5874:  BNZ   5882
....................         if (++D2A_image[16] > 3) 
5876:  INCF   x73,F
5878:  MOVF   x73,W
587A:  SUBLW  03
587C:  BC    5882
....................           { 
....................           D2A_image[15] = 0; 
587E:  CLRF   x72
....................           D2A_image[16] = 0; 
5880:  CLRF   x73
....................           } 
....................       write_D2A(15, D2A_image[15]); 
5882:  MOVLW  0F
5884:  MOVLB  2
5886:  MOVWF  x05
5888:  MOVFF  172,206
588C:  MOVLB  0
588E:  RCALL  577C
....................       write_D2A(16, D2A_image[16]); 
5890:  MOVLW  10
5892:  MOVLB  2
5894:  MOVWF  x05
5896:  MOVFF  173,206
589A:  MOVLB  0
589C:  RCALL  577C
....................       break; 
589E:  BRA    5A7C
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
58A0:  MOVLB  1
58A2:  DECF   x6E,F
58A4:  INCFSZ x6E,W
58A6:  BRA    58B6
....................         if (--D2A_image[12] > 3) 
58A8:  DECF   x6F,F
58AA:  MOVF   x6F,W
58AC:  SUBLW  03
58AE:  BC    58B6
....................           { 
....................           D2A_image[11] = 255; 
58B0:  SETF   x6E
....................           D2A_image[12] = 3; 
58B2:  MOVLW  03
58B4:  MOVWF  x6F
....................           } 
....................       write_D2A(11, D2A_image[11]); 
58B6:  MOVLW  0B
58B8:  MOVLB  2
58BA:  MOVWF  x05
58BC:  MOVFF  16E,206
58C0:  MOVLB  0
58C2:  RCALL  577C
....................       write_D2A(12, D2A_image[12]); 
58C4:  MOVLW  0C
58C6:  MOVLB  2
58C8:  MOVWF  x05
58CA:  MOVFF  16F,206
58CE:  MOVLB  0
58D0:  RCALL  577C
....................       break; 
58D2:  BRA    5A7C
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
58D4:  MOVLB  1
58D6:  DECF   x72,F
58D8:  INCFSZ x72,W
58DA:  BRA    58EA
....................         if (--D2A_image[16] > 3) 
58DC:  DECF   x73,F
58DE:  MOVF   x73,W
58E0:  SUBLW  03
58E2:  BC    58EA
....................           { 
....................           D2A_image[15] = 255; 
58E4:  SETF   x72
....................           D2A_image[16] = 3; 
58E6:  MOVLW  03
58E8:  MOVWF  x73
....................           } 
....................       write_D2A(15, D2A_image[15]); 
58EA:  MOVLW  0F
58EC:  MOVLB  2
58EE:  MOVWF  x05
58F0:  MOVFF  172,206
58F4:  MOVLB  0
58F6:  RCALL  577C
....................       write_D2A(16, D2A_image[16]); 
58F8:  MOVLW  10
58FA:  MOVLB  2
58FC:  MOVWF  x05
58FE:  MOVFF  173,206
5902:  MOVLB  0
5904:  RCALL  577C
....................       break; 
5906:  BRA    5A7C
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5908:  MOVLB  1
590A:  MOVFF  170,1CF
590E:  MOVF   x71,W
5910:  ANDLW  03
5912:  MOVWF  xD0
....................       if (++incdec > 0x3FF) 
5914:  INCF   xCF,F
5916:  BTFSC  FD8.2
5918:  INCF   xD0,F
591A:  MOVF   xD0,W
591C:  SUBLW  03
591E:  BC    5924
....................         incdec = 0; 
5920:  CLRF   xD0
5922:  CLRF   xCF
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5924:  MOVF   x71,W
5926:  ANDLW  C0
5928:  MOVWF  xD1
592A:  MOVLW  00
592C:  IORWF  xCF,F
592E:  MOVF   xD1,W
5930:  IORWF  xD0,F
....................       D2A_image[13] = make8(incdec, 0); 
5932:  MOVFF  1CF,170
....................       D2A_image[14] = make8(incdec, 1); 
5936:  MOVFF  1D0,171
....................       write_D2A(11, D2A_image[13]); 
593A:  MOVLW  0B
593C:  MOVLB  2
593E:  MOVWF  x05
5940:  MOVFF  170,206
5944:  MOVLB  0
5946:  RCALL  577C
....................       write_D2A(12, D2A_image[14]); 
5948:  MOVLW  0C
594A:  MOVLB  2
594C:  MOVWF  x05
594E:  MOVFF  171,206
5952:  MOVLB  0
5954:  RCALL  577C
....................       break; 
5956:  BRA    5A7C
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5958:  MOVLB  1
595A:  MOVFF  174,1CF
595E:  MOVF   x75,W
5960:  ANDLW  03
5962:  MOVWF  xD0
....................       if (++incdec > 0x3FF) 
5964:  INCF   xCF,F
5966:  BTFSC  FD8.2
5968:  INCF   xD0,F
596A:  MOVF   xD0,W
596C:  SUBLW  03
596E:  BC    5974
....................         incdec = 0; 
5970:  CLRF   xD0
5972:  CLRF   xCF
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5974:  MOVF   x75,W
5976:  ANDLW  C0
5978:  MOVWF  xD1
597A:  MOVLW  00
597C:  IORWF  xCF,F
597E:  MOVF   xD1,W
5980:  IORWF  xD0,F
....................       D2A_image[17] = make8(incdec, 0); 
5982:  MOVFF  1CF,174
....................       D2A_image[18] = make8(incdec, 1); 
5986:  MOVFF  1D0,175
....................       write_D2A(11, D2A_image[17]); 
598A:  MOVLW  0B
598C:  MOVLB  2
598E:  MOVWF  x05
5990:  MOVFF  174,206
5994:  MOVLB  0
5996:  RCALL  577C
....................       write_D2A(12, D2A_image[18]); 
5998:  MOVLW  0C
599A:  MOVLB  2
599C:  MOVWF  x05
599E:  MOVFF  175,206
59A2:  MOVLB  0
59A4:  RCALL  577C
....................       break; 
59A6:  BRA    5A7C
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
59A8:  MOVLB  1
59AA:  MOVFF  170,1CF
59AE:  MOVF   x71,W
59B0:  ANDLW  03
59B2:  MOVWF  xD0
....................       if (--incdec > 0x3FF) 
59B4:  MOVF   xCF,W
59B6:  BTFSC  FD8.2
59B8:  DECF   xD0,F
59BA:  DECF   xCF,F
59BC:  MOVF   xD0,W
59BE:  SUBLW  03
59C0:  BC    59C8
....................         incdec = 0x3FF; 
59C2:  MOVLW  03
59C4:  MOVWF  xD0
59C6:  SETF   xCF
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
59C8:  MOVF   x71,W
59CA:  ANDLW  C0
59CC:  MOVWF  xD1
59CE:  MOVLW  00
59D0:  IORWF  xCF,F
59D2:  MOVF   xD1,W
59D4:  IORWF  xD0,F
....................       D2A_image[13] = make8(incdec, 0); 
59D6:  MOVFF  1CF,170
....................       D2A_image[14] = make8(incdec, 1); 
59DA:  MOVFF  1D0,171
....................       write_D2A(11, D2A_image[13]); 
59DE:  MOVLW  0B
59E0:  MOVLB  2
59E2:  MOVWF  x05
59E4:  MOVFF  170,206
59E8:  MOVLB  0
59EA:  RCALL  577C
....................       write_D2A(12, D2A_image[14]); 
59EC:  MOVLW  0C
59EE:  MOVLB  2
59F0:  MOVWF  x05
59F2:  MOVFF  171,206
59F6:  MOVLB  0
59F8:  RCALL  577C
....................       break; 
59FA:  BRA    5A7C
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
59FC:  MOVLB  1
59FE:  MOVFF  174,1CF
5A02:  MOVF   x75,W
5A04:  ANDLW  03
5A06:  MOVWF  xD0
....................       if (--incdec > 0x3FF) 
5A08:  MOVF   xCF,W
5A0A:  BTFSC  FD8.2
5A0C:  DECF   xD0,F
5A0E:  DECF   xCF,F
5A10:  MOVF   xD0,W
5A12:  SUBLW  03
5A14:  BC    5A1C
....................         incdec = 0x3FF; 
5A16:  MOVLW  03
5A18:  MOVWF  xD0
5A1A:  SETF   xCF
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5A1C:  MOVF   x75,W
5A1E:  ANDLW  C0
5A20:  MOVWF  xD1
5A22:  MOVLW  00
5A24:  IORWF  xCF,F
5A26:  MOVF   xD1,W
5A28:  IORWF  xD0,F
....................       D2A_image[17] = make8(incdec, 0); 
5A2A:  MOVFF  1CF,174
....................       D2A_image[18] = make8(incdec, 1); 
5A2E:  MOVFF  1D0,175
....................       write_D2A(11, D2A_image[17]); 
5A32:  MOVLW  0B
5A34:  MOVLB  2
5A36:  MOVWF  x05
5A38:  MOVFF  174,206
5A3C:  MOVLB  0
5A3E:  RCALL  577C
....................       write_D2A(12, D2A_image[18]); 
5A40:  MOVLW  0C
5A42:  MOVLB  2
5A44:  MOVWF  x05
5A46:  MOVFF  175,206
5A4A:  MOVLB  0
5A4C:  RCALL  577C
....................       break; 
5A4E:  BRA    5A7C
....................     case '>': 
....................       if (setup.phase_offset < 255) 
5A50:  INCFSZ xBD,W
5A52:  BRA    5A56
5A54:  BRA    5A58
....................         setup.phase_offset++; 
5A56:  INCF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5A58:  MOVLW  01
5A5A:  MOVLB  1
5A5C:  MOVWF  xD1
5A5E:  MOVFF  BD,1D2
5A62:  MOVLB  0
5A64:  RCALL  57E6
....................       break; 
5A66:  BRA    5A7C
....................     case '<': 
....................       if (setup.phase_offset) 
5A68:  MOVF   xBD,F
5A6A:  BZ    5A6E
....................         setup.phase_offset--; 
5A6C:  DECF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5A6E:  MOVLW  01
5A70:  MOVLB  1
5A72:  MOVWF  xD1
5A74:  MOVFF  BD,1D2
5A78:  MOVLB  0
5A7A:  RCALL  57E6
....................       break; 
....................     } 
....................   } 
5A7C:  GOTO   6756 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
5A80:  MOVLW  0D
5A82:  MOVLB  2
5A84:  MOVWF  x05
5A86:  MOVLW  0A
5A88:  MOVWF  x06
5A8A:  CLRF   x07
5A8C:  MOVLW  02
5A8E:  MOVWF  x6C
5A90:  MOVLW  05
5A92:  MOVWF  x6B
5A94:  MOVLB  0
5A96:  CALL   20D6
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
5A9A:  MOVLW  02
5A9C:  MOVWF  FEA
5A9E:  MOVLW  05
5AA0:  MOVWF  FE9
5AA2:  MOVLW  3D
5AA4:  MOVWF  01
5AA6:  CLRF   FF7
5AA8:  MOVLW  00
5AAA:  CALL   0112
5AAE:  TBLRD*-
5AB0:  TBLRD*+
5AB2:  MOVFF  FF5,FEE
5AB6:  DECFSZ 01,F
5AB8:  BRA    5AB0
5ABA:  MOVLW  02
5ABC:  MOVLB  2
5ABE:  MOVWF  x6C
5AC0:  MOVLW  05
5AC2:  MOVWF  x6B
5AC4:  MOVLB  0
5AC6:  CALL   20D6
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5ACA:  MOVLW  02
5ACC:  MOVWF  FEA
5ACE:  MOVLW  05
5AD0:  MOVWF  FE9
5AD2:  MOVLW  2E
5AD4:  MOVWF  01
5AD6:  CLRF   FF7
5AD8:  MOVLW  00
5ADA:  CALL   0160
5ADE:  TBLRD*-
5AE0:  TBLRD*+
5AE2:  MOVFF  FF5,FEE
5AE6:  DECFSZ 01,F
5AE8:  BRA    5AE0
5AEA:  MOVLW  02
5AEC:  MOVLB  2
5AEE:  MOVWF  x6C
5AF0:  MOVLW  05
5AF2:  MOVWF  x6B
5AF4:  MOVLB  0
5AF6:  CALL   20D6
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
5AFA:  MOVLW  02
5AFC:  MOVWF  FEA
5AFE:  MOVLW  05
5B00:  MOVWF  FE9
5B02:  MOVLW  42
5B04:  MOVWF  01
5B06:  CLRF   FF7
5B08:  MOVLW  00
5B0A:  CALL   019E
5B0E:  TBLRD*-
5B10:  TBLRD*+
5B12:  MOVFF  FF5,FEE
5B16:  DECFSZ 01,F
5B18:  BRA    5B10
5B1A:  MOVLW  02
5B1C:  MOVLB  2
5B1E:  MOVWF  x6C
5B20:  MOVLW  05
5B22:  MOVWF  x6B
5B24:  MOVLB  0
5B26:  CALL   20D6
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
5B2A:  MOVLW  02
5B2C:  MOVWF  FEA
5B2E:  MOVLW  05
5B30:  MOVWF  FE9
5B32:  MOVLW  23
5B34:  MOVWF  01
5B36:  CLRF   FF7
5B38:  MOVLW  00
5B3A:  CALL   01F0
5B3E:  TBLRD*-
5B40:  TBLRD*+
5B42:  MOVFF  FF5,FEE
5B46:  DECFSZ 01,F
5B48:  BRA    5B40
5B4A:  MOVLW  02
5B4C:  MOVLB  2
5B4E:  MOVWF  x6C
5B50:  MOVLW  05
5B52:  MOVWF  x6B
5B54:  MOVLB  0
5B56:  CALL   20D6
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5B5A:  MOVLW  02
5B5C:  MOVWF  FEA
5B5E:  MOVLW  05
5B60:  MOVWF  FE9
5B62:  MOVLW  2D
5B64:  MOVWF  01
5B66:  CLRF   FF7
5B68:  MOVLW  00
5B6A:  CALL   0224
5B6E:  TBLRD*-
5B70:  TBLRD*+
5B72:  MOVFF  FF5,FEE
5B76:  DECFSZ 01,F
5B78:  BRA    5B70
5B7A:  MOVLW  02
5B7C:  MOVLB  2
5B7E:  MOVWF  x6C
5B80:  MOVLW  05
5B82:  MOVWF  x6B
5B84:  MOVLB  0
5B86:  CALL   20D6
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5B8A:  MOVLW  02
5B8C:  MOVWF  FEA
5B8E:  MOVLW  05
5B90:  MOVWF  FE9
5B92:  MOVLW  2E
5B94:  MOVWF  01
5B96:  CLRF   FF7
5B98:  MOVLW  00
5B9A:  CALL   0262
5B9E:  TBLRD*-
5BA0:  TBLRD*+
5BA2:  MOVFF  FF5,FEE
5BA6:  DECFSZ 01,F
5BA8:  BRA    5BA0
5BAA:  MOVLW  02
5BAC:  MOVLB  2
5BAE:  MOVWF  x6C
5BB0:  MOVLW  05
5BB2:  MOVWF  x6B
5BB4:  MOVLB  0
5BB6:  CALL   20D6
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5BBA:  MOVLW  02
5BBC:  MOVWF  FEA
5BBE:  MOVLW  05
5BC0:  MOVWF  FE9
5BC2:  MOVLW  36
5BC4:  MOVWF  01
5BC6:  CLRF   FF7
5BC8:  MOVLW  00
5BCA:  CALL   02A0
5BCE:  TBLRD*-
5BD0:  TBLRD*+
5BD2:  MOVFF  FF5,FEE
5BD6:  DECFSZ 01,F
5BD8:  BRA    5BD0
5BDA:  MOVLW  02
5BDC:  MOVLB  2
5BDE:  MOVWF  x6C
5BE0:  MOVLW  05
5BE2:  MOVWF  x6B
5BE4:  MOVLB  0
5BE6:  CALL   20D6
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
5BEA:  MOVLW  02
5BEC:  MOVWF  FEA
5BEE:  MOVLW  05
5BF0:  MOVWF  FE9
5BF2:  MOVLW  16
5BF4:  MOVWF  01
5BF6:  CLRF   FF7
5BF8:  MOVLW  00
5BFA:  CALL   02E6
5BFE:  TBLRD*-
5C00:  TBLRD*+
5C02:  MOVFF  FF5,FEE
5C06:  DECFSZ 01,F
5C08:  BRA    5C00
5C0A:  MOVLW  02
5C0C:  MOVLB  2
5C0E:  MOVWF  x6C
5C10:  MOVLW  05
5C12:  MOVWF  x6B
5C14:  MOVLB  0
5C16:  CALL   20D6
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
5C1A:  MOVLW  02
5C1C:  MOVWF  FEA
5C1E:  MOVLW  05
5C20:  MOVWF  FE9
5C22:  MOVLW  3C
5C24:  MOVWF  01
5C26:  CLRF   FF7
5C28:  MOVLW  00
5C2A:  CALL   030C
5C2E:  TBLRD*-
5C30:  TBLRD*+
5C32:  MOVFF  FF5,FEE
5C36:  DECFSZ 01,F
5C38:  BRA    5C30
5C3A:  MOVLW  02
5C3C:  MOVLB  2
5C3E:  MOVWF  x6C
5C40:  MOVLW  05
5C42:  MOVWF  x6B
5C44:  MOVLB  0
5C46:  CALL   20D6
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5C4A:  MOVLW  02
5C4C:  MOVWF  FEA
5C4E:  MOVLW  05
5C50:  MOVWF  FE9
5C52:  MOVLW  3D
5C54:  MOVWF  01
5C56:  CLRF   FF7
5C58:  MOVLW  00
5C5A:  CALL   0358
5C5E:  TBLRD*-
5C60:  TBLRD*+
5C62:  MOVFF  FF5,FEE
5C66:  DECFSZ 01,F
5C68:  BRA    5C60
5C6A:  MOVLW  02
5C6C:  MOVLB  2
5C6E:  MOVWF  x6C
5C70:  MOVLW  05
5C72:  MOVWF  x6B
5C74:  MOVLB  0
5C76:  CALL   20D6
....................   COM1_send_str("\r\n"); 
5C7A:  MOVLW  0D
5C7C:  MOVLB  2
5C7E:  MOVWF  x05
5C80:  MOVLW  0A
5C82:  MOVWF  x06
5C84:  CLRF   x07
5C86:  MOVLW  02
5C88:  MOVWF  x6C
5C8A:  MOVLW  05
5C8C:  MOVWF  x6B
5C8E:  MOVLB  0
5C90:  CALL   20D6
....................   } 
5C94:  GOTO   60BC (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
....................   { 
....................   //COM1_send_str("\r\nFAIL\r\n"); 
....................   } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT read_temperature(void)// VERSION 3.3 17.1.2016 
....................   { 
....................   float temp; 
....................   SINT t, val; 
....................   set_adc_channel(A2D_TEMP); // read temperature 
*
2606:  MOVLW  18
2608:  MOVWF  01
260A:  MOVF   FC2,W
260C:  ANDLW  83
260E:  IORWF  01,W
2610:  MOVWF  FC2
....................   delay_us(50); 
2612:  MOVLW  42
2614:  MOVWF  00
2616:  DECFSZ 00,F
2618:  BRA    2616
261A:  NOP   
....................   val = read_adc(); 
261C:  BSF    FC2.1
261E:  BTFSC  FC2.1
2620:  BRA    261E
2622:  MOVFF  FC4,1C2
2626:  MOVLB  1
2628:  MOVFF  FC3,1C1
....................   temp = (float)val / 1024.0 * 3.3; 
262C:  MOVFF  1C2,1C4
2630:  MOVFF  1C1,1C3
2634:  MOVLB  0
2636:  BRA    22FE
2638:  MOVFF  00,1C3
263C:  MOVFF  01,1C4
2640:  MOVFF  02,1C5
2644:  MOVFF  03,1C6
2648:  MOVFF  03,255
264C:  MOVFF  02,254
2650:  MOVFF  01,253
2654:  MOVFF  00,252
2658:  MOVLB  2
265A:  CLRF   x59
265C:  CLRF   x58
265E:  CLRF   x57
2660:  MOVLW  89
2662:  MOVWF  x56
2664:  MOVLB  0
2666:  CALL   178E
266A:  MOVFF  00,1C3
266E:  MOVFF  01,1C4
2672:  MOVFF  02,1C5
2676:  MOVFF  03,1C6
267A:  MOVFF  03,255
267E:  MOVFF  02,254
2682:  MOVFF  01,253
2686:  MOVFF  00,252
268A:  MOVLW  33
268C:  MOVLB  2
268E:  MOVWF  x59
2690:  MOVWF  x58
2692:  MOVLW  53
2694:  MOVWF  x57
2696:  MOVLW  80
2698:  MOVWF  x56
269A:  MOVLB  0
269C:  CALL   18EC
26A0:  MOVFF  03,1BE
26A4:  MOVFF  02,1BD
26A8:  MOVFF  01,1BC
26AC:  MOVFF  00,1BB
....................   temp -= 0.75; 
26B0:  BSF    FD8.1
26B2:  MOVFF  1BE,230
26B6:  MOVFF  1BD,22F
26BA:  MOVFF  1BC,22E
26BE:  MOVFF  1BB,22D
26C2:  MOVLB  2
26C4:  CLRF   x34
26C6:  CLRF   x33
26C8:  MOVLW  40
26CA:  MOVWF  x32
26CC:  MOVLW  7E
26CE:  MOVWF  x31
26D0:  MOVLB  0
26D2:  RCALL  2350
26D4:  MOVFF  03,1BE
26D8:  MOVFF  02,1BD
26DC:  MOVFF  01,1BC
26E0:  MOVFF  00,1BB
....................   temp *= 100; 
26E4:  MOVFF  1BE,255
26E8:  MOVFF  1BD,254
26EC:  MOVFF  1BC,253
26F0:  MOVFF  1BB,252
26F4:  MOVLB  2
26F6:  CLRF   x59
26F8:  CLRF   x58
26FA:  MOVLW  48
26FC:  MOVWF  x57
26FE:  MOVLW  85
2700:  MOVWF  x56
2702:  MOVLB  0
2704:  CALL   18EC
2708:  MOVFF  03,1BE
270C:  MOVFF  02,1BD
2710:  MOVFF  01,1BC
2714:  MOVFF  00,1BB
....................   temp += 25.0; 
2718:  BCF    FD8.1
271A:  MOVFF  1BE,230
271E:  MOVFF  1BD,22F
2722:  MOVFF  1BC,22E
2726:  MOVFF  1BB,22D
272A:  MOVLB  2
272C:  CLRF   x34
272E:  CLRF   x33
2730:  MOVLW  48
2732:  MOVWF  x32
2734:  MOVLW  83
2736:  MOVWF  x31
2738:  MOVLB  0
273A:  RCALL  2350
273C:  MOVFF  03,1BE
2740:  MOVFF  02,1BD
2744:  MOVFF  01,1BC
2748:  MOVFF  00,1BB
....................   t = (SINT)(temp*100); 
274C:  MOVFF  1BE,255
2750:  MOVFF  1BD,254
2754:  MOVFF  1BC,253
2758:  MOVFF  1BB,252
275C:  MOVLB  2
275E:  CLRF   x59
2760:  CLRF   x58
2762:  MOVLW  48
2764:  MOVWF  x57
2766:  MOVLW  85
2768:  MOVWF  x56
276A:  MOVLB  0
276C:  CALL   18EC
2770:  MOVFF  03,1C6
2774:  MOVFF  02,1C5
2778:  MOVFF  01,1C4
277C:  MOVFF  00,1C3
2780:  BRA    25C8
2782:  MOVFF  02,1C0
2786:  MOVFF  01,1BF
....................   return t; 
278A:  MOVLB  1
278C:  MOVFF  1BF,01
2790:  MOVFF  1C0,02
....................   } 
2794:  MOVLB  0
2796:  GOTO   2828 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
....................   { 
*
219E:  MOVLB  1
21A0:  CLRF   xBB
....................  // float temp; 
....................   byte t = 0; 
....................   t = (0 * 1); 
21A2:  CLRF   xBB
....................   t = (t + (0 * 10)); 
....................   t = t + ( (bit)setup.SOQPSK <<         2); 
21A4:  MOVLW  00
21A6:  MOVLB  0
21A8:  BTFSC  xB7.0
21AA:  MOVLW  01
21AC:  MOVWF  00
21AE:  RLCF   00,F
21B0:  RLCF   00,F
21B2:  MOVLW  FC
21B4:  ANDWF  00,F
21B6:  MOVF   00,W
21B8:  MOVLB  1
21BA:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.clock_polarity << 3); 
21BC:  MOVLW  00
21BE:  MOVLB  0
21C0:  BTFSC  xB0.0
21C2:  MOVLW  01
21C4:  MOVWF  00
21C6:  RLCF   00,F
21C8:  RLCF   00,F
21CA:  RLCF   00,F
21CC:  MOVLW  F8
21CE:  ANDWF  00,F
21D0:  MOVF   00,W
21D2:  MOVLB  1
21D4:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.clock_source <<   4); 
21D6:  MOVLW  00
21D8:  MOVLB  0
21DA:  BTFSC  xB2.0
21DC:  MOVLW  01
21DE:  MOVWF  00
21E0:  SWAPF  00,F
21E2:  MOVLW  F0
21E4:  ANDWF  00,F
21E6:  MOVF   00,W
21E8:  MOVLB  1
21EA:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.randomizer <<     5); 
21EC:  MOVLW  00
21EE:  MOVLB  0
21F0:  BTFSC  xB5.0
21F2:  MOVLW  01
21F4:  MOVWF  00
21F6:  SWAPF  00,F
21F8:  RLCF   00,F
21FA:  MOVLW  E0
21FC:  ANDWF  00,F
21FE:  MOVF   00,W
2200:  MOVLB  1
2202:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.data_polarity <<  6); 
2204:  MOVLW  00
2206:  MOVLB  0
2208:  BTFSC  xB1.0
220A:  MOVLW  01
220C:  MOVWF  00
220E:  SWAPF  00,F
2210:  RLCF   00,F
2212:  RLCF   00,F
2214:  MOVLW  C0
2216:  ANDWF  00,F
2218:  MOVF   00,W
221A:  MOVLB  1
221C:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.data_source <<    7); 
221E:  MOVLW  00
2220:  MOVLB  0
2222:  BTFSC  xB3.0
2224:  MOVLW  01
2226:  MOVWF  00
2228:  RRCF   00,W
222A:  CLRF   00
222C:  BTFSC  FD8.0
222E:  BSF    00.7
2230:  MOVF   00,W
2232:  MOVLB  1
2234:  ADDWF  xBB,F
....................    
....................   //  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................   return t; 
2236:  CLRF   03
2238:  MOVFF  1BB,01
223C:  MOVFF  03,02
....................   } 
2240:  MOVLB  0
2242:  GOTO   281C (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
....................   { 
....................  // float temp; 
....................   if (revp <= 580) 
2246:  MOVLB  1
2248:  MOVF   x08,W
224A:  SUBLW  02
224C:  BNC   225A
224E:  BNZ   2256
2250:  MOVF   x07,W
2252:  SUBLW  44
2254:  BNC   225A
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
2256:  BCF    xA1.0
....................       else 
2258:  BRA    225C
....................         revp_status = 1;//Q strcpy(revstat, "BAD"); 
225A:  BSF    xA1.0
....................  
....................   byte t = 0; 
225C:  CLRF   xBB
....................   t = (0 * 1); 
225E:  CLRF   xBB
....................   t = (t + (0 * 10)); 
....................   t = t + ( (bit)revp_status <<         2); 
2260:  MOVLW  00
2262:  BTFSC  xA1.0
2264:  MOVLW  01
2266:  MOVWF  00
2268:  RLCF   00,F
226A:  RLCF   00,F
226C:  MOVLW  FC
226E:  ANDWF  00,F
2270:  MOVF   00,W
2272:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.UART_Status << 3); 
2274:  MOVLW  00
2276:  MOVLB  0
2278:  BTFSC  xFC.0
227A:  MOVLW  01
227C:  MOVWF  00
227E:  RLCF   00,F
2280:  RLCF   00,F
2282:  RLCF   00,F
2284:  MOVLW  F8
2286:  ANDWF  00,F
2288:  MOVF   00,W
228A:  MOVLB  1
228C:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.rp <<   4); 
228E:  MOVLW  00
2290:  MOVLB  0
2292:  BTFSC  xF9.0
2294:  MOVLW  01
2296:  MOVWF  00
2298:  SWAPF  00,F
229A:  MOVLW  F0
229C:  ANDWF  00,F
229E:  MOVF   00,W
22A0:  MOVLB  1
22A2:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.pwr <<     5);//RF 
22A4:  MOVLW  00
22A6:  MOVLB  0
22A8:  BTFSC  xAD.0
22AA:  MOVLW  01
22AC:  MOVWF  00
22AE:  SWAPF  00,F
22B0:  RLCF   00,F
22B2:  MOVLW  E0
22B4:  ANDWF  00,F
22B6:  MOVF   00,W
22B8:  MOVLB  1
22BA:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.rc <<  6); 
22BC:  MOVLW  00
22BE:  MOVLB  0
22C0:  BTFSC  xF7.0
22C2:  MOVLW  01
22C4:  MOVWF  00
22C6:  SWAPF  00,F
22C8:  RLCF   00,F
22CA:  RLCF   00,F
22CC:  MOVLW  C0
22CE:  ANDWF  00,F
22D0:  MOVF   00,W
22D2:  MOVLB  1
22D4:  ADDWF  xBB,F
....................   t = t + ( (bit)setup.cot <<    7); //RB 
22D6:  MOVLW  00
22D8:  MOVLB  0
22DA:  BTFSC  xF5.0
22DC:  MOVLW  01
22DE:  MOVWF  00
22E0:  RRCF   00,W
22E2:  CLRF   00
22E4:  BTFSC  FD8.0
22E6:  BSF    00.7
22E8:  MOVF   00,W
22EA:  MOVLB  1
22EC:  ADDWF  xBB,F
....................    
....................   
....................   return t; 
22EE:  CLRF   03
22F0:  MOVFF  1BB,01
22F4:  MOVFF  03,02
....................   } 
22F8:  MOVLB  0
22FA:  GOTO   2822 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
3368:  CALL   29F8
336C:  MOVFF  02,22E
3370:  MOVFF  01,22D
....................   setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
3374:  MOVFF  22D,FE
....................   if (idx <= 40 && idx >= 20) 
3378:  MOVLB  2
337A:  MOVF   x2E,F
337C:  BNZ   33D0
337E:  MOVF   x2D,W
3380:  SUBLW  28
3382:  BNC   33D0
3384:  MOVF   x2E,F
3386:  BNZ   338E
3388:  MOVF   x2D,W
338A:  SUBLW  13
338C:  BC    33D0
....................     { 
....................     setup.power_level = idx - 20; 
338E:  MOVLW  14
3390:  SUBWF  x2D,W
3392:  MOVLB  0
3394:  MOVWF  xBB
3396:  MOVLW  00
3398:  MOVLB  2
339A:  SUBWFB x2E,W
339C:  MOVLB  0
339E:  MOVWF  xBC
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
33A0:  BCF    FD8.0
33A2:  RLCF   xBB,W
33A4:  MOVWF  02
33A6:  RLCF   xBC,W
33A8:  MOVWF  03
33AA:  MOVF   02,W
33AC:  ADDLW  C4
33AE:  MOVWF  FE9
33B0:  MOVLW  00
33B2:  ADDWFC 03,W
33B4:  MOVWF  FEA
33B6:  MOVFF  FEC,03
33BA:  MOVF   FED,F
33BC:  MOVFF  FEF,1C
33C0:  MOVFF  03,1D
....................     return 1; 
33C4:  MOVLW  01
33C6:  MOVWF  01
33C8:  MOVLW  00
33CA:  MOVWF  02
33CC:  BRA    33D6
33CE:  MOVLB  2
....................     } 
....................   return 0; 
33D0:  MOVLW  00
33D2:  MOVWF  01
33D4:  MOVWF  02
33D6:  MOVLB  0
....................   } 
33D8:  GOTO   4ADA (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
32F4:  CALL   29F8
32F8:  MOVFF  02,22E
32FC:  MOVFF  01,22D
....................   setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
3300:  MOVFF  22D,FD
....................   if (idx <= 40 && idx >= 20) 
3304:  MOVLB  2
3306:  MOVF   x2E,F
3308:  BNZ   335C
330A:  MOVF   x2D,W
330C:  SUBLW  28
330E:  BNC   335C
3310:  MOVF   x2E,F
3312:  BNZ   331A
3314:  MOVF   x2D,W
3316:  SUBLW  13
3318:  BC    335C
....................     { 
....................     setup.power_low_level = idx - 20; 
331A:  MOVLW  14
331C:  SUBWF  x2D,W
331E:  MOVLB  0
3320:  MOVWF  xF3
3322:  MOVLW  00
3324:  MOVLB  2
3326:  SUBWFB x2E,W
3328:  MOVLB  0
332A:  MOVWF  xF4
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
332C:  BCF    FD8.0
332E:  RLCF   xF3,W
3330:  MOVWF  02
3332:  RLCF   xF4,W
3334:  MOVWF  03
3336:  MOVF   02,W
3338:  ADDLW  C4
333A:  MOVWF  FE9
333C:  MOVLW  00
333E:  ADDWFC 03,W
3340:  MOVWF  FEA
3342:  MOVFF  FEC,03
3346:  MOVF   FED,F
3348:  MOVFF  FEF,1A
334C:  MOVFF  03,1B
....................     return 1; 
3350:  MOVLW  01
3352:  MOVWF  01
3354:  MOVLW  00
3356:  MOVWF  02
3358:  BRA    3362
335A:  MOVLB  2
....................     } 
....................   return 0; 
335C:  MOVLW  00
335E:  MOVWF  01
3360:  MOVWF  02
3362:  MOVLB  0
....................   } 
3364:  GOTO   4A30 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... The message structure is defined below. 
....................  
.................... Byte# Description Remarks 
.................... 1 Header  Constant - 47 Hex 
.................... 2 Temperature Send 2's complement 
.................... 3 Power level 
.................... 4 Current 
.................... 5 PLL lock 
.................... 6 Checksum  Checksum of all preceding bytes 
....................  
.................... Table 1 - Status Packet structure 
....................  
.................... The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
....................   { 
*
2812:  MOVLB  1
2814:  CLRF   xB6
2816:  CLRF   xB5
....................   UINT chksum = 0, idx; 
....................   byte BitsStatus1,BitsStatus2; 
....................   BitsStatus1 = Bits_status1(); 
2818:  MOVLB  0
281A:  BRA    219E
281C:  MOVFF  01,1B9
....................   BitsStatus2 = Bits_status2(); 
2820:  BRA    2246
2822:  MOVFF  01,1BA
....................   
....................   current_temperature = read_temperature(); 
2826:  BRA    2606
2828:  MOVFF  02,10A
282C:  MOVFF  01,109
....................   //measured_current = read_current(); 
....................   //power_level_stat = current_power; 
....................   status_buffer[0] = 0xFB; // Synchronization Byte 1 
2830:  MOVLW  FB
2832:  MOVLB  1
2834:  MOVWF  x13
....................   status_buffer[1] = 0x60; // Synchronization Byte 2 
2836:  MOVLW  60
2838:  MOVWF  x14
....................   status_buffer[2] = TX_Counter; // The counter increments by one each time an update is sent 0 to 255 
283A:  MOVFF  10F,115
....................   status_buffer[3] = setup.frequency / 256; // MSB TX frequency  
283E:  MOVFF  BA,116
....................   status_buffer[4] = setup.frequency % 256; // LSB TX frequency  
2842:  MOVFF  B9,117
2846:  MOVLB  1
....................   status_buffer[5] = setup.mode; // State of modulation state 
2848:  MOVFF  AF,118
....................   status_buffer[6] = BitsStatus1; //0x00; // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
284C:  MOVFF  1B9,119
....................   status_buffer[7] = current_temperature / 256; //MSB TX Temperature  
2850:  MOVFF  10A,1BC
2854:  MOVFF  109,1BB
2858:  MOVLW  01
285A:  MOVWF  xBE
285C:  CLRF   xBD
285E:  MOVLB  0
2860:  RCALL  279A
2862:  MOVFF  01,11A
2866:  MOVLB  1
....................   status_buffer[8] = current_temperature % 256; //LSB TX Temperature  
2868:  MOVFF  10A,1BC
286C:  MOVFF  109,1BB
2870:  MOVLW  01
2872:  MOVWF  xBE
2874:  CLRF   xBD
2876:  MOVLB  0
2878:  RCALL  279A
287A:  MOVFF  00,11B
287E:  MOVLB  1
....................   status_buffer[9] = setup.bitrate / 256; //MSB Bit rate state ,  
2880:  MOVFF  AC,11C
....................   status_buffer[10] = setup.bitrate % 256; //LSB Bit rate state  
2884:  MOVFF  AB,11D
2888:  MOVLB  1
....................   status_buffer[11] = setup.power_level + 20; // TX power in dBm 
288A:  MOVLW  14
288C:  MOVLB  0
288E:  ADDWF  xBB,W
2890:  MOVLB  1
2892:  MOVWF  x1E
....................   status_buffer[12] = setup.internal_pattern; //Data type while using internal data 
2894:  MOVFF  B4,11F
....................   status_buffer[13] = BitsStatus2; // Bits status of: Reverse Power N/A 
2898:  MOVFF  1BA,120
....................   status_buffer[14] = setup.bitlow_power_level ;// TX low power in dBm (VL) 
289C:  MOVFF  FD,121
....................   status_buffer[15] = setup.bitpower_level ;// TX low power in dBm (VP) 
28A0:  MOVFF  FE,122
....................   status_buffer[16] = 0xAA;//revp; N/A FOR Now // need to be clilired Revers power 
28A4:  MOVLW  AA
28A6:  MOVWF  x23
....................   status_buffer[17] = 0xAA;//N/A FOR Now((VERSION(12)*10) + VERSION(14));// TX VERSION 
28A8:  MOVWF  x24
....................   status_buffer[18] = setup.unit_ID / 256;//MSB TX Serial number 
28AA:  MOVFF  F2,125
....................   status_buffer[19] = setup.unit_ID % 256;//LSB TX Serial number 
28AE:  MOVFF  F1,126
28B2:  MOVLB  1
....................   status_buffer[20] = 0xAA;// Spare 
28B4:  MOVLW  AA
28B6:  MOVWF  x27
....................   status_buffer[21] = 0xAA;// Spare 
28B8:  MOVWF  x28
....................    
....................   for (idx = 0; idx < 23; idx++) 
28BA:  CLRF   xB8
28BC:  CLRF   xB7
28BE:  MOVF   xB8,F
28C0:  BNZ   28E4
28C2:  MOVF   xB7,W
28C4:  SUBLW  16
28C6:  BNC   28E4
....................     { 
....................     chksum += status_buffer[idx]; 
28C8:  MOVLW  13
28CA:  ADDWF  xB7,W
28CC:  MOVWF  FE9
28CE:  MOVLW  01
28D0:  ADDWFC xB8,W
28D2:  MOVWF  FEA
28D4:  MOVF   FEF,W
28D6:  ADDWF  xB5,F
28D8:  MOVLW  00
28DA:  ADDWFC xB6,F
....................     } 
28DC:  INCF   xB7,F
28DE:  BTFSC  FD8.2
28E0:  INCF   xB8,F
28E2:  BRA    28BE
....................   status_buffer[22] =(chksum ) / 256;//& 255 
28E4:  MOVFF  1B6,129
....................   status_buffer[23] =(chksum ) % 256;//& 255 
28E8:  MOVFF  1B5,12A
....................   } 
28EC:  MOVLB  0
28EE:  GOTO   6ABE (RETURN)
.................... /* 
....................   for (idx = 0; idx < 5; idx++) 
....................     { 
....................     chksum += status_buffer[idx]; 
....................     } 
....................   status_buffer[5] =chksum & 255; 
....................   } 
....................  */  
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
6032:  MOVLW  02
6034:  MOVLB  1
6036:  MOVWF  xCE
....................   comm_ptr = 0; 
6038:  CLRF   x40
....................   switch (toupper(get_char())) 
....................     { 
603A:  MOVLB  0
603C:  CALL   293C
6040:  MOVFF  02,206
6044:  MOVFF  01,205
6048:  MOVLB  2
604A:  MOVF   x06,F
604C:  BNZ   6054
604E:  MOVF   x05,W
6050:  SUBLW  60
6052:  BC    6064
6054:  MOVF   x06,F
6056:  BNZ   6064
6058:  MOVF   x05,W
605A:  SUBLW  7A
605C:  BNC   6064
605E:  MOVF   x05,W
6060:  ANDLW  DF
6062:  BRA    6066
6064:  MOVF   x05,W
6066:  XORLW  48
6068:  MOVLB  0
606A:  BZ    60BA
606C:  XORLW  09
606E:  BZ    60C2
6070:  XORLW  02
6072:  BTFSC  FD8.2
6074:  BRA    6196
6076:  XORLW  07
6078:  BTFSC  FD8.2
607A:  BRA    6274
607C:  XORLW  0B
607E:  BTFSC  FD8.2
6080:  BRA    62F2
6082:  XORLW  1D
6084:  BTFSC  FD8.2
6086:  BRA    6330
6088:  XORLW  10
608A:  BTFSC  FD8.2
608C:  BRA    6370
608E:  XORLW  05
6090:  BTFSC  FD8.2
6092:  BRA    63C8
6094:  XORLW  01
6096:  BTFSC  FD8.2
6098:  BRA    64E4
609A:  XORLW  15
609C:  BTFSC  FD8.2
609E:  BRA    6572
60A0:  XORLW  07
60A2:  BTFSC  FD8.2
60A4:  BRA    6618
60A6:  XORLW  65
60A8:  BTFSC  FD8.2
60AA:  BRA    66E0
60AC:  XORLW  03
60AE:  BTFSC  FD8.2
60B0:  BRA    66EE
60B2:  XORLW  01
60B4:  BTFSC  FD8.2
60B6:  BRA    66F8
60B8:  BRA    6706
....................     case 'H': 
....................       list_help1(); 
60BA:  BRA    5A80
....................       return 0; 
60BC:  MOVLW  00
60BE:  MOVWF  01
60C0:  BRA    6710
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
60C2:  CALL   293C
60C6:  MOVFF  02,206
60CA:  MOVFF  01,205
60CE:  MOVLB  2
60D0:  MOVF   x06,F
60D2:  BNZ   60DA
60D4:  MOVF   x05,W
60D6:  SUBLW  60
60D8:  BC    60EA
60DA:  MOVF   x06,F
60DC:  BNZ   60EA
60DE:  MOVF   x05,W
60E0:  SUBLW  7A
60E2:  BNC   60EA
60E4:  MOVF   x05,W
60E6:  ANDLW  DF
60E8:  BRA    60EC
60EA:  MOVF   x05,W
60EC:  XORLW  54
60EE:  MOVLB  0
60F0:  BZ    60F8
60F2:  XORLW  1D
60F4:  BZ    6102
60F6:  BRA    6194
....................         case 'T': 
....................           idx = get_int(); 
60F8:  CALL   29F8
60FC:  MOVFF  01,1CF
....................  
....................           // write to attenuator 
....................           break; 
6100:  BRA    6194
....................         case 'I': 
....................           idx = get_int(); 
6102:  CALL   29F8
6106:  MOVFF  01,1CF
....................           if (idx && idx < 4) 
610A:  MOVLB  1
610C:  MOVF   xCF,F
610E:  BZ    6192
6110:  MOVF   xCF,W
6112:  SUBLW  03
6114:  BNC   6192
....................             { 
....................             set_adc_channel(idx-1); 
6116:  MOVLW  01
6118:  SUBWF  xCF,W
611A:  MOVLB  2
611C:  MOVWF  x05
611E:  RLCF   x05,W
6120:  MOVWF  00
6122:  RLCF   00,F
6124:  MOVLW  FC
6126:  ANDWF  00,F
6128:  MOVF   FC2,W
612A:  ANDLW  83
612C:  IORWF  00,W
612E:  MOVWF  FC2
....................             delay_us(30); 
6130:  MOVLW  27
6132:  MOVWF  00
6134:  DECFSZ 00,F
6136:  BRA    6134
6138:  BRA    613A
....................             value = read_adc(); 
613A:  BSF    FC2.1
613C:  BTFSC  FC2.1
613E:  BRA    613C
6140:  MOVFF  FC3,203
6144:  MOVFF  FC4,204
....................             sprintf(buf, "$AR %lu\r", value); 
6148:  MOVLW  01
614A:  MOVLB  1
614C:  MOVWF  xA3
614E:  MOVLW  D3
6150:  MOVWF  xA2
6152:  MOVLW  A0
6154:  MOVWF  FF6
6156:  MOVLW  0B
6158:  MOVWF  FF7
615A:  MOVLW  04
615C:  MOVLB  2
615E:  MOVWF  x33
6160:  MOVLB  0
6162:  CALL   2EA8
6166:  MOVLW  10
6168:  MOVWF  FE9
616A:  MOVFF  204,234
616E:  MOVFF  203,233
6172:  CALL   2ED0
6176:  MOVLW  0D
6178:  MOVLB  2
617A:  MOVWF  x3C
617C:  MOVLB  0
617E:  CALL   2E86
....................             COM1_send_str(buf); 
6182:  MOVLW  01
6184:  MOVLB  2
6186:  MOVWF  x6C
6188:  MOVLW  D3
618A:  MOVWF  x6B
618C:  MOVLB  0
618E:  CALL   20D6
....................             } 
....................           break; 
6192:  MOVLB  0
....................         } 
....................       break; 
6194:  BRA    670C
....................     case 'C': 
....................       if (chr = toupper(get_char()) == 'F') 
6196:  CALL   293C
619A:  MOVFF  02,206
619E:  MOVFF  01,205
61A2:  MOVLB  2
61A4:  MOVF   x06,F
61A6:  BNZ   61AE
61A8:  MOVF   x05,W
61AA:  SUBLW  60
61AC:  BC    61BE
61AE:  MOVF   x06,F
61B0:  BNZ   61BE
61B2:  MOVF   x05,W
61B4:  SUBLW  7A
61B6:  BNC   61BE
61B8:  MOVF   x05,W
61BA:  ANDLW  DF
61BC:  BRA    61C0
61BE:  MOVF   x05,W
61C0:  SUBLW  46
61C2:  BZ    61C8
61C4:  MOVLW  00
61C6:  BRA    61CA
61C8:  MOVLW  01
61CA:  MOVLB  1
61CC:  MOVWF  xCE
61CE:  MOVF   xCE,F
61D0:  BZ    6204
....................         { 
....................         freq = get_frequency(); 
61D2:  MOVLB  0
61D4:  CALL   2F8C
61D8:  MOVLB  1
61DA:  CLRF   xFE
61DC:  CLRF   xFD
61DE:  MOVFF  02,1FC
61E2:  MOVFF  01,1FB
....................         PLL_compute_freq_parameters(freq); 
61E6:  MOVFF  1FC,206
61EA:  MOVFF  1FB,205
61EE:  MOVFF  1FC,236
61F2:  MOVFF  1FB,235
61F6:  MOVLB  0
61F8:  CALL   129C
....................         PLL_update(); 
61FC:  CALL   156C
....................         } 
....................       else if (chr == 'P') 
6200:  BRA    626E
6202:  MOVLB  1
6204:  MOVF   xCE,W
6206:  SUBLW  50
6208:  BNZ   6270
....................         { 
....................         idx = get_int(); 
620A:  MOVLB  0
620C:  CALL   29F8
6210:  MOVFF  01,1CF
....................         if (idx < 2) 
6214:  MOVLB  1
6216:  MOVF   xCF,W
6218:  SUBLW  01
621A:  BNC   6270
....................           { 
....................           setup.clock_polarity = idx & 1; 
621C:  MOVF   xCF,W
621E:  ANDLW  01
6220:  MOVLB  0
6222:  MOVWF  xB0
....................           sprintf(buf, "$CP %u\r", idx); 
6224:  MOVLW  01
6226:  MOVLB  1
6228:  MOVWF  xA3
622A:  MOVLW  D3
622C:  MOVWF  xA2
622E:  MOVLW  AA
6230:  MOVWF  FF6
6232:  MOVLW  0B
6234:  MOVWF  FF7
6236:  MOVLW  04
6238:  MOVLB  2
623A:  MOVWF  x33
623C:  MOVLB  0
623E:  CALL   2EA8
6242:  MOVFF  1CF,233
6246:  MOVLW  1B
6248:  MOVLB  2
624A:  MOVWF  x34
624C:  MOVLB  0
624E:  CALL   3020
6252:  MOVLW  0D
6254:  MOVLB  2
6256:  MOVWF  x3C
6258:  MOVLB  0
625A:  CALL   2E86
....................           COM1_send_str(buf); 
625E:  MOVLW  01
6260:  MOVLB  2
6262:  MOVWF  x6C
6264:  MOVLW  D3
6266:  MOVWF  x6B
6268:  MOVLB  0
626A:  CALL   20D6
626E:  MOVLB  1
....................           } 
....................         } 
....................       break; 
6270:  MOVLB  0
6272:  BRA    670C
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
6274:  CALL   293C
6278:  MOVFF  02,206
627C:  MOVFF  01,205
6280:  MOVLB  2
6282:  MOVF   x06,F
6284:  BNZ   628C
6286:  MOVF   x05,W
6288:  SUBLW  60
628A:  BC    629C
628C:  MOVF   x06,F
628E:  BNZ   629C
6290:  MOVF   x05,W
6292:  SUBLW  7A
6294:  BNC   629C
6296:  MOVF   x05,W
6298:  ANDLW  DF
629A:  BRA    629E
629C:  MOVF   x05,W
629E:  SUBLW  49
62A0:  BNZ   62EE
....................         { 
....................         idx = input_c(); // change to REAL input ports 
62A2:  MOVFF  F82,1CF
....................         sprintf(buf, "$DR %02X\r", idx); 
62A6:  MOVLW  01
62A8:  MOVLB  1
62AA:  MOVWF  xA3
62AC:  MOVLW  D3
62AE:  MOVWF  xA2
62B0:  MOVLW  B2
62B2:  MOVWF  FF6
62B4:  MOVLW  0B
62B6:  MOVWF  FF7
62B8:  MOVLW  04
62BA:  MOVLB  2
62BC:  MOVWF  x33
62BE:  MOVLB  0
62C0:  CALL   2EA8
62C4:  MOVFF  1CF,205
62C8:  MOVLW  37
62CA:  MOVLB  2
62CC:  MOVWF  x06
62CE:  MOVLB  0
62D0:  RCALL  5C98
62D2:  MOVLW  0D
62D4:  MOVLB  2
62D6:  MOVWF  x3C
62D8:  MOVLB  0
62DA:  CALL   2E86
....................         COM1_send_str(buf); 
62DE:  MOVLW  01
62E0:  MOVLB  2
62E2:  MOVWF  x6C
62E4:  MOVLW  D3
62E6:  MOVWF  x6B
62E8:  MOVLB  0
62EA:  CALL   20D6
....................         } 
....................       break; 
62EE:  MOVLB  0
62F0:  BRA    670C
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
62F2:  CALL   293C
62F6:  MOVFF  02,206
62FA:  MOVFF  01,205
62FE:  MOVLB  2
6300:  MOVF   x06,F
6302:  BNZ   630A
6304:  MOVF   x05,W
6306:  SUBLW  60
6308:  BC    631A
630A:  MOVF   x06,F
630C:  BNZ   631A
630E:  MOVF   x05,W
6310:  SUBLW  7A
6312:  BNC   631A
6314:  MOVF   x05,W
6316:  ANDLW  DF
6318:  BRA    631C
631A:  MOVF   x05,W
631C:  SUBLW  54
631E:  BNZ   632C
....................         { 
....................         value = get_hex(); 
6320:  MOVLB  0
6322:  RCALL  5CE2
6324:  MOVFF  01,204
6328:  MOVFF  00,203
....................         // output bits 
....................         } 
....................       break; 
632C:  MOVLB  0
632E:  BRA    670C
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
6330:  CALL   293C
6334:  MOVFF  02,206
6338:  MOVFF  01,205
633C:  MOVLB  2
633E:  MOVF   x06,F
6340:  BNZ   6348
6342:  MOVF   x05,W
6344:  SUBLW  60
6346:  BC    6358
6348:  MOVF   x06,F
634A:  BNZ   6358
634C:  MOVF   x05,W
634E:  SUBLW  7A
6350:  BNC   6358
6352:  MOVF   x05,W
6354:  ANDLW  DF
6356:  BRA    635A
6358:  MOVF   x05,W
635A:  SUBLW  44
635C:  BNZ   636C
....................         { 
....................         output_high(D2A_RESET); 
635E:  BSF    F8A.3
....................         delay_ms(100); 
6360:  MOVLW  64
6362:  MOVWF  x42
6364:  MOVLB  0
6366:  CALL   0EAA
....................         output_low(D2A_RESET); 
636A:  BCF    F8A.3
....................         } 
....................       break; 
636C:  MOVLB  0
636E:  BRA    670C
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
6370:  CALL   293C
6374:  MOVFF  02,206
6378:  MOVFF  01,205
637C:  MOVLB  2
637E:  MOVF   x06,F
6380:  BNZ   6388
6382:  MOVF   x05,W
6384:  SUBLW  60
6386:  BC    6398
6388:  MOVF   x06,F
638A:  BNZ   6398
638C:  MOVF   x05,W
638E:  SUBLW  7A
6390:  BNC   6398
6392:  MOVF   x05,W
6394:  ANDLW  DF
6396:  BRA    639A
6398:  MOVF   x05,W
639A:  SUBLW  52
639C:  BNZ   63C4
....................         { 
....................         bitrate = str_to_long(); 
639E:  MOVLB  0
63A0:  BRA    5DDA
63A2:  MOVFF  03,202
63A6:  MOVFF  02,201
63AA:  MOVFF  01,200
63AE:  MOVFF  00,1FF
....................         set_bitrate(bitrate); 
63B2:  MOVFF  200,206
63B6:  MOVFF  1FF,205
63BA:  MOVFF  200,208
63BE:  MOVFF  1FF,207
63C2:  BRA    5E96
....................         } 
....................       break; 
63C4:  MOVLB  0
63C6:  BRA    670C
....................     case 'G': 
....................       device = get_char(); 
63C8:  CALL   293C
63CC:  MOVFF  01,1D0
....................       addr = get_hex(); 
63D0:  RCALL  5CE2
63D2:  MOVFF  00,1D1
....................       switch (toupper(device)) 
....................         { 
63D6:  MOVLB  1
63D8:  MOVF   xD0,W
63DA:  SUBLW  60
63DC:  BC    63EA
63DE:  MOVF   xD0,W
63E0:  SUBLW  7A
63E2:  BNC   63EA
63E4:  MOVF   xD0,W
63E6:  ANDLW  DF
63E8:  BRA    63EC
63EA:  MOVF   xD0,W
63EC:  XORLW  46
63EE:  MOVLB  0
63F0:  BZ    63F8
63F2:  XORLW  02
63F4:  BZ    6472
63F6:  BRA    64E2
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
63F8:  MOVFF  1D1,205
63FC:  MOVLW  01
63FE:  MOVLB  2
6400:  MOVWF  x07
6402:  MOVLW  D2
6404:  MOVWF  x06
6406:  MOVLB  0
6408:  BRA    5F26
640A:  MOVFF  01,1CE
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
640E:  MOVLW  01
6410:  MOVLB  1
6412:  MOVWF  xA3
6414:  MOVLW  D3
6416:  MOVWF  xA2
6418:  MOVLW  BC
641A:  MOVWF  FF6
641C:  MOVLW  0B
641E:  MOVWF  FF7
6420:  MOVLW  07
6422:  MOVLB  2
6424:  MOVWF  x33
6426:  MOVLB  0
6428:  CALL   2EA8
642C:  MOVFF  1D1,205
6430:  MOVLW  37
6432:  MOVLB  2
6434:  MOVWF  x06
6436:  MOVLB  0
6438:  RCALL  5C98
643A:  MOVLW  20
643C:  MOVLB  2
643E:  MOVWF  x3C
6440:  MOVLB  0
6442:  CALL   2E86
6446:  MOVFF  1CE,205
644A:  MOVLW  37
644C:  MOVLB  2
644E:  MOVWF  x06
6450:  MOVLB  0
6452:  RCALL  5C98
6454:  MOVLW  0D
6456:  MOVLB  2
6458:  MOVWF  x3C
645A:  MOVLB  0
645C:  CALL   2E86
....................           COM1_send_str(buf); 
6460:  MOVLW  01
6462:  MOVLB  2
6464:  MOVWF  x6C
6466:  MOVLW  D3
6468:  MOVWF  x6B
646A:  MOVLB  0
646C:  CALL   20D6
....................           break; 
6470:  BRA    64E2
....................         case 'D': 
....................           data = read_D2A(addr); 
6472:  MOVFF  1D1,205
6476:  BRA    5FD0
6478:  MOVFF  01,1D2
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
647C:  MOVLW  01
647E:  MOVLB  1
6480:  MOVWF  xA3
6482:  MOVLW  D3
6484:  MOVWF  xA2
6486:  MOVLW  CE
6488:  MOVWF  FF6
648A:  MOVLW  0B
648C:  MOVWF  FF7
648E:  MOVLW  07
6490:  MOVLB  2
6492:  MOVWF  x33
6494:  MOVLB  0
6496:  CALL   2EA8
649A:  MOVFF  1D1,205
649E:  MOVLW  37
64A0:  MOVLB  2
64A2:  MOVWF  x06
64A4:  MOVLB  0
64A6:  CALL   5C98
64AA:  MOVLW  20
64AC:  MOVLB  2
64AE:  MOVWF  x3C
64B0:  MOVLB  0
64B2:  CALL   2E86
64B6:  MOVFF  1D2,205
64BA:  MOVLW  37
64BC:  MOVLB  2
64BE:  MOVWF  x06
64C0:  MOVLB  0
64C2:  CALL   5C98
64C6:  MOVLW  0D
64C8:  MOVLB  2
64CA:  MOVWF  x3C
64CC:  MOVLB  0
64CE:  CALL   2E86
....................           COM1_send_str(buf); 
64D2:  MOVLW  01
64D4:  MOVLB  2
64D6:  MOVWF  x6C
64D8:  MOVLW  D3
64DA:  MOVWF  x6B
64DC:  MOVLB  0
64DE:  CALL   20D6
....................           break; 
....................         } 
....................       break; 
64E2:  BRA    670C
....................     case 'F': // fill tables 
....................       skip_spc(); 
64E4:  CALL   295C
....................       idx = get_char(); // get table designator 
64E8:  CALL   293C
64EC:  MOVFF  01,1CF
....................       addr = get_int(); // get table index 
64F0:  CALL   29F8
64F4:  MOVFF  01,1D1
....................       value = get_int(); // get value to put into table 
64F8:  CALL   29F8
64FC:  MOVFF  02,204
6500:  MOVFF  01,203
....................       switch (toupper(idx)) 
....................         { 
6504:  MOVLB  1
6506:  MOVF   xCF,W
6508:  SUBLW  60
650A:  BC    6518
650C:  MOVF   xCF,W
650E:  SUBLW  7A
6510:  BNC   6518
6512:  MOVF   xCF,W
6514:  ANDLW  DF
6516:  BRA    651A
6518:  MOVF   xCF,W
651A:  XORLW  4E
651C:  MOVLB  0
651E:  BZ    6526
6520:  XORLW  1E
6522:  BZ    654C
6524:  BRA    6570
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
6526:  MOVLB  1
6528:  MOVF   xD1,W
652A:  SUBLW  02
652C:  BNC   6548
....................             { 
....................             setup.negative_voltage[addr] = value; 
652E:  BCF    FD8.0
6530:  RLCF   xD1,W
6532:  CLRF   03
6534:  ADDLW  BE
6536:  MOVWF  FE9
6538:  MOVLW  00
653A:  ADDWFC 03,W
653C:  MOVWF  FEA
653E:  MOVFF  204,FEC
6542:  MOVF   FED,F
6544:  MOVFF  203,FEF
....................             } 
....................           break; 
6548:  MOVLB  0
654A:  BRA    6570
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
654C:  MOVLB  1
654E:  MOVF   xD1,W
6550:  SUBLW  14
6552:  BNC   656E
....................             { 
....................             setup.power_in[addr] = value; 
6554:  BCF    FD8.0
6556:  RLCF   xD1,W
6558:  CLRF   03
655A:  ADDLW  C4
655C:  MOVWF  FE9
655E:  MOVLW  00
6560:  ADDWFC 03,W
6562:  MOVWF  FEA
6564:  MOVFF  204,FEC
6568:  MOVF   FED,F
656A:  MOVFF  203,FEF
....................             } 
....................           break; 
656E:  MOVLB  0
....................         } 
....................       break; 
6570:  BRA    670C
....................     case 'S': 
....................       device = get_char(); 
6572:  CALL   293C
6576:  MOVFF  01,1D0
....................       addr = get_hex(); 
657A:  CALL   5CE2
657E:  MOVFF  00,1D1
....................       data = get_hex(); 
6582:  CALL   5CE2
6586:  MOVFF  00,1D2
....................       switch (toupper(device)) 
....................         { 
658A:  MOVLB  1
658C:  MOVF   xD0,W
658E:  SUBLW  60
6590:  BC    659E
6592:  MOVF   xD0,W
6594:  SUBLW  7A
6596:  BNC   659E
6598:  MOVF   xD0,W
659A:  ANDLW  DF
659C:  BRA    65A0
659E:  MOVF   xD0,W
65A0:  XORLW  46
65A2:  MOVLB  0
65A4:  BZ    65B0
65A6:  XORLW  02
65A8:  BZ    65E2
65AA:  XORLW  12
65AC:  BZ    6606
65AE:  BRA    6616
....................         case 'F': 
....................           buf[0] = addr; 
65B0:  MOVFF  1D1,1D3
....................           buf[1] = data; 
65B4:  MOVFF  1D2,1D4
....................           FPGA_image[addr] = data; 
65B8:  CLRF   03
65BA:  MOVLB  1
65BC:  MOVF   xD1,W
65BE:  ADDLW  43
65C0:  MOVWF  FE9
65C2:  MOVLW  01
65C4:  ADDWFC 03,W
65C6:  MOVWF  FEA
65C8:  MOVFF  1D2,FEF
....................           send_FPGA_command(2, buf); 
65CC:  MOVLW  02
65CE:  MOVLB  2
65D0:  MOVWF  x42
65D2:  MOVLW  01
65D4:  MOVWF  x44
65D6:  MOVLW  D3
65D8:  MOVWF  x43
65DA:  MOVLB  0
65DC:  CALL   1654
....................           break; 
65E0:  BRA    6616
....................         case 'D': 
....................           D2A_image[addr] = data; 
65E2:  CLRF   03
65E4:  MOVLB  1
65E6:  MOVF   xD1,W
65E8:  ADDLW  63
65EA:  MOVWF  FE9
65EC:  MOVLW  01
65EE:  ADDWFC 03,W
65F0:  MOVWF  FEA
65F2:  MOVFF  1D2,FEF
....................           write_D2A(addr, data); 
65F6:  MOVFF  1D1,205
65FA:  MOVFF  1D2,206
65FE:  MOVLB  0
6600:  CALL   577C
....................           break; 
6604:  BRA    6616
....................         case 'V': 
....................           allow_write = 2975; 
6606:  MOVLW  0B
6608:  MOVLB  1
660A:  MOVWF  x02
660C:  MOVLW  9F
660E:  MOVWF  x01
....................           write_setup(); 
6610:  MOVLB  0
6612:  CALL   310C
....................           break; 
....................         } 
....................       break; 
6616:  BRA    670C
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
6618:  CALL   293C
661C:  MOVFF  02,206
6620:  MOVFF  01,205
6624:  MOVLB  2
6626:  MOVF   x06,F
6628:  BNZ   6630
662A:  MOVF   x05,W
662C:  SUBLW  60
662E:  BC    6640
6630:  MOVF   x06,F
6632:  BNZ   6640
6634:  MOVF   x05,W
6636:  SUBLW  7A
6638:  BNC   6640
663A:  MOVF   x05,W
663C:  ANDLW  DF
663E:  BRA    6642
6640:  MOVF   x05,W
6642:  SUBLW  54
6644:  BNZ   66DC
....................         if (toupper(get_char()) == 'C') 
6646:  MOVLB  0
6648:  CALL   293C
664C:  MOVFF  02,206
6650:  MOVFF  01,205
6654:  MOVLB  2
6656:  MOVF   x06,F
6658:  BNZ   6660
665A:  MOVF   x05,W
665C:  SUBLW  60
665E:  BC    6670
6660:  MOVF   x06,F
6662:  BNZ   6670
6664:  MOVF   x05,W
6666:  SUBLW  7A
6668:  BNC   6670
666A:  MOVF   x05,W
666C:  ANDLW  DF
666E:  BRA    6672
6670:  MOVF   x05,W
6672:  SUBLW  43
6674:  BNZ   66DC
....................           if (toupper(get_char()) == 'C') 
6676:  MOVLB  0
6678:  CALL   293C
667C:  MOVFF  02,206
6680:  MOVFF  01,205
6684:  MOVLB  2
6686:  MOVF   x06,F
6688:  BNZ   6690
668A:  MOVF   x05,W
668C:  SUBLW  60
668E:  BC    66A0
6690:  MOVF   x06,F
6692:  BNZ   66A0
6694:  MOVF   x05,W
6696:  SUBLW  7A
6698:  BNC   66A0
669A:  MOVF   x05,W
669C:  ANDLW  DF
669E:  BRA    66A2
66A0:  MOVF   x05,W
66A2:  SUBLW  43
66A4:  BNZ   66DC
....................             if (toupper(get_char()) == 'P') 
66A6:  MOVLB  0
66A8:  CALL   293C
66AC:  MOVFF  02,206
66B0:  MOVFF  01,205
66B4:  MOVLB  2
66B6:  MOVF   x06,F
66B8:  BNZ   66C0
66BA:  MOVF   x05,W
66BC:  SUBLW  60
66BE:  BC    66D0
66C0:  MOVF   x06,F
66C2:  BNZ   66D0
66C4:  MOVF   x05,W
66C6:  SUBLW  7A
66C8:  BNC   66D0
66CA:  MOVF   x05,W
66CC:  ANDLW  DF
66CE:  BRA    66D2
66D0:  MOVF   x05,W
66D2:  SUBLW  50
66D4:  BNZ   66DC
....................               ttccp = 1; 
66D6:  MOVLW  01
66D8:  MOVLB  1
66DA:  MOVWF  x41
....................       break; 
66DC:  MOVLB  0
66DE:  BRA    670C
....................     case '1': // year 
....................       setup.year = get_int(); 
66E0:  CALL   29F8
66E4:  MOVFF  02,EF
66E8:  MOVFF  01,EE
....................       break; 
66EC:  BRA    670C
....................     case '2': // week 
....................       setup.week = get_int(); 
66EE:  CALL   29F8
66F2:  MOVFF  01,F0
....................       break; 
66F6:  BRA    670C
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
66F8:  CALL   29F8
66FC:  MOVFF  02,F2
6700:  MOVFF  01,F1
....................       break; 
6704:  BRA    670C
....................     default: 
....................       return 0; 
6706:  MOVLW  00
6708:  MOVWF  01
670A:  BRA    6710
....................     } 
....................   return 0; 
670C:  MOVLW  00
670E:  MOVWF  01
....................   } 
6710:  GOTO   679E (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
3202:  CALL   29F8
3206:  MOVFF  01,00
320A:  MOVFF  02,01
320E:  CLRF   02
3210:  CLRF   03
3212:  MOVFF  03,230
3216:  MOVFF  02,22F
321A:  MOVFF  01,22E
321E:  MOVFF  00,22D
....................             get_char(); 
3222:  CALL   293C
....................             sub = get_int(); 
3226:  CALL   29F8
322A:  MOVFF  01,00
322E:  MOVFF  02,01
3232:  CLRF   02
3234:  CLRF   03
3236:  MOVFF  03,234
323A:  MOVFF  02,233
323E:  MOVFF  01,232
3242:  MOVFF  00,231
....................  
....................             if (peek_char() == '.') 
3246:  CALL   291E
324A:  MOVFF  02,236
324E:  MOVFF  01,235
3252:  MOVLB  2
3254:  MOVF   01,W
3256:  SUBLW  2E
3258:  BNZ   3296
325A:  MOVF   x36,F
325C:  BNZ   3296
....................               { 
....................               get_char(); 
325E:  MOVLB  0
3260:  CALL   293C
....................               sub = get_int(); 
3264:  CALL   29F8
3268:  MOVFF  01,00
326C:  MOVFF  02,01
3270:  CLRF   02
3272:  CLRF   03
3274:  MOVFF  03,234
3278:  MOVFF  02,233
327C:  MOVFF  01,232
3280:  MOVFF  00,231
....................               bitrate += sub; 
3284:  MOVLB  2
3286:  MOVF   x31,W
3288:  ADDWF  x2D,F
328A:  MOVF   x32,W
328C:  ADDWFC x2E,F
328E:  MOVF   x33,W
3290:  ADDWFC x2F,F
3292:  MOVF   x34,W
3294:  ADDWFC x30,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
3296:  MOVFF  230,24A
329A:  MOVFF  22F,249
329E:  MOVFF  22E,248
32A2:  MOVFF  22D,247
32A6:  CLRF   x4E
32A8:  CLRF   x4D
32AA:  CLRF   x4C
32AC:  MOVLW  64
32AE:  MOVWF  x4B
32B0:  MOVLB  0
32B2:  CALL   11AC
32B6:  MOVLB  2
32B8:  MOVF   x31,W
32BA:  ADDWF  00,W
32BC:  MOVLB  0
32BE:  MOVWF  xAB
32C0:  MOVLB  2
32C2:  MOVF   x32,W
32C4:  ADDWFC 01,W
32C6:  MOVLB  0
32C8:  MOVWF  xAC
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
32CA:  CALL   1B1C
....................  
....................   } 
32CE:  GOTO   48E8 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n\n"); 
*
2ABE:  MOVLW  0D
2AC0:  MOVLB  2
2AC2:  MOVWF  x2D
2AC4:  MOVLW  0A
2AC6:  MOVWF  x2E
2AC8:  MOVWF  x2F
2ACA:  CLRF   x30
2ACC:  MOVLW  02
2ACE:  MOVWF  x6C
2AD0:  MOVLW  2D
2AD2:  MOVWF  x6B
2AD4:  MOVLB  0
2AD6:  CALL   20D6
....................   COM1_send_str("DS <data soure><cr>  \tSet data sourse (0-1)\r\n"); 
2ADA:  MOVLW  02
2ADC:  MOVWF  FEA
2ADE:  MOVLW  2D
2AE0:  MOVWF  FE9
2AE2:  MOVLW  2E
2AE4:  MOVWF  01
2AE6:  CLRF   FF7
2AE8:  MOVLW  00
2AEA:  CALL   03A6
2AEE:  TBLRD*-
2AF0:  TBLRD*+
2AF2:  MOVFF  FF5,FEE
2AF6:  DECFSZ 01,F
2AF8:  BRA    2AF0
2AFA:  MOVLW  02
2AFC:  MOVLB  2
2AFE:  MOVWF  x6C
2B00:  MOVLW  2D
2B02:  MOVWF  x6B
2B04:  MOVLB  0
2B06:  CALL   20D6
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2B0A:  MOVLW  02
2B0C:  MOVWF  FEA
2B0E:  MOVLW  2D
2B10:  MOVWF  FE9
2B12:  MOVLW  33
2B14:  MOVWF  01
2B16:  CLRF   FF7
2B18:  MOVLW  00
2B1A:  CALL   03E4
2B1E:  TBLRD*-
2B20:  TBLRD*+
2B22:  MOVFF  FF5,FEE
2B26:  DECFSZ 01,F
2B28:  BRA    2B20
2B2A:  MOVLW  02
2B2C:  MOVLB  2
2B2E:  MOVWF  x6C
2B30:  MOVLW  2D
2B32:  MOVWF  x6B
2B34:  MOVLB  0
2B36:  CALL   20D6
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2B3A:  MOVLW  02
2B3C:  MOVWF  FEA
2B3E:  MOVLW  2D
2B40:  MOVWF  FE9
2B42:  MOVLW  31
2B44:  MOVWF  01
2B46:  CLRF   FF7
2B48:  MOVLW  00
2B4A:  CALL   0428
2B4E:  TBLRD*-
2B50:  TBLRD*+
2B52:  MOVFF  FF5,FEE
2B56:  DECFSZ 01,F
2B58:  BRA    2B50
2B5A:  MOVLW  02
2B5C:  MOVLB  2
2B5E:  MOVWF  x6C
2B60:  MOVLW  2D
2B62:  MOVWF  x6B
2B64:  MOVLB  0
2B66:  CALL   20D6
....................   COM1_send_str("RP <power higth><cr>  \tSet power higth (0-1)\r\n"); 
2B6A:  MOVLW  02
2B6C:  MOVWF  FEA
2B6E:  MOVLW  2D
2B70:  MOVWF  FE9
2B72:  MOVLW  2F
2B74:  MOVWF  01
2B76:  CLRF   FF7
2B78:  MOVLW  00
2B7A:  CALL   046A
2B7E:  TBLRD*-
2B80:  TBLRD*+
2B82:  MOVFF  FF5,FEE
2B86:  DECFSZ 01,F
2B88:  BRA    2B80
2B8A:  MOVLW  02
2B8C:  MOVLB  2
2B8E:  MOVWF  x6C
2B90:  MOVLW  2D
2B92:  MOVWF  x6B
2B94:  MOVLB  0
2B96:  CALL   20D6
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2B9A:  MOVLW  02
2B9C:  MOVWF  FEA
2B9E:  MOVLW  2D
2BA0:  MOVWF  FE9
2BA2:  MOVLW  31
2BA4:  MOVWF  01
2BA6:  CLRF   FF7
2BA8:  MOVLW  00
2BAA:  CALL   04AA
2BAE:  TBLRD*-
2BB0:  TBLRD*+
2BB2:  MOVFF  FF5,FEE
2BB6:  DECFSZ 01,F
2BB8:  BRA    2BB0
2BBA:  MOVLW  02
2BBC:  MOVLB  2
2BBE:  MOVWF  x6C
2BC0:  MOVLW  2D
2BC2:  MOVWF  x6B
2BC4:  MOVLB  0
2BC6:  CALL   20D6
....................   COM1_send_str("RA <randomizer><cr>  \tset with/without randomizer (0-1)\r\n"); 
2BCA:  MOVLW  02
2BCC:  MOVWF  FEA
2BCE:  MOVLW  2D
2BD0:  MOVWF  FE9
2BD2:  MOVLW  3A
2BD4:  MOVWF  01
2BD6:  CLRF   FF7
2BD8:  MOVLW  00
2BDA:  CALL   04EC
2BDE:  TBLRD*-
2BE0:  TBLRD*+
2BE2:  MOVFF  FF5,FEE
2BE6:  DECFSZ 01,F
2BE8:  BRA    2BE0
2BEA:  MOVLW  02
2BEC:  MOVLB  2
2BEE:  MOVWF  x6C
2BF0:  MOVLW  2D
2BF2:  MOVWF  x6B
2BF4:  MOVLB  0
2BF6:  CALL   20D6
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2BFA:  MOVLW  02
2BFC:  MOVWF  FEA
2BFE:  MOVLW  2D
2C00:  MOVWF  FE9
2C02:  MOVLW  35
2C04:  MOVWF  01
2C06:  CLRF   FF7
2C08:  MOVLW  00
2C0A:  CALL   0536
2C0E:  TBLRD*-
2C10:  TBLRD*+
2C12:  MOVFF  FF5,FEE
2C16:  DECFSZ 01,F
2C18:  BRA    2C10
2C1A:  MOVLW  02
2C1C:  MOVLB  2
2C1E:  MOVWF  x6C
2C20:  MOVLW  2D
2C22:  MOVWF  x6B
2C24:  MOVLB  0
2C26:  CALL   20D6
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2C2A:  MOVLW  02
2C2C:  MOVWF  FEA
2C2E:  MOVLW  2D
2C30:  MOVWF  FE9
2C32:  MOVLW  21
2C34:  MOVWF  01
2C36:  CLRF   FF7
2C38:  MOVLW  00
2C3A:  CALL   057C
2C3E:  TBLRD*-
2C40:  TBLRD*+
2C42:  MOVFF  FF5,FEE
2C46:  DECFSZ 01,F
2C48:  BRA    2C40
2C4A:  MOVLW  02
2C4C:  MOVLB  2
2C4E:  MOVWF  x6C
2C50:  MOVLW  2D
2C52:  MOVWF  x6B
2C54:  MOVLB  0
2C56:  CALL   20D6
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2C5A:  MOVLW  02
2C5C:  MOVWF  FEA
2C5E:  MOVLW  2D
2C60:  MOVWF  FE9
2C62:  MOVLW  32
2C64:  MOVWF  01
2C66:  CLRF   FF7
2C68:  MOVLW  00
2C6A:  CALL   05AE
2C6E:  TBLRD*-
2C70:  TBLRD*+
2C72:  MOVFF  FF5,FEE
2C76:  DECFSZ 01,F
2C78:  BRA    2C70
2C7A:  MOVLW  02
2C7C:  MOVLB  2
2C7E:  MOVWF  x6C
2C80:  MOVLW  2D
2C82:  MOVWF  x6B
2C84:  MOVLB  0
2C86:  CALL   20D6
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2C8A:  MOVLW  02
2C8C:  MOVWF  FEA
2C8E:  MOVLW  2D
2C90:  MOVWF  FE9
2C92:  MOVLW  39
2C94:  MOVWF  01
2C96:  CLRF   FF7
2C98:  MOVLW  00
2C9A:  CALL   05F0
2C9E:  TBLRD*-
2CA0:  TBLRD*+
2CA2:  MOVFF  FF5,FEE
2CA6:  DECFSZ 01,F
2CA8:  BRA    2CA0
2CAA:  MOVLW  02
2CAC:  MOVLB  2
2CAE:  MOVWF  x6C
2CB0:  MOVLW  2D
2CB2:  MOVWF  x6B
2CB4:  MOVLB  0
2CB6:  CALL   20D6
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2CBA:  MOVLW  02
2CBC:  MOVWF  FEA
2CBE:  MOVLW  2D
2CC0:  MOVWF  FE9
2CC2:  MOVLW  31
2CC4:  MOVWF  01
2CC6:  CLRF   FF7
2CC8:  MOVLW  00
2CCA:  CALL   063A
2CCE:  TBLRD*-
2CD0:  TBLRD*+
2CD2:  MOVFF  FF5,FEE
2CD6:  DECFSZ 01,F
2CD8:  BRA    2CD0
2CDA:  MOVLW  02
2CDC:  MOVLB  2
2CDE:  MOVWF  x6C
2CE0:  MOVLW  2D
2CE2:  MOVWF  x6B
2CE4:  MOVLB  0
2CE6:  CALL   20D6
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2CEA:  MOVLW  02
2CEC:  MOVWF  FEA
2CEE:  MOVLW  2D
2CF0:  MOVWF  FE9
2CF2:  MOVLW  35
2CF4:  MOVWF  01
2CF6:  CLRF   FF7
2CF8:  MOVLW  00
2CFA:  CALL   067C
2CFE:  TBLRD*-
2D00:  TBLRD*+
2D02:  MOVFF  FF5,FEE
2D06:  DECFSZ 01,F
2D08:  BRA    2D00
2D0A:  MOVLW  02
2D0C:  MOVLB  2
2D0E:  MOVWF  x6C
2D10:  MOVLW  2D
2D12:  MOVWF  x6B
2D14:  MOVLB  0
2D16:  CALL   20D6
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2D1A:  MOVLW  02
2D1C:  MOVWF  FEA
2D1E:  MOVLW  2D
2D20:  MOVWF  FE9
2D22:  MOVLW  3B
2D24:  MOVWF  01
2D26:  CLRF   FF7
2D28:  MOVLW  00
2D2A:  CALL   06C2
2D2E:  TBLRD*-
2D30:  TBLRD*+
2D32:  MOVFF  FF5,FEE
2D36:  DECFSZ 01,F
2D38:  BRA    2D30
2D3A:  MOVLW  02
2D3C:  MOVLB  2
2D3E:  MOVWF  x6C
2D40:  MOVLW  2D
2D42:  MOVWF  x6B
2D44:  MOVLB  0
2D46:  CALL   20D6
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2D4A:  MOVLW  02
2D4C:  MOVWF  FEA
2D4E:  MOVLW  2D
2D50:  MOVWF  FE9
2D52:  MOVLW  3B
2D54:  MOVWF  01
2D56:  CLRF   FF7
2D58:  MOVLW  00
2D5A:  CALL   070E
2D5E:  TBLRD*-
2D60:  TBLRD*+
2D62:  MOVFF  FF5,FEE
2D66:  DECFSZ 01,F
2D68:  BRA    2D60
2D6A:  MOVLW  02
2D6C:  MOVLB  2
2D6E:  MOVWF  x6C
2D70:  MOVLW  2D
2D72:  MOVWF  x6B
2D74:  MOVLB  0
2D76:  CALL   20D6
....................   COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2D7A:  MOVLW  02
2D7C:  MOVWF  FEA
2D7E:  MOVLW  2D
2D80:  MOVWF  FE9
2D82:  MOVLW  2F
2D84:  MOVWF  01
2D86:  CLRF   FF7
2D88:  MOVLW  00
2D8A:  CALL   075A
2D8E:  TBLRD*-
2D90:  TBLRD*+
2D92:  MOVFF  FF5,FEE
2D96:  DECFSZ 01,F
2D98:  BRA    2D90
2D9A:  MOVLW  02
2D9C:  MOVLB  2
2D9E:  MOVWF  x6C
2DA0:  MOVLW  2D
2DA2:  MOVWF  x6B
2DA4:  MOVLB  0
2DA6:  CALL   20D6
....................   COM1_send_str("UT <UART Time><cr>  \tSet the stop time current 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
2DAA:  MOVLW  02
2DAC:  MOVWF  FEA
2DAE:  MOVLW  2D
2DB0:  MOVWF  FE9
2DB2:  MOVLW  3C
2DB4:  MOVWF  01
2DB6:  CLRF   FF7
2DB8:  MOVLW  00
2DBA:  CALL   079A
2DBE:  TBLRD*-
2DC0:  TBLRD*+
2DC2:  MOVFF  FF5,FEE
2DC6:  DECFSZ 01,F
2DC8:  BRA    2DC0
2DCA:  MOVLW  02
2DCC:  MOVLB  2
2DCE:  MOVWF  x6C
2DD0:  MOVLW  2D
2DD2:  MOVWF  x6B
2DD4:  MOVLB  0
2DD6:  CALL   20D6
....................   COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
2DDA:  MOVLW  02
2DDC:  MOVWF  FEA
2DDE:  MOVLW  2D
2DE0:  MOVWF  FE9
2DE2:  MOVWF  01
2DE4:  CLRF   FF7
2DE6:  MOVLW  00
2DE8:  CALL   07E6
2DEC:  TBLRD*-
2DEE:  TBLRD*+
2DF0:  MOVFF  FF5,FEE
2DF4:  DECFSZ 01,F
2DF6:  BRA    2DEE
2DF8:  MOVLW  02
2DFA:  MOVLB  2
2DFC:  MOVWF  x6C
2DFE:  MOVLW  2D
2E00:  MOVWF  x6B
2E02:  MOVLB  0
2E04:  CALL   20D6
....................   COM1_send_str("BG <UART Change><cr>  \tSet Block per second (1-20)\r\n");// VERSION 3.3  23.03.2016 
2E08:  MOVLW  02
2E0A:  MOVWF  FEA
2E0C:  MOVLW  2D
2E0E:  MOVWF  FE9
2E10:  MOVLW  35
2E12:  MOVWF  01
2E14:  CLRF   FF7
2E16:  MOVLW  00
2E18:  CALL   0824
2E1C:  TBLRD*-
2E1E:  TBLRD*+
2E20:  MOVFF  FF5,FEE
2E24:  DECFSZ 01,F
2E26:  BRA    2E1E
2E28:  MOVLW  02
2E2A:  MOVLB  2
2E2C:  MOVWF  x6C
2E2E:  MOVLW  2D
2E30:  MOVWF  x6B
2E32:  MOVLB  0
2E34:  CALL   20D6
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2E38:  MOVLW  02
2E3A:  MOVWF  FEA
2E3C:  MOVLW  2D
2E3E:  MOVWF  FE9
2E40:  MOVLW  25
2E42:  MOVWF  01
2E44:  CLRF   FF7
2E46:  MOVLW  00
2E48:  CALL   086A
2E4C:  TBLRD*-
2E4E:  TBLRD*+
2E50:  MOVFF  FF5,FEE
2E54:  DECFSZ 01,F
2E56:  BRA    2E4E
2E58:  MOVLW  02
2E5A:  MOVLB  2
2E5C:  MOVWF  x6C
2E5E:  MOVLW  2D
2E60:  MOVWF  x6B
2E62:  MOVLB  0
2E64:  CALL   20D6
....................   COM1_send_str("\r\n"); 
2E68:  MOVLW  0D
2E6A:  MOVLB  2
2E6C:  MOVWF  x2D
2E6E:  MOVLW  0A
2E70:  MOVWF  x2E
2E72:  CLRF   x2F
2E74:  MOVLW  02
2E76:  MOVWF  x6C
2E78:  MOVLW  2D
2E7A:  MOVWF  x6B
2E7C:  MOVLB  0
2E7E:  CALL   20D6
....................   } 
2E82:  GOTO   55DA (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
3630:  MOVLB  1
3632:  CLRF   xC1
3634:  CLRF   xEB
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, bitrate, sub; 
....................   float temp; 
....................   UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
....................   chr = 2; 
3636:  MOVLW  02
3638:  MOVWF  xC2
....................   comm_ptr = 0; 
363A:  CLRF   x40
....................     if (peek_char() == ':') // addressed message? 
363C:  MOVLB  0
363E:  CALL   291E
3642:  MOVFF  02,22E
3646:  MOVFF  01,22D
364A:  MOVLB  2
364C:  MOVF   01,W
364E:  SUBLW  3A
3650:  BNZ   3690
3652:  MOVF   x2E,F
3654:  BNZ   3690
....................     { 
....................     get_char(); // skip ':' 
3656:  MOVLB  0
3658:  CALL   293C
....................     addr = get_int(); 
365C:  CALL   29F8
3660:  MOVFF  01,1FA
....................     if (get_char() != ':') 
3664:  CALL   293C
3668:  MOVFF  02,22E
366C:  MOVFF  01,22D
3670:  MOVLB  2
3672:  MOVF   01,W
3674:  SUBLW  3A
3676:  BNZ   367C
3678:  MOVF   x2E,F
367A:  BNZ   367C
....................       break; 
....................     if (setup.unit_id != addr) 
367C:  MOVLB  1
367E:  MOVF   xFA,W
3680:  MOVLB  0
3682:  SUBWF  xF1,W
3684:  BNZ   368A
3686:  MOVF   xF2,F
3688:  BZ    368E
....................       goto aaa; 
368A:  GOTO   55DA
368E:  MOVLB  2
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
3690:  MOVLB  0
3692:  CALL   293C
3696:  MOVFF  02,22E
369A:  MOVFF  01,22D
369E:  MOVLB  2
36A0:  MOVF   x2E,F
36A2:  BNZ   36AA
36A4:  MOVF   x2D,W
36A6:  SUBLW  60
36A8:  BC    36BA
36AA:  MOVF   x2E,F
36AC:  BNZ   36BA
36AE:  MOVF   x2D,W
36B0:  SUBLW  7A
36B2:  BNC   36BA
36B4:  MOVF   x2D,W
36B6:  ANDLW  DF
36B8:  BRA    36BC
36BA:  MOVF   x2D,W
36BC:  MOVLB  1
36BE:  MOVWF  xEC
....................   c2 = toupper(get_char()); 
36C0:  MOVLB  0
36C2:  CALL   293C
36C6:  MOVFF  02,22E
36CA:  MOVFF  01,22D
36CE:  MOVLB  2
36D0:  MOVF   x2E,F
36D2:  BNZ   36DA
36D4:  MOVF   x2D,W
36D6:  SUBLW  60
36D8:  BC    36EA
36DA:  MOVF   x2E,F
36DC:  BNZ   36EA
36DE:  MOVF   x2D,W
36E0:  SUBLW  7A
36E2:  BNC   36EA
36E4:  MOVF   x2D,W
36E6:  ANDLW  DF
36E8:  BRA    36EC
36EA:  MOVF   x2D,W
36EC:  MOVLB  1
36EE:  MOVWF  xED
....................   skip_spc(); 
36F0:  MOVLB  0
36F2:  CALL   295C
....................  
....................   if (peek_char() == 13) // is this a query? 
36F6:  CALL   291E
36FA:  MOVFF  02,22E
36FE:  MOVFF  01,22D
3702:  MOVLB  2
3704:  MOVF   01,W
3706:  SUBLW  0D
3708:  BNZ   3716
370A:  MOVF   x2E,F
370C:  BNZ   3716
....................     query = 1; // YES 
370E:  MOVLW  01
3710:  MOVLB  1
3712:  MOVWF  xEB
3714:  MOVLB  2
....................   switch (c1) 
....................     { 
3716:  MOVLB  1
3718:  MOVF   xEC,W
371A:  XORLW  4C
371C:  MOVLB  0
371E:  BZ    3796
3720:  XORLW  68
3722:  BZ    37DA
3724:  XORLW  6C
3726:  BTFSC  FD8.2
3728:  BRA    3838
372A:  XORLW  0E
372C:  BTFSC  FD8.2
372E:  BRA    3880
3730:  XORLW  0B
3732:  BTFSC  FD8.2
3734:  BRA    3978
3736:  XORLW  09
3738:  BTFSC  FD8.2
373A:  BRA    3A7E
373C:  XORLW  16
373E:  BTFSC  FD8.2
3740:  BRA    3D8C
3742:  XORLW  05
3744:  BTFSC  FD8.2
3746:  GOTO   43BC
374A:  XORLW  04
374C:  BTFSC  FD8.2
374E:  GOTO   43DA
3752:  XORLW  06
3754:  BTFSC  FD8.2
3756:  GOTO   441C
375A:  XORLW  17
375C:  BTFSC  FD8.2
375E:  GOTO   4626
3762:  XORLW  0B
3764:  BTFSC  FD8.2
3766:  GOTO   477A
376A:  XORLW  1D
376C:  BTFSC  FD8.2
376E:  GOTO   48F4
3772:  XORLW  02
3774:  BTFSC  FD8.2
3776:  GOTO   4910
377A:  XORLW  15
377C:  BTFSC  FD8.2
377E:  GOTO   4BD8
3782:  XORLW  04
3784:  BTFSC  FD8.2
3786:  GOTO   4DE6
378A:  XORLW  16
378C:  BTFSC  FD8.2
378E:  GOTO   509A
3792:  GOTO   559C
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
3796:  MOVLB  1
3798:  MOVF   xED,W
379A:  XORLW  49
379C:  MOVLB  0
379E:  BZ    37A6
37A0:  XORLW  06
37A2:  BZ    37D0
37A4:  BRA    37D6
....................         case 'I':               // login 
....................           val = get_int(); 
37A6:  CALL   29F8
37AA:  MOVFF  02,20C
37AE:  MOVFF  01,20B
....................           if (val == 17592) 
37B2:  MOVLB  2
37B4:  MOVF   x0B,W
37B6:  SUBLW  B8
37B8:  BNZ   37C6
37BA:  MOVF   x0C,W
37BC:  SUBLW  44
37BE:  BNZ   37C6
....................             ttccp_login = 1; 
37C0:  MOVLW  01
37C2:  MOVLB  1
37C4:  MOVWF  x2B
.................... 			debug_mode = 1; 
37C6:  MOVLW  01
37C8:  MOVLB  1
37CA:  MOVWF  x42
....................           break; 
37CC:  MOVLB  0
37CE:  BRA    37D6
....................         case 'O':              // logout 
....................           ttccp_login = 0; 
37D0:  MOVLB  1
37D2:  CLRF   x2B
....................           break; 
37D4:  MOVLB  0
....................         } 
....................       break; 
37D6:  GOTO   55DA
....................     case '$': 
....................       if (!ttccp_login) break; 
37DA:  MOVLB  1
37DC:  MOVF   x2B,F
37DE:  BNZ   37E8
37E0:  MOVLB  0
37E2:  GOTO   55DA
37E6:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
37E8:  MOVF   xED,W
37EA:  SUBLW  52
37EC:  BNZ   3832
....................         { 
....................         val = get_int(); 
37EE:  MOVLB  0
37F0:  CALL   29F8
37F4:  MOVFF  02,20C
37F8:  MOVFF  01,20B
....................           if (val != 17591) 
37FC:  MOVLB  2
37FE:  MOVF   x0B,W
3800:  SUBLW  B7
3802:  BNZ   380A
3804:  MOVF   x0C,W
3806:  SUBLW  44
3808:  BZ    380E
....................             return; 
380A:  GOTO   55DC
....................         ttccp = 0; 
380E:  MOVLB  1
3810:  CLRF   x41
....................         COM1_send_str("\r\n\n*"); 
3812:  MOVLW  0D
3814:  MOVLB  2
3816:  MOVWF  x0F
3818:  MOVLW  0A
381A:  MOVWF  x10
381C:  MOVWF  x11
381E:  MOVLW  2A
3820:  MOVWF  x12
3822:  CLRF   x13
3824:  MOVLW  02
3826:  MOVWF  x6C
3828:  MOVLW  0F
382A:  MOVWF  x6B
382C:  MOVLB  0
382E:  CALL   20D6
....................         } 
....................       break; 
3832:  MOVLB  0
3834:  GOTO   55DA
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
3838:  MOVLB  1
383A:  MOVF   x2B,F
383C:  BNZ   3846
383E:  MOVLB  0
3840:  GOTO   55DA
3844:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r"); 
3846:  MOVLW  02
3848:  MOVWF  FEA
384A:  MOVLW  14
384C:  MOVWF  FE9
384E:  MOVLW  0F
3850:  MOVWF  01
3852:  CLRF   FF7
3854:  MOVLW  00
3856:  MOVLB  0
3858:  CALL   08A0
385C:  TBLRD*-
385E:  TBLRD*+
3860:  MOVFF  FF5,FEE
3864:  DECFSZ 01,F
3866:  BRA    385E
3868:  MOVLW  02
386A:  MOVLB  2
386C:  MOVWF  x6C
386E:  MOVLW  14
3870:  MOVWF  x6B
3872:  MOVLB  0
3874:  CALL   20D6
....................       list_help(); 
3878:  GOTO   2ABE
....................     break; 
387C:  GOTO   55DA
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
3880:  MOVLB  1
3882:  MOVF   x2B,F
3884:  BNZ   388E
3886:  MOVLB  0
3888:  GOTO   55DA
388C:  MOVLB  1
....................       switch (c2) 
....................         { 
388E:  MOVF   xED,W
3890:  XORLW  52
3892:  MOVLB  0
3894:  BZ    3898
3896:  BRA    3974
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
3898:  MOVLB  1
389A:  MOVF   xED,W
389C:  SUBLW  52
389E:  BNZ   3942
....................             { 
....................             if (query) 
38A0:  MOVF   xEB,F
38A2:  BZ    38F0
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
38A4:  MOVLW  01
38A6:  MOVWF  xA3
38A8:  MOVLW  C3
38AA:  MOVWF  xA2
38AC:  MOVLW  E0
38AE:  MOVWF  FF6
38B0:  MOVLW  0B
38B2:  MOVWF  FF7
38B4:  MOVLW  03
38B6:  MOVLB  2
38B8:  MOVWF  x33
38BA:  MOVLB  0
38BC:  CALL   2EA8
38C0:  MOVLW  10
38C2:  MOVWF  FE9
38C4:  MOVFF  BA,234
38C8:  MOVFF  B9,233
38CC:  CALL   2ED0
38D0:  MOVLW  0D
38D2:  MOVLB  2
38D4:  MOVWF  x3C
38D6:  MOVLB  0
38D8:  CALL   2E86
....................               COM1_send_str(buf); 
38DC:  MOVLW  01
38DE:  MOVLB  2
38E0:  MOVWF  x6C
38E2:  MOVLW  C3
38E4:  MOVWF  x6B
38E6:  MOVLB  0
38E8:  CALL   20D6
....................               } 
....................               else 
38EC:  BRA    393E
38EE:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
38F0:  MOVLB  0
38F2:  CALL   2F8C
38F6:  MOVLB  1
38F8:  CLRF   xFE
38FA:  CLRF   xFD
38FC:  MOVFF  02,1FC
3900:  MOVFF  01,1FB
....................                 setup.frequency = freq; 
3904:  MOVFF  1FC,BA
3908:  MOVFF  1FB,B9
....................                 PLL_compute_freq_parameters(freq); 
390C:  MOVFF  1FC,22E
3910:  MOVFF  1FB,22D
3914:  MOVFF  1FC,236
3918:  MOVFF  1FB,235
391C:  MOVLB  0
391E:  CALL   129C
....................                 PLL_update(); 
3922:  CALL   156C
.................... 				delay_ms(50); 
3926:  MOVLW  32
3928:  MOVLB  2
392A:  MOVWF  x42
392C:  MOVLB  0
392E:  CALL   0EAA
.................... 				PLL_update(); 
3932:  CALL   156C
....................                 ret = 1; 
3936:  MOVLW  01
3938:  MOVLB  1
393A:  MOVWF  xC1
393C:  MOVLB  0
....................               } 
....................             } 
....................             else 
393E:  BRA    3974
3940:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
3942:  MOVLW  02
3944:  MOVWF  FEA
3946:  MOVLW  14
3948:  MOVWF  FE9
394A:  MOVLW  0A
394C:  MOVWF  01
394E:  CLRF   FF7
3950:  MOVLW  00
3952:  MOVLB  0
3954:  CALL   08C0
3958:  TBLRD*-
395A:  TBLRD*+
395C:  MOVFF  FF5,FEE
3960:  DECFSZ 01,F
3962:  BRA    395A
3964:  MOVLW  02
3966:  MOVLB  2
3968:  MOVWF  x6C
396A:  MOVLW  14
396C:  MOVWF  x6B
396E:  MOVLB  0
3970:  CALL   20D6
....................           break; 
....................         } 
....................       break; 
3974:  GOTO   55DA
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
3978:  MOVLB  1
397A:  MOVF   x2B,F
397C:  BNZ   3986
397E:  MOVLB  0
3980:  GOTO   55DA
3984:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
3986:  MOVF   xED,W
3988:  SUBLW  4F
398A:  BNZ   3A46
....................           { 
....................             if(query) 
398C:  MOVF   xEB,F
398E:  BZ    39D8
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
3990:  MOVLW  01
3992:  MOVWF  xA3
3994:  MOVLW  C3
3996:  MOVWF  xA2
3998:  MOVLW  E8
399A:  MOVWF  FF6
399C:  MOVLW  0B
399E:  MOVWF  FF7
39A0:  MOVLW  03
39A2:  MOVLB  2
39A4:  MOVWF  x33
39A6:  MOVLB  0
39A8:  CALL   2EA8
39AC:  MOVFF  AF,233
39B0:  MOVLW  1B
39B2:  MOVLB  2
39B4:  MOVWF  x34
39B6:  MOVLB  0
39B8:  CALL   3020
39BC:  MOVLW  0D
39BE:  MOVLB  2
39C0:  MOVWF  x3C
39C2:  MOVLB  0
39C4:  CALL   2E86
....................             COM1_send_str(buf); 
39C8:  MOVLW  01
39CA:  MOVLB  2
39CC:  MOVWF  x6C
39CE:  MOVLW  C3
39D0:  MOVWF  x6B
39D2:  MOVLB  0
39D4:  CALL   20D6
....................             } 
....................           val = get_int(); 
39D8:  MOVLB  0
39DA:  CALL   29F8
39DE:  MOVFF  02,20C
39E2:  MOVFF  01,20B
....................           if (val <= 3) 
39E6:  MOVLB  2
39E8:  MOVF   x0C,F
39EA:  BNZ   3A06
39EC:  MOVF   x0B,W
39EE:  SUBLW  03
39F0:  BNC   3A06
....................             { 
....................             setup.mode = val; 
39F2:  MOVFF  20B,AF
....................             FPGA_set_reg0(); 
39F6:  MOVLB  0
39F8:  CALL   16C2
....................             ret = 1; 
39FC:  MOVLW  01
39FE:  MOVLB  1
3A00:  MOVWF  xC1
....................             } 
....................           else 
3A02:  BRA    3A44
3A04:  MOVLB  2
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
3A06:  MOVLW  02
3A08:  MOVWF  FEA
3A0A:  MOVLW  14
3A0C:  MOVWF  FE9
3A0E:  MOVLW  09
3A10:  MOVWF  01
3A12:  CLRF   FF7
3A14:  MOVLW  00
3A16:  MOVLB  0
3A18:  CALL   08DA
3A1C:  TBLRD*-
3A1E:  TBLRD*+
3A20:  MOVFF  FF5,FEE
3A24:  DECFSZ 01,F
3A26:  BRA    3A1E
3A28:  MOVLW  02
3A2A:  MOVLB  2
3A2C:  MOVWF  x6C
3A2E:  MOVLW  14
3A30:  MOVWF  x6B
3A32:  MOVLB  0
3A34:  CALL   20D6
....................             ret = 0; 
3A38:  MOVLB  1
3A3A:  CLRF   xC1
....................             break; 
3A3C:  MOVLB  0
3A3E:  GOTO   55DA
3A42:  MOVLB  1
....................             } 
....................           } 
....................           else 
3A44:  BRA    3A78
....................               COM1_send_str("\r\nFAIL\r\n"); 
3A46:  MOVLW  02
3A48:  MOVWF  FEA
3A4A:  MOVLW  14
3A4C:  MOVWF  FE9
3A4E:  MOVLW  09
3A50:  MOVWF  01
3A52:  CLRF   FF7
3A54:  MOVLW  00
3A56:  MOVLB  0
3A58:  CALL   08DA
3A5C:  TBLRD*-
3A5E:  TBLRD*+
3A60:  MOVFF  FF5,FEE
3A64:  DECFSZ 01,F
3A66:  BRA    3A5E
3A68:  MOVLW  02
3A6A:  MOVLB  2
3A6C:  MOVWF  x6C
3A6E:  MOVLW  14
3A70:  MOVWF  x6B
3A72:  MOVLB  0
3A74:  CALL   20D6
....................       break; 
3A78:  MOVLB  0
3A7A:  GOTO   55DA
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
3A7E:  MOVLB  1
3A80:  MOVF   x2B,F
3A82:  BNZ   3A8C
3A84:  MOVLB  0
3A86:  GOTO   55DA
3A8A:  MOVLB  1
....................       switch (c2) 
....................         { 
3A8C:  MOVF   xED,W
3A8E:  XORLW  53
3A90:  MOVLB  0
3A92:  BZ    3AA2
3A94:  XORLW  03
3A96:  BTFSC  FD8.2
3A98:  BRA    3B9A
3A9A:  XORLW  15
3A9C:  BTFSC  FD8.2
3A9E:  BRA    3C92
3AA0:  BRA    3D88
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
3AA2:  MOVLB  1
3AA4:  MOVF   xEB,F
3AA6:  BZ    3AF4
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
3AA8:  MOVLW  01
3AAA:  MOVWF  xA3
3AAC:  MOVLW  C3
3AAE:  MOVWF  xA2
3AB0:  MOVLW  F0
3AB2:  MOVWF  FF6
3AB4:  MOVLW  0B
3AB6:  MOVWF  FF7
3AB8:  MOVLW  03
3ABA:  MOVLB  2
3ABC:  MOVWF  x33
3ABE:  MOVLB  0
3AC0:  CALL   2EA8
3AC4:  MOVFF  B3,233
3AC8:  MOVLW  1B
3ACA:  MOVLB  2
3ACC:  MOVWF  x34
3ACE:  MOVLB  0
3AD0:  CALL   3020
3AD4:  MOVLW  0D
3AD6:  MOVLB  2
3AD8:  MOVWF  x3C
3ADA:  MOVLB  0
3ADC:  CALL   2E86
....................             COM1_send_str(buf); 
3AE0:  MOVLW  01
3AE2:  MOVLB  2
3AE4:  MOVWF  x6C
3AE6:  MOVLW  C3
3AE8:  MOVWF  x6B
3AEA:  MOVLB  0
3AEC:  CALL   20D6
....................             } 
....................           else 
3AF0:  BRA    3B90
3AF2:  MOVLB  1
....................             { 
....................             val = get_int(); 
3AF4:  MOVLB  0
3AF6:  CALL   29F8
3AFA:  MOVFF  02,20C
3AFE:  MOVFF  01,20B
....................             if (val < 2) 
3B02:  MOVLB  2
3B04:  MOVF   x0C,F
3B06:  BNZ   3B1C
3B08:  MOVF   x0B,W
3B0A:  SUBLW  01
3B0C:  BNC   3B1C
....................               { 
....................               setup.data_source = val; 
3B0E:  MOVFF  20B,B3
....................               FPGA_set_reg6(); 
3B12:  MOVLB  0
3B14:  CALL   171E
....................               } 
....................             else 
3B18:  BRA    3B90
3B1A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3B1C:  MOVLW  02
3B1E:  MOVWF  FEA
3B20:  MOVLW  14
3B22:  MOVWF  FE9
3B24:  MOVLW  09
3B26:  MOVWF  01
3B28:  CLRF   FF7
3B2A:  MOVLW  00
3B2C:  MOVLB  0
3B2E:  CALL   08DA
3B32:  TBLRD*-
3B34:  TBLRD*+
3B36:  MOVFF  FF5,FEE
3B3A:  DECFSZ 01,F
3B3C:  BRA    3B34
3B3E:  MOVLW  02
3B40:  MOVLB  2
3B42:  MOVWF  x6C
3B44:  MOVLW  14
3B46:  MOVWF  x6B
3B48:  MOVLB  0
3B4A:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3B4E:  MOVLW  01
3B50:  MOVLB  1
3B52:  MOVWF  xA3
3B54:  MOVLW  77
3B56:  MOVWF  xA2
3B58:  MOVLW  F8
3B5A:  MOVWF  FF6
3B5C:  MOVLW  0B
3B5E:  MOVWF  FF7
3B60:  MOVLW  07
3B62:  MOVLB  2
3B64:  MOVWF  x33
3B66:  MOVLB  0
3B68:  CALL   2EA8
3B6C:  MOVFF  B3,233
3B70:  MOVLW  1B
3B72:  MOVLB  2
3B74:  MOVWF  x34
3B76:  MOVLB  0
3B78:  CALL   3020
3B7C:  MOVLW  0D
3B7E:  MOVLB  2
3B80:  MOVWF  x3C
3B82:  MOVLB  0
3B84:  CALL   2E86
....................               ret = 0; 
3B88:  MOVLB  1
3B8A:  CLRF   xC1
....................               break; 
3B8C:  MOVLB  0
3B8E:  BRA    3D88
....................               } 
....................             } 
....................           ret = 1; 
3B90:  MOVLW  01
3B92:  MOVLB  1
3B94:  MOVWF  xC1
....................           break; 
3B96:  MOVLB  0
3B98:  BRA    3D88
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
3B9A:  MOVLB  1
3B9C:  MOVF   xEB,F
3B9E:  BZ    3BEC
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
3BA0:  MOVLW  01
3BA2:  MOVWF  xA3
3BA4:  MOVLW  C3
3BA6:  MOVWF  xA2
3BA8:  MOVLW  04
3BAA:  MOVWF  FF6
3BAC:  MOVLW  0C
3BAE:  MOVWF  FF7
3BB0:  MOVLW  03
3BB2:  MOVLB  2
3BB4:  MOVWF  x33
3BB6:  MOVLB  0
3BB8:  CALL   2EA8
3BBC:  MOVFF  B1,233
3BC0:  MOVLW  1B
3BC2:  MOVLB  2
3BC4:  MOVWF  x34
3BC6:  MOVLB  0
3BC8:  CALL   3020
3BCC:  MOVLW  0D
3BCE:  MOVLB  2
3BD0:  MOVWF  x3C
3BD2:  MOVLB  0
3BD4:  CALL   2E86
....................             COM1_send_str(buf); 
3BD8:  MOVLW  01
3BDA:  MOVLB  2
3BDC:  MOVWF  x6C
3BDE:  MOVLW  C3
3BE0:  MOVWF  x6B
3BE2:  MOVLB  0
3BE4:  CALL   20D6
....................             } 
....................           else 
3BE8:  BRA    3C88
3BEA:  MOVLB  1
....................             { 
....................             val = get_int(); 
3BEC:  MOVLB  0
3BEE:  CALL   29F8
3BF2:  MOVFF  02,20C
3BF6:  MOVFF  01,20B
....................             if (val < 2) 
3BFA:  MOVLB  2
3BFC:  MOVF   x0C,F
3BFE:  BNZ   3C14
3C00:  MOVF   x0B,W
3C02:  SUBLW  01
3C04:  BNC   3C14
....................               { 
....................               setup.data_polarity = val; 
3C06:  MOVFF  20B,B1
....................               FPGA_set_reg0(); 
3C0A:  MOVLB  0
3C0C:  CALL   16C2
....................               } 
....................             else 
3C10:  BRA    3C88
3C12:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3C14:  MOVLW  02
3C16:  MOVWF  FEA
3C18:  MOVLW  14
3C1A:  MOVWF  FE9
3C1C:  MOVLW  09
3C1E:  MOVWF  01
3C20:  CLRF   FF7
3C22:  MOVLW  00
3C24:  MOVLB  0
3C26:  CALL   08DA
3C2A:  TBLRD*-
3C2C:  TBLRD*+
3C2E:  MOVFF  FF5,FEE
3C32:  DECFSZ 01,F
3C34:  BRA    3C2C
3C36:  MOVLW  02
3C38:  MOVLB  2
3C3A:  MOVWF  x6C
3C3C:  MOVLW  14
3C3E:  MOVWF  x6B
3C40:  MOVLB  0
3C42:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3C46:  MOVLW  01
3C48:  MOVLB  1
3C4A:  MOVWF  xA3
3C4C:  MOVLW  77
3C4E:  MOVWF  xA2
3C50:  MOVLW  0C
3C52:  MOVWF  FF6
3C54:  MOVLW  0C
3C56:  MOVWF  FF7
3C58:  MOVLW  07
3C5A:  MOVLB  2
3C5C:  MOVWF  x33
3C5E:  MOVLB  0
3C60:  CALL   2EA8
3C64:  MOVFF  B1,233
3C68:  MOVLW  1B
3C6A:  MOVLB  2
3C6C:  MOVWF  x34
3C6E:  MOVLB  0
3C70:  CALL   3020
3C74:  MOVLW  0D
3C76:  MOVLB  2
3C78:  MOVWF  x3C
3C7A:  MOVLB  0
3C7C:  CALL   2E86
....................               ret = 0; 
3C80:  MOVLB  1
3C82:  CLRF   xC1
....................               break; 
3C84:  MOVLB  0
3C86:  BRA    3D88
....................               } 
....................             } 
....................           ret = 1; 
3C88:  MOVLW  01
3C8A:  MOVLB  1
3C8C:  MOVWF  xC1
....................           break; 
3C8E:  MOVLB  0
3C90:  BRA    3D88
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
3C92:  MOVLB  1
3C94:  MOVF   xEB,F
3C96:  BZ    3CE4
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
3C98:  MOVLW  01
3C9A:  MOVWF  xA3
3C9C:  MOVLW  C3
3C9E:  MOVWF  xA2
3CA0:  MOVLW  18
3CA2:  MOVWF  FF6
3CA4:  MOVLW  0C
3CA6:  MOVWF  FF7
3CA8:  MOVLW  03
3CAA:  MOVLB  2
3CAC:  MOVWF  x33
3CAE:  MOVLB  0
3CB0:  CALL   2EA8
3CB4:  MOVFF  B7,233
3CB8:  MOVLW  1B
3CBA:  MOVLB  2
3CBC:  MOVWF  x34
3CBE:  MOVLB  0
3CC0:  CALL   3020
3CC4:  MOVLW  0D
3CC6:  MOVLB  2
3CC8:  MOVWF  x3C
3CCA:  MOVLB  0
3CCC:  CALL   2E86
....................             COM1_send_str(buf); 
3CD0:  MOVLW  01
3CD2:  MOVLB  2
3CD4:  MOVWF  x6C
3CD6:  MOVLW  C3
3CD8:  MOVWF  x6B
3CDA:  MOVLB  0
3CDC:  CALL   20D6
....................             } 
....................           else 
3CE0:  BRA    3D80
3CE2:  MOVLB  1
....................             { 
....................             val = get_int(); 
3CE4:  MOVLB  0
3CE6:  CALL   29F8
3CEA:  MOVFF  02,20C
3CEE:  MOVFF  01,20B
....................             if (val < 2) 
3CF2:  MOVLB  2
3CF4:  MOVF   x0C,F
3CF6:  BNZ   3D0C
3CF8:  MOVF   x0B,W
3CFA:  SUBLW  01
3CFC:  BNC   3D0C
....................               { 
....................               setup.SOQPSK = val; 
3CFE:  MOVFF  20B,B7
....................               FPGA_set_reg0(); 
3D02:  MOVLB  0
3D04:  CALL   16C2
....................               } 
....................             else 
3D08:  BRA    3D80
3D0A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3D0C:  MOVLW  02
3D0E:  MOVWF  FEA
3D10:  MOVLW  14
3D12:  MOVWF  FE9
3D14:  MOVLW  09
3D16:  MOVWF  01
3D18:  CLRF   FF7
3D1A:  MOVLW  00
3D1C:  MOVLB  0
3D1E:  CALL   08DA
3D22:  TBLRD*-
3D24:  TBLRD*+
3D26:  MOVFF  FF5,FEE
3D2A:  DECFSZ 01,F
3D2C:  BRA    3D24
3D2E:  MOVLW  02
3D30:  MOVLB  2
3D32:  MOVWF  x6C
3D34:  MOVLW  14
3D36:  MOVWF  x6B
3D38:  MOVLB  0
3D3A:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3D3E:  MOVLW  01
3D40:  MOVLB  1
3D42:  MOVWF  xA3
3D44:  MOVLW  77
3D46:  MOVWF  xA2
3D48:  MOVLW  20
3D4A:  MOVWF  FF6
3D4C:  MOVLW  0C
3D4E:  MOVWF  FF7
3D50:  MOVLW  07
3D52:  MOVLB  2
3D54:  MOVWF  x33
3D56:  MOVLB  0
3D58:  CALL   2EA8
3D5C:  MOVFF  B7,233
3D60:  MOVLW  1B
3D62:  MOVLB  2
3D64:  MOVWF  x34
3D66:  MOVLB  0
3D68:  CALL   3020
3D6C:  MOVLW  0D
3D6E:  MOVLB  2
3D70:  MOVWF  x3C
3D72:  MOVLB  0
3D74:  CALL   2E86
....................               ret = 0; 
3D78:  MOVLB  1
3D7A:  CLRF   xC1
....................               break; 
3D7C:  MOVLB  0
3D7E:  BRA    3D88
....................               } 
....................             } 
....................           ret = 1; 
3D80:  MOVLW  01
3D82:  MOVLB  1
3D84:  MOVWF  xC1
....................           break; 
3D86:  MOVLB  0
....................         } 
....................       break; 
3D88:  GOTO   55DA
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
3D8C:  MOVLB  1
3D8E:  MOVF   x2B,F
3D90:  BNZ   3D9A
3D92:  MOVLB  0
3D94:  GOTO   55DA
3D98:  MOVLB  1
....................       switch (c2) 
....................         { 
3D9A:  MOVLW  41
3D9C:  SUBWF  xED,W
3D9E:  ADDLW  F0
3DA0:  BTFSC  FD8.0
3DA2:  BRA    43B6
3DA4:  ADDLW  10
3DA6:  MOVLB  0
3DA8:  GOTO   55E2
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
3DAC:  MOVLB  1
3DAE:  MOVF   xEB,F
3DB0:  BZ    3DFE
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
3DB2:  MOVLW  01
3DB4:  MOVWF  xA3
3DB6:  MOVLW  C3
3DB8:  MOVWF  xA2
3DBA:  MOVLW  2C
3DBC:  MOVWF  FF6
3DBE:  MOVLW  0C
3DC0:  MOVWF  FF7
3DC2:  MOVLW  03
3DC4:  MOVLB  2
3DC6:  MOVWF  x33
3DC8:  MOVLB  0
3DCA:  CALL   2EA8
3DCE:  MOVFF  B6,233
3DD2:  MOVLW  1B
3DD4:  MOVLB  2
3DD6:  MOVWF  x34
3DD8:  MOVLB  0
3DDA:  CALL   3020
3DDE:  MOVLW  0D
3DE0:  MOVLB  2
3DE2:  MOVWF  x3C
3DE4:  MOVLB  0
3DE6:  CALL   2E86
....................             COM1_send_str(buf); 
3DEA:  MOVLW  01
3DEC:  MOVLB  2
3DEE:  MOVWF  x6C
3DF0:  MOVLW  C3
3DF2:  MOVWF  x6B
3DF4:  MOVLB  0
3DF6:  CALL   20D6
....................             } 
....................           else 
3DFA:  BRA    3EF8
3DFC:  MOVLB  1
....................             { 
....................             val = get_int(); 
3DFE:  MOVLB  0
3E00:  CALL   29F8
3E04:  MOVFF  02,20C
3E08:  MOVFF  01,20B
....................             if (val < 2) 
3E0C:  MOVLB  2
3E0E:  MOVF   x0C,F
3E10:  BNZ   3E84
3E12:  MOVF   x0B,W
3E14:  SUBLW  01
3E16:  BNC   3E84
....................               { 
.................... 	          if(setup.rc == 1) 
3E18:  MOVLB  0
3E1A:  DECFSZ xF7,W
3E1C:  BRA    3E3C
3E1E:  MOVF   xF8,F
3E20:  BNZ   3E3C
.................... 	            { 
.................... 	            if(val == 0) 
3E22:  MOVLB  2
3E24:  MOVF   x0B,F
3E26:  BNZ   3E36
3E28:  MOVF   x0C,F
3E2A:  BNZ   3E36
.................... 	            { 
.................... 	            setup.rp =1; 
3E2C:  MOVLB  0
3E2E:  CLRF   xFA
3E30:  MOVLW  01
3E32:  MOVWF  xF9
.................... 	            } 
.................... 	          else 
3E34:  BRA    3E3C
....................  
.................... 	          setup.rp = 0; 
3E36:  MOVLB  0
3E38:  CLRF   xFA
3E3A:  CLRF   xF9
.................... 	          } 
.................... 	          if(val == 1) 
3E3C:  MOVLB  2
3E3E:  DECFSZ x0B,W
3E40:  BRA    3E64
3E42:  MOVF   x0C,F
3E44:  BNZ   3E64
.................... 	          { 
....................               rp_command = setup.rp = 0; 
3E46:  MOVLB  0
3E48:  CLRF   xFA
3E4A:  CLRF   xF9
3E4C:  MOVFF  F9,19F
....................               delay_ms(50); 
3E50:  MOVLW  32
3E52:  MOVLB  2
3E54:  MOVWF  x42
3E56:  MOVLB  0
3E58:  CALL   0EAA
....................               update_all(); 
3E5C:  CALL   1C10
....................               } 
....................               else 
3E60:  BRA    3E80
3E62:  MOVLB  2
....................                { 
....................               rp_command = setup.rp = 1; 
3E64:  MOVLB  0
3E66:  CLRF   xFA
3E68:  MOVLW  01
3E6A:  MOVWF  xF9
3E6C:  MOVFF  F9,19F
....................               delay_ms(50); 
3E70:  MOVLW  32
3E72:  MOVLB  2
3E74:  MOVWF  x42
3E76:  MOVLB  0
3E78:  CALL   0EAA
....................               update_all(); 
3E7C:  CALL   1C10
....................               } 
....................               } 
....................             else 
3E80:  BRA    3EF8
3E82:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3E84:  MOVLW  02
3E86:  MOVWF  FEA
3E88:  MOVLW  14
3E8A:  MOVWF  FE9
3E8C:  MOVLW  09
3E8E:  MOVWF  01
3E90:  CLRF   FF7
3E92:  MOVLW  00
3E94:  MOVLB  0
3E96:  CALL   08DA
3E9A:  TBLRD*-
3E9C:  TBLRD*+
3E9E:  MOVFF  FF5,FEE
3EA2:  DECFSZ 01,F
3EA4:  BRA    3E9C
3EA6:  MOVLW  02
3EA8:  MOVLB  2
3EAA:  MOVWF  x6C
3EAC:  MOVLW  14
3EAE:  MOVWF  x6B
3EB0:  MOVLB  0
3EB2:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
3EB6:  MOVLW  01
3EB8:  MOVLB  1
3EBA:  MOVWF  xA3
3EBC:  MOVLW  77
3EBE:  MOVWF  xA2
3EC0:  MOVLW  34
3EC2:  MOVWF  FF6
3EC4:  MOVLW  0C
3EC6:  MOVWF  FF7
3EC8:  MOVLW  07
3ECA:  MOVLB  2
3ECC:  MOVWF  x33
3ECE:  MOVLB  0
3ED0:  CALL   2EA8
3ED4:  MOVFF  19F,233
3ED8:  MOVLW  1B
3EDA:  MOVLB  2
3EDC:  MOVWF  x34
3EDE:  MOVLB  0
3EE0:  CALL   3020
3EE4:  MOVLW  0D
3EE6:  MOVLB  2
3EE8:  MOVWF  x3C
3EEA:  MOVLB  0
3EEC:  CALL   2E86
....................               ret = 0; 
3EF0:  MOVLB  1
3EF2:  CLRF   xC1
....................               break; 
3EF4:  BRA    43B6
3EF6:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
3EF8:  MOVLW  01
3EFA:  MOVLB  1
3EFC:  MOVWF  xC1
....................           break; 
3EFE:  BRA    43B6
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
3F00:  MOVLB  1
3F02:  MOVF   xEB,F
3F04:  BZ    3F52
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
3F06:  MOVLW  01
3F08:  MOVWF  xA3
3F0A:  MOVLW  C3
3F0C:  MOVWF  xA2
3F0E:  MOVLW  40
3F10:  MOVWF  FF6
3F12:  MOVLW  0C
3F14:  MOVWF  FF7
3F16:  MOVLW  03
3F18:  MOVLB  2
3F1A:  MOVWF  x33
3F1C:  MOVLB  0
3F1E:  CALL   2EA8
3F22:  MOVFF  1A0,233
3F26:  MOVLW  1B
3F28:  MOVLB  2
3F2A:  MOVWF  x34
3F2C:  MOVLB  0
3F2E:  CALL   3020
3F32:  MOVLW  0D
3F34:  MOVLB  2
3F36:  MOVWF  x3C
3F38:  MOVLB  0
3F3A:  CALL   2E86
....................             COM1_send_str(buf); 
3F3E:  MOVLW  01
3F40:  MOVLB  2
3F42:  MOVWF  x6C
3F44:  MOVLW  C3
3F46:  MOVWF  x6B
3F48:  MOVLB  0
3F4A:  CALL   20D6
....................             } 
....................           else 
3F4E:  BRA    40B4
3F50:  MOVLB  1
....................             { 
....................             val = get_int(); 
3F52:  MOVLB  0
3F54:  CALL   29F8
3F58:  MOVFF  02,20C
3F5C:  MOVFF  01,20B
....................             if (val == 0) 
3F60:  MOVLB  2
3F62:  MOVF   x0B,F
3F64:  BNZ   3FCE
3F66:  MOVF   x0C,F
3F68:  BNZ   3FCE
....................               { 
.................... 			  if(setup.cot || setup.rc) 
3F6A:  MOVLB  0
3F6C:  MOVF   xF5,W
3F6E:  IORWF  xF6,W
3F70:  BNZ   3F78
3F72:  MOVF   xF7,W
3F74:  IORWF  xF8,W
3F76:  BZ    3F9E
.................... 				{ 
....................                 pwr_command = 0; 
3F78:  MOVLB  1
3F7A:  CLRF   xA0
....................                 setup.pwr = pwr_command; 
3F7C:  MOVLB  0
3F7E:  CLRF   xAE
3F80:  MOVFF  1A0,AD
....................                 delay_ms(60); 
3F84:  MOVLW  3C
3F86:  MOVLB  2
3F88:  MOVWF  x42
3F8A:  MOVLB  0
3F8C:  CALL   0EAA
.................... 			 	update_all(); 
3F90:  CALL   1C10
.................... 			 	ret = 1; 
3F94:  MOVLW  01
3F96:  MOVLB  1
3F98:  MOVWF  xC1
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
3F9A:  BRA    3FCA
3F9C:  MOVLB  0
3F9E:  MOVF   xF5,F
3FA0:  BNZ   3FA6
3FA2:  MOVF   xF6,F
3FA4:  BZ    3FAC
3FA6:  MOVF   xF7,W
3FA8:  IORWF  xF8,W
3FAA:  BZ    3FC8
.................... 				  { 
....................                   pwr_command = 0; 
3FAC:  MOVLB  1
3FAE:  CLRF   xA0
....................                 setup.pwr = pwr_command; 
3FB0:  MOVLB  0
3FB2:  CLRF   xAE
3FB4:  MOVFF  1A0,AD
....................                 delay_ms(60); 
3FB8:  MOVLW  3C
3FBA:  MOVLB  2
3FBC:  MOVWF  x42
3FBE:  MOVLB  0
3FC0:  CALL   0EAA
.................... 			 	update_all(); 
3FC4:  CALL   1C10
3FC8:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
3FCA:  BRA    40B2
3FCC:  MOVLB  2
.................... 				{ 
.................... 				if (val == 1) 
3FCE:  DECFSZ x0B,W
3FD0:  BRA    4040
3FD2:  MOVF   x0C,F
3FD4:  BNZ   4040
.................... 				  { 
.................... 				  if(setup.cot) 
3FD6:  MOVLB  0
3FD8:  MOVF   xF5,W
3FDA:  IORWF  xF6,W
3FDC:  BZ    400A
.................... 				   { 
.................... 				   pwr_command = 1; 
3FDE:  MOVLW  01
3FE0:  MOVLB  1
3FE2:  MOVWF  xA0
.................... 				   setup.pwr = pwr_command; 
3FE4:  MOVLB  0
3FE6:  CLRF   xAE
3FE8:  MOVFF  1A0,AD
.................... 				   power_output(); 
3FEC:  CALL   1C7A
....................                    delay_ms(50); 
3FF0:  MOVLW  32
3FF2:  MOVLB  2
3FF4:  MOVWF  x42
3FF6:  MOVLB  0
3FF8:  CALL   0EAA
.................... 				   ret = 1; 
3FFC:  MOVLW  01
3FFE:  MOVLB  1
4000:  MOVWF  xC1
....................                    update_all(); 
4002:  MOVLB  0
4004:  CALL   1C10
.................... 				   } 
.................... 					else if(setup.cot == 0) 
4008:  BRA    403C
400A:  MOVF   xF5,F
400C:  BNZ   403C
400E:  MOVF   xF6,F
4010:  BNZ   403C
.................... 				  { 
....................                   pwr_command = 1; 
4012:  MOVLW  01
4014:  MOVLB  1
4016:  MOVWF  xA0
....................                   setup.pwr = pwr_command; 
4018:  MOVLB  0
401A:  CLRF   xAE
401C:  MOVFF  1A0,AD
....................                   power_output(); 
4020:  CALL   1C7A
.................... 				  delay_ms(50); 
4024:  MOVLW  32
4026:  MOVLB  2
4028:  MOVWF  x42
402A:  MOVLB  0
402C:  CALL   0EAA
.................... 				  ret = 1; 
4030:  MOVLW  01
4032:  MOVLB  1
4034:  MOVWF  xC1
....................                   update_all(); 
4036:  MOVLB  0
4038:  CALL   1C10
....................                   } 
.................... 				} 
....................             else 
403C:  BRA    40B4
403E:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4040:  MOVLW  02
4042:  MOVWF  FEA
4044:  MOVLW  14
4046:  MOVWF  FE9
4048:  MOVLW  09
404A:  MOVWF  01
404C:  CLRF   FF7
404E:  MOVLW  00
4050:  MOVLB  0
4052:  CALL   08DA
4056:  TBLRD*-
4058:  TBLRD*+
405A:  MOVFF  FF5,FEE
405E:  DECFSZ 01,F
4060:  BRA    4058
4062:  MOVLW  02
4064:  MOVLB  2
4066:  MOVWF  x6C
4068:  MOVLW  14
406A:  MOVWF  x6B
406C:  MOVLB  0
406E:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
4072:  MOVLW  01
4074:  MOVLB  1
4076:  MOVWF  xA3
4078:  MOVLW  77
407A:  MOVWF  xA2
407C:  MOVLW  48
407E:  MOVWF  FF6
4080:  MOVLW  0C
4082:  MOVWF  FF7
4084:  MOVLW  07
4086:  MOVLB  2
4088:  MOVWF  x33
408A:  MOVLB  0
408C:  CALL   2EA8
4090:  MOVFF  1A0,233
4094:  MOVLW  1B
4096:  MOVLB  2
4098:  MOVWF  x34
409A:  MOVLB  0
409C:  CALL   3020
40A0:  MOVLW  0D
40A2:  MOVLB  2
40A4:  MOVWF  x3C
40A6:  MOVLB  0
40A8:  CALL   2E86
....................               ret = 0; 
40AC:  MOVLB  1
40AE:  CLRF   xC1
....................               break; 
40B0:  BRA    43B6
40B2:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
40B4:  MOVLW  01
40B6:  MOVLB  1
40B8:  MOVWF  xC1
....................           break; 
40BA:  BRA    43B6
....................  
....................          case 'C': 
....................          	if (query) 
40BC:  MOVLB  1
40BE:  MOVF   xEB,F
40C0:  BZ    410E
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
40C2:  MOVLW  01
40C4:  MOVWF  xA3
40C6:  MOVLW  C3
40C8:  MOVWF  xA2
40CA:  MOVLW  54
40CC:  MOVWF  FF6
40CE:  MOVLW  0C
40D0:  MOVWF  FF7
40D2:  MOVLW  03
40D4:  MOVLB  2
40D6:  MOVWF  x33
40D8:  MOVLB  0
40DA:  CALL   2EA8
40DE:  MOVLW  10
40E0:  MOVWF  FE9
40E2:  MOVFF  F8,234
40E6:  MOVFF  F7,233
40EA:  CALL   2ED0
40EE:  MOVLW  0D
40F0:  MOVLB  2
40F2:  MOVWF  x3C
40F4:  MOVLB  0
40F6:  CALL   2E86
....................             COM1_send_str(buf); 
40FA:  MOVLW  01
40FC:  MOVLB  2
40FE:  MOVWF  x6C
4100:  MOVLW  C3
4102:  MOVWF  x6B
4104:  MOVLB  0
4106:  CALL   20D6
....................             } 
....................           else 
410A:  BRA    419E
410C:  MOVLB  1
....................             { 
....................           val = get_int(); 
410E:  MOVLB  0
4110:  CALL   29F8
4114:  MOVFF  02,20C
4118:  MOVFF  01,20B
....................           if(val < 2) 
411C:  MOVLB  2
411E:  MOVF   x0C,F
4120:  BNZ   416C
4122:  MOVF   x0B,W
4124:  SUBLW  01
4126:  BNC   416C
....................           	{ 
.................... 	          	if(val == 0) 
4128:  MOVF   x0B,F
412A:  BNZ   4148
412C:  MOVF   x0C,F
412E:  BNZ   4148
.................... 	          	{ 
.................... 	              setup.rc = 0; 
4130:  MOVLB  0
4132:  CLRF   xF8
4134:  CLRF   xF7
.................... 	              delay_ms(50); 
4136:  MOVLW  32
4138:  MOVLB  2
413A:  MOVWF  x42
413C:  MOVLB  0
413E:  CALL   0EAA
.................... 	              update_all(); 
4142:  CALL   1C10
4146:  MOVLB  2
.................... 	            } 
.................... 	            if(val == 1) 
4148:  DECFSZ x0B,W
414A:  BRA    416A
414C:  MOVF   x0C,F
414E:  BNZ   416A
.................... 	              { 
.................... 	              setup.rc = 1; 
4150:  MOVLB  0
4152:  CLRF   xF8
4154:  MOVLW  01
4156:  MOVWF  xF7
.................... 	              delay_ms(50); 
4158:  MOVLW  32
415A:  MOVLB  2
415C:  MOVWF  x42
415E:  MOVLB  0
4160:  CALL   0EAA
.................... 	              update_all(); 
4164:  CALL   1C10
4168:  MOVLB  2
.................... 	              } 
....................            } 
....................           else 
416A:  BRA    41A0
....................             COM1_send_str("\r\nFAULT\r\n"); 
416C:  MOVLW  02
416E:  MOVWF  FEA
4170:  MOVLW  14
4172:  MOVWF  FE9
4174:  MOVLW  0A
4176:  MOVWF  01
4178:  CLRF   FF7
417A:  MOVLW  00
417C:  MOVLB  0
417E:  CALL   08C0
4182:  TBLRD*-
4184:  TBLRD*+
4186:  MOVFF  FF5,FEE
418A:  DECFSZ 01,F
418C:  BRA    4184
418E:  MOVLW  02
4190:  MOVLB  2
4192:  MOVWF  x6C
4194:  MOVLW  14
4196:  MOVWF  x6B
4198:  MOVLB  0
419A:  CALL   20D6
419E:  MOVLB  2
....................             } 
....................           break; 
41A0:  MOVLB  1
41A2:  BRA    43B6
....................  
....................           case 'B': 
....................             if (query) 
41A4:  MOVLB  1
41A6:  MOVF   xEB,F
41A8:  BZ    41F6
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
41AA:  MOVLW  01
41AC:  MOVWF  xA3
41AE:  MOVLW  C3
41B0:  MOVWF  xA2
41B2:  MOVLW  5C
41B4:  MOVWF  FF6
41B6:  MOVLW  0C
41B8:  MOVWF  FF7
41BA:  MOVLW  03
41BC:  MOVLB  2
41BE:  MOVWF  x33
41C0:  MOVLB  0
41C2:  CALL   2EA8
41C6:  MOVLW  10
41C8:  MOVWF  FE9
41CA:  MOVFF  F6,234
41CE:  MOVFF  F5,233
41D2:  CALL   2ED0
41D6:  MOVLW  0D
41D8:  MOVLB  2
41DA:  MOVWF  x3C
41DC:  MOVLB  0
41DE:  CALL   2E86
....................             COM1_send_str(buf); 
41E2:  MOVLW  01
41E4:  MOVLB  2
41E6:  MOVWF  x6C
41E8:  MOVLW  C3
41EA:  MOVWF  x6B
41EC:  MOVLB  0
41EE:  CALL   20D6
....................             } 
....................           else 
41F2:  BRA    42A4
41F4:  MOVLB  1
....................             { 
....................           val = get_int(); 
41F6:  MOVLB  0
41F8:  CALL   29F8
41FC:  MOVFF  02,20C
4200:  MOVFF  01,20B
....................           if(val < 2) 
4204:  MOVLB  2
4206:  MOVF   x0C,F
4208:  BNZ   4272
420A:  MOVF   x0B,W
420C:  SUBLW  01
420E:  BNC   4272
....................           	{ 
.................... 	          if(val) 
4210:  MOVF   x0B,W
4212:  IORWF  x0C,W
4214:  BZ    4258
.................... 	          	{ 
....................               setup.cot = val; 
4216:  MOVFF  20C,F6
421A:  MOVFF  20B,F5
....................               if(pwr_command == 0) 
421E:  MOVLB  1
4220:  MOVF   xA0,F
4222:  BNZ   4240
....................               { 
....................               pwr_command == 1; 
4224:  DECFSZ xA0,W
4226:  BRA    422A
4228:  BRA    422C
422A:  MOVLW  00
....................               delay_ms(50); 
422C:  MOVLW  32
422E:  MOVLB  2
4230:  MOVWF  x42
4232:  MOVLB  0
4234:  CALL   0EAA
....................               update_all(); 
4238:  CALL   1C10
....................               } 
....................               else 
423C:  BRA    4246
423E:  MOVLB  1
....................               	pwr_command == 0; 
4240:  MOVF   xA0,F
4242:  BZ    4246
4244:  MOVLW  00
....................                delay_ms(50); 
4246:  MOVLW  32
4248:  MOVLB  2
424A:  MOVWF  x42
424C:  MOVLB  0
424E:  CALL   0EAA
....................               update_all(); 
4252:  CALL   1C10
4256:  MOVLB  2
....................             } 
....................             setup.cot = val; 
4258:  MOVFF  20C,F6
425C:  MOVFF  20B,F5
....................               delay_ms(70); 
4260:  MOVLW  46
4262:  MOVWF  x42
4264:  MOVLB  0
4266:  CALL   0EAA
....................               update_all(); 
426A:  CALL   1C10
....................            } 
....................           else 
426E:  BRA    42A4
4270:  MOVLB  2
....................             COM1_send_str("\r\nFAULT\r\n"); 
4272:  MOVLW  02
4274:  MOVWF  FEA
4276:  MOVLW  14
4278:  MOVWF  FE9
427A:  MOVLW  0A
427C:  MOVWF  01
427E:  CLRF   FF7
4280:  MOVLW  00
4282:  MOVLB  0
4284:  CALL   08C0
4288:  TBLRD*-
428A:  TBLRD*+
428C:  MOVFF  FF5,FEE
4290:  DECFSZ 01,F
4292:  BRA    428A
4294:  MOVLW  02
4296:  MOVLB  2
4298:  MOVWF  x6C
429A:  MOVLW  14
429C:  MOVWF  x6B
429E:  MOVLB  0
42A0:  CALL   20D6
....................             } 
....................           break; 
42A4:  MOVLB  1
42A6:  BRA    43B6
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
42A8:  MOVLB  1
42AA:  MOVF   xEB,F
42AC:  BZ    42FA
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
42AE:  MOVLW  01
42B0:  MOVWF  xA3
42B2:  MOVLW  C3
42B4:  MOVWF  xA2
42B6:  MOVLW  64
42B8:  MOVWF  FF6
42BA:  MOVLW  0C
42BC:  MOVWF  FF7
42BE:  MOVLW  03
42C0:  MOVLB  2
42C2:  MOVWF  x33
42C4:  MOVLB  0
42C6:  CALL   2EA8
42CA:  MOVFF  B5,233
42CE:  MOVLW  1B
42D0:  MOVLB  2
42D2:  MOVWF  x34
42D4:  MOVLB  0
42D6:  CALL   3020
42DA:  MOVLW  0D
42DC:  MOVLB  2
42DE:  MOVWF  x3C
42E0:  MOVLB  0
42E2:  CALL   2E86
....................             COM1_send_str(buf); 
42E6:  MOVLW  01
42E8:  MOVLB  2
42EA:  MOVWF  x6C
42EC:  MOVLW  C3
42EE:  MOVWF  x6B
42F0:  MOVLB  0
42F2:  CALL   20D6
....................             } 
....................           else 
42F6:  BRA    439A
42F8:  MOVLB  1
....................             { 
....................             val = get_int(); 
42FA:  MOVLB  0
42FC:  CALL   29F8
4300:  MOVFF  02,20C
4304:  MOVFF  01,20B
....................             if (val < 2) 
4308:  MOVLB  2
430A:  MOVF   x0C,F
430C:  BNZ   4328
430E:  MOVF   x0B,W
4310:  SUBLW  01
4312:  BNC   4328
....................               { 
....................               setup.randomizer = val; 
4314:  MOVFF  20B,B5
....................               FPGA_set_reg0(); 
4318:  MOVLB  0
431A:  CALL   16C2
....................               ret = 1; 
431E:  MOVLW  01
4320:  MOVLB  1
4322:  MOVWF  xC1
....................               } 
....................             else 
4324:  BRA    439A
4326:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4328:  MOVLW  02
432A:  MOVWF  FEA
432C:  MOVLW  14
432E:  MOVWF  FE9
4330:  MOVLW  09
4332:  MOVWF  01
4334:  CLRF   FF7
4336:  MOVLW  00
4338:  MOVLB  0
433A:  CALL   08DA
433E:  TBLRD*-
4340:  TBLRD*+
4342:  MOVFF  FF5,FEE
4346:  DECFSZ 01,F
4348:  BRA    4340
434A:  MOVLW  02
434C:  MOVLB  2
434E:  MOVWF  x6C
4350:  MOVLW  14
4352:  MOVWF  x6B
4354:  MOVLB  0
4356:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
435A:  MOVLW  01
435C:  MOVLB  1
435E:  MOVWF  xA3
4360:  MOVLW  77
4362:  MOVWF  xA2
4364:  MOVLW  6C
4366:  MOVWF  FF6
4368:  MOVLW  0C
436A:  MOVWF  FF7
436C:  MOVLW  07
436E:  MOVLB  2
4370:  MOVWF  x33
4372:  MOVLB  0
4374:  CALL   2EA8
4378:  MOVFF  B5,233
437C:  MOVLW  1B
437E:  MOVLB  2
4380:  MOVWF  x34
4382:  MOVLB  0
4384:  CALL   3020
4388:  MOVLW  0D
438A:  MOVLB  2
438C:  MOVWF  x3C
438E:  MOVLB  0
4390:  CALL   2E86
....................               ret = 0; 
4394:  MOVLB  1
4396:  CLRF   xC1
....................               break; 
4398:  BRA    43B6
....................               } 
....................             } 
....................           ret = 1; 
439A:  MOVLW  01
439C:  MOVLB  1
439E:  MOVWF  xC1
....................           break; 
43A0:  BRA    43B6
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
43A2:  CALL   0F46
....................           update_all(); 
43A6:  CALL   1C10
....................           ret = 1; 
43AA:  MOVLW  01
43AC:  MOVLB  1
43AE:  MOVWF  xC1
....................           break; 
43B0:  BRA    43B6
....................         case 'E':   // reset 
....................           reset_cpu(); 
43B2:  RESET
....................           break; 
43B4:  MOVLB  1
....................         } 
....................       break; 
43B6:  MOVLB  0
43B8:  GOTO   55DA
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
43BC:  MOVLB  1
43BE:  MOVF   x2B,F
43C0:  BNZ   43CA
43C2:  MOVLB  0
43C4:  GOTO   55DA
43C8:  MOVLB  1
....................       if (c2 == 'A') 
43CA:  MOVF   xED,W
43CC:  SUBLW  41
43CE:  BNZ   43D4
....................         { 
....................         //xxxx 
....................         ret = 1; 
43D0:  MOVLW  01
43D2:  MOVWF  xC1
....................         } 
....................       break; 
43D4:  MOVLB  0
43D6:  GOTO   55DA
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
43DA:  MOVLB  1
43DC:  MOVF   x2B,F
43DE:  BNZ   43E8
43E0:  MOVLB  0
43E2:  GOTO   55DA
43E6:  MOVLB  1
....................       switch (c2) 
....................         { 
43E8:  MOVF   xED,W
43EA:  XORLW  50
43EC:  MOVLB  0
43EE:  BZ    43F6
43F0:  XORLW  06
43F2:  BZ    4400
43F4:  BRA    4418
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
43F6:  MOVLW  01
43F8:  MOVLB  1
43FA:  MOVWF  xC1
....................           break; 
43FC:  MOVLB  0
43FE:  BRA    4418
....................         case 'V': 
....................           allow_write = 2975; 
4400:  MOVLW  0B
4402:  MOVLB  1
4404:  MOVWF  x02
4406:  MOVLW  9F
4408:  MOVWF  x01
....................           write_setup(); 
440A:  MOVLB  0
440C:  CALL   310C
....................           ret = 1; 
4410:  MOVLW  01
4412:  MOVLB  1
4414:  MOVWF  xC1
....................           break; 
4416:  MOVLB  0
....................         } 
....................       break; 
4418:  GOTO   55DA
....................        
....................  
....................     case 'U': // VERSION 3.3 UT US 
....................       if (!ttccp_login) break; 
441C:  MOVLB  1
441E:  MOVF   x2B,F
4420:  BNZ   442A
4422:  MOVLB  0
4424:  GOTO   55DA
4428:  MOVLB  1
....................       switch (c2) 
....................         { 
442A:  MOVF   xED,W
442C:  XORLW  54
442E:  MOVLB  0
4430:  BZ    443A
4432:  XORLW  07
4434:  BTFSC  FD8.2
4436:  BRA    4536
4438:  BRA    4622
....................         case 'T':  
....................           if (query) 
443A:  MOVLB  1
443C:  MOVF   xEB,F
443E:  BZ    448C
....................             { 
....................             sprintf(buf, "UT %u\r", setup.UART_Time); 
4440:  MOVLW  01
4442:  MOVWF  xA3
4444:  MOVLW  C3
4446:  MOVWF  xA2
4448:  MOVLW  78
444A:  MOVWF  FF6
444C:  MOVLW  0C
444E:  MOVWF  FF7
4450:  MOVLW  03
4452:  MOVLB  2
4454:  MOVWF  x33
4456:  MOVLB  0
4458:  CALL   2EA8
445C:  MOVFF  FB,233
4460:  MOVLW  1B
4462:  MOVLB  2
4464:  MOVWF  x34
4466:  MOVLB  0
4468:  CALL   3020
446C:  MOVLW  0D
446E:  MOVLB  2
4470:  MOVWF  x3C
4472:  MOVLB  0
4474:  CALL   2E86
....................             COM1_send_str(buf); 
4478:  MOVLW  01
447A:  MOVLB  2
447C:  MOVWF  x6C
447E:  MOVLW  C3
4480:  MOVWF  x6B
4482:  MOVLB  0
4484:  CALL   20D6
....................             } 
.................... 	            else 
4488:  BRA    452A
448A:  MOVLB  1
.................... 	            { 
.................... 	            val = get_int(); 
448C:  MOVLB  0
448E:  CALL   29F8
4492:  MOVFF  02,20C
4496:  MOVFF  01,20B
.................... 	            if (val < 240 && val >1) 
449A:  MOVLB  2
449C:  MOVF   x0C,F
449E:  BNZ   44B6
44A0:  MOVF   x0B,W
44A2:  SUBLW  EF
44A4:  BNC   44B6
44A6:  MOVF   x0C,F
44A8:  BNZ   44B0
44AA:  MOVF   x0B,W
44AC:  SUBLW  01
44AE:  BC    44B6
.................... 	              { 
.................... 	              setup.UART_Time = val;	               
44B0:  MOVFF  20B,FB
.................... 	              } 
.................... 	            else 
44B4:  BRA    452C
.................... 	              { 
.................... 				  			COM1_send_str("\r\nFAIL\r\n"); 
44B6:  MOVLW  02
44B8:  MOVWF  FEA
44BA:  MOVLW  14
44BC:  MOVWF  FE9
44BE:  MOVLW  09
44C0:  MOVWF  01
44C2:  CLRF   FF7
44C4:  MOVLW  00
44C6:  MOVLB  0
44C8:  CALL   08DA
44CC:  TBLRD*-
44CE:  TBLRD*+
44D0:  MOVFF  FF5,FEE
44D4:  DECFSZ 01,F
44D6:  BRA    44CE
44D8:  MOVLW  02
44DA:  MOVLB  2
44DC:  MOVWF  x6C
44DE:  MOVLW  14
44E0:  MOVWF  x6B
44E2:  MOVLB  0
44E4:  CALL   20D6
.................... 	              sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
44E8:  MOVLW  01
44EA:  MOVLB  1
44EC:  MOVWF  xA3
44EE:  MOVLW  77
44F0:  MOVWF  xA2
44F2:  MOVLW  80
44F4:  MOVWF  FF6
44F6:  MOVLW  0C
44F8:  MOVWF  FF7
44FA:  MOVLW  07
44FC:  MOVLB  2
44FE:  MOVWF  x33
4500:  MOVLB  0
4502:  CALL   2EA8
4506:  MOVFF  FB,233
450A:  MOVLW  1B
450C:  MOVLB  2
450E:  MOVWF  x34
4510:  MOVLB  0
4512:  CALL   3020
4516:  MOVLW  0D
4518:  MOVLB  2
451A:  MOVWF  x3C
451C:  MOVLB  0
451E:  CALL   2E86
.................... 	              ret = 0; 
4522:  MOVLB  1
4524:  CLRF   xC1
.................... 	              break; 
4526:  MOVLB  0
4528:  BRA    4622
452A:  MOVLB  2
.................... 	              } 
.................... 	            } 
.................... 	            ret = 1; 
452C:  MOVLW  01
452E:  MOVLB  1
4530:  MOVWF  xC1
....................          		  break;  
4532:  MOVLB  0
4534:  BRA    4622
....................                      
....................         case 'S': 
....................            { 
....................           if (query) 
4536:  MOVLB  1
4538:  MOVF   xEB,F
453A:  BZ    4588
....................             { 
....................             sprintf(buf, "US %u\r",setup.UART_Status); 
453C:  MOVLW  01
453E:  MOVWF  xA3
4540:  MOVLW  C3
4542:  MOVWF  xA2
4544:  MOVLW  8C
4546:  MOVWF  FF6
4548:  MOVLW  0C
454A:  MOVWF  FF7
454C:  MOVLW  03
454E:  MOVLB  2
4550:  MOVWF  x33
4552:  MOVLB  0
4554:  CALL   2EA8
4558:  MOVFF  FC,233
455C:  MOVLW  1B
455E:  MOVLB  2
4560:  MOVWF  x34
4562:  MOVLB  0
4564:  CALL   3020
4568:  MOVLW  0D
456A:  MOVLB  2
456C:  MOVWF  x3C
456E:  MOVLB  0
4570:  CALL   2E86
....................             COM1_send_str(buf); 
4574:  MOVLW  01
4576:  MOVLB  2
4578:  MOVWF  x6C
457A:  MOVLW  C3
457C:  MOVWF  x6B
457E:  MOVLB  0
4580:  CALL   20D6
....................             } 
....................           else 
4584:  BRA    461C
4586:  MOVLB  1
....................             { 
....................             val = get_int(); 
4588:  MOVLB  0
458A:  CALL   29F8
458E:  MOVFF  02,20C
4592:  MOVFF  01,20B
....................             if (val < 2) 
4596:  MOVLB  2
4598:  MOVF   x0C,F
459A:  BNZ   45A8
459C:  MOVF   x0B,W
459E:  SUBLW  01
45A0:  BNC   45A8
....................               { 
....................               setup.UART_Status = val; 
45A2:  MOVFF  20B,FC
....................               } 
....................             else 
45A6:  BRA    461E
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
45A8:  MOVLW  02
45AA:  MOVWF  FEA
45AC:  MOVLW  14
45AE:  MOVWF  FE9
45B0:  MOVLW  09
45B2:  MOVWF  01
45B4:  CLRF   FF7
45B6:  MOVLW  00
45B8:  MOVLB  0
45BA:  CALL   08DA
45BE:  TBLRD*-
45C0:  TBLRD*+
45C2:  MOVFF  FF5,FEE
45C6:  DECFSZ 01,F
45C8:  BRA    45C0
45CA:  MOVLW  02
45CC:  MOVLB  2
45CE:  MOVWF  x6C
45D0:  MOVLW  14
45D2:  MOVWF  x6B
45D4:  MOVLB  0
45D6:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
45DA:  MOVLW  01
45DC:  MOVLB  1
45DE:  MOVWF  xA3
45E0:  MOVLW  77
45E2:  MOVWF  xA2
45E4:  MOVLW  94
45E6:  MOVWF  FF6
45E8:  MOVLW  0C
45EA:  MOVWF  FF7
45EC:  MOVLW  07
45EE:  MOVLB  2
45F0:  MOVWF  x33
45F2:  MOVLB  0
45F4:  CALL   2EA8
45F8:  MOVFF  FC,233
45FC:  MOVLW  1B
45FE:  MOVLB  2
4600:  MOVWF  x34
4602:  MOVLB  0
4604:  CALL   3020
4608:  MOVLW  0D
460A:  MOVLB  2
460C:  MOVWF  x3C
460E:  MOVLB  0
4610:  CALL   2E86
....................               ret = 0; 
4614:  MOVLB  1
4616:  CLRF   xC1
....................               break; 
4618:  MOVLB  0
461A:  BRA    4622
461C:  MOVLB  2
....................               } 
....................             } 
....................         break; 
461E:  MOVLB  0
4620:  BRA    4622
....................         } 
....................         break; 
....................         } 
....................       break; 
4622:  GOTO   55DA
....................        
.................... 	 case 'B': // VERSION 3.3 BG Block Ghange and Check Function 23.0.2016 
....................       if (!ttccp_login) break; 
4626:  MOVLB  1
4628:  MOVF   x2B,F
462A:  BNZ   4634
462C:  MOVLB  0
462E:  GOTO   55DA
4632:  MOVLB  1
....................       switch (c2) 
....................         { 
4634:  MOVF   xED,W
4636:  XORLW  47
4638:  MOVLB  0
463A:  BZ    463E
463C:  BRA    4776
....................         case 'G':      
....................           if (query) 
463E:  MOVLB  1
4640:  MOVF   xEB,F
4642:  BZ    4690
....................             { 
....................             sprintf(buf, "BG %lu\r", setup.Block_per_second); 
4644:  MOVLW  01
4646:  MOVWF  xA3
4648:  MOVLW  C3
464A:  MOVWF  xA2
464C:  MOVLW  A0
464E:  MOVWF  FF6
4650:  MOVLW  0C
4652:  MOVWF  FF7
4654:  MOVLW  03
4656:  MOVLB  2
4658:  MOVWF  x33
465A:  MOVLB  0
465C:  CALL   2EA8
4660:  MOVLW  10
4662:  MOVWF  FE9
4664:  MOVFF  100,234
4668:  MOVFF  FF,233
466C:  CALL   2ED0
4670:  MOVLW  0D
4672:  MOVLB  2
4674:  MOVWF  x3C
4676:  MOVLB  0
4678:  CALL   2E86
....................             COM1_send_str(buf); 
467C:  MOVLW  01
467E:  MOVLB  2
4680:  MOVWF  x6C
4682:  MOVLW  C3
4684:  MOVWF  x6B
4686:  MOVLB  0
4688:  CALL   20D6
....................             } 
....................           else 
468C:  BRA    476E
468E:  MOVLB  1
....................             { 
....................             sub = get_int(); 
4690:  MOVLB  0
4692:  CALL   29F8
4696:  MOVFF  01,00
469A:  MOVFF  02,01
469E:  CLRF   02
46A0:  CLRF   03
46A2:  MOVFF  03,206
46A6:  MOVFF  02,205
46AA:  MOVFF  01,204
46AE:  MOVFF  00,203
....................             if (sub >= 1 && sub <= 40) 
46B2:  MOVLB  2
46B4:  MOVF   x06,F
46B6:  BNZ   46C6
46B8:  MOVF   x05,F
46BA:  BNZ   46C6
46BC:  MOVF   x04,F
46BE:  BNZ   46C6
46C0:  MOVF   x03,W
46C2:  SUBLW  00
46C4:  BC    46FA
46C6:  MOVF   x06,F
46C8:  BNZ   46FA
46CA:  MOVF   x05,F
46CC:  BNZ   46FA
46CE:  MOVF   x04,F
46D0:  BNZ   46FA
46D2:  MOVF   x03,W
46D4:  SUBLW  28
46D6:  BNC   46FA
....................               { 
.................... 	            //sub = sub*10; 
....................               //setup.Block_per_second = sub; 
....................               setup.Block_per_second = convert_power(sub); 
46D8:  MOVFF  204,22E
46DC:  MOVFF  203,22D
46E0:  MOVFF  204,230
46E4:  MOVFF  203,22F
46E8:  MOVLB  0
46EA:  GOTO   313A
46EE:  MOVFF  02,100
46F2:  MOVFF  01,FF
....................               } 
....................             else 
46F6:  BRA    476E
46F8:  MOVLB  2
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
46FA:  MOVLW  02
46FC:  MOVWF  FEA
46FE:  MOVLW  14
4700:  MOVWF  FE9
4702:  MOVLW  09
4704:  MOVWF  01
4706:  CLRF   FF7
4708:  MOVLW  00
470A:  MOVLB  0
470C:  CALL   08DA
4710:  TBLRD*-
4712:  TBLRD*+
4714:  MOVFF  FF5,FEE
4718:  DECFSZ 01,F
471A:  BRA    4712
471C:  MOVLW  02
471E:  MOVLB  2
4720:  MOVWF  x6C
4722:  MOVLW  14
4724:  MOVWF  x6B
4726:  MOVLB  0
4728:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR BG %lu\r", setup.Block_per_second); 
472C:  MOVLW  01
472E:  MOVLB  1
4730:  MOVWF  xA3
4732:  MOVLW  77
4734:  MOVWF  xA2
4736:  MOVLW  A8
4738:  MOVWF  FF6
473A:  MOVLW  0C
473C:  MOVWF  FF7
473E:  MOVLW  07
4740:  MOVLB  2
4742:  MOVWF  x33
4744:  MOVLB  0
4746:  CALL   2EA8
474A:  MOVLW  10
474C:  MOVWF  FE9
474E:  MOVFF  100,234
4752:  MOVFF  FF,233
4756:  CALL   2ED0
475A:  MOVLW  0D
475C:  MOVLB  2
475E:  MOVWF  x3C
4760:  MOVLB  0
4762:  CALL   2E86
....................               ret = 0; 
4766:  MOVLB  1
4768:  CLRF   xC1
....................               break; 
476A:  MOVLB  0
476C:  BRA    4776
....................               } 
....................             } 
....................           ret = 1; 
476E:  MOVLW  01
4770:  MOVLB  1
4772:  MOVWF  xC1
....................           break; 
4774:  MOVLB  0
....................         } 
....................       break; 
4776:  GOTO   55DA
....................        
....................       	 
....................     case 'I': 
....................       if (!ttccp_login) break; 
477A:  MOVLB  1
477C:  MOVF   x2B,F
477E:  BNZ   4788
4780:  MOVLB  0
4782:  GOTO   55DA
4786:  MOVLB  1
....................       switch (c2) 
....................         { 
4788:  MOVF   xED,W
478A:  XORLW  44
478C:  MOVLB  0
478E:  BZ    4798
4790:  XORLW  07
4792:  BTFSC  FD8.2
4794:  BRA    4890
4796:  BRA    48F0
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
4798:  MOVLB  1
479A:  MOVF   xEB,F
479C:  BZ    47EA
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
479E:  MOVLW  01
47A0:  MOVWF  xA3
47A2:  MOVLW  C3
47A4:  MOVWF  xA2
47A6:  MOVLW  B4
47A8:  MOVWF  FF6
47AA:  MOVLW  0C
47AC:  MOVWF  FF7
47AE:  MOVLW  03
47B0:  MOVLB  2
47B2:  MOVWF  x33
47B4:  MOVLB  0
47B6:  CALL   2EA8
47BA:  MOVFF  B4,233
47BE:  MOVLW  1B
47C0:  MOVLB  2
47C2:  MOVWF  x34
47C4:  MOVLB  0
47C6:  CALL   3020
47CA:  MOVLW  0D
47CC:  MOVLB  2
47CE:  MOVWF  x3C
47D0:  MOVLB  0
47D2:  CALL   2E86
....................             COM1_send_str(buf); 
47D6:  MOVLW  01
47D8:  MOVLB  2
47DA:  MOVWF  x6C
47DC:  MOVLW  C3
47DE:  MOVWF  x6B
47E0:  MOVLB  0
47E2:  CALL   20D6
....................             } 
....................           else 
47E6:  BRA    4886
47E8:  MOVLB  1
....................             { 
....................             val = get_int(); 
47EA:  MOVLB  0
47EC:  CALL   29F8
47F0:  MOVFF  02,20C
47F4:  MOVFF  01,20B
....................             if (val < 4) 
47F8:  MOVLB  2
47FA:  MOVF   x0C,F
47FC:  BNZ   4812
47FE:  MOVF   x0B,W
4800:  SUBLW  03
4802:  BNC   4812
....................               { 
....................               setup.internal_pattern = val; 
4804:  MOVFF  20B,B4
....................               FPGA_set_reg6(); 
4808:  MOVLB  0
480A:  CALL   171E
....................               } 
....................             else 
480E:  BRA    4886
4810:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4812:  MOVLW  02
4814:  MOVWF  FEA
4816:  MOVLW  14
4818:  MOVWF  FE9
481A:  MOVLW  09
481C:  MOVWF  01
481E:  CLRF   FF7
4820:  MOVLW  00
4822:  MOVLB  0
4824:  CALL   08DA
4828:  TBLRD*-
482A:  TBLRD*+
482C:  MOVFF  FF5,FEE
4830:  DECFSZ 01,F
4832:  BRA    482A
4834:  MOVLW  02
4836:  MOVLB  2
4838:  MOVWF  x6C
483A:  MOVLW  14
483C:  MOVWF  x6B
483E:  MOVLB  0
4840:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
4844:  MOVLW  01
4846:  MOVLB  1
4848:  MOVWF  xA3
484A:  MOVLW  77
484C:  MOVWF  xA2
484E:  MOVLW  BC
4850:  MOVWF  FF6
4852:  MOVLW  0C
4854:  MOVWF  FF7
4856:  MOVLW  07
4858:  MOVLB  2
485A:  MOVWF  x33
485C:  MOVLB  0
485E:  CALL   2EA8
4862:  MOVFF  B4,233
4866:  MOVLW  1B
4868:  MOVLB  2
486A:  MOVWF  x34
486C:  MOVLB  0
486E:  CALL   3020
4872:  MOVLW  0D
4874:  MOVLB  2
4876:  MOVWF  x3C
4878:  MOVLB  0
487A:  CALL   2E86
....................               ret = 0; 
487E:  MOVLB  1
4880:  CLRF   xC1
....................               break; 
4882:  MOVLB  0
4884:  BRA    48F0
....................               } 
....................             } 
....................           ret = 1; 
4886:  MOVLW  01
4888:  MOVLB  1
488A:  MOVWF  xC1
....................           break; 
488C:  MOVLB  0
488E:  BRA    48F0
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
4890:  MOVLB  1
4892:  MOVF   xEB,F
4894:  BZ    48E2
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
4896:  MOVLW  01
4898:  MOVWF  xA3
489A:  MOVLW  C3
489C:  MOVWF  xA2
489E:  MOVLW  C8
48A0:  MOVWF  FF6
48A2:  MOVLW  0C
48A4:  MOVWF  FF7
48A6:  MOVLW  03
48A8:  MOVLB  2
48AA:  MOVWF  x33
48AC:  MOVLB  0
48AE:  CALL   2EA8
48B2:  MOVLW  10
48B4:  MOVWF  FE9
48B6:  MOVFF  AC,234
48BA:  MOVFF  AB,233
48BE:  CALL   2ED0
48C2:  MOVLW  0D
48C4:  MOVLB  2
48C6:  MOVWF  x3C
48C8:  MOVLB  0
48CA:  CALL   2E86
....................             COM1_send_str(buf); 
48CE:  MOVLW  01
48D0:  MOVLB  2
48D2:  MOVWF  x6C
48D4:  MOVLW  C3
48D6:  MOVWF  x6B
48D8:  MOVLB  0
48DA:  CALL   20D6
....................             } 
....................           else 
48DE:  BRA    48E8
48E0:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
48E2:  MOVLB  0
48E4:  GOTO   3202
....................             } 
....................           ret = 1; 
48E8:  MOVLW  01
48EA:  MOVLB  1
48EC:  MOVWF  xC1
....................           break; 
48EE:  MOVLB  0
....................         } 
....................       break; 
48F0:  GOTO   55DA
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
48F4:  MOVLB  1
48F6:  MOVF   x2B,F
48F8:  BNZ   4902
48FA:  MOVLB  0
48FC:  GOTO   55DA
4900:  MOVLB  1
....................       if (c2 == 'E') 
4902:  MOVF   xED,W
4904:  SUBLW  45
4906:  BNZ   490A
....................         { 
....................         goto get_temp; 
4908:  BRA    4E7E
....................         } 
....................       break; 
490A:  MOVLB  0
490C:  GOTO   55DA
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
4910:  MOVLB  1
4912:  MOVF   x2B,F
4914:  BNZ   491E
4916:  MOVLB  0
4918:  GOTO   55DA
491C:  MOVLB  1
....................       switch (c2) 
....................         { 
491E:  MOVF   xED,W
4920:  XORLW  45
4922:  MOVLB  0
4924:  BZ    4940
4926:  XORLW  09
4928:  BTFSC  FD8.2
492A:  BRA    4A22
492C:  XORLW  1C
492E:  BTFSC  FD8.2
4930:  BRA    4A6E
4932:  XORLW  1D
4934:  BTFSC  FD8.2
4936:  BRA    4AE4
4938:  XORLW  0E
493A:  BTFSC  FD8.2
493C:  BRA    4B5A
493E:  BRA    4BD4
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
4940:  MOVLB  1
4942:  MOVF   xED,W
4944:  SUBLW  45
4946:  BNZ   49EC
.................... 		{ 
....................           sprintf(buf, "VE %s ID=%02lu DT=%02lu%02u\r", VERSION, setup.unit_ID, setup.year, setup.week); 
4948:  MOVLW  01
494A:  MOVWF  xA3
494C:  MOVLW  C3
494E:  MOVWF  xA2
4950:  MOVLW  D0
4952:  MOVWF  FF6
4954:  MOVLW  0C
4956:  MOVWF  FF7
4958:  MOVLW  03
495A:  MOVLB  2
495C:  MOVWF  x33
495E:  MOVLB  0
4960:  CALL   2EA8
4964:  MOVLW  04
4966:  MOVWF  FF6
4968:  MOVLW  09
496A:  MOVWF  FF7
496C:  GOTO   32D2
4970:  MOVLW  D5
4972:  MOVWF  FF6
4974:  MOVLW  0C
4976:  MOVWF  FF7
4978:  MOVLW  04
497A:  MOVLB  2
497C:  MOVWF  x33
497E:  MOVLB  0
4980:  CALL   2EA8
4984:  MOVLW  0B
4986:  MOVWF  FE9
4988:  MOVFF  F2,234
498C:  MOVFF  F1,233
4990:  CALL   2ED0
4994:  MOVLW  DE
4996:  MOVWF  FF6
4998:  MOVLW  0C
499A:  MOVWF  FF7
499C:  MOVLW  04
499E:  MOVLB  2
49A0:  MOVWF  x33
49A2:  MOVLB  0
49A4:  CALL   2EA8
49A8:  MOVLW  0B
49AA:  MOVWF  FE9
49AC:  MOVFF  EF,234
49B0:  MOVFF  EE,233
49B4:  CALL   2ED0
49B8:  MOVFF  F0,233
49BC:  MOVLW  01
49BE:  MOVLB  2
49C0:  MOVWF  x34
49C2:  MOVLB  0
49C4:  CALL   3020
49C8:  MOVLW  0D
49CA:  MOVLB  2
49CC:  MOVWF  x3C
49CE:  MOVLB  0
49D0:  CALL   2E86
....................           COM1_send_str(buf); 
49D4:  MOVLW  01
49D6:  MOVLB  2
49D8:  MOVWF  x6C
49DA:  MOVLW  C3
49DC:  MOVWF  x6B
49DE:  MOVLB  0
49E0:  CALL   20D6
....................           ret = 1; 
49E4:  MOVLW  01
49E6:  MOVLB  1
49E8:  MOVWF  xC1
.................... 		} 
.................... 		else 
49EA:  BRA    4A1E
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
49EC:  MOVLW  02
49EE:  MOVWF  FEA
49F0:  MOVLW  14
49F2:  MOVWF  FE9
49F4:  MOVLW  09
49F6:  MOVWF  01
49F8:  CLRF   FF7
49FA:  MOVLW  00
49FC:  MOVLB  0
49FE:  CALL   08DA
4A02:  TBLRD*-
4A04:  TBLRD*+
4A06:  MOVFF  FF5,FEE
4A0A:  DECFSZ 01,F
4A0C:  BRA    4A04
4A0E:  MOVLW  02
4A10:  MOVLB  2
4A12:  MOVWF  x6C
4A14:  MOVLW  14
4A16:  MOVWF  x6B
4A18:  MOVLB  0
4A1A:  CALL   20D6
....................           break; 
4A1E:  MOVLB  0
4A20:  BRA    4BD4
....................  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
4A22:  MOVLB  1
4A24:  MOVF   xED,W
4A26:  SUBLW  4C
4A28:  BNZ   4A38
.................... 		{ 
....................  
....................           set_low_power_level(); 
4A2A:  MOVLB  0
4A2C:  GOTO   32F4
....................           ret = 1; 
4A30:  MOVLW  01
4A32:  MOVLB  1
4A34:  MOVWF  xC1
.................... 		} 
.................... 		else 
4A36:  BRA    4A6A
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
4A38:  MOVLW  02
4A3A:  MOVWF  FEA
4A3C:  MOVLW  14
4A3E:  MOVWF  FE9
4A40:  MOVLW  09
4A42:  MOVWF  01
4A44:  CLRF   FF7
4A46:  MOVLW  00
4A48:  MOVLB  0
4A4A:  CALL   08DA
4A4E:  TBLRD*-
4A50:  TBLRD*+
4A52:  MOVFF  FF5,FEE
4A56:  DECFSZ 01,F
4A58:  BRA    4A50
4A5A:  MOVLW  02
4A5C:  MOVLB  2
4A5E:  MOVWF  x6C
4A60:  MOVLW  14
4A62:  MOVWF  x6B
4A64:  MOVLB  0
4A66:  CALL   20D6
....................           break; 
4A6A:  MOVLB  0
4A6C:  BRA    4BD4
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
4A6E:  MOVLB  1
4A70:  MOVF   xEB,F
4A72:  BZ    4AD4
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4A74:  MOVLW  14
4A76:  MOVLB  0
4A78:  ADDWF  xBB,W
4A7A:  MOVLB  2
4A7C:  MOVWF  x2D
4A7E:  MOVLW  00
4A80:  MOVLB  0
4A82:  ADDWFC xBC,W
4A84:  MOVLB  2
4A86:  MOVWF  x2E
4A88:  MOVLW  01
4A8A:  MOVLB  1
4A8C:  MOVWF  xA3
4A8E:  MOVLW  C3
4A90:  MOVWF  xA2
4A92:  MOVLW  EE
4A94:  MOVWF  FF6
4A96:  MOVLW  0C
4A98:  MOVWF  FF7
4A9A:  MOVLW  03
4A9C:  MOVLB  2
4A9E:  MOVWF  x33
4AA0:  MOVLB  0
4AA2:  CALL   2EA8
4AA6:  MOVLW  10
4AA8:  MOVWF  FE9
4AAA:  MOVFF  22E,234
4AAE:  MOVFF  22D,233
4AB2:  CALL   2ED0
4AB6:  MOVLW  0D
4AB8:  MOVLB  2
4ABA:  MOVWF  x3C
4ABC:  MOVLB  0
4ABE:  CALL   2E86
....................             COM1_send_str(buf); 
4AC2:  MOVLW  01
4AC4:  MOVLB  2
4AC6:  MOVWF  x6C
4AC8:  MOVLW  C3
4ACA:  MOVWF  x6B
4ACC:  MOVLB  0
4ACE:  CALL   20D6
....................             } 
....................           else 
4AD2:  BRA    4ADA
....................             set_power_level(); 
4AD4:  MOVLB  0
4AD6:  GOTO   3368
....................             ret = 1; 
4ADA:  MOVLW  01
4ADC:  MOVLB  1
4ADE:  MOVWF  xC1
....................           break; 
4AE0:  MOVLB  0
4AE2:  BRA    4BD4
....................  
....................         case 'M': // manual power level 
....................           if (query) 
4AE4:  MOVLB  1
4AE6:  MOVF   xEB,F
4AE8:  BZ    4B36
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
4AEA:  MOVLW  01
4AEC:  MOVWF  xA3
4AEE:  MOVLW  C3
4AF0:  MOVWF  xA2
4AF2:  MOVLW  F6
4AF4:  MOVWF  FF6
4AF6:  MOVLW  0C
4AF8:  MOVWF  FF7
4AFA:  MOVLW  03
4AFC:  MOVLB  2
4AFE:  MOVWF  x33
4B00:  MOVLB  0
4B02:  CALL   2EA8
4B06:  MOVLW  10
4B08:  MOVWF  FE9
4B0A:  MOVFF  23,234
4B0E:  MOVFF  22,233
4B12:  CALL   2ED0
4B16:  MOVLW  0D
4B18:  MOVLB  2
4B1A:  MOVWF  x3C
4B1C:  MOVLB  0
4B1E:  CALL   2E86
....................             COM1_send_str(buf); 
4B22:  MOVLW  01
4B24:  MOVLB  2
4B26:  MOVWF  x6C
4B28:  MOVLW  C3
4B2A:  MOVWF  x6B
4B2C:  MOVLB  0
4B2E:  CALL   20D6
....................             } 
....................           else 
4B32:  BRA    4B58
4B34:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
4B36:  MOVLB  0
4B38:  CALL   29F8
4B3C:  MOVFF  02,23
4B40:  MOVFF  01,22
....................             set_AD5312(DAC_NEG_VOLT, val); 
4B44:  MOVLW  01
4B46:  MOVLB  2
4B48:  MOVWF  x31
4B4A:  MOVFF  20C,233
4B4E:  MOVFF  20B,232
4B52:  MOVLB  0
4B54:  CALL   0F78
....................             } 
....................           break; 
4B58:  BRA    4BD4
....................         case 'C': // manual power level 
....................           if (query) 
4B5A:  MOVLB  1
4B5C:  MOVF   xEB,F
4B5E:  BZ    4BAC
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
4B60:  MOVLW  01
4B62:  MOVWF  xA3
4B64:  MOVLW  C3
4B66:  MOVWF  xA2
4B68:  MOVLW  FE
4B6A:  MOVWF  FF6
4B6C:  MOVLW  0C
4B6E:  MOVWF  FF7
4B70:  MOVLW  03
4B72:  MOVLB  2
4B74:  MOVWF  x33
4B76:  MOVLB  0
4B78:  CALL   2EA8
4B7C:  MOVLW  10
4B7E:  MOVWF  FE9
4B80:  MOVFF  25,234
4B84:  MOVFF  24,233
4B88:  CALL   2ED0
4B8C:  MOVLW  0D
4B8E:  MOVLB  2
4B90:  MOVWF  x3C
4B92:  MOVLB  0
4B94:  CALL   2E86
....................             COM1_send_str(buf); 
4B98:  MOVLW  01
4B9A:  MOVLB  2
4B9C:  MOVWF  x6C
4B9E:  MOVLW  C3
4BA0:  MOVWF  x6B
4BA2:  MOVLB  0
4BA4:  CALL   20D6
....................             } 
....................           else 
4BA8:  BRA    4BD4
4BAA:  MOVLB  1
....................             { 
....................             val = get_int(); 
4BAC:  MOVLB  0
4BAE:  CALL   29F8
4BB2:  MOVFF  02,20C
4BB6:  MOVFF  01,20B
....................             manual_pos = val; 
4BBA:  MOVFF  20C,25
4BBE:  MOVFF  20B,24
....................             set_AD5312(DAC_POS_VOLT, val); 
4BC2:  MOVLB  2
4BC4:  CLRF   x31
4BC6:  MOVFF  20C,233
4BCA:  MOVFF  20B,232
4BCE:  MOVLB  0
4BD0:  CALL   0F78
....................             } 
....................           break; 
.................... 		} 
....................       break; 
4BD4:  GOTO   55DA
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
4BD8:  MOVLB  1
4BDA:  MOVF   x2B,F
4BDC:  BNZ   4BE6
4BDE:  MOVLB  0
4BE0:  GOTO   55DA
4BE4:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
4BE6:  MOVF   xED,W
4BE8:  SUBLW  53
4BEA:  BTFSS  FD8.2
4BEC:  BRA    4CE4
....................         { 
....................           if (query) 
4BEE:  MOVF   xEB,F
4BF0:  BZ    4C3E
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
4BF2:  MOVLW  01
4BF4:  MOVWF  xA3
4BF6:  MOVLW  C3
4BF8:  MOVWF  xA2
4BFA:  MOVLW  06
4BFC:  MOVWF  FF6
4BFE:  MOVLW  0D
4C00:  MOVWF  FF7
4C02:  MOVLW  03
4C04:  MOVLB  2
4C06:  MOVWF  x33
4C08:  MOVLB  0
4C0A:  CALL   2EA8
4C0E:  MOVFF  B2,233
4C12:  MOVLW  1B
4C14:  MOVLB  2
4C16:  MOVWF  x34
4C18:  MOVLB  0
4C1A:  CALL   3020
4C1E:  MOVLW  0D
4C20:  MOVLB  2
4C22:  MOVWF  x3C
4C24:  MOVLB  0
4C26:  CALL   2E86
....................             COM1_send_str(buf); 
4C2A:  MOVLW  01
4C2C:  MOVLB  2
4C2E:  MOVWF  x6C
4C30:  MOVLW  C3
4C32:  MOVWF  x6B
4C34:  MOVLB  0
4C36:  CALL   20D6
....................             } 
....................           else 
4C3A:  BRA    4CDC
4C3C:  MOVLB  1
....................             { 
....................             val = get_int(); 
4C3E:  MOVLB  0
4C40:  CALL   29F8
4C44:  MOVFF  02,20C
4C48:  MOVFF  01,20B
....................             if (val < 2) 
4C4C:  MOVLB  2
4C4E:  MOVF   x0C,F
4C50:  BNZ   4C66
4C52:  MOVF   x0B,W
4C54:  SUBLW  01
4C56:  BNC   4C66
....................               { 
....................               setup.clock_source = val; 
4C58:  MOVFF  20B,B2
....................               FPGA_set_reg6(); 
4C5C:  MOVLB  0
4C5E:  CALL   171E
....................               } 
....................             else 
4C62:  BRA    4CDC
4C64:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4C66:  MOVLW  02
4C68:  MOVWF  FEA
4C6A:  MOVLW  14
4C6C:  MOVWF  FE9
4C6E:  MOVLW  09
4C70:  MOVWF  01
4C72:  CLRF   FF7
4C74:  MOVLW  00
4C76:  MOVLB  0
4C78:  CALL   08DA
4C7C:  TBLRD*-
4C7E:  TBLRD*+
4C80:  MOVFF  FF5,FEE
4C84:  DECFSZ 01,F
4C86:  BRA    4C7E
4C88:  MOVLW  02
4C8A:  MOVLB  2
4C8C:  MOVWF  x6C
4C8E:  MOVLW  14
4C90:  MOVWF  x6B
4C92:  MOVLB  0
4C94:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
4C98:  MOVLW  01
4C9A:  MOVLB  1
4C9C:  MOVWF  xA3
4C9E:  MOVLW  77
4CA0:  MOVWF  xA2
4CA2:  MOVLW  0E
4CA4:  MOVWF  FF6
4CA6:  MOVLW  0D
4CA8:  MOVWF  FF7
4CAA:  MOVLW  07
4CAC:  MOVLB  2
4CAE:  MOVWF  x33
4CB0:  MOVLB  0
4CB2:  CALL   2EA8
4CB6:  MOVFF  B2,233
4CBA:  MOVLW  1B
4CBC:  MOVLB  2
4CBE:  MOVWF  x34
4CC0:  MOVLB  0
4CC2:  CALL   3020
4CC6:  MOVLW  0D
4CC8:  MOVLB  2
4CCA:  MOVWF  x3C
4CCC:  MOVLB  0
4CCE:  CALL   2E86
....................               ret = 0; 
4CD2:  MOVLB  1
4CD4:  CLRF   xC1
....................               break; 
4CD6:  MOVLB  0
4CD8:  GOTO   55DA
....................               } 
....................             } 
....................  
....................         ret = 1; 
4CDC:  MOVLW  01
4CDE:  MOVLB  1
4CE0:  MOVWF  xC1
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
4CE2:  BRA    4DE0
4CE4:  MOVF   xED,W
4CE6:  SUBLW  50
4CE8:  BTFSS  FD8.2
4CEA:  BRA    4DE0
....................         { 
....................           if (query) 
4CEC:  MOVF   xEB,F
4CEE:  BZ    4D3C
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
4CF0:  MOVLW  01
4CF2:  MOVWF  xA3
4CF4:  MOVLW  C3
4CF6:  MOVWF  xA2
4CF8:  MOVLW  1A
4CFA:  MOVWF  FF6
4CFC:  MOVLW  0D
4CFE:  MOVWF  FF7
4D00:  MOVLW  03
4D02:  MOVLB  2
4D04:  MOVWF  x33
4D06:  MOVLB  0
4D08:  CALL   2EA8
4D0C:  MOVFF  B0,233
4D10:  MOVLW  1B
4D12:  MOVLB  2
4D14:  MOVWF  x34
4D16:  MOVLB  0
4D18:  CALL   3020
4D1C:  MOVLW  0D
4D1E:  MOVLB  2
4D20:  MOVWF  x3C
4D22:  MOVLB  0
4D24:  CALL   2E86
....................             COM1_send_str(buf); 
4D28:  MOVLW  01
4D2A:  MOVLB  2
4D2C:  MOVWF  x6C
4D2E:  MOVLW  C3
4D30:  MOVWF  x6B
4D32:  MOVLB  0
4D34:  CALL   20D6
....................             } 
....................           else 
4D38:  BRA    4DDA
4D3A:  MOVLB  1
....................             { 
....................             val = get_int(); 
4D3C:  MOVLB  0
4D3E:  CALL   29F8
4D42:  MOVFF  02,20C
4D46:  MOVFF  01,20B
....................             if (val < 2) 
4D4A:  MOVLB  2
4D4C:  MOVF   x0C,F
4D4E:  BNZ   4D64
4D50:  MOVF   x0B,W
4D52:  SUBLW  01
4D54:  BNC   4D64
....................               { 
....................               setup.clock_polarity = val; 
4D56:  MOVFF  20B,B0
....................               FPGA_set_reg0(); 
4D5A:  MOVLB  0
4D5C:  CALL   16C2
....................               } 
....................             else 
4D60:  BRA    4DDA
4D62:  MOVLB  2
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4D64:  MOVLW  02
4D66:  MOVWF  FEA
4D68:  MOVLW  14
4D6A:  MOVWF  FE9
4D6C:  MOVLW  09
4D6E:  MOVWF  01
4D70:  CLRF   FF7
4D72:  MOVLW  00
4D74:  MOVLB  0
4D76:  CALL   08DA
4D7A:  TBLRD*-
4D7C:  TBLRD*+
4D7E:  MOVFF  FF5,FEE
4D82:  DECFSZ 01,F
4D84:  BRA    4D7C
4D86:  MOVLW  02
4D88:  MOVLB  2
4D8A:  MOVWF  x6C
4D8C:  MOVLW  14
4D8E:  MOVWF  x6B
4D90:  MOVLB  0
4D92:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4D96:  MOVLW  01
4D98:  MOVLB  1
4D9A:  MOVWF  xA3
4D9C:  MOVLW  77
4D9E:  MOVWF  xA2
4DA0:  MOVLW  22
4DA2:  MOVWF  FF6
4DA4:  MOVLW  0D
4DA6:  MOVWF  FF7
4DA8:  MOVLW  07
4DAA:  MOVLB  2
4DAC:  MOVWF  x33
4DAE:  MOVLB  0
4DB0:  CALL   2EA8
4DB4:  MOVFF  B0,233
4DB8:  MOVLW  1B
4DBA:  MOVLB  2
4DBC:  MOVWF  x34
4DBE:  MOVLB  0
4DC0:  CALL   3020
4DC4:  MOVLW  0D
4DC6:  MOVLB  2
4DC8:  MOVWF  x3C
4DCA:  MOVLB  0
4DCC:  CALL   2E86
....................               ret = 0; 
4DD0:  MOVLB  1
4DD2:  CLRF   xC1
....................               break; 
4DD4:  MOVLB  0
4DD6:  GOTO   55DA
....................               } 
....................             } 
....................  
....................         ret = 1; 
4DDA:  MOVLW  01
4DDC:  MOVLB  1
4DDE:  MOVWF  xC1
....................         } 
....................       break; 
4DE0:  MOVLB  0
4DE2:  GOTO   55DA
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
4DE6:  MOVLB  1
4DE8:  MOVF   x2B,F
4DEA:  BNZ   4DF4
4DEC:  MOVLB  0
4DEE:  GOTO   55DA
4DF2:  MOVLB  1
....................       switch (c2) 
....................         { 
4DF4:  MOVF   xED,W
4DF6:  XORLW  50
4DF8:  MOVLB  0
4DFA:  BZ    4E08
4DFC:  XORLW  04
4DFE:  BZ    4E7C
4E00:  XORLW  06
4E02:  BTFSC  FD8.2
4E04:  BRA    506E
4E06:  BRA    5096
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
4E08:  MOVLW  14
4E0A:  MOVWF  01
4E0C:  MOVF   FC2,W
4E0E:  ANDLW  83
4E10:  IORWF  01,W
4E12:  MOVWF  FC2
....................           delay_us(50); 
4E14:  MOVLW  42
4E16:  MOVWF  00
4E18:  DECFSZ 00,F
4E1A:  BRA    4E18
4E1C:  NOP   
....................           val = read_adc(); 
4E1E:  BSF    FC2.1
4E20:  BTFSC  FC2.1
4E22:  BRA    4E20
4E24:  MOVFF  FC4,20C
4E28:  MOVLB  2
4E2A:  MOVFF  FC3,20B
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
4E2E:  MOVLW  01
4E30:  MOVLB  1
4E32:  MOVWF  xA3
4E34:  MOVLW  77
4E36:  MOVWF  xA2
4E38:  MOVLW  2E
4E3A:  MOVWF  FF6
4E3C:  MOVLW  0D
4E3E:  MOVWF  FF7
4E40:  MOVLW  04
4E42:  MOVLB  2
4E44:  MOVWF  x33
4E46:  MOVLB  0
4E48:  CALL   2EA8
4E4C:  MOVLW  10
4E4E:  MOVWF  FE9
4E50:  MOVFF  20C,234
4E54:  MOVFF  20B,233
4E58:  CALL   2ED0
4E5C:  MOVLW  0D
4E5E:  MOVLB  2
4E60:  MOVWF  x3C
4E62:  MOVLB  0
4E64:  CALL   2E86
4E68:  MOVLW  0A
4E6A:  MOVLB  2
4E6C:  MOVWF  x3C
4E6E:  MOVLB  0
4E70:  CALL   2E86
....................           ret = 0; 
4E74:  MOVLB  1
4E76:  CLRF   xC1
....................           break; 
4E78:  MOVLB  0
4E7A:  BRA    5096
4E7C:  MOVLB  1
....................         case 'T': 
.................... get_temp: 
....................           set_adc_channel(A2D_TEMP); // read temperature 
4E7E:  MOVLW  18
4E80:  MOVWF  01
4E82:  MOVF   FC2,W
4E84:  ANDLW  83
4E86:  IORWF  01,W
4E88:  MOVWF  FC2
....................           delay_us(50); 
4E8A:  MOVLW  42
4E8C:  MOVWF  00
4E8E:  DECFSZ 00,F
4E90:  BRA    4E8E
4E92:  NOP   
....................           val = read_adc(); 
4E94:  BSF    FC2.1
4E96:  BTFSC  FC2.1
4E98:  BRA    4E96
4E9A:  MOVFF  FC4,20C
4E9E:  MOVLB  2
4EA0:  MOVFF  FC3,20B
....................           temp = (float)val / 1024.0 * 3.3; 
4EA4:  MOVFF  20C,22E
4EA8:  MOVFF  20B,22D
4EAC:  MOVLB  0
4EAE:  GOTO   33DC
4EB2:  MOVFF  00,22D
4EB6:  MOVFF  01,22E
4EBA:  MOVFF  02,22F
4EBE:  MOVFF  03,230
4EC2:  MOVFF  03,255
4EC6:  MOVFF  02,254
4ECA:  MOVFF  01,253
4ECE:  MOVFF  00,252
4ED2:  MOVLB  2
4ED4:  CLRF   x59
4ED6:  CLRF   x58
4ED8:  CLRF   x57
4EDA:  MOVLW  89
4EDC:  MOVWF  x56
4EDE:  MOVLB  0
4EE0:  CALL   178E
4EE4:  MOVFF  00,22D
4EE8:  MOVFF  01,22E
4EEC:  MOVFF  02,22F
4EF0:  MOVFF  03,230
4EF4:  MOVFF  03,255
4EF8:  MOVFF  02,254
4EFC:  MOVFF  01,253
4F00:  MOVFF  00,252
4F04:  MOVLW  33
4F06:  MOVLB  2
4F08:  MOVWF  x59
4F0A:  MOVWF  x58
4F0C:  MOVLW  53
4F0E:  MOVWF  x57
4F10:  MOVLW  80
4F12:  MOVWF  x56
4F14:  MOVLB  0
4F16:  CALL   18EC
4F1A:  MOVFF  03,20A
4F1E:  MOVFF  02,209
4F22:  MOVFF  01,208
4F26:  MOVFF  00,207
....................           temp -= 0.75; 
4F2A:  BSF    FD8.1
4F2C:  MOVFF  20A,230
4F30:  MOVFF  209,22F
4F34:  MOVFF  208,22E
4F38:  MOVFF  207,22D
4F3C:  MOVLB  2
4F3E:  CLRF   x34
4F40:  CLRF   x33
4F42:  MOVLW  40
4F44:  MOVWF  x32
4F46:  MOVLW  7E
4F48:  MOVWF  x31
4F4A:  MOVLB  0
4F4C:  CALL   2350
4F50:  MOVFF  03,20A
4F54:  MOVFF  02,209
4F58:  MOVFF  01,208
4F5C:  MOVFF  00,207
....................           temp *= 100; 
4F60:  MOVFF  20A,255
4F64:  MOVFF  209,254
4F68:  MOVFF  208,253
4F6C:  MOVFF  207,252
4F70:  MOVLB  2
4F72:  CLRF   x59
4F74:  CLRF   x58
4F76:  MOVLW  48
4F78:  MOVWF  x57
4F7A:  MOVLW  85
4F7C:  MOVWF  x56
4F7E:  MOVLB  0
4F80:  CALL   18EC
4F84:  MOVFF  03,20A
4F88:  MOVFF  02,209
4F8C:  MOVFF  01,208
4F90:  MOVFF  00,207
....................           temp += 25.0; 
4F94:  BCF    FD8.1
4F96:  MOVFF  20A,230
4F9A:  MOVFF  209,22F
4F9E:  MOVFF  208,22E
4FA2:  MOVFF  207,22D
4FA6:  MOVLB  2
4FA8:  CLRF   x34
4FAA:  CLRF   x33
4FAC:  MOVLW  48
4FAE:  MOVWF  x32
4FB0:  MOVLW  83
4FB2:  MOVWF  x31
4FB4:  MOVLB  0
4FB6:  CALL   2350
4FBA:  MOVFF  03,20A
4FBE:  MOVFF  02,209
4FC2:  MOVFF  01,208
4FC6:  MOVFF  00,207
....................           if(setup.pwr) 
4FCA:  MOVF   xAD,W
4FCC:  IORWF  xAE,W
4FCE:  BZ    502A
....................             { 
....................             sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", temp); 
4FD0:  MOVLW  01
4FD2:  MOVLB  1
4FD4:  MOVWF  xA3
4FD6:  MOVLW  77
4FD8:  MOVWF  xA2
4FDA:  MOVLW  38
4FDC:  MOVWF  FF6
4FDE:  MOVLW  0D
4FE0:  MOVWF  FF7
4FE2:  MOVLW  06
4FE4:  MOVLB  2
4FE6:  MOVWF  x33
4FE8:  MOVLB  0
4FEA:  CALL   2EA8
4FEE:  MOVLW  05
4FF0:  MOVWF  FE9
4FF2:  MOVFF  20A,230
4FF6:  MOVFF  209,22F
4FFA:  MOVFF  208,22E
4FFE:  MOVFF  207,22D
5002:  MOVLW  02
5004:  MOVLB  2
5006:  MOVWF  x31
5008:  MOVLB  0
500A:  GOTO   3414
500E:  MOVLW  43
5010:  MOVWF  FF6
5012:  MOVLW  0D
5014:  MOVWF  FF7
5016:  MOVLW  08
5018:  MOVLB  2
501A:  MOVWF  x33
501C:  MOVLB  0
501E:  CALL   2EA8
....................             ret = 0; 
5022:  MOVLB  1
5024:  CLRF   xC1
....................             } 
....................             else 
5026:  BRA    506A
5028:  MOVLB  0
....................             { 
....................             temp = 0; 
502A:  MOVLB  2
502C:  CLRF   x0A
502E:  CLRF   x09
5030:  CLRF   x08
5032:  CLRF   x07
....................             COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
5034:  MOVLW  02
5036:  MOVWF  FEA
5038:  MOVLW  14
503A:  MOVWF  FE9
503C:  MOVLW  15
503E:  MOVWF  01
5040:  CLRF   FF7
5042:  MOVLW  00
5044:  MOVLB  0
5046:  CALL   0914
504A:  TBLRD*-
504C:  TBLRD*+
504E:  MOVFF  FF5,FEE
5052:  DECFSZ 01,F
5054:  BRA    504C
5056:  MOVLW  02
5058:  MOVLB  2
505A:  MOVWF  x6C
505C:  MOVLW  14
505E:  MOVWF  x6B
5060:  MOVLB  0
5062:  CALL   20D6
....................             ret = 0; 
5066:  MOVLB  1
5068:  CLRF   xC1
....................              
....................             } 
....................           break; 
506A:  MOVLB  0
506C:  BRA    5096
....................  
....................         case 'R': 
....................                 set_adc_channel(A2D_PREV); // select forward power input 
506E:  MOVLW  10
5070:  MOVWF  01
5072:  MOVF   FC2,W
5074:  ANDLW  83
5076:  IORWF  01,W
5078:  MOVWF  FC2
....................                 delay_us(20); 
507A:  MOVLW  1A
507C:  MOVWF  00
507E:  DECFSZ 00,F
5080:  BRA    507E
5082:  NOP   
....................                 revp = read_adc(); 
5084:  BSF    FC2.1
5086:  BTFSC  FC2.1
5088:  BRA    5086
508A:  MOVFF  FC4,108
508E:  MOVLB  1
5090:  MOVFF  FC3,107
5094:  MOVLB  0
....................                 } 
....................               break; 
5096:  BRA    55DA
....................       break; 
5098:  BRA    55DA
....................  
....................       case 'Q': //statusl      if (!ttccp_login) break; 
....................  
....................       COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
509A:  MOVLW  02
509C:  MOVWF  FEA
509E:  MOVLW  14
50A0:  MOVWF  FE9
50A2:  MOVLW  19
50A4:  MOVWF  01
50A6:  CLRF   FF7
50A8:  MOVLW  00
50AA:  CALL   093A
50AE:  TBLRD*-
50B0:  TBLRD*+
50B2:  MOVFF  FF5,FEE
50B6:  DECFSZ 01,F
50B8:  BRA    50B0
50BA:  MOVLW  02
50BC:  MOVLB  2
50BE:  MOVWF  x6C
50C0:  MOVLW  14
50C2:  MOVWF  x6B
50C4:  MOVLB  0
50C6:  CALL   20D6
....................       COM1_send_str(VERSION); 
50CA:  MOVLW  02
50CC:  MOVWF  FEA
50CE:  MOVLW  14
50D0:  MOVWF  FE9
50D2:  MOVLW  0F
50D4:  MOVWF  01
50D6:  CLRF   FF7
50D8:  MOVLW  00
50DA:  CALL   08F4
50DE:  TBLRD*-
50E0:  TBLRD*+
50E2:  MOVFF  FF5,FEE
50E6:  DECFSZ 01,F
50E8:  BRA    50E0
50EA:  MOVLW  02
50EC:  MOVLB  2
50EE:  MOVWF  x6C
50F0:  MOVLW  14
50F2:  MOVWF  x6B
50F4:  MOVLB  0
50F6:  CALL   20D6
....................       sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................               setup.unit_ID, setup.year, setup.week); 
50FA:  MOVLW  01
50FC:  MOVLB  1
50FE:  MOVWF  xA3
5100:  MOVLW  C3
5102:  MOVWF  xA2
5104:  MOVLW  4C
5106:  MOVWF  FF6
5108:  MOVLW  0D
510A:  MOVWF  FF7
510C:  MOVLW  05
510E:  MOVLB  2
5110:  MOVWF  x33
5112:  MOVLB  0
5114:  CALL   2EA8
5118:  MOVLW  10
511A:  MOVWF  FE9
511C:  MOVFF  F2,234
5120:  MOVFF  F1,233
5124:  CALL   2ED0
5128:  MOVLW  54
512A:  MOVWF  FF6
512C:  MOVLW  0D
512E:  MOVWF  FF7
5130:  MOVLW  04
5132:  MOVLB  2
5134:  MOVWF  x33
5136:  MOVLB  0
5138:  CALL   2EA8
513C:  MOVLW  0B
513E:  MOVWF  FE9
5140:  MOVFF  EF,234
5144:  MOVFF  EE,233
5148:  CALL   2ED0
514C:  MOVFF  F0,233
5150:  MOVLW  01
5152:  MOVLB  2
5154:  MOVWF  x34
5156:  MOVLB  0
5158:  CALL   3020
515C:  MOVLW  0D
515E:  MOVLB  2
5160:  MOVWF  x3C
5162:  MOVLB  0
5164:  CALL   2E86
....................       COM1_send_str(buf); 
5168:  MOVLW  01
516A:  MOVLB  2
516C:  MOVWF  x6C
516E:  MOVLW  C3
5170:  MOVWF  x6B
5172:  MOVLB  0
5174:  CALL   20D6
....................  
....................                 set_adc_channel(A2D_PREV); // select forward power input 
5178:  MOVLW  10
517A:  MOVWF  01
517C:  MOVF   FC2,W
517E:  ANDLW  83
5180:  IORWF  01,W
5182:  MOVWF  FC2
....................                 delay_us(20); 
5184:  MOVLW  1A
5186:  MOVWF  00
5188:  DECFSZ 00,F
518A:  BRA    5188
518C:  NOP   
....................                 revp = read_adc(); 
518E:  BSF    FC2.1
5190:  BTFSC  FC2.1
5192:  BRA    5190
5194:  MOVFF  FC4,108
5198:  MOVLB  1
519A:  MOVFF  FC3,107
....................  
....................           if (revp <= 580) 
519E:  MOVF   x08,W
51A0:  SUBLW  02
51A2:  BNC   51CC
51A4:  BNZ   51AC
51A6:  MOVF   x07,W
51A8:  SUBLW  44
51AA:  BNC   51CC
....................           strcpy(revstat, "GOOD"); 
51AC:  MOVLW  01
51AE:  MOVWF  FEA
51B0:  MOVLW  EE
51B2:  MOVWF  FE9
51B4:  MOVLW  00
51B6:  MOVLB  0
51B8:  CALL   0964
51BC:  TBLRD*-
51BE:  TBLRD*+
51C0:  MOVF   FF5,W
51C2:  MOVWF  FEE
51C4:  IORLW  00
51C6:  BNZ   51BE
....................           else 
51C8:  BRA    51E8
51CA:  MOVLB  1
....................           strcpy(revstat, "BAD"); 
51CC:  MOVLW  01
51CE:  MOVWF  FEA
51D0:  MOVLW  EE
51D2:  MOVWF  FE9
51D4:  MOVLW  00
51D6:  MOVLB  0
51D8:  CALL   097A
51DC:  TBLRD*-
51DE:  TBLRD*+
51E0:  MOVF   FF5,W
51E2:  MOVWF  FEE
51E4:  IORLW  00
51E6:  BNZ   51DE
....................  
....................           if(setup.rp) 
51E8:  MOVF   xF9,W
51EA:  IORWF  xFA,W
51EC:  BZ    51F6
....................             rp=0; 
51EE:  MOVLB  2
51F0:  CLRF   x0E
51F2:  CLRF   x0D
....................             else 
51F4:  BRA    51FE
....................               rp=1; 
51F6:  MOVLB  2
51F8:  CLRF   x0E
51FA:  MOVLW  01
51FC:  MOVWF  x0D
....................  
....................  
....................       sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................               setup.frequency, revstat, setup.power_level+20, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
51FE:  MOVLW  14
5200:  MOVLB  0
5202:  ADDWF  xBB,W
5204:  MOVLB  2
5206:  MOVWF  x2D
5208:  MOVLW  00
520A:  MOVLB  0
520C:  ADDWFC xBC,W
520E:  MOVLB  2
5210:  MOVWF  x2E
5212:  MOVFF  AC,232
5216:  MOVFF  AB,231
521A:  CLRF   x34
521C:  MOVLW  64
521E:  MOVWF  x33
5220:  MOVLB  0
5222:  CALL   35C4
5226:  MOVFF  02,230
522A:  MOVFF  01,22F
522E:  MOVFF  AC,232
5232:  MOVFF  AB,231
5236:  MOVLB  2
5238:  CLRF   x34
523A:  MOVLW  64
523C:  MOVWF  x33
523E:  MOVLB  0
5240:  CALL   35C4
5244:  MOVFF  00,231
5248:  MOVFF  03,232
524C:  MOVLW  01
524E:  MOVLB  1
5250:  MOVWF  xA3
5252:  MOVLW  C3
5254:  MOVWF  xA2
5256:  MOVLW  64
5258:  MOVWF  FF6
525A:  MOVLW  0D
525C:  MOVWF  FF7
525E:  MOVLW  08
5260:  MOVLB  2
5262:  MOVWF  x33
5264:  MOVLB  0
5266:  CALL   2EA8
526A:  MOVLW  10
526C:  MOVWF  FE9
526E:  MOVFF  BA,234
5272:  MOVFF  B9,233
5276:  CALL   2ED0
527A:  MOVLW  6F
527C:  MOVWF  FF6
527E:  MOVLW  0D
5280:  MOVWF  FF7
5282:  MOVLW  06
5284:  MOVLB  2
5286:  MOVWF  x33
5288:  MOVLB  0
528A:  CALL   2EA8
528E:  MOVLW  01
5290:  MOVWF  FEA
5292:  MOVLW  EE
5294:  MOVWF  FE9
5296:  GOTO   360A
529A:  MOVLW  77
529C:  MOVWF  FF6
529E:  MOVLW  0D
52A0:  MOVWF  FF7
52A2:  MOVLW  07
52A4:  MOVLB  2
52A6:  MOVWF  x33
52A8:  MOVLB  0
52AA:  CALL   2EA8
52AE:  MOVLW  10
52B0:  MOVWF  FE9
52B2:  MOVFF  22E,234
52B6:  MOVFF  22D,233
52BA:  CALL   2ED0
52BE:  MOVLW  81
52C0:  MOVWF  FF6
52C2:  MOVLW  0D
52C4:  MOVWF  FF7
52C6:  MOVLW  05
52C8:  MOVLB  2
52CA:  MOVWF  x33
52CC:  MOVLB  0
52CE:  CALL   2EA8
52D2:  MOVLW  10
52D4:  MOVWF  FE9
52D6:  MOVFF  230,234
52DA:  MOVFF  22F,233
52DE:  CALL   2ED0
52E2:  MOVLW  2E
52E4:  MOVLB  2
52E6:  MOVWF  x3C
52E8:  MOVLB  0
52EA:  CALL   2E86
52EE:  MOVLW  10
52F0:  MOVWF  FE9
52F2:  MOVFF  232,234
52F6:  MOVFF  231,233
52FA:  CALL   2ED0
52FE:  MOVLW  8D
5300:  MOVWF  FF6
5302:  MOVLW  0D
5304:  MOVWF  FF7
5306:  MOVLW  09
5308:  MOVLB  2
530A:  MOVWF  x33
530C:  MOVLB  0
530E:  CALL   2EA8
5312:  MOVFF  AF,233
5316:  MOVLW  1B
5318:  MOVLB  2
531A:  MOVWF  x34
531C:  MOVLB  0
531E:  CALL   3020
5322:  MOVLW  98
5324:  MOVWF  FF6
5326:  MOVLW  0D
5328:  MOVWF  FF7
532A:  MOVLW  05
532C:  MOVLB  2
532E:  MOVWF  x33
5330:  MOVLB  0
5332:  CALL   2EA8
5336:  MOVFF  B2,233
533A:  MOVLW  1B
533C:  MOVLB  2
533E:  MOVWF  x34
5340:  MOVLB  0
5342:  CALL   3020
5346:  MOVLW  9F
5348:  MOVWF  FF6
534A:  MOVLW  0D
534C:  MOVWF  FF7
534E:  MOVLW  05
5350:  MOVLB  2
5352:  MOVWF  x33
5354:  MOVLB  0
5356:  CALL   2EA8
535A:  MOVLW  10
535C:  MOVWF  FE9
535E:  MOVFF  AE,234
5362:  MOVFF  AD,233
5366:  CALL   2ED0
536A:  MOVLW  0D
536C:  MOVLB  2
536E:  MOVWF  x3C
5370:  MOVLB  0
5372:  CALL   2E86
....................       COM1_send_str(buf); 
5376:  MOVLW  01
5378:  MOVLB  2
537A:  MOVWF  x6C
537C:  MOVLW  C3
537E:  MOVWF  x6B
5380:  MOVLB  0
5382:  CALL   20D6
....................  
....................       sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                 setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                         setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                         setup.clock_polarity); 
5386:  MOVLW  14
5388:  ADDWF  xF3,W
538A:  MOVLB  2
538C:  MOVWF  x2D
538E:  MOVLW  00
5390:  MOVLB  0
5392:  ADDWFC xF4,W
5394:  MOVLB  2
5396:  MOVWF  x2E
5398:  MOVLW  01
539A:  MOVLB  1
539C:  MOVWF  xA3
539E:  MOVLW  C3
53A0:  MOVWF  xA2
53A2:  MOVLW  AA
53A4:  MOVWF  FF6
53A6:  MOVLW  0D
53A8:  MOVWF  FF7
53AA:  MOVLW  06
53AC:  MOVLB  2
53AE:  MOVWF  x33
53B0:  MOVLB  0
53B2:  CALL   2EA8
53B6:  MOVFF  B7,233
53BA:  MOVLW  1B
53BC:  MOVLB  2
53BE:  MOVWF  x34
53C0:  MOVLB  0
53C2:  CALL   3020
53C6:  MOVLW  B2
53C8:  MOVWF  FF6
53CA:  MOVLW  0D
53CC:  MOVWF  FF7
53CE:  MOVLW  05
53D0:  MOVLB  2
53D2:  MOVWF  x33
53D4:  MOVLB  0
53D6:  CALL   2EA8
53DA:  MOVFF  B5,233
53DE:  MOVLW  1B
53E0:  MOVLB  2
53E2:  MOVWF  x34
53E4:  MOVLB  0
53E6:  CALL   3020
53EA:  MOVLW  B9
53EC:  MOVWF  FF6
53EE:  MOVLW  0D
53F0:  MOVWF  FF7
53F2:  MOVLW  05
53F4:  MOVLB  2
53F6:  MOVWF  x33
53F8:  MOVLB  0
53FA:  CALL   2EA8
53FE:  MOVFF  B1,233
5402:  MOVLW  1B
5404:  MOVLB  2
5406:  MOVWF  x34
5408:  MOVLB  0
540A:  CALL   3020
540E:  MOVLW  C0
5410:  MOVWF  FF6
5412:  MOVLW  0D
5414:  MOVWF  FF7
5416:  MOVLW  05
5418:  MOVLB  2
541A:  MOVWF  x33
541C:  MOVLB  0
541E:  CALL   2EA8
5422:  MOVLW  10
5424:  MOVWF  FE9
5426:  MOVFF  20E,234
542A:  MOVFF  20D,233
542E:  CALL   2ED0
5432:  MOVLW  C8
5434:  MOVWF  FF6
5436:  MOVLW  0D
5438:  MOVWF  FF7
543A:  MOVLW  05
543C:  MOVLB  2
543E:  MOVWF  x33
5440:  MOVLB  0
5442:  CALL   2EA8
5446:  MOVFF  B3,233
544A:  MOVLW  1B
544C:  MOVLB  2
544E:  MOVWF  x34
5450:  MOVLB  0
5452:  CALL   3020
5456:  MOVLW  CF
5458:  MOVWF  FF6
545A:  MOVLW  0D
545C:  MOVWF  FF7
545E:  MOVLW  05
5460:  MOVLB  2
5462:  MOVWF  x33
5464:  MOVLB  0
5466:  CALL   2EA8
546A:  MOVFF  B4,233
546E:  MOVLW  1B
5470:  MOVLB  2
5472:  MOVWF  x34
5474:  MOVLB  0
5476:  CALL   3020
547A:  MOVLW  D6
547C:  MOVWF  FF6
547E:  MOVLW  0D
5480:  MOVWF  FF7
5482:  MOVLW  05
5484:  MOVLB  2
5486:  MOVWF  x33
5488:  MOVLB  0
548A:  CALL   2EA8
548E:  MOVLW  10
5490:  MOVWF  FE9
5492:  MOVFF  22E,234
5496:  MOVFF  22D,233
549A:  CALL   2ED0
549E:  MOVLW  DE
54A0:  MOVWF  FF6
54A2:  MOVLW  0D
54A4:  MOVWF  FF7
54A6:  MOVLW  05
54A8:  MOVLB  2
54AA:  MOVWF  x33
54AC:  MOVLB  0
54AE:  CALL   2EA8
54B2:  MOVLW  10
54B4:  MOVWF  FE9
54B6:  MOVFF  F6,234
54BA:  MOVFF  F5,233
54BE:  CALL   2ED0
54C2:  MOVLW  E6
54C4:  MOVWF  FF6
54C6:  MOVLW  0D
54C8:  MOVWF  FF7
54CA:  MOVLW  05
54CC:  MOVLB  2
54CE:  MOVWF  x33
54D0:  MOVLB  0
54D2:  CALL   2EA8
54D6:  MOVLW  10
54D8:  MOVWF  FE9
54DA:  MOVFF  F8,234
54DE:  MOVFF  F7,233
54E2:  CALL   2ED0
54E6:  MOVLW  EE
54E8:  MOVWF  FF6
54EA:  MOVLW  0D
54EC:  MOVWF  FF7
54EE:  MOVLW  05
54F0:  MOVLB  2
54F2:  MOVWF  x33
54F4:  MOVLB  0
54F6:  CALL   2EA8
54FA:  MOVFF  B0,233
54FE:  MOVLW  1B
5500:  MOVLB  2
5502:  MOVWF  x34
5504:  MOVLB  0
5506:  CALL   3020
550A:  MOVLW  0D
550C:  MOVLB  2
550E:  MOVWF  x3C
5510:  MOVLB  0
5512:  CALL   2E86
....................                                         COM1_send_str(buf); 
5516:  MOVLW  01
5518:  MOVLB  2
551A:  MOVWF  x6C
551C:  MOVLW  C3
551E:  MOVWF  x6B
5520:  MOVLB  0
5522:  CALL   20D6
....................                                          
....................       sprintf(buf, "\r\n\nUT=%u, US=%u\r" setup.UART_Time, setup.UART_Status); // VERSION 3.3 17.1.2016 
5526:  MOVLW  01
5528:  MOVLB  1
552A:  MOVWF  xA3
552C:  MOVLW  C3
552E:  MOVWF  xA2
5530:  MOVLW  F8
5532:  MOVWF  FF6
5534:  MOVLW  0D
5536:  MOVWF  FF7
5538:  MOVLW  06
553A:  MOVLB  2
553C:  MOVWF  x33
553E:  MOVLB  0
5540:  CALL   2EA8
5544:  MOVFF  FB,233
5548:  MOVLW  1B
554A:  MOVLB  2
554C:  MOVWF  x34
554E:  MOVLB  0
5550:  CALL   3020
5554:  MOVLW  00
5556:  MOVWF  FF6
5558:  MOVLW  0E
555A:  MOVWF  FF7
555C:  MOVLW  05
555E:  MOVLB  2
5560:  MOVWF  x33
5562:  MOVLB  0
5564:  CALL   2EA8
5568:  MOVFF  FC,233
556C:  MOVLW  1B
556E:  MOVLB  2
5570:  MOVWF  x34
5572:  MOVLB  0
5574:  CALL   3020
5578:  MOVLW  0D
557A:  MOVLB  2
557C:  MOVWF  x3C
557E:  MOVLB  0
5580:  CALL   2E86
....................       COM1_send_str(buf); 
5584:  MOVLW  01
5586:  MOVLB  2
5588:  MOVWF  x6C
558A:  MOVLW  C3
558C:  MOVWF  x6B
558E:  MOVLB  0
5590:  CALL   20D6
....................  
....................       goto get_temp; 
5594:  MOVLB  1
5596:  BRA    4E7E
....................       break; 
5598:  MOVLB  0
559A:  BRA    55DA
....................       default: 
....................       	{ 
....................          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
559C:  MOVLB  1
559E:  MOVF   x2B,F
55A0:  BNZ   55A8
55A2:  MOVLB  0
55A4:  BRA    55DA
55A6:  MOVLB  1
....................          COM1_send_str("\r\nFAIL\r\n"); 
55A8:  MOVLW  02
55AA:  MOVWF  FEA
55AC:  MOVLW  14
55AE:  MOVWF  FE9
55B0:  MOVLW  09
55B2:  MOVWF  01
55B4:  CLRF   FF7
55B6:  MOVLW  00
55B8:  MOVLB  0
55BA:  CALL   08DA
55BE:  TBLRD*-
55C0:  TBLRD*+
55C2:  MOVFF  FF5,FEE
55C6:  DECFSZ 01,F
55C8:  BRA    55C0
55CA:  MOVLW  02
55CC:  MOVLB  2
55CE:  MOVWF  x6C
55D0:  MOVLW  14
55D2:  MOVWF  x6B
55D4:  MOVLB  0
55D6:  CALL   20D6
55DA:  MOVLB  2
....................          
....................         } 
....................     } 
.................... aaa: 
....................   return; 
....................   } 
55DC:  MOVLB  0
55DE:  GOTO   56D6 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
561C:  MOVF   57,W
561E:  XORLW  00
5620:  BZ    562E
5622:  XORLW  02
5624:  BZ    565C
5626:  XORLW  01
5628:  BTFSC  FD8.2
562A:  BRA    5778
562C:  BRA    5778
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
562E:  CLRF   58
....................       comm_state = COMM_WAIT_CR; 
5630:  MOVLW  02
5632:  MOVWF  57
....................       comm_timeout = 0; 
5634:  CLRF   xAA
5636:  CLRF   xA9
....................       if (ttccp_login) 
5638:  MOVLB  1
563A:  MOVF   x2B,F
563C:  BZ    5658
....................       COM1_send_str("\r>"); 
563E:  MOVLW  0D
5640:  MOVWF  xBB
5642:  MOVLW  3E
5644:  MOVWF  xBC
5646:  CLRF   xBD
5648:  MOVLW  01
564A:  MOVLB  2
564C:  MOVWF  x6C
564E:  MOVLW  BB
5650:  MOVWF  x6B
5652:  MOVLB  0
5654:  CALL   20D6
....................       break; 
5658:  MOVLB  0
565A:  BRA    5778
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
565C:  MOVF   34,F
565E:  BTFSC  FD8.2
5660:  BRA    574C
....................         { 
....................         comm_timeout = 0; 
5662:  CLRF   xAA
5664:  CLRF   xA9
....................         chr = COM1_get_chr(); 
5666:  CALL   28F2
566A:  MOVLB  1
566C:  CLRF   xB8
566E:  MOVFF  01,1B7
....................         comm_buf[comm_ridx++] = chr; 
5672:  MOVF   58,W
5674:  INCF   58,F
5676:  CLRF   03
5678:  ADDLW  59
567A:  MOVWF  FE9
567C:  MOVLW  00
567E:  ADDWFC 03,W
5680:  MOVWF  FEA
5682:  MOVFF  1B7,FEF
....................         if (comm_ridx > 70) 
5686:  MOVF   58,W
5688:  SUBLW  46
568A:  BC    5694
....................           { 
....................           comm_state = 0; 
568C:  CLRF   57
....................           break; 
568E:  MOVLB  0
5690:  BRA    5778
5692:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
5694:  MOVF   xB7,W
5696:  SUBLW  0D
5698:  BNZ   569E
569A:  MOVF   xB8,F
569C:  BZ    56A8
569E:  MOVF   xB7,W
56A0:  SUBLW  3B
56A2:  BNZ   574E
56A4:  MOVF   xB8,F
56A6:  BNZ   574E
....................           { 
....................           if (chr == ';') 
56A8:  MOVF   xB7,W
56AA:  SUBLW  3B
56AC:  BNZ   56CA
56AE:  MOVF   xB8,F
56B0:  BNZ   56CA
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
56B2:  MOVLW  01
56B4:  SUBWF  58,W
56B6:  CLRF   03
56B8:  ADDLW  59
56BA:  MOVWF  FE9
56BC:  MOVLW  00
56BE:  ADDWFC 03,W
56C0:  MOVWF  FEA
56C2:  MOVLW  0D
56C4:  MOVWF  FEF
....................             comm_ridx = 0; 
56C6:  CLRF   58
....................             } 
....................           else 
56C8:  BRA    56D0
....................             COM1_init(); 
56CA:  MOVLB  0
56CC:  CALL   0E30
....................           process_ttccp_commands(); 
56D0:  MOVLB  0
56D2:  GOTO   3630
....................           if (debug_mode) 
56D6:  MOVLB  1
56D8:  MOVF   x42,F
56DA:  BZ    56E6
....................           	if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
56DC:  MOVF   x2B,F
56DE:  BNZ   56E6
56E0:  MOVLB  0
56E2:  BRA    5778
56E4:  MOVLB  1
....................             COM1_send_str("\r\nOK\n"); 
56E6:  MOVLW  0D
56E8:  MOVWF  xBB
56EA:  MOVLW  0A
56EC:  MOVWF  xBC
56EE:  MOVLW  4F
56F0:  MOVWF  xBD
56F2:  MOVLW  4B
56F4:  MOVWF  xBE
56F6:  MOVLW  0A
56F8:  MOVWF  xBF
56FA:  CLRF   xC0
56FC:  MOVLW  01
56FE:  MOVLB  2
5700:  MOVWF  x6C
5702:  MOVLW  BB
5704:  MOVWF  x6B
5706:  MOVLB  0
5708:  CALL   20D6
....................           if (ret == 1) 
570C:  MOVLB  1
570E:  DECFSZ xB9,W
5710:  BRA    573C
5712:  MOVF   xBA,F
5714:  BNZ   573C
....................             { 
.................... 	          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5716:  MOVF   x2B,F
5718:  BNZ   5720
571A:  MOVLB  0
571C:  BRA    5778
571E:  MOVLB  1
....................             COM1_send_str("\n\r"); 
5720:  MOVLW  0A
5722:  MOVWF  xBB
5724:  MOVLW  0D
5726:  MOVWF  xBC
5728:  CLRF   xBD
572A:  MOVLW  01
572C:  MOVLB  2
572E:  MOVWF  x6C
5730:  MOVLW  BB
5732:  MOVWF  x6B
5734:  MOVLB  0
5736:  CALL   20D6
....................             } 
....................           else 
573A:  BRA    574C
....................             COM1_send_str(ttccp_error_message); 
573C:  MOVLW  01
573E:  MOVLB  2
5740:  MOVWF  x6C
5742:  MOVLW  77
5744:  MOVWF  x6B
5746:  MOVLB  0
5748:  CALL   20D6
574C:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
574E:  MOVF   57,W
5750:  SUBLW  01
5752:  BC    5774
....................         if (TMR_100MS_COMM_TO) 
5754:  BTFSS  2C.1
5756:  BRA    5774
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
5758:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
575A:  MOVLB  0
575C:  INCF   xA9,F
575E:  BTFSC  FD8.2
5760:  INCF   xAA,F
5762:  MOVF   xAA,W
5764:  SUBLW  26
5766:  BC    5774
5768:  XORLW  FF
576A:  BNZ   5772
576C:  MOVF   xA9,W
576E:  SUBLW  10
5770:  BC    5774
....................             comm_state = 0; 
5772:  CLRF   57
....................           } 
....................       break; 
5774:  MOVLB  0
5776:  BRA    5778
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
5778:  GOTO   68B8 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
6714:  MOVF   57,W
6716:  ADDLW  FC
6718:  BTFSC  FD8.0
671A:  BRA    685C
671C:  ADDLW  04
671E:  GOTO   6860
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
6722:  CLRF   58
....................       comm_state++; 
6724:  INCF   57,F
....................       break; 
6726:  BRA    685C
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
6728:  MOVF   34,F
672A:  BZ    6756
....................         if ((chr = COM1_get_chr()) == '$') 
672C:  CALL   28F2
6730:  MOVLB  1
6732:  CLRF   xB8
6734:  MOVFF  01,1B7
6738:  MOVF   xB7,W
673A:  SUBLW  24
673C:  BNZ   674C
673E:  MOVF   xB8,F
6740:  BNZ   674C
....................           { 
....................           comm_state++; 
6742:  INCF   57,F
....................           comm_timeout = 0; 
6744:  MOVLB  0
6746:  CLRF   xAA
6748:  CLRF   xA9
....................           } 
....................         else 
674A:  BRA    6756
....................           inc_dec(chr); 
674C:  MOVFF  1B7,1CE
6750:  MOVLB  0
6752:  GOTO   5804
....................       break; 
6756:  BRA    685C
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
6758:  MOVF   34,F
675A:  BTFSC  FD8.2
675C:  BRA    6830
....................         { 
....................         comm_timeout = 0; 
675E:  CLRF   xAA
6760:  CLRF   xA9
....................         chr = COM1_get_chr(); 
6762:  CALL   28F2
6766:  MOVLB  1
6768:  CLRF   xB8
676A:  MOVFF  01,1B7
....................         comm_buf[comm_ridx++] = chr; 
676E:  MOVF   58,W
6770:  INCF   58,F
6772:  CLRF   03
6774:  ADDLW  59
6776:  MOVWF  FE9
6778:  MOVLW  00
677A:  ADDWFC 03,W
677C:  MOVWF  FEA
677E:  MOVFF  1B7,FEF
....................         if (comm_ridx > 70) 
6782:  MOVF   58,W
6784:  SUBLW  46
6786:  BC    6790
....................           { 
....................           comm_state = 0; 
6788:  CLRF   57
....................           break; 
678A:  MOVLB  0
678C:  BRA    685C
678E:  MOVLB  1
....................           } 
....................         if (chr == 13) 
6790:  MOVF   xB7,W
6792:  SUBLW  0D
6794:  BNZ   67F2
6796:  MOVF   xB8,F
6798:  BNZ   67F2
....................           { 
....................           ret = process_dollar_commands(); 
679A:  MOVLB  0
679C:  BRA    6032
679E:  MOVLB  1
67A0:  CLRF   xBA
67A2:  MOVFF  01,1B9
....................           if (ret == 1) 
67A6:  DECFSZ xB9,W
67A8:  BRA    67AE
67AA:  MOVF   xBA,F
67AC:  BNZ   67AE
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
67AE:  INCFSZ xB9,W
67B0:  BRA    67B6
67B2:  MOVF   xBA,F
67B4:  BZ    67E8
....................             COM1_send_str("\r\nOK\r\n*"); 
67B6:  MOVLW  01
67B8:  MOVWF  FEA
67BA:  MOVLW  BB
67BC:  MOVWF  FE9
67BE:  MOVLW  08
67C0:  MOVWF  01
67C2:  CLRF   FF7
67C4:  MOVLW  00
67C6:  MOVLB  0
67C8:  CALL   098E
67CC:  TBLRD*-
67CE:  TBLRD*+
67D0:  MOVFF  FF5,FEE
67D4:  DECFSZ 01,F
67D6:  BRA    67CE
67D8:  MOVLW  01
67DA:  MOVLB  2
67DC:  MOVWF  x6C
67DE:  MOVLW  BB
67E0:  MOVWF  x6B
67E2:  MOVLB  0
67E4:  CALL   20D6
....................           COM1_init(); 
67E8:  MOVLB  0
67EA:  CALL   0E30
....................           } 
....................         else if (chr == 27) 
67EE:  BRA    6830
67F0:  MOVLB  1
67F2:  MOVF   xB7,W
67F4:  SUBLW  1B
67F6:  BNZ   6832
67F8:  MOVF   xB8,F
67FA:  BNZ   6832
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
67FC:  MOVLW  01
67FE:  MOVWF  FEA
6800:  MOVLW  C3
6802:  MOVWF  FE9
6804:  MOVLW  0B
6806:  MOVWF  01
6808:  CLRF   FF7
680A:  MOVLW  00
680C:  MOVLB  0
680E:  CALL   09A6
6812:  TBLRD*-
6814:  TBLRD*+
6816:  MOVFF  FF5,FEE
681A:  DECFSZ 01,F
681C:  BRA    6814
681E:  MOVLW  01
6820:  MOVLB  2
6822:  MOVWF  x6C
6824:  MOVLW  C3
6826:  MOVWF  x6B
6828:  MOVLB  0
682A:  CALL   20D6
....................           comm_state = 0; 
682E:  CLRF   57
6830:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
6832:  MOVF   57,W
6834:  SUBLW  01
6836:  BC    6858
....................         if (TMR_100MS_COMM_TO) 
6838:  BTFSS  2C.1
683A:  BRA    6858
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
683C:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
683E:  MOVLB  0
6840:  INCF   xA9,F
6842:  BTFSC  FD8.2
6844:  INCF   xAA,F
6846:  MOVF   xAA,W
6848:  SUBLW  26
684A:  BC    6858
684C:  XORLW  FF
684E:  BNZ   6856
6850:  MOVF   xA9,W
6852:  SUBLW  10
6854:  BC    6858
....................             comm_state = 0; 
6856:  CLRF   57
....................           } 
....................       break; 
6858:  MOVLB  0
685A:  BRA    685C
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
685C:  GOTO   68B8 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
6882:  BTFSS  FAB.1
6884:  BRA    6896
....................     { 
....................     OERR = 0; 
6886:  BCF    FAB.1
....................     CREN = 0; 
6888:  BCF    FAB.4
....................     delay_us(5); 
688A:  MOVLW  06
688C:  MOVWF  00
688E:  DECFSZ 00,F
6890:  BRA    688E
6892:  NOP   
....................     CREN = 1; 
6894:  BSF    FAB.4
....................     } 
....................   if (FERR) 
6896:  BTFSS  FAB.2
6898:  BRA    68A4
....................     { 
....................     FERR = 0; 
689A:  BCF    FAB.2
....................     chr = RCREG1; 
689C:  MOVLB  1
689E:  CLRF   xB6
68A0:  MOVFF  FAE,1B5
....................     } 
....................   if (ttccp) 
68A4:  MOVLB  1
68A6:  MOVF   x41,F
68A8:  BZ    68B4
....................     ttccp_handler(); 
68AA:  MOVLB  0
68AC:  GOTO   561C
....................   else 
68B0:  MOVLB  0
68B2:  BRA    68B8
....................     dollar_handler(); 
68B4:  MOVLB  0
68B6:  BRA    6714
....................   } 
68B8:  GOTO   6AD6 (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
1654:  BCF    F8A.2
....................   delay_us(10); 
1656:  MOVLW  0C
1658:  MOVWF  00
165A:  DECFSZ 00,F
165C:  BRA    165A
165E:  BRA    1660
1660:  NOP   
....................   while (length--) 
....................     { 
1662:  MOVLB  2
1664:  MOVF   x42,W
1666:  DECF   x42,F
1668:  XORLW  00
166A:  BZ    16B0
....................     xbyte = *data++; 
166C:  MOVFF  244,03
1670:  MOVF   x43,W
1672:  INCF   x43,F
1674:  BTFSC  FD8.2
1676:  INCF   x44,F
1678:  MOVWF  FE9
167A:  MOVFF  03,FEA
167E:  MOVFF  FEF,245
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
1682:  CLRF   x46
1684:  MOVF   x46,W
1686:  SUBLW  07
1688:  BNC   16AE
....................       { 
....................       if (xbyte & 0x80) 
168A:  BTFSS  x45.7
168C:  BRA    1692
....................         output_high(D2A_MOSI); 
168E:  BSF    F8C.4
....................       else 
1690:  BRA    1694
....................         output_low(D2A_MOSI); 
1692:  BCF    F8C.4
....................       delay_us(1); 
1694:  BRA    1696
1696:  BRA    1698
....................       output_high(D2A_SCLK); 
1698:  BSF    F8C.0
....................       delay_us(1); 
169A:  BRA    169C
169C:  BRA    169E
....................       output_low(D2A_SCLK); 
169E:  BCF    F8C.0
....................       delay_us(1); 
16A0:  BRA    16A2
16A2:  BRA    16A4
....................       } 
16A4:  MOVF   x46,W
16A6:  INCF   x46,F
16A8:  BCF    FD8.0
16AA:  RLCF   x45,F
16AC:  BRA    1684
....................     } 
16AE:  BRA    1664
....................   delay_us(10); 
16B0:  MOVLW  0C
16B2:  MOVWF  00
16B4:  DECFSZ 00,F
16B6:  BRA    16B4
16B8:  BRA    16BA
16BA:  NOP   
....................   output_high(CSN); 
16BC:  BSF    F8A.2
....................   } 
16BE:  MOVLB  0
16C0:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5F26:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5F28:  MOVLB  2
5F2A:  CLRF   x09
5F2C:  MOVF   x09,W
5F2E:  SUBLW  07
5F30:  BNC   5F68
....................     { 
....................     if (addr & 0x80) 
5F32:  BTFSS  x05.7
5F34:  BRA    5F3A
....................       output_high(D2A_MOSI); 
5F36:  BSF    F8C.4
....................     else 
5F38:  BRA    5F3C
....................       output_low(D2A_MOSI); 
5F3A:  BCF    F8C.4
....................     delay_us(5); 
5F3C:  MOVLW  06
5F3E:  MOVWF  00
5F40:  DECFSZ 00,F
5F42:  BRA    5F40
5F44:  NOP   
....................     output_high(D2A_SCLK); 
5F46:  BSF    F8C.0
....................     delay_us(5); 
5F48:  MOVLW  06
5F4A:  MOVWF  00
5F4C:  DECFSZ 00,F
5F4E:  BRA    5F4C
5F50:  NOP   
....................     output_low(D2A_SCLK); 
5F52:  BCF    F8C.0
....................     delay_us(5); 
5F54:  MOVLW  06
5F56:  MOVWF  00
5F58:  DECFSZ 00,F
5F5A:  BRA    5F58
5F5C:  NOP   
....................     } 
5F5E:  MOVF   x09,W
5F60:  INCF   x09,F
5F62:  BCF    FD8.0
5F64:  RLCF   x05,F
5F66:  BRA    5F2C
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5F68:  CLRF   x08
5F6A:  CLRF   x09
5F6C:  MOVF   x09,W
5F6E:  SUBLW  07
5F70:  BNC   5FB6
....................     { 
....................     xbyte <<= 1; 
5F72:  BCF    FD8.0
5F74:  RLCF   x08,F
....................     delay_us(5); 
5F76:  MOVLW  06
5F78:  MOVWF  00
5F7A:  DECFSZ 00,F
5F7C:  BRA    5F7A
5F7E:  NOP   
....................     output_high(D2A_SCLK); 
5F80:  BSF    F8C.0
....................     delay_us(3); 
5F82:  MOVLW  03
5F84:  MOVWF  00
5F86:  DECFSZ 00,F
5F88:  BRA    5F86
5F8A:  BRA    5F8C
....................     if (input(D2A_MISO)) 
5F8C:  BTFSS  F83.1
5F8E:  BRA    5F9C
....................       { 
....................       xbyte |= 1; 
5F90:  BSF    x08.0
....................       delay_us(2); 
5F92:  MOVLW  02
5F94:  MOVWF  00
5F96:  DECFSZ 00,F
5F98:  BRA    5F96
5F9A:  NOP   
....................       } 
....................     delay_us(2); 
5F9C:  MOVLW  02
5F9E:  MOVWF  00
5FA0:  DECFSZ 00,F
5FA2:  BRA    5FA0
5FA4:  NOP   
....................     output_low(D2A_SCLK); 
5FA6:  BCF    F8C.0
....................     delay_us(3); 
5FA8:  MOVLW  03
5FAA:  MOVWF  00
5FAC:  DECFSZ 00,F
5FAE:  BRA    5FAC
5FB0:  BRA    5FB2
....................     } 
5FB2:  INCF   x09,F
5FB4:  BRA    5F6C
....................   *data = xbyte; 
5FB6:  MOVFF  206,FE9
5FBA:  MOVFF  207,FEA
5FBE:  MOVFF  208,FEF
....................   output_high(CSN); 
5FC2:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
5FC4:  BCF    F8C.0
....................   return xbyte; 
5FC6:  MOVFF  208,01
....................   } 
5FCA:  MOVLB  0
5FCC:  GOTO   640A (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1A24:  MOVFF  249,255
1A28:  MOVFF  248,254
1A2C:  MOVFF  247,253
1A30:  MOVFF  246,252
1A34:  BRA    1754
1A36:  MOVFF  03,24D
1A3A:  MOVFF  02,24C
1A3E:  MOVFF  01,24B
1A42:  MOVFF  00,24A
....................   temp = bitspersec / 240000000.0; 
1A46:  MOVFF  24D,255
1A4A:  MOVFF  24C,254
1A4E:  MOVFF  24B,253
1A52:  MOVFF  24A,252
1A56:  MOVLW  C0
1A58:  MOVLB  2
1A5A:  MOVWF  x59
1A5C:  MOVLW  E1
1A5E:  MOVWF  x58
1A60:  MOVLW  64
1A62:  MOVWF  x57
1A64:  MOVLW  9A
1A66:  MOVWF  x56
1A68:  MOVLB  0
1A6A:  RCALL  178E
1A6C:  MOVFF  03,251
1A70:  MOVFF  02,250
1A74:  MOVFF  01,24F
1A78:  MOVFF  00,24E
....................   temp *= 65536.0; 
1A7C:  MOVFF  251,255
1A80:  MOVFF  250,254
1A84:  MOVFF  24F,253
1A88:  MOVFF  24E,252
1A8C:  MOVLB  2
1A8E:  CLRF   x59
1A90:  CLRF   x58
1A92:  CLRF   x57
1A94:  MOVLW  8F
1A96:  MOVWF  x56
1A98:  MOVLB  0
1A9A:  RCALL  18EC
1A9C:  MOVFF  03,251
1AA0:  MOVFF  02,250
1AA4:  MOVFF  01,24F
1AA8:  MOVFF  00,24E
....................   temp *= 65536.0; 
1AAC:  MOVFF  251,255
1AB0:  MOVFF  250,254
1AB4:  MOVFF  24F,253
1AB8:  MOVFF  24E,252
1ABC:  MOVLB  2
1ABE:  CLRF   x59
1AC0:  CLRF   x58
1AC2:  CLRF   x57
1AC4:  MOVLW  8F
1AC6:  MOVWF  x56
1AC8:  MOVLB  0
1ACA:  RCALL  18EC
1ACC:  MOVFF  03,251
1AD0:  MOVFF  02,250
1AD4:  MOVFF  01,24F
1AD8:  MOVFF  00,24E
....................   return (ULONG)temp - 1; 
1ADC:  MOVFF  251,255
1AE0:  MOVFF  250,254
1AE4:  MOVFF  24F,253
1AE8:  MOVFF  24E,252
1AEC:  RCALL  19E2
1AEE:  MOVFF  03,255
1AF2:  MOVFF  02,254
1AF6:  MOVFF  01,253
1AFA:  MOVFF  00,252
1AFE:  MOVLW  01
1B00:  MOVLB  2
1B02:  SUBWF  00,W
1B04:  MOVWF  00
1B06:  MOVLW  00
1B08:  SUBWFB 01,W
1B0A:  MOVWF  01
1B0C:  MOVLW  00
1B0E:  SUBWFB 02,W
1B10:  MOVWF  02
1B12:  MOVLW  00
1B14:  SUBWFB 03,W
1B16:  MOVWF  03
....................   } 
1B18:  MOVLB  0
1B1A:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
57E6:  MOVFF  1D1,1D3
....................   buf[1] = value; 
57EA:  MOVFF  1D2,1D4
....................   send_FPGA_command(2, buf); 
57EE:  MOVLW  02
57F0:  MOVLB  2
57F2:  MOVWF  x42
57F4:  MOVLW  01
57F6:  MOVWF  x44
57F8:  MOVLW  D3
57FA:  MOVWF  x43
57FC:  MOVLB  0
57FE:  CALL   1654
....................   } 
5802:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
5E96:  MOVLB  2
5E98:  CLRF   x17
5E9A:  CLRF   x16
5E9C:  MOVFF  208,215
5EA0:  MOVFF  207,214
5EA4:  MOVFF  217,24A
5EA8:  MOVFF  216,249
5EAC:  MOVFF  208,248
5EB0:  MOVFF  207,247
5EB4:  CLRF   x4E
5EB6:  CLRF   x4D
5EB8:  MOVLW  27
5EBA:  MOVWF  x4C
5EBC:  MOVLW  10
5EBE:  MOVWF  x4B
5EC0:  MOVLB  0
5EC2:  CALL   11AC
5EC6:  MOVFF  03,217
5ECA:  MOVFF  02,216
5ECE:  MOVFF  01,215
5ED2:  MOVFF  00,214
5ED6:  MOVFF  03,249
5EDA:  MOVFF  02,248
5EDE:  MOVFF  01,247
5EE2:  MOVFF  00,246
5EE6:  CALL   1A24
5EEA:  MOVFF  03,213
5EEE:  MOVFF  02,212
5EF2:  MOVFF  01,211
5EF6:  MOVFF  00,210
....................   buf[0] = 2; 
5EFA:  MOVLW  02
5EFC:  MOVLB  2
5EFE:  MOVWF  x09
....................   buf[1] = make8(bitf, 0); 
5F00:  MOVFF  210,20A
....................   buf[2] = make8(bitf, 1); 
5F04:  MOVFF  211,20B
....................   buf[3] = make8(bitf, 2); 
5F08:  MOVFF  212,20C
....................   buf[4] = make8(bitf, 3); 
5F0C:  MOVFF  213,20D
....................   send_FPGA_command(5, buf); 
5F10:  MOVLW  05
5F12:  MOVWF  x42
5F14:  MOVLW  02
5F16:  MOVWF  x44
5F18:  MOVLW  09
5F1A:  MOVWF  x43
5F1C:  MOVLB  0
5F1E:  CALL   1654
....................   } 
5F22:  GOTO   63C4 (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 0; 
*
16C2:  MOVLB  2
16C4:  CLRF   x35
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
16C6:  MOVLB  0
16C8:  SWAPF  xB0,W
16CA:  MOVWF  00
16CC:  MOVLW  F0
16CE:  ANDWF  00,F
16D0:  MOVF   00,W
16D2:  IORWF  xAF,W
16D4:  MOVLB  2
16D6:  MOVWF  x3E
16D8:  MOVLB  0
16DA:  SWAPF  xB1,W
16DC:  MOVWF  00
16DE:  RLCF   00,F
16E0:  MOVLW  E0
16E2:  ANDWF  00,F
16E4:  MOVF   00,W
16E6:  MOVLB  2
16E8:  IORWF  x3E,F
16EA:  MOVLB  0
16EC:  SWAPF  xB5,W
16EE:  MOVWF  00
16F0:  RLCF   00,F
16F2:  RLCF   00,F
16F4:  MOVLW  C0
16F6:  ANDWF  00,F
16F8:  MOVF   00,W
16FA:  MOVLB  2
16FC:  IORWF  x3E,F
16FE:  CLRF   00
1700:  MOVLB  0
1702:  BTFSC  xB7.0
1704:  BSF    00.7
1706:  MOVF   00,W
1708:  MOVLB  2
170A:  IORWF  x3E,W
170C:  MOVWF  x36
....................   send_FPGA_command(2, buf); 
170E:  MOVLW  02
1710:  MOVWF  x42
1712:  MOVWF  x44
1714:  MOVLW  35
1716:  MOVWF  x43
1718:  MOVLB  0
171A:  RCALL  1654
....................   } 
171C:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 6; 
171E:  MOVLW  06
1720:  MOVLB  2
1722:  MOVWF  x35
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
1724:  BCF    FD8.0
1726:  MOVLB  0
1728:  RLCF   xB3,W
172A:  IORWF  xB2,W
172C:  MOVLB  2
172E:  MOVWF  x3E
1730:  MOVLB  0
1732:  RLCF   xB4,W
1734:  MOVWF  00
1736:  RLCF   00,F
1738:  MOVLW  FC
173A:  ANDWF  00,F
173C:  MOVF   00,W
173E:  MOVLB  2
1740:  IORWF  x3E,W
1742:  MOVWF  x36
....................   send_FPGA_command(2, buf); 
1744:  MOVLW  02
1746:  MOVWF  x42
1748:  MOVWF  x44
174A:  MOVLW  35
174C:  MOVWF  x43
174E:  MOVLB  0
1750:  RCALL  1654
....................   } 
1752:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1B1C:  MOVLB  2
1B1E:  CLRF   x45
1B20:  CLRF   x44
1B22:  MOVFF  AC,243
1B26:  MOVFF  AB,242
1B2A:  MOVFF  245,24A
1B2E:  MOVFF  244,249
1B32:  MOVFF  AC,248
1B36:  MOVFF  AB,247
1B3A:  CLRF   x4E
1B3C:  CLRF   x4D
1B3E:  MOVLW  27
1B40:  MOVWF  x4C
1B42:  MOVLW  10
1B44:  MOVWF  x4B
1B46:  MOVLB  0
1B48:  CALL   11AC
1B4C:  MOVFF  03,245
1B50:  MOVFF  02,244
1B54:  MOVFF  01,243
1B58:  MOVFF  00,242
1B5C:  MOVFF  03,249
1B60:  MOVFF  02,248
1B64:  MOVFF  01,247
1B68:  MOVFF  00,246
1B6C:  RCALL  1A24
1B6E:  MOVFF  03,241
1B72:  MOVFF  02,240
1B76:  MOVFF  01,23F
1B7A:  MOVFF  00,23E
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1B7E:  MOVLW  02
1B80:  MOVLB  2
1B82:  MOVWF  x35
1B84:  MOVFF  23E,236
....................   send_FPGA_command(2, buf); delay_ms(10); 
1B88:  MOVLW  02
1B8A:  MOVWF  x42
1B8C:  MOVWF  x44
1B8E:  MOVLW  35
1B90:  MOVWF  x43
1B92:  MOVLB  0
1B94:  RCALL  1654
1B96:  MOVLW  0A
1B98:  MOVLB  2
1B9A:  MOVWF  x42
1B9C:  MOVLB  0
1B9E:  CALL   0EAA
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1BA2:  MOVLW  03
1BA4:  MOVLB  2
1BA6:  MOVWF  x35
1BA8:  MOVFF  23F,236
....................   send_FPGA_command(2, buf); delay_ms(10); 
1BAC:  MOVLW  02
1BAE:  MOVWF  x42
1BB0:  MOVWF  x44
1BB2:  MOVLW  35
1BB4:  MOVWF  x43
1BB6:  MOVLB  0
1BB8:  RCALL  1654
1BBA:  MOVLW  0A
1BBC:  MOVLB  2
1BBE:  MOVWF  x42
1BC0:  MOVLB  0
1BC2:  CALL   0EAA
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1BC6:  MOVLW  04
1BC8:  MOVLB  2
1BCA:  MOVWF  x35
1BCC:  MOVFF  240,236
....................   send_FPGA_command(2, buf); delay_ms(10); 
1BD0:  MOVLW  02
1BD2:  MOVWF  x42
1BD4:  MOVWF  x44
1BD6:  MOVLW  35
1BD8:  MOVWF  x43
1BDA:  MOVLB  0
1BDC:  RCALL  1654
1BDE:  MOVLW  0A
1BE0:  MOVLB  2
1BE2:  MOVWF  x42
1BE4:  MOVLB  0
1BE6:  CALL   0EAA
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1BEA:  MOVLW  05
1BEC:  MOVLB  2
1BEE:  MOVWF  x35
1BF0:  MOVFF  241,236
....................   send_FPGA_command(2, buf); delay_ms(10); 
1BF4:  MOVLW  02
1BF6:  MOVWF  x42
1BF8:  MOVWF  x44
1BFA:  MOVLW  35
1BFC:  MOVWF  x43
1BFE:  MOVLB  0
1C00:  RCALL  1654
1C02:  MOVLW  0A
1C04:  MOVLB  2
1C06:  MOVWF  x42
1C08:  MOVLB  0
1C0A:  CALL   0EAA
....................   } 
1C0E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
309C:  MOVLB  2
309E:  MOVF   x32,W
30A0:  MOVWF  03
30A2:  MOVF   x31,W
30A4:  BTFSC  FD8.2
30A6:  DECF   x32,F
30A8:  DECF   x31,F
30AA:  IORWF  03,W
30AC:  BZ    3106
30AE:  MOVF   x2E,W
30B0:  MOVWF  03
30B2:  MOVF   x2D,W
30B4:  INCF   x2D,F
30B6:  BTFSC  FD8.2
30B8:  INCF   x2E,F
30BA:  MOVWF  x33
30BC:  MOVFF  03,234
30C0:  MOVF   x30,W
30C2:  MOVWF  03
30C4:  MOVF   x2F,W
30C6:  INCF   x2F,F
30C8:  BTFSC  FD8.2
30CA:  INCF   x30,F
30CC:  MOVWF  FE9
30CE:  MOVFF  03,FEA
30D2:  MOVFF  FEF,235
30D6:  MOVF   FF2,W
30D8:  MOVWF  00
30DA:  BCF    FF2.7
30DC:  MOVFF  233,FA9
30E0:  MOVFF  235,FA8
30E4:  BCF    FA6.6
30E6:  BCF    FA6.7
30E8:  BSF    FA6.2
30EA:  MOVLB  F
30EC:  MOVLW  55
30EE:  MOVWF  FA7
30F0:  MOVLW  AA
30F2:  MOVWF  FA7
30F4:  BSF    FA6.1
30F6:  BTFSC  FA6.1
30F8:  BRA    30F6
30FA:  BCF    FA6.2
30FC:  MOVF   00,W
30FE:  IORWF  FF2,F
3100:  MOVLB  0
3102:  BRA    309C
3104:  MOVLB  2
....................   } 
3106:  MOVLB  0
3108:  GOTO   3130 (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0ED4:  MOVLB  2
0ED6:  MOVF   x32,W
0ED8:  MOVWF  03
0EDA:  MOVF   x31,W
0EDC:  BTFSC  FD8.2
0EDE:  DECF   x32,F
0EE0:  DECF   x31,F
0EE2:  IORWF  03,W
0EE4:  BZ    0F24
0EE6:  MOVF   x30,W
0EE8:  MOVWF  03
0EEA:  MOVF   x2F,W
0EEC:  INCF   x2F,F
0EEE:  BTFSC  FD8.2
0EF0:  INCF   x30,F
0EF2:  MOVWF  FE9
0EF4:  MOVFF  03,FEA
0EF8:  MOVF   x2E,W
0EFA:  MOVWF  03
0EFC:  MOVF   x2D,W
0EFE:  INCF   x2D,F
0F00:  BTFSC  FD8.2
0F02:  INCF   x2E,F
0F04:  MOVWF  x35
0F06:  MOVFF  03,236
0F0A:  MOVFF  FF2,237
0F0E:  BCF    FF2.7
0F10:  MOVFF  235,FA9
0F14:  BCF    FA6.6
0F16:  BCF    FA6.7
0F18:  BSF    FA6.0
0F1A:  MOVF   FA8,W
0F1C:  BTFSC  x37.7
0F1E:  BSF    FF2.7
0F20:  MOVWF  FEF
0F22:  BRA    0ED6
....................   } 
0F24:  MOVLB  0
0F26:  GOTO   0F5C (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
310C:  MOVLB  1
310E:  MOVF   x01,W
3110:  SUBLW  9F
3112:  BNZ   3132
3114:  MOVF   x02,W
3116:  SUBLW  0B
3118:  BNZ   3132
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
311A:  MOVLB  2
311C:  CLRF   x2E
311E:  CLRF   x2D
3120:  CLRF   x30
3122:  MOVLW  AB
3124:  MOVWF  x2F
3126:  CLRF   x32
3128:  MOVLW  56
312A:  MOVWF  x31
312C:  MOVLB  0
312E:  BRA    309C
3130:  MOVLB  1
....................   allow_write = 0; 
3132:  CLRF   x02
3134:  CLRF   x01
....................   } 
3136:  MOVLB  0
3138:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0F46:  MOVLB  2
0F48:  CLRF   x2E
0F4A:  CLRF   x2D
0F4C:  CLRF   x30
0F4E:  MOVLW  AB
0F50:  MOVWF  x2F
0F52:  CLRF   x32
0F54:  MOVLW  56
0F56:  MOVWF  x31
0F58:  MOVLB  0
0F5A:  BRA    0ED4
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0F5C:  INCFSZ xB2,W
0F5E:  BRA    0F62
0F60:  BRA    0F66
0F62:  INCFSZ xB3,W
0F64:  BRA    0F76
....................     memset(&setup, 0, sizeof(setup)); 
0F66:  CLRF   FEA
0F68:  MOVLW  AB
0F6A:  MOVWF  FE9
0F6C:  CLRF   00
0F6E:  CLRF   02
0F70:  MOVLW  56
0F72:  MOVWF  01
0F74:  BRA    0F2A
....................   } 
0F76:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
313A:  MOVLB  2
313C:  CLRF   x32
313E:  CLRF   x31
3140:  MOVF   x32,F
3142:  BNZ   31F6
3144:  MOVF   x31,W
3146:  SUBLW  13
3148:  BNC   31F6
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
314A:  RLCF   x31,W
314C:  MOVWF  x33
314E:  RLCF   x32,W
3150:  MOVWF  x34
3152:  RLCF   x33,F
3154:  RLCF   x34,F
3156:  MOVLW  FC
3158:  ANDWF  x33,F
315A:  MOVFF  234,03
315E:  MOVF   x33,W
3160:  MOVLB  0
3162:  CALL   09C2
3166:  TBLRD*+
3168:  MOVFF  FF5,03
316C:  MOVWF  01
316E:  MOVF   03,W
3170:  MOVLB  2
3172:  SUBWF  x30,W
3174:  BNC   31EE
3176:  BNZ   317E
3178:  MOVF   01,W
317A:  SUBWF  x2F,W
317C:  BNC   31EE
317E:  MOVLW  01
3180:  ADDWF  x31,W
3182:  MOVWF  x35
3184:  MOVLW  00
3186:  ADDWFC x32,W
3188:  MOVWF  x36
318A:  RLCF   x35,F
318C:  RLCF   x36,F
318E:  RLCF   x35,F
3190:  RLCF   x36,F
3192:  MOVLW  FC
3194:  ANDWF  x35,F
3196:  MOVFF  236,03
319A:  MOVF   x35,W
319C:  MOVLB  0
319E:  CALL   09C2
31A2:  TBLRD*+
31A4:  MOVFF  FF5,03
31A8:  MOVWF  01
31AA:  MOVLB  2
31AC:  MOVF   x30,W
31AE:  SUBWF  03,W
31B0:  BNC   31EE
31B2:  BNZ   31BA
31B4:  MOVF   01,W
31B6:  SUBWF  x2F,W
31B8:  BC    31EE
....................     return Ptrans[idx].Pout; 
31BA:  RLCF   x31,W
31BC:  MOVWF  x33
31BE:  RLCF   x32,W
31C0:  MOVWF  x34
31C2:  RLCF   x33,F
31C4:  RLCF   x34,F
31C6:  MOVLW  FC
31C8:  ANDWF  x33,F
31CA:  MOVLW  02
31CC:  ADDWF  x33,W
31CE:  MOVWF  01
31D0:  MOVLW  00
31D2:  ADDWFC x34,W
31D4:  MOVWF  03
31D6:  MOVF   01,W
31D8:  MOVLB  0
31DA:  CALL   09C2
31DE:  TBLRD*+
31E0:  MOVFF  FF5,03
31E4:  MOVWF  01
31E6:  MOVFF  03,02
31EA:  BRA    31FC
31EC:  MOVLB  2
....................   } 
31EE:  INCF   x31,F
31F0:  BTFSC  FD8.2
31F2:  INCF   x32,F
31F4:  BRA    3140
....................   return 0; 
31F6:  MOVLW  00
31F8:  MOVWF  01
31FA:  MOVWF  02
31FC:  MOVLB  0
....................   } 
31FE:  GOTO   46EE (RETURN)
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
*
1C7A:  INCFSZ 24,W
1C7C:  BRA    1C84
1C7E:  INCFSZ 25,W
1C80:  BRA    1C84
1C82:  BRA    1CC6
....................     { 
....................     if (TMR_100MS_POWER) 
1C84:  BTFSS  2C.3
1C86:  BRA    1CC4
....................       { 
....................       TMR_100MS_POWER = 0; 
1C88:  BCF    2C.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1C8A:  MOVLB  2
1C8C:  CLRF   x31
1C8E:  MOVFF  25,233
1C92:  MOVFF  24,232
1C96:  MOVLB  0
1C98:  CALL   0F78
....................       set_adc_channel(A2D_POWER); // select forward power input 
1C9C:  MOVLW  14
1C9E:  MOVWF  01
1CA0:  MOVF   FC2,W
1CA2:  ANDLW  83
1CA4:  IORWF  01,W
1CA6:  MOVWF  FC2
....................       delay_us(20); 
1CA8:  MOVLW  1A
1CAA:  MOVWF  00
1CAC:  DECFSZ 00,F
1CAE:  BRA    1CAC
1CB0:  NOP   
....................       power = read_adc(); 
1CB2:  BSF    FC2.1
1CB4:  BTFSC  FC2.1
1CB6:  BRA    1CB4
1CB8:  MOVFF  FC4,22E
1CBC:  MOVLB  2
1CBE:  MOVFF  FC3,22D
1CC2:  MOVLB  0
....................       } 
....................     return; 
1CC4:  BRA    2026
....................     } 
....................      
....................      if (input(STANDBY) && setup.cot ==0) 
1CC6:  BTFSS  F83.7
1CC8:  BRA    1D24
1CCA:  MOVF   xF5,F
1CCC:  BNZ   1D24
1CCE:  MOVF   xF6,F
1CD0:  BNZ   1D24
....................     { 
....................     if (setup.pwr == 1) 
1CD2:  DECFSZ xAD,W
1CD4:  BRA    1D18
1CD6:  MOVF   xAE,F
1CD8:  BNZ   1D18
....................       { 
....................       output_high(POWER_EN); 
1CDA:  BSF    F8C.6
....................       a++; 
1CDC:  MOVLB  1
1CDE:  INCF   x03,F
1CE0:  BTFSC  FD8.2
1CE2:  INCF   x04,F
....................        if(a==1) 
1CE4:  DECFSZ x03,W
1CE6:  BRA    1CFE
1CE8:  MOVF   x04,F
1CEA:  BNZ   1CFE
.................... 	{ 
.................... 	output_high(POWER_EN); 
1CEC:  BSF    F8C.6
.................... 	delay_ms(50); 
1CEE:  MOVLW  32
1CF0:  MOVLB  2
1CF2:  MOVWF  x42
1CF4:  MOVLB  0
1CF6:  CALL   0EAA
.................... 	update_all(); 
1CFA:  RCALL  1C10
1CFC:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1CFE:  MOVF   x04,W
1D00:  SUBLW  E9
1D02:  BC    1D14
1D04:  XORLW  FF
1D06:  BNZ   1D0E
1D08:  MOVF   x03,W
1D0A:  SUBLW  60
1D0C:  BC    1D14
....................       { 
....................       a=2; 
1D0E:  CLRF   x04
1D10:  MOVLW  02
1D12:  MOVWF  x03
....................       } 
....................       }   
....................     else 
1D14:  BRA    1D20
1D16:  MOVLB  0
....................     	{ 
....................       	output_low(POWER_EN); 
1D18:  BCF    F8C.6
....................      	a=0; 
1D1A:  MOVLB  1
1D1C:  CLRF   x04
1D1E:  CLRF   x03
....................     	} 	 
....................     } 
....................     else if(!input(STANDBY) && setup.cot ==0) 
1D20:  BRA    1D7E
1D22:  MOVLB  0
1D24:  BTFSC  F83.7
1D26:  BRA    1D80
1D28:  MOVF   xF5,F
1D2A:  BNZ   1D80
1D2C:  MOVF   xF6,F
1D2E:  BNZ   1D80
....................       { 
....................        if(setup.pwr == 1) 
1D30:  DECFSZ xAD,W
1D32:  BRA    1D44
1D34:  MOVF   xAE,F
1D36:  BNZ   1D44
....................        	{ 
....................          output_low(POWER_EN);  
1D38:  BCF    F8C.6
....................          a=0; 
1D3A:  MOVLB  1
1D3C:  CLRF   x04
1D3E:  CLRF   x03
....................         } 
....................        else 
1D40:  BRA    1D4E
1D42:  MOVLB  0
....................        { 
....................          output_high(POWER_EN); 
1D44:  BSF    F8C.6
....................           a++; 
1D46:  MOVLB  1
1D48:  INCF   x03,F
1D4A:  BTFSC  FD8.2
1D4C:  INCF   x04,F
....................        }    
....................        if(a==1) 
1D4E:  DECFSZ x03,W
1D50:  BRA    1D68
1D52:  MOVF   x04,F
1D54:  BNZ   1D68
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1D56:  BSF    F8C.6
.................... 	delay_ms(50); 
1D58:  MOVLW  32
1D5A:  MOVLB  2
1D5C:  MOVWF  x42
1D5E:  MOVLB  0
1D60:  CALL   0EAA
.................... 	update_all(); 
1D64:  RCALL  1C10
1D66:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1D68:  MOVF   x04,W
1D6A:  SUBLW  E9
1D6C:  BC    1D7E
1D6E:  XORLW  FF
1D70:  BNZ   1D78
1D72:  MOVF   x03,W
1D74:  SUBLW  60
1D76:  BC    1D7E
....................       { 
....................       a=2; 
1D78:  CLRF   x04
1D7A:  MOVLW  02
1D7C:  MOVWF  x03
1D7E:  MOVLB  0
....................       } 
....................       BREAK; 
....................       }  
....................       {  
.................... } 
....................  
....................  
.................... if (!input(STANDBY) && setup.cot ==1) 
1D80:  BTFSC  F83.7
1D82:  BRA    1DF2
1D84:  DECFSZ xF5,W
1D86:  BRA    1DF2
1D88:  MOVF   xF6,F
1D8A:  BNZ   1DF2
....................     { 
....................     if (setup.pwr == 1) 
1D8C:  DECFSZ xAD,W
1D8E:  BRA    1DD0
1D90:  MOVF   xAE,F
1D92:  BNZ   1DD0
....................       { 
....................       output_high(POWER_EN); 
1D94:  BSF    F8C.6
....................       b++; 
1D96:  MOVLB  1
1D98:  INCF   x05,F
1D9A:  BTFSC  FD8.2
1D9C:  INCF   x06,F
....................        if(b==1) 
1D9E:  DECFSZ x05,W
1DA0:  BRA    1DB8
1DA2:  MOVF   x06,F
1DA4:  BNZ   1DB8
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1DA6:  BSF    F8C.6
.................... 	delay_ms(60); 
1DA8:  MOVLW  3C
1DAA:  MOVLB  2
1DAC:  MOVWF  x42
1DAE:  MOVLB  0
1DB0:  CALL   0EAA
.................... 	update_all(); 
1DB4:  RCALL  1C10
1DB6:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(b>60000) 
1DB8:  MOVF   x06,W
1DBA:  SUBLW  E9
1DBC:  BC    1DCE
1DBE:  XORLW  FF
1DC0:  BNZ   1DC8
1DC2:  MOVF   x05,W
1DC4:  SUBLW  60
1DC6:  BC    1DCE
....................       { 
....................       b=2; 
1DC8:  CLRF   x06
1DCA:  MOVLW  02
1DCC:  MOVWF  x05
1DCE:  MOVLB  0
....................       } 
....................       }   
....................     if(setup.pwr == 0) 
1DD0:  MOVF   xAD,F
1DD2:  BNZ   1DF0
1DD4:  MOVF   xAE,F
1DD6:  BNZ   1DF0
....................     	{ 
....................       	output_low(POWER_EN); 
1DD8:  BCF    F8C.6
....................      	set_AD5312(DAC_POS_VOLT, 0); 
1DDA:  MOVLB  2
1DDC:  CLRF   x31
1DDE:  CLRF   x33
1DE0:  CLRF   x32
1DE2:  MOVLB  0
1DE4:  CALL   0F78
....................      	b=0; 
1DE8:  MOVLB  1
1DEA:  CLRF   x06
1DEC:  CLRF   x05
1DEE:  MOVLB  0
....................      	} 	 
....................     } 
....................     else if(input(STANDBY) && setup.cot ==1) 
1DF0:  BRA    1E7C
1DF2:  BTFSS  F83.7
1DF4:  BRA    1E7C
1DF6:  DECFSZ xF5,W
1DF8:  BRA    1E7C
1DFA:  MOVF   xF6,F
1DFC:  BNZ   1E7C
....................       { 
....................        if(setup.pwr == 1) 
1DFE:  DECFSZ xAD,W
1E00:  BRA    1E1E
1E02:  MOVF   xAE,F
1E04:  BNZ   1E1E
....................        	{ 
....................          output_low(POWER_EN);  
1E06:  BCF    F8C.6
....................          set_AD5312(DAC_POS_VOLT, 0); 
1E08:  MOVLB  2
1E0A:  CLRF   x31
1E0C:  CLRF   x33
1E0E:  CLRF   x32
1E10:  MOVLB  0
1E12:  CALL   0F78
....................          b=0; 
1E16:  MOVLB  1
1E18:  CLRF   x06
1E1A:  CLRF   x05
1E1C:  MOVLB  0
....................         } 
....................        if(setup.pwr == 0) 
1E1E:  MOVF   xAD,F
1E20:  BNZ   1E48
1E22:  MOVF   xAE,F
1E24:  BNZ   1E48
....................        { 
.................... 	       if(b==1) 
1E26:  MOVLB  1
1E28:  DECFSZ x05,W
1E2A:  BRA    1E48
1E2C:  MOVF   x06,F
1E2E:  BNZ   1E48
.................... 	       { 
....................  
....................          output_high(POWER_EN); 
1E30:  BSF    F8C.6
....................          	delay_ms(60); 
1E32:  MOVLW  3C
1E34:  MOVLB  2
1E36:  MOVWF  x42
1E38:  MOVLB  0
1E3A:  CALL   0EAA
.................... 			update_all(); 
1E3E:  RCALL  1C10
....................           b++; 
1E40:  MOVLB  1
1E42:  INCF   x05,F
1E44:  BTFSC  FD8.2
1E46:  INCF   x06,F
....................         }   
....................        }    
....................        if(b==1) 
1E48:  MOVLB  1
1E4A:  DECFSZ x05,W
1E4C:  BRA    1E64
1E4E:  MOVF   x06,F
1E50:  BNZ   1E64
.................... 	{ 
.................... 	output_high(POWER_EN); 
1E52:  BSF    F8C.6
.................... 	delay_ms(50); 
1E54:  MOVLW  32
1E56:  MOVLB  2
1E58:  MOVWF  x42
1E5A:  MOVLB  0
1E5C:  CALL   0EAA
.................... 	update_all(); 
1E60:  RCALL  1C10
1E62:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1E64:  MOVF   x04,W
1E66:  SUBLW  E9
1E68:  BC    1E7A
1E6A:  XORLW  FF
1E6C:  BNZ   1E74
1E6E:  MOVF   x03,W
1E70:  SUBLW  60
1E72:  BC    1E7A
....................       { 
....................       b=2; 
1E74:  CLRF   x06
1E76:  MOVLW  02
1E78:  MOVWF  x05
1E7A:  MOVLB  0
....................       } 
....................        
....................       }  
....................       break; 
....................       {  
....................     } 
....................      
....................      if (setup.frequency < FREQ_LOW_THRESH) 
1E7C:  MOVF   xBA,W
1E7E:  SUBLW  58
1E80:  BNC   1EA0
1E82:  BNZ   1E8A
1E84:  MOVF   xB9,W
1E86:  SUBLW  29
1E88:  BNC   1EA0
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1E8A:  MOVLW  01
1E8C:  MOVLB  2
1E8E:  MOVWF  x31
1E90:  MOVFF  BF,233
1E94:  MOVFF  BE,232
1E98:  MOVLB  0
1E9A:  CALL   0F78
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1E9E:  BRA    1ED8
1EA0:  MOVF   xBA,W
1EA2:  SUBLW  5A
1EA4:  BNC   1EC4
1EA6:  BNZ   1EAE
1EA8:  MOVF   xB9,W
1EAA:  SUBLW  F9
1EAC:  BNC   1EC4
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1EAE:  MOVLW  01
1EB0:  MOVLB  2
1EB2:  MOVWF  x31
1EB4:  MOVFF  C1,233
1EB8:  MOVFF  C0,232
1EBC:  MOVLB  0
1EBE:  CALL   0F78
....................   else 
1EC2:  BRA    1ED8
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1EC4:  MOVLW  01
1EC6:  MOVLB  2
1EC8:  MOVWF  x31
1ECA:  MOVFF  C3,233
1ECE:  MOVFF  C2,232
1ED2:  MOVLB  0
1ED4:  CALL   0F78
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input 
1ED8:  MOVLW  14
1EDA:  MOVWF  01
1EDC:  MOVF   FC2,W
1EDE:  ANDLW  83
1EE0:  IORWF  01,W
1EE2:  MOVWF  FC2
....................   delay_us(20); 
1EE4:  MOVLW  1A
1EE6:  MOVWF  00
1EE8:  DECFSZ 00,F
1EEA:  BRA    1EE8
1EEC:  NOP   
....................   power = read_adc(); 
1EEE:  BSF    FC2.1
1EF0:  BTFSC  FC2.1
1EF2:  BRA    1EF0
1EF4:  MOVFF  FC4,22E
1EF8:  MOVLB  2
1EFA:  MOVFF  FC3,22D
....................   
....................      
.................... if(setup.rc == 1) 
1EFE:  MOVLB  0
1F00:  DECFSZ xF7,W
1F02:  BRA    1F52
1F04:  MOVF   xF8,F
1F06:  BNZ   1F52
.................... {      
.................... 	 if (input(HILO) && setup.rp == 1) 
1F08:  BTFSS  F83.2
1F0A:  BRA    1F1E
1F0C:  DECFSZ xF9,W
1F0E:  BRA    1F1E
1F10:  MOVF   xFA,F
1F12:  BNZ   1F1E
.................... 	 { 
....................     level = power_level;  //SV 
1F14:  MOVFF  1D,230
1F18:  MOVFF  1C,22F
....................      }   
....................   else if (input(HILO) && setup.rp == 0) 
1F1C:  BRA    1F52
1F1E:  BTFSS  F83.2
1F20:  BRA    1F34
1F22:  MOVF   xF9,F
1F24:  BNZ   1F34
1F26:  MOVF   xFA,F
1F28:  BNZ   1F34
....................     { 
....................     level = low_power_level; //VL 
1F2A:  MOVFF  1B,230
1F2E:  MOVFF  1A,22F
....................     } 
....................     else if(!input(HILO) && setup.rp == 0) 
1F32:  BRA    1F52
1F34:  BTFSC  F83.2
1F36:  BRA    1F4A
1F38:  MOVF   xF9,F
1F3A:  BNZ   1F4A
1F3C:  MOVF   xFA,F
1F3E:  BNZ   1F4A
....................     { 
....................     level = power_level;  //SV 
1F40:  MOVFF  1D,230
1F44:  MOVFF  1C,22F
....................     } 
....................   else 
1F48:  BRA    1F52
....................   { 
....................     level = low_power_level;  // VL 
1F4A:  MOVFF  1B,230
1F4E:  MOVFF  1A,22F
....................   }   
.................... } 
.................... 	 
.................... 	if(setup.rc == 0) 
1F52:  MOVF   xF7,F
1F54:  BNZ   1FA4
1F56:  MOVF   xF8,F
1F58:  BNZ   1FA4
.................... 	{ 
.................... 	  if (input(HILO) && setup.rp == 0) 
1F5A:  BTFSS  F83.2
1F5C:  BRA    1F70
1F5E:  MOVF   xF9,F
1F60:  BNZ   1F70
1F62:  MOVF   xFA,F
1F64:  BNZ   1F70
.................... 	    { 
....................     level = power_level;  //SV  
1F66:  MOVFF  1D,230
1F6A:  MOVFF  1C,22F
....................         }    
....................   else if (!input(HILO) && setup.rp == 1) 
1F6E:  BRA    1FA4
1F70:  BTFSC  F83.2
1F72:  BRA    1F86
1F74:  DECFSZ xF9,W
1F76:  BRA    1F86
1F78:  MOVF   xFA,F
1F7A:  BNZ   1F86
....................     { 
....................     level = power_level; 
1F7C:  MOVFF  1D,230
1F80:  MOVFF  1C,22F
....................     } 
....................     else if(input(HILO) && setup.rp == 1) 
1F84:  BRA    1FA4
1F86:  BTFSS  F83.2
1F88:  BRA    1F9C
1F8A:  DECFSZ xF9,W
1F8C:  BRA    1F9C
1F8E:  MOVF   xFA,F
1F90:  BNZ   1F9C
....................     { 
....................     level = low_power_level; 
1F92:  MOVFF  1B,230
1F96:  MOVFF  1A,22F
....................     } 
....................   else 
1F9A:  BRA    1FA4
....................     level = low_power_level; // VL 
1F9C:  MOVFF  1B,230
1FA0:  MOVFF  1A,22F
.................... } 
....................  
....................  
....................  
....................      
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
1FA4:  MOVLW  06
1FA6:  MOVLB  2
1FA8:  ADDWF  x2F,W
1FAA:  MOVWF  01
1FAC:  MOVLW  00
1FAE:  ADDWFC x30,W
1FB0:  MOVWF  03
1FB2:  MOVF   03,W
1FB4:  SUBWF  x2E,W
1FB6:  BNC   1FC0
1FB8:  BNZ   1FDE
1FBA:  MOVF   x2D,W
1FBC:  SUBWF  01,W
1FBE:  BNC   1FDE
1FC0:  MOVLW  06
1FC2:  SUBWF  x2F,W
1FC4:  MOVWF  00
1FC6:  MOVLW  00
1FC8:  SUBWFB x30,W
1FCA:  MOVWF  03
1FCC:  MOVFF  00,01
1FD0:  MOVF   x2E,W
1FD2:  SUBWF  03,W
1FD4:  BNC   2028
1FD6:  BNZ   1FDE
1FD8:  MOVF   01,W
1FDA:  SUBWF  x2D,W
1FDC:  BC    2028
....................     { 
....................     if (power < level) 
1FDE:  MOVF   x2E,W
1FE0:  SUBWF  x30,W
1FE2:  BNC   2000
1FE4:  BNZ   1FEC
1FE6:  MOVF   x2F,W
1FE8:  SUBWF  x2D,W
1FEA:  BC    2000
....................       { 
....................       if (power_control >= 150) 
1FEC:  MOVF   1F,F
1FEE:  BNZ   1FF6
1FF0:  MOVF   1E,W
1FF2:  SUBLW  95
1FF4:  BC    1FFE
....................         power_control -= DEADBAND / 2; 
1FF6:  MOVLW  03
1FF8:  SUBWF  1E,F
1FFA:  MOVLW  00
1FFC:  SUBWFB 1F,F
....................       } 
....................     else if (power_control <= 1010) 
1FFE:  BRA    2016
2000:  MOVF   1F,W
2002:  SUBLW  03
2004:  BNC   2016
2006:  BNZ   200E
2008:  MOVF   1E,W
200A:  SUBLW  F2
200C:  BNC   2016
....................       { 
....................       power_control += DEADBAND / 2; 
200E:  MOVLW  03
2010:  ADDWF  1E,F
2012:  MOVLW  00
2014:  ADDWFC 1F,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
2016:  CLRF   x31
2018:  MOVFF  1F,233
201C:  MOVFF  1E,232
2020:  MOVLB  0
2022:  CALL   0F78
2026:  MOVLB  2
....................     }	 
....................  
....................  
....................   } 
2028:  MOVLB  0
202A:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0E0A:  CLRF   F89
....................   output_b(0); 
0E0C:  CLRF   F8A
....................   output_c(0); 
0E0E:  CLRF   F8B
....................   output_d(0); 
0E10:  CLRF   F8C
....................   output_e(0); 
0E12:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0E14:  MOVLW  E1
0E16:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0E18:  MOVLW  C1
0E1A:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0E1C:  MOVLW  F1
0E1E:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0E20:  MOVLW  8E
0E22:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0E24:  BSF    F96.0
0E26:  BSF    F96.1
0E28:  BCF    F96.2
0E2A:  BSF    F96.3
....................   } 
0E2C:  GOTO   0E70 (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0E46:  MOVLW  48
0E48:  IORLW  05
0E4A:  MOVWF  FBA
0E4C:  MOVLW  63
0E4E:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0E50:  CLRF   FB4
0E52:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0E54:  MOVLW  00
0E56:  IORLW  05
0E58:  MOVLB  F
0E5A:  MOVWF  x51
0E5C:  MOVLW  63
0E5E:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0E60:  CLRF   x4D
0E62:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0E64:  MOVLW  00
0E66:  MOVWF  x4A
0E68:  MOVLW  00
0E6A:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0E6C:  MOVLB  0
0E6E:  BRA    0E0A
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0E70:  MOVF   FC1,W
0E72:  ANDLW  F0
0E74:  MOVWF  FC1
0E76:  MOVLW  21
0E78:  MOVLB  F
0E7A:  MOVWF  x38
0E7C:  MOVLW  03
0E7E:  MOVWF  x3C
0E80:  MOVLW  00
0E82:  MOVWF  x39
0E84:  MOVWF  x3A
0E86:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0E88:  MOVF   FC0,W
0E8A:  ANDLW  C0
0E8C:  IORLW  25
0E8E:  MOVWF  FC0
0E90:  BSF    FC0.7
0E92:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0E94:  CLRF   F77
0E96:  MOVLW  04
0E98:  MOVWF  F78
0E9A:  MOVWF  F79
....................  
....................   COM1_init(); 
0E9C:  MOVLB  0
0E9E:  RCALL  0E30
....................   enable_interrupts(INT_TIMER2); 
0EA0:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0EA2:  MOVLW  C0
0EA4:  IORWF  FF2,F
....................   } 
0EA6:  GOTO   6946 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1C10:  MOVFF  BA,232
1C14:  MOVFF  B9,231
....................   delay_ms(5); 
1C18:  MOVLW  05
1C1A:  MOVLB  2
1C1C:  MOVWF  x42
1C1E:  MOVLB  0
1C20:  CALL   0EAA
....................   PLL_compute_freq_parameters(freq); 
1C24:  MOVFF  232,236
1C28:  MOVFF  231,235
1C2C:  CALL   129C
....................   delay_ms(5); 
1C30:  MOVLW  05
1C32:  MOVLB  2
1C34:  MOVWF  x42
1C36:  MOVLB  0
1C38:  CALL   0EAA
....................   PLL_update(); 
1C3C:  RCALL  156C
....................   delay_ms(5); 
1C3E:  MOVLW  05
1C40:  MOVLB  2
1C42:  MOVWF  x42
1C44:  MOVLB  0
1C46:  CALL   0EAA
....................   FPGA_set_reg0(); 
1C4A:  RCALL  16C2
....................   delay_ms(5); 
1C4C:  MOVLW  05
1C4E:  MOVLB  2
1C50:  MOVWF  x42
1C52:  MOVLB  0
1C54:  CALL   0EAA
....................   FPGA_set_reg6(); 
1C58:  RCALL  171E
....................   delay_ms(5); 
1C5A:  MOVLW  05
1C5C:  MOVLB  2
1C5E:  MOVWF  x42
1C60:  MOVLB  0
1C62:  CALL   0EAA
....................   FPGA_set_bitrate(); 
1C66:  RCALL  1B1C
....................   bitr = setup.bitrate; 
1C68:  MOVFF  AC,234
1C6C:  MOVFF  AB,233
....................   power_control = 1000; 
1C70:  MOVLW  03
1C72:  MOVWF  1F
1C74:  MOVLW  E8
1C76:  MOVWF  1E
....................   } 
1C78:  RETURN 0
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
68BC:  CLRF   FF8
68BE:  BCF    FD0.7
68C0:  BSF    07.7
68C2:  CLRF   FEA
68C4:  CLRF   FE9
68C6:  MOVLW  70
68C8:  MOVWF  FD3
68CA:  BCF    F9B.6
68CC:  BCF    F9B.7
68CE:  BCF    FB8.3
68D0:  MOVLW  19
68D2:  MOVWF  FAF
68D4:  MOVLW  A6
68D6:  MOVWF  FAC
68D8:  MOVLW  90
68DA:  MOVWF  FAB
68DC:  SETF   23
68DE:  SETF   22
68E0:  SETF   25
68E2:  SETF   24
68E4:  CLRF   30
68E6:  CLRF   2F
68E8:  CLRF   31
68EA:  CLRF   32
68EC:  CLRF   33
68EE:  MOVLB  1
68F0:  CLRF   x02
68F2:  CLRF   x01
68F4:  CLRF   x04
68F6:  MOVLW  02
68F8:  MOVWF  x03
68FA:  CLRF   x06
68FC:  MOVWF  x05
68FE:  CLRF   x0C
6900:  CLRF   x0B
6902:  CLRF   x10
6904:  CLRF   x0F
6906:  CLRF   x2B
6908:  MOVLW  01
690A:  MOVWF  x41
690C:  CLRF   x42
690E:  MOVFF  F9,19F
6912:  MOVFF  AD,1A0
6916:  CLRF   xA3
6918:  CLRF   xA2
691A:  MOVF   FC1,W
691C:  ANDLW  F0
691E:  MOVWF  FC1
6920:  MOVLW  00
6922:  MOVLB  F
6924:  MOVWF  x38
6926:  MOVWF  x3C
6928:  MOVWF  x39
692A:  MOVWF  x3A
692C:  MOVWF  x3B
692E:  MOVLB  1
6930:  CLRF   x88
6932:  CLRF   F77
6934:  CLRF   F78
6936:  CLRF   F79
6938:  MOVLW  03
693A:  MOVWF  xA5
693C:  MOVLW  E8
693E:  MOVWF  xA4
....................   int16 vouta = 1000; 
....................   init_system();  
6940:  MOVLB  0
6942:  GOTO   0E46
....................   output_high(D2A_CSB); 
6946:  BSF    F8A.1
....................   delay_ms(100); 
6948:  MOVLW  64
694A:  MOVLB  2
694C:  MOVWF  x42
694E:  MOVLB  0
6950:  CALL   0EAA
....................   read_setup(); 
6954:  CALL   0F46
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
6958:  MOVF   xFB,F
695A:  BNZ   6960
.................... 		setup.UART_Time = 10; 
695C:  MOVLW  0A
695E:  MOVWF  xFB
.................... 	setup.UART_Status = 1; 
6960:  MOVLW  01
6962:  MOVWF  xFC
....................   power_level = setup.power_in[setup.power_level]; 
6964:  BCF    FD8.0
6966:  RLCF   xBB,W
6968:  MOVWF  02
696A:  RLCF   xBC,W
696C:  MOVWF  03
696E:  MOVF   02,W
6970:  ADDLW  C4
6972:  MOVWF  FE9
6974:  MOVLW  00
6976:  ADDWFC 03,W
6978:  MOVWF  FEA
697A:  MOVFF  FEC,03
697E:  MOVF   FED,F
6980:  MOVFF  FEF,1C
6984:  MOVFF  03,1D
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6988:  BCF    FD8.0
698A:  RLCF   xF3,W
698C:  MOVWF  02
698E:  RLCF   xF4,W
6990:  MOVWF  03
6992:  MOVF   02,W
6994:  ADDLW  C4
6996:  MOVWF  FE9
6998:  MOVLW  00
699A:  ADDWFC 03,W
699C:  MOVWF  FEA
699E:  MOVFF  FEC,03
69A2:  MOVF   FED,F
69A4:  MOVFF  FEF,1A
69A8:  MOVFF  03,1B
....................   power_control = 1000; 
69AC:  MOVLW  03
69AE:  MOVWF  1F
69B0:  MOVLW  E8
69B2:  MOVWF  1E
....................   power_output(); 
69B4:  CALL   1C7A
....................    
....................  
....................   PLL_initialize(); 
69B8:  GOTO   202C
....................   delay_ms(50); 
69BC:  MOVLW  32
69BE:  MOVLB  2
69C0:  MOVWF  x42
69C2:  MOVLB  0
69C4:  CALL   0EAA
....................   update_all(); 
69C8:  CALL   1C10
....................  
....................   output_high(D2A_RESET); 
69CC:  BSF    F8A.3
....................   delay_ms(50); 
69CE:  MOVLW  32
69D0:  MOVLB  2
69D2:  MOVWF  x42
69D4:  MOVLB  0
69D6:  CALL   0EAA
....................   output_low(D2A_RESET); 
69DA:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
69DC:  MOVLW  0D
69DE:  MOVLB  1
69E0:  MOVWF  xA6
69E2:  MOVLW  0A
69E4:  MOVWF  xA7
69E6:  CLRF   xA8
69E8:  MOVLW  01
69EA:  MOVLB  2
69EC:  MOVWF  x6C
69EE:  MOVLW  A6
69F0:  MOVWF  x6B
69F2:  MOVLB  0
69F4:  CALL   20D6
....................   COM1_send_str(VERSION); 
69F8:  MOVLW  01
69FA:  MOVWF  FEA
69FC:  MOVLW  A6
69FE:  MOVWF  FE9
6A00:  MOVLW  0F
6A02:  MOVWF  01
6A04:  CLRF   FF7
6A06:  MOVLW  00
6A08:  CALL   08F4
6A0C:  TBLRD*-
6A0E:  TBLRD*+
6A10:  MOVFF  FF5,FEE
6A14:  DECFSZ 01,F
6A16:  BRA    6A0E
6A18:  MOVLW  01
6A1A:  MOVLB  2
6A1C:  MOVWF  x6C
6A1E:  MOVLW  A6
6A20:  MOVWF  x6B
6A22:  MOVLB  0
6A24:  CALL   20D6
....................   COM1_send_str("\r\n"); 
6A28:  MOVLW  0D
6A2A:  MOVLB  1
6A2C:  MOVWF  xA6
6A2E:  MOVLW  0A
6A30:  MOVWF  xA7
6A32:  CLRF   xA8
6A34:  MOVLW  01
6A36:  MOVLB  2
6A38:  MOVWF  x6C
6A3A:  MOVLW  A6
6A3C:  MOVWF  x6B
6A3E:  MOVLB  0
6A40:  CALL   20D6
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
6A44:  MOVLB  2
6A46:  CLRF   x31
6A48:  MOVFF  1A5,233
6A4C:  MOVFF  1A4,232
6A50:  MOVLB  0
6A52:  CALL   0F78
....................  
....................  
....................   delay_ms(500); 
6A56:  MOVLW  02
6A58:  MOVLB  1
6A5A:  MOVWF  xB5
6A5C:  MOVLW  FA
6A5E:  MOVLB  2
6A60:  MOVWF  x42
6A62:  MOVLB  0
6A64:  CALL   0EAA
6A68:  MOVLB  1
6A6A:  DECFSZ xB5,F
6A6C:  BRA    6A5C
....................   output_high(POWER_EN); 
6A6E:  BSF    F8C.6
....................  
.................... update_all(); 
6A70:  MOVLB  0
6A72:  CALL   1C10
....................  
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6A76:  CLRWDT
....................     if (TMR_100mS_BLINK) 
6A78:  BTFSS  2C.0
6A7A:  BRA    6A84
....................       { 
....................       TMR_100mS_BLINK = 0; 
6A7C:  BCF    2C.0
....................       output_toggle(LED1); 
6A7E:  BTG    F8A.4
....................       delay_us(1); 
6A80:  BRA    6A82
6A82:  BRA    6A84
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6A84:  DECFSZ 33,W
6A86:  BRA    6ABE
6A88:  MOVF   36,F
6A8A:  BNZ   6ABE
6A8C:  MOVLB  1
6A8E:  DECFSZ x0B,W
6A90:  BRA    6A96
6A92:  MOVF   x0C,F
6A94:  BZ    6AAA
6A96:  MOVF   x0B,F
6A98:  BTFSC  FD8.2
6A9A:  BRA    6AA0
6A9C:  MOVLB  0
6A9E:  BRA    6ABE
6AA0:  MOVF   x0C,F
6AA2:  BTFSC  FD8.2
6AA4:  BRA    6AAA
6AA6:  MOVLB  0
6AA8:  BRA    6ABE
....................     	{         
.................... 				if (setup.UART_Status == 1) 
6AAA:  MOVLB  0
6AAC:  DECFSZ xFC,W
6AAE:  BRA    6ABE
.................... 		      { 
.................... 			      stay_on = 1; 
6AB0:  MOVLB  1
6AB2:  CLRF   x0C
6AB4:  MOVLW  01
6AB6:  MOVWF  x0B
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
6AB8:  MOVLB  0
6ABA:  GOTO   2812
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6ABE:  MOVLB  1
6AC0:  MOVF   x0B,W
6AC2:  SUBLW  02
6AC4:  BNZ   6ACA
6AC6:  MOVF   x0C,F
6AC8:  BZ    6AD2
6ACA:  MOVF   x0B,F
6ACC:  BNZ   6AE2
6ACE:  MOVF   x0C,F
6AD0:  BNZ   6AE2
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6AD2:  MOVLB  0
6AD4:  BRA    6882
.................... 		   			if (COM1_rxo != 0 ) 
6AD6:  MOVF   36,F
6AD8:  BZ    6AE4
.................... 		   				stay_on = 2; 
6ADA:  MOVLB  1
6ADC:  CLRF   x0C
6ADE:  MOVLW  02
6AE0:  MOVWF  x0B
6AE2:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6AE4:  CALL   1C7A
....................    } 
6AE8:  BRA    6A76
....................   } 
6AEA:  SLEEP 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
