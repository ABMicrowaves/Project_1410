CCS PCH C Compiler, Version 4.137, 5799               25-אפר-16 11:00

               Filename: D:\nati\projects\1410TX\BA1410TX-V3.2 New Update Status Block\Fifteenth\BA1410TX.lst

               ROM used: 27348 bytes (83%)
                         Largest free fragment is 5416
               RAM used: 429 (28%) at main() level
                         631 (41%) worst case
               Stack:    10 worst case (8 in main + 2 for interrupts)

*
0000:  GOTO   6894
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   0A3E
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   0AEA
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0AF0
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   0AF6
0084:  BTFSS  F9D.4
0086:  GOTO   0090
008A:  BTFSC  F9E.4
008C:  GOTO   0B44
0090:  BTFSS  F7D.0
0092:  GOTO   009C
0096:  BTFSC  F7E.0
0098:  GOTO   0A22
009C:  MOVFF  0E,00
00A0:  MOVFF  0F,01
00A4:  MOVFF  10,02
00A8:  MOVFF  11,03
00AC:  MOVFF  0C,FE9
00B0:  MOVFF  07,FEA
00B4:  BSF    07.7
00B6:  MOVFF  08,FE1
00BA:  MOVFF  09,FE2
00BE:  MOVFF  0A,FD9
00C2:  MOVFF  0B,FDA
00C6:  MOVFF  12,FF3
00CA:  MOVFF  13,FF4
00CE:  MOVFF  14,FFA
00D2:  MOVFF  15,FF5
00D6:  MOVFF  16,FF6
00DA:  MOVFF  17,FF7
00DE:  MOVF   04,W
00E0:  MOVFF  06,FE0
00E4:  MOVFF  05,FD8
00E8:  RETFIE 0
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0B24:  MOVLW  04
0B26:  MOVLB  2
0B28:  SUBWF  x74,F
0B2A:  BNC   0B40
0B2C:  MOVLW  02
0B2E:  MOVWF  FEA
0B30:  MOVLW  74
0B32:  MOVWF  FE9
0B34:  MOVF   FEF,W
0B36:  BZ    0B40
0B38:  BRA    0B3C
0B3A:  NOP   
0B3C:  DECFSZ FEF,F
0B3E:  BRA    0B3A
0B40:  MOVLB  0
0B42:  RETURN 0
*
0EAA:  MOVLW  02
0EAC:  MOVWF  FEA
0EAE:  MOVLW  43
0EB0:  MOVWF  FE9
0EB2:  MOVF   FEF,W
0EB4:  BZ    0ED2
0EB6:  MOVLW  05
0EB8:  MOVWF  01
0EBA:  CLRF   00
0EBC:  DECFSZ 00,F
0EBE:  BRA    0EBC
0EC0:  DECFSZ 01,F
0EC2:  BRA    0EBA
0EC4:  MOVLW  2E
0EC6:  MOVWF  00
0EC8:  DECFSZ 00,F
0ECA:  BRA    0EC8
0ECC:  BRA    0ECE
0ECE:  DECFSZ FEF,F
0ED0:  BRA    0EB6
0ED2:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION " BA1410TX V3.3" 
.................... // VERSION 3.3 Custmmer chenge Add Status Block 14.4.2016 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UINT  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
....................  
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... // To delet status check 
.................... //UINT  test_status = 0; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
.................... 	  	 UINT  cot; 
.................... 	  	 UINT  rc; 
.................... 	  	 UINT  rp; 
.................... 	  	 UCHAR UART_Time; // VERSION 3.3 UT 
.................... 	  	 UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
.................... 	  	 byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
.................... 	  	 byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
.................... 	     UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT a=2, b=2; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[25]; // VERSION 3.3 use 24 25.04.2016 
....................  
.................... UCHAR ttccp_login = 0; 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0F78:  BCF    F89.2
....................  
....................   if (channel) 
0F7A:  MOVLB  2
0F7C:  MOVF   x32,F
0F7E:  BZ    0F84
....................     output_high(DA2_DAT);    // send to VOUTB 
0F80:  BSF    F89.4
....................   else 
0F82:  BRA    0F86
....................     output_low(DA2_DAT);    // send to VOUTA 
0F84:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0F86:  BSF    F89.3
....................   delay_cycles(15); 
0F88:  MOVLW  04
0F8A:  MOVWF  00
0F8C:  DECFSZ 00,F
0F8E:  BRA    0F8C
0F90:  BRA    0F92
....................   output_low(DA2_CLK); 
0F92:  BCF    F89.3
....................   delay_cycles(15); 
0F94:  MOVLW  04
0F96:  MOVWF  00
0F98:  DECFSZ 00,F
0F9A:  BRA    0F98
0F9C:  BRA    0F9E
....................  
....................   output_low(DA2_DAT); 
0F9E:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0FA0:  BSF    F89.3
....................   delay_cycles(15); 
0FA2:  MOVLW  04
0FA4:  MOVWF  00
0FA6:  DECFSZ 00,F
0FA8:  BRA    0FA6
0FAA:  BRA    0FAC
....................   output_low(DA2_CLK); 
0FAC:  BCF    F89.3
....................   delay_cycles(15); 
0FAE:  MOVLW  04
0FB0:  MOVWF  00
0FB2:  DECFSZ 00,F
0FB4:  BRA    0FB2
0FB6:  BRA    0FB8
....................  
....................   output_high(DA2_CLK); 
0FB8:  BSF    F89.3
....................   delay_cycles(15); 
0FBA:  MOVLW  04
0FBC:  MOVWF  00
0FBE:  DECFSZ 00,F
0FC0:  BRA    0FBE
0FC2:  BRA    0FC4
....................   output_low(DA2_CLK); 
0FC4:  BCF    F89.3
....................   delay_cycles(15); 
0FC6:  MOVLW  04
0FC8:  MOVWF  00
0FCA:  DECFSZ 00,F
0FCC:  BRA    0FCA
0FCE:  BRA    0FD0
....................  
....................   output_high(DA2_CLK); 
0FD0:  BSF    F89.3
....................   delay_cycles(15); 
0FD2:  MOVLW  04
0FD4:  MOVWF  00
0FD6:  DECFSZ 00,F
0FD8:  BRA    0FD6
0FDA:  BRA    0FDC
....................   output_low(DA2_CLK); 
0FDC:  BCF    F89.3
....................   delay_cycles(15); 
0FDE:  MOVLW  04
0FE0:  MOVWF  00
0FE2:  DECFSZ 00,F
0FE4:  BRA    0FE2
0FE6:  BRA    0FE8
....................  
....................  
....................   output_high(DA2_CLK); 
0FE8:  BSF    F89.3
....................   if (level & 0x0200) 
0FEA:  ANDLW  00
0FEC:  MOVWF  00
0FEE:  MOVF   x34,W
0FF0:  ANDLW  02
0FF2:  MOVWF  03
0FF4:  MOVF   00,W
0FF6:  IORWF  03,W
0FF8:  BZ    0FFE
....................     output_high(DA2_DAT); 
0FFA:  BSF    F89.4
....................   else 
0FFC:  BRA    1000
....................     output_low(DA2_DAT); 
0FFE:  BCF    F89.4
....................   delay_cycles(15); 
1000:  MOVLW  04
1002:  MOVWF  00
1004:  DECFSZ 00,F
1006:  BRA    1004
1008:  BRA    100A
....................   output_low(DA2_CLK); 
100A:  BCF    F89.3
....................   delay_cycles(15); 
100C:  MOVLW  04
100E:  MOVWF  00
1010:  DECFSZ 00,F
1012:  BRA    1010
1014:  BRA    1016
....................  
....................   output_high(DA2_CLK); 
1016:  BSF    F89.3
....................   if (level & 0x0100) 
1018:  ANDLW  00
101A:  MOVWF  00
101C:  MOVF   x34,W
101E:  ANDLW  01
1020:  MOVWF  03
1022:  MOVF   00,W
1024:  IORWF  03,W
1026:  BZ    102C
....................     output_high(DA2_DAT); 
1028:  BSF    F89.4
....................   else 
102A:  BRA    102E
....................     output_low(DA2_DAT); 
102C:  BCF    F89.4
....................   output_low(DA2_CLK); 
102E:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1030:  BSF    F89.3
....................   if (level & 0x0080) 
1032:  MOVF   x33,W
1034:  ANDLW  80
1036:  MOVWF  00
1038:  CLRF   03
103A:  MOVF   00,W
103C:  IORWF  03,W
103E:  BZ    1044
....................     output_high(DA2_DAT); 
1040:  BSF    F89.4
....................   else 
1042:  BRA    1046
....................     output_low(DA2_DAT); 
1044:  BCF    F89.4
....................   delay_cycles(15); 
1046:  MOVLW  04
1048:  MOVWF  00
104A:  DECFSZ 00,F
104C:  BRA    104A
104E:  BRA    1050
....................   output_low(DA2_CLK); 
1050:  BCF    F89.3
....................   delay_cycles(15); 
1052:  MOVLW  04
1054:  MOVWF  00
1056:  DECFSZ 00,F
1058:  BRA    1056
105A:  BRA    105C
....................  
....................   output_high(DA2_CLK); 
105C:  BSF    F89.3
....................   if (level & 0x0040) 
105E:  MOVF   x33,W
1060:  ANDLW  40
1062:  MOVWF  00
1064:  CLRF   03
1066:  MOVF   00,W
1068:  IORWF  03,W
106A:  BZ    1070
....................     output_high(DA2_DAT); 
106C:  BSF    F89.4
....................   else 
106E:  BRA    1072
....................     output_low(DA2_DAT); 
1070:  BCF    F89.4
....................   delay_cycles(15); 
1072:  MOVLW  04
1074:  MOVWF  00
1076:  DECFSZ 00,F
1078:  BRA    1076
107A:  BRA    107C
....................   output_low(DA2_CLK); 
107C:  BCF    F89.3
....................   delay_cycles(15); 
107E:  MOVLW  04
1080:  MOVWF  00
1082:  DECFSZ 00,F
1084:  BRA    1082
1086:  BRA    1088
....................  
....................   output_high(DA2_CLK); 
1088:  BSF    F89.3
....................   if (level & 0x0020) 
108A:  MOVF   x33,W
108C:  ANDLW  20
108E:  MOVWF  00
1090:  CLRF   03
1092:  MOVF   00,W
1094:  IORWF  03,W
1096:  BZ    109C
....................     output_high(DA2_DAT); 
1098:  BSF    F89.4
....................   else 
109A:  BRA    109E
....................     output_low(DA2_DAT); 
109C:  BCF    F89.4
....................   output_low(DA2_CLK); 
109E:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
10A0:  BSF    F89.3
....................   if (level & 0x0010) 
10A2:  MOVF   x33,W
10A4:  ANDLW  10
10A6:  MOVWF  00
10A8:  CLRF   03
10AA:  MOVF   00,W
10AC:  IORWF  03,W
10AE:  BZ    10B4
....................     output_high(DA2_DAT); 
10B0:  BSF    F89.4
....................   else 
10B2:  BRA    10B6
....................     output_low(DA2_DAT); 
10B4:  BCF    F89.4
....................   delay_cycles(15); 
10B6:  MOVLW  04
10B8:  MOVWF  00
10BA:  DECFSZ 00,F
10BC:  BRA    10BA
10BE:  BRA    10C0
....................   output_low(DA2_CLK); 
10C0:  BCF    F89.3
....................   delay_cycles(15); 
10C2:  MOVLW  04
10C4:  MOVWF  00
10C6:  DECFSZ 00,F
10C8:  BRA    10C6
10CA:  BRA    10CC
....................  
....................   output_high(DA2_CLK); 
10CC:  BSF    F89.3
....................   if (level & 0x0008) 
10CE:  MOVF   x33,W
10D0:  ANDLW  08
10D2:  MOVWF  00
10D4:  CLRF   03
10D6:  MOVF   00,W
10D8:  IORWF  03,W
10DA:  BZ    10E0
....................     output_high(DA2_DAT); 
10DC:  BSF    F89.4
....................   else 
10DE:  BRA    10E2
....................     output_low(DA2_DAT); 
10E0:  BCF    F89.4
....................   output_low(DA2_CLK); 
10E2:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
10E4:  BSF    F89.3
....................   if (level & 0x0004) 
10E6:  MOVF   x33,W
10E8:  ANDLW  04
10EA:  MOVWF  00
10EC:  CLRF   03
10EE:  MOVF   00,W
10F0:  IORWF  03,W
10F2:  BZ    10F8
....................     output_high(DA2_DAT); 
10F4:  BSF    F89.4
....................   else 
10F6:  BRA    10FA
....................     output_low(DA2_DAT); 
10F8:  BCF    F89.4
....................   delay_cycles(15); 
10FA:  MOVLW  04
10FC:  MOVWF  00
10FE:  DECFSZ 00,F
1100:  BRA    10FE
1102:  BRA    1104
....................   output_low(DA2_CLK); 
1104:  BCF    F89.3
....................   delay_cycles(15); 
1106:  MOVLW  04
1108:  MOVWF  00
110A:  DECFSZ 00,F
110C:  BRA    110A
110E:  BRA    1110
....................  
....................   output_high(DA2_CLK); 
1110:  BSF    F89.3
....................   if (level & 0x0002) 
1112:  MOVF   x33,W
1114:  ANDLW  02
1116:  MOVWF  00
1118:  CLRF   03
111A:  MOVF   00,W
111C:  IORWF  03,W
111E:  BZ    1124
....................     output_high(DA2_DAT); 
1120:  BSF    F89.4
....................   else 
1122:  BRA    1126
....................     output_low(DA2_DAT); 
1124:  BCF    F89.4
....................   output_low(DA2_CLK); 
1126:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1128:  BSF    F89.3
....................   if (level & 0x0001) 
112A:  MOVF   x33,W
112C:  ANDLW  01
112E:  MOVWF  00
1130:  CLRF   03
1132:  MOVF   00,W
1134:  IORWF  03,W
1136:  BZ    113C
....................     output_high(DA2_DAT); 
1138:  BSF    F89.4
....................   else 
113A:  BRA    113E
....................     output_low(DA2_DAT); 
113C:  BCF    F89.4
....................   delay_cycles(15); 
113E:  MOVLW  04
1140:  MOVWF  00
1142:  DECFSZ 00,F
1144:  BRA    1142
1146:  BRA    1148
....................   output_low(DA2_CLK); 
1148:  BCF    F89.3
....................   delay_cycles(15); 
114A:  MOVLW  04
114C:  MOVWF  00
114E:  DECFSZ 00,F
1150:  BRA    114E
1152:  BRA    1154
....................  
....................  
....................   output_high(DA2_CLK); 
1154:  BSF    F89.3
....................   delay_cycles(15); 
1156:  MOVLW  04
1158:  MOVWF  00
115A:  DECFSZ 00,F
115C:  BRA    115A
115E:  BRA    1160
....................   output_low(DA2_CLK); 
1160:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1162:  BSF    F89.3
....................   delay_cycles(15); 
1164:  MOVLW  04
1166:  MOVWF  00
1168:  DECFSZ 00,F
116A:  BRA    1168
116C:  BRA    116E
....................   delay_cycles(15); 
116E:  MOVLW  04
1170:  MOVWF  00
1172:  DECFSZ 00,F
1174:  BRA    1172
1176:  BRA    1178
....................   output_low(DA2_CLK); 
1178:  BCF    F89.3
....................   delay_cycles(15); 
117A:  MOVLW  04
117C:  MOVWF  00
117E:  DECFSZ 00,F
1180:  BRA    117E
1182:  BRA    1184
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
1184:  BSF    F89.2
....................   delay_cycles(15); 
1186:  MOVLW  04
1188:  MOVWF  00
118A:  DECFSZ 00,F
118C:  BRA    118A
118E:  BRA    1190
....................   output_low(DA2_LAT); 
1190:  BCF    F89.1
....................   delay_cycles(15); 
1192:  MOVLW  04
1194:  MOVWF  00
1196:  DECFSZ 00,F
1198:  BRA    1196
119A:  BRA    119C
....................   output_high(DA2_LAT); 
119C:  BSF    F89.1
....................   delay_cycles(15); 
119E:  MOVLW  04
11A0:  MOVWF  00
11A2:  DECFSZ 00,F
11A4:  BRA    11A2
11A6:  BRA    11A8
....................   } 
11A8:  MOVLB  0
11AA:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5FA8:  BCF    F8A.1
....................   addr |= 0x80; 
5FAA:  MOVLB  2
5FAC:  BSF    x06.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5FAE:  CLRF   x08
5FB0:  MOVF   x08,W
5FB2:  SUBLW  07
5FB4:  BNC   5FDC
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5FB6:  MOVF   x06,W
5FB8:  ANDLW  80
5FBA:  BNZ   5FC0
5FBC:  BCF    F8C.4
5FBE:  BRA    5FC2
5FC0:  BSF    F8C.4
....................     delay_us(1); 
5FC2:  BRA    5FC4
5FC4:  BRA    5FC6
....................     output_high(D2A_SCLK); 
5FC6:  BSF    F8C.0
....................     delay_us(1); 
5FC8:  BRA    5FCA
5FCA:  BRA    5FCC
....................     output_low(D2A_SCLK); 
5FCC:  BCF    F8C.0
....................     delay_us(1); 
5FCE:  BRA    5FD0
5FD0:  BRA    5FD2
....................     } 
5FD2:  MOVF   x08,W
5FD4:  INCF   x08,F
5FD6:  BCF    FD8.0
5FD8:  RLCF   x06,F
5FDA:  BRA    5FB0
....................   for (ix = 0; ix < 8; ix++) 
5FDC:  CLRF   x08
5FDE:  MOVF   x08,W
5FE0:  SUBLW  07
5FE2:  BNC   5FFE
....................     { 
....................     output_high(D2A_SCLK); 
5FE4:  BSF    F8C.0
....................     delay_us(1); 
5FE6:  BRA    5FE8
5FE8:  BRA    5FEA
....................     output_low(D2A_SCLK); 
5FEA:  BCF    F8C.0
....................     delay_us(1); 
5FEC:  BRA    5FEE
5FEE:  BRA    5FF0
....................     dout <<= 1; 
5FF0:  BCF    FD8.0
5FF2:  RLCF   x07,F
....................     if (input(D2A_MISO)) 
5FF4:  BTFSS  F83.1
5FF6:  BRA    5FFA
....................       dout |= 1; 
5FF8:  BSF    x07.0
....................     } 
5FFA:  INCF   x08,F
5FFC:  BRA    5FDE
....................   output_high(D2A_CSB); 
5FFE:  BSF    F8A.1
....................   return dout; 
6000:  MOVFF  207,01
....................   } 
6004:  MOVLB  0
6006:  GOTO   6450 (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5754:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5756:  MOVLB  2
5758:  CLRF   x09
575A:  MOVF   x09,W
575C:  SUBLW  07
575E:  BNC   5786
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5760:  MOVF   x06,W
5762:  ANDLW  80
5764:  BNZ   576A
5766:  BCF    F8C.4
5768:  BRA    576C
576A:  BSF    F8C.4
....................     delay_us(1); 
576C:  BRA    576E
576E:  BRA    5770
....................     output_high(D2A_SCLK); 
5770:  BSF    F8C.0
....................     delay_us(1); 
5772:  BRA    5774
5774:  BRA    5776
....................     output_low(D2A_SCLK); 
5776:  BCF    F8C.0
....................     delay_us(1); 
5778:  BRA    577A
577A:  BRA    577C
....................     } 
577C:  MOVF   x09,W
577E:  INCF   x09,F
5780:  BCF    FD8.0
5782:  RLCF   x06,F
5784:  BRA    575A
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
5786:  CLRF   x09
5788:  MOVF   x09,W
578A:  SUBLW  07
578C:  BNC   57B4
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
578E:  MOVF   x07,W
5790:  ANDLW  80
5792:  BNZ   5798
5794:  BCF    F8C.4
5796:  BRA    579A
5798:  BSF    F8C.4
....................     delay_us(1); 
579A:  BRA    579C
579C:  BRA    579E
....................     output_high(D2A_SCLK); 
579E:  BSF    F8C.0
....................     delay_us(1); 
57A0:  BRA    57A2
57A2:  BRA    57A4
....................     output_low(D2A_SCLK); 
57A4:  BCF    F8C.0
....................     delay_us(1); 
57A6:  BRA    57A8
57A8:  BRA    57AA
....................     } 
57AA:  MOVF   x09,W
57AC:  INCF   x09,F
57AE:  BCF    FD8.0
57B0:  RLCF   x07,F
57B2:  BRA    5788
....................   output_high(D2A_CSB); 
57B4:  BSF    F8A.1
....................   return dout; 
57B6:  MOVFF  208,01
....................   } 
57BA:  MOVLB  0
57BC:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
14C8:  MOVLW  08
14CA:  MOVLB  2
14CC:  MOVWF  x40
14CE:  MOVF   x40,F
14D0:  BZ    150E
....................     { 
....................     if (data & 0X80) 
14D2:  BTFSS  x3F.7
14D4:  BRA    14DA
....................       output_high(PLL_DAT); 
14D6:  BSF    F8B.3
....................     else 
14D8:  BRA    14DC
....................       output_low(PLL_DAT); 
14DA:  BCF    F8B.3
....................     delay_us(10); 
14DC:  MOVLW  0C
14DE:  MOVWF  00
14E0:  DECFSZ 00,F
14E2:  BRA    14E0
14E4:  BRA    14E6
14E6:  NOP   
....................     output_high(PLL_CLK); 
14E8:  BSF    F8B.2
....................     delay_us(10); 
14EA:  MOVLW  0C
14EC:  MOVWF  00
14EE:  DECFSZ 00,F
14F0:  BRA    14EE
14F2:  BRA    14F4
14F4:  NOP   
....................     output_low(PLL_CLK); 
14F6:  BCF    F8B.2
....................  
....................     delay_us(25); 
14F8:  MOVLW  20
14FA:  MOVWF  00
14FC:  DECFSZ 00,F
14FE:  BRA    14FC
1500:  BRA    1502
1502:  NOP   
....................     } 
1504:  MOVF   x40,W
1506:  DECF   x40,F
1508:  BCF    FD8.0
150A:  RLCF   x3F,F
150C:  BRA    14CE
....................   output_low(PLL_DAT); 
150E:  BCF    F8B.3
....................   output_low(PLL_CLK); 
1510:  BCF    F8B.2
....................   } 
1512:  MOVLB  0
1514:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
1516:  CLRWDT
....................   disable_interrupts(GLOBAL); 
1518:  BCF    FF2.6
151A:  BCF    FF2.7
151C:  BTFSC  FF2.7
151E:  BRA    151A
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
1520:  MOVFF  23D,23E
1524:  MOVFF  23D,23F
1528:  RCALL  14C8
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
152A:  MOVFF  23C,23E
152E:  MOVFF  23C,23F
1532:  RCALL  14C8
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1534:  MOVFF  23B,23E
1538:  MOVFF  23B,23F
153C:  RCALL  14C8
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
153E:  MOVFF  23A,23E
1542:  MOVFF  23A,23F
1546:  RCALL  14C8
....................   delay_us(40); 
1548:  MOVLW  34
154A:  MOVWF  00
154C:  DECFSZ 00,F
154E:  BRA    154C
1550:  BRA    1552
1552:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1554:  BSF    F8B.1
....................   delay_us(5); 
1556:  MOVLW  06
1558:  MOVWF  00
155A:  DECFSZ 00,F
155C:  BRA    155A
155E:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
1560:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
1562:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
1564:  MOVLW  C0
1566:  IORWF  FF2,F
....................   restart_wdt(); 
1568:  CLRWDT
....................   } 
156A:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
202C:  MOVLB  1
202E:  CLRF   xBB
2030:  MOVLW  05
2032:  MOVWF  xBA
2034:  MOVF   xBB,W
2036:  SUBLW  05
2038:  BNC   20A6
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
203A:  MOVF   xBA,W
203C:  MULLW  04
203E:  MOVF   FF3,W
2040:  CLRF   03
2042:  MOVLB  0
2044:  CALL   00EA
2048:  TBLRD*+
204A:  MOVFF  FF5,01
204E:  TBLRD*+
2050:  MOVFF  FF5,02
2054:  TBLRD*+
2056:  MOVFF  FF5,03
205A:  MOVFF  03,1B9
205E:  MOVFF  02,1B8
2062:  MOVFF  01,1B7
2066:  MOVFF  FE8,1B6
....................     prog |= (ULONG)idx; 
206A:  MOVFF  1BA,00
206E:  CLRF   01
2070:  CLRF   02
2072:  CLRF   03
2074:  MOVF   00,W
2076:  MOVLB  1
2078:  IORWF  xB6,F
207A:  MOVF   01,W
207C:  IORWF  xB7,F
207E:  MOVF   02,W
2080:  IORWF  xB8,F
2082:  MOVF   03,W
2084:  IORWF  xB9,F
....................     PLL_send_word(prog); 
2086:  MOVFF  1B9,23D
208A:  MOVFF  1B8,23C
208E:  MOVFF  1B7,23B
2092:  MOVFF  1B6,23A
2096:  MOVLB  0
2098:  CALL   1516
....................     } 
209C:  MOVLB  1
209E:  MOVF   xBB,W
20A0:  INCF   xBB,F
20A2:  DECF   xBA,F
20A4:  BRA    2034
....................   delay_ms(250); 
20A6:  MOVLW  FA
20A8:  MOVLB  2
20AA:  MOVWF  x43
20AC:  MOVLB  0
20AE:  CALL   0EAA
....................   PLL_send_word(prog); 
20B2:  MOVFF  1B9,23D
20B6:  MOVFF  1B8,23C
20BA:  MOVFF  1B7,23B
20BE:  MOVFF  1B6,23A
20C2:  CALL   1516
....................   delay_ms(250); 
20C6:  MOVLW  FA
20C8:  MOVLB  2
20CA:  MOVWF  x43
20CC:  MOVLB  0
20CE:  CALL   0EAA
....................   } 
20D2:  GOTO   69A8 (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
129C:  MOVLB  2
129E:  CLRF   x43
12A0:  CLRF   x42
12A2:  CLRF   x41
12A4:  MOVLW  02
12A6:  MOVWF  x40
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
12A8:  CLRWDT
....................   D = Frequest; 
12AA:  CLRF   x3F
12AC:  CLRF   x3E
12AE:  MOVFF  237,23D
12B2:  MOVFF  236,23C
....................   PLL_RFdiv = 0x0095003CL; 
12B6:  MOVLB  1
12B8:  CLRF   x40
12BA:  MOVLW  95
12BC:  MOVWF  x3F
12BE:  CLRF   x3E
12C0:  MOVLW  3C
12C2:  MOVWF  x3D
....................   if (Frequest >= 22000) 
12C4:  MOVLB  2
12C6:  MOVF   x37,W
12C8:  SUBLW  54
12CA:  BC    12F0
12CC:  XORLW  FF
12CE:  BNZ   12D6
12D0:  MOVF   x36,W
12D2:  SUBLW  EF
12D4:  BC    12F0
....................     { 
....................     RFdiv = 1; 
12D6:  CLRF   x43
12D8:  CLRF   x42
12DA:  CLRF   x41
12DC:  MOVLW  01
12DE:  MOVWF  x40
....................     PLL_RFdiv = 0x0085003CL; 
12E0:  MOVLB  1
12E2:  CLRF   x40
12E4:  MOVLW  85
12E6:  MOVWF  x3F
12E8:  CLRF   x3E
12EA:  MOVLW  3C
12EC:  MOVWF  x3D
12EE:  MOVLB  2
....................     }   
....................   restart_wdt(); 
12F0:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
12F2:  MOVFF  23F,24B
12F6:  MOVFF  23E,24A
12FA:  MOVFF  23D,249
12FE:  MOVFF  23C,248
1302:  MOVFF  243,24F
1306:  MOVFF  242,24E
130A:  MOVFF  241,24D
130E:  MOVFF  240,24C
1312:  MOVLB  0
1314:  RCALL  11AC
1316:  MOVFF  03,247
131A:  MOVFF  02,246
131E:  MOVFF  01,245
1322:  MOVFF  00,244
1326:  MOVFF  03,24B
132A:  MOVFF  02,24A
132E:  MOVFF  01,249
1332:  MOVFF  00,248
1336:  MOVLB  2
1338:  CLRF   x4F
133A:  CLRF   x4E
133C:  CLRF   x4D
133E:  MOVLW  64
1340:  MOVWF  x4C
1342:  MOVLB  0
1344:  RCALL  11AC
1346:  MOVFF  03,23F
134A:  MOVFF  02,23E
134E:  MOVFF  01,23D
1352:  MOVFF  00,23C
....................   restart_wdt(); 
1356:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
1358:  BCF    FD8.1
135A:  MOVFF  23F,24F
135E:  MOVFF  23E,24E
1362:  MOVFF  23D,24D
1366:  MOVFF  23C,24C
136A:  MOVLB  2
136C:  CLRF   x53
136E:  CLRF   x52
1370:  MOVLW  27
1372:  MOVWF  x51
1374:  MOVLW  10
1376:  MOVWF  x50
1378:  MOVLB  0
137A:  RCALL  1208
137C:  MOVFF  03,130
1380:  MOVFF  02,12F
1384:  MOVFF  01,12E
1388:  MOVFF  00,12D
....................   restart_wdt(); 
138C:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
138E:  MOVFF  130,24B
1392:  MOVFF  12F,24A
1396:  MOVFF  12E,249
139A:  MOVFF  12D,248
139E:  MOVLB  2
13A0:  CLRF   x4F
13A2:  CLRF   x4E
13A4:  MOVLW  27
13A6:  MOVWF  x4D
13A8:  MOVLW  10
13AA:  MOVWF  x4C
13AC:  MOVLB  0
13AE:  RCALL  11AC
13B0:  MOVF   00,W
13B2:  MOVLB  2
13B4:  SUBWF  x3C,W
13B6:  MOVWF  x44
13B8:  MOVF   01,W
13BA:  SUBWFB x3D,W
13BC:  MOVWF  x45
13BE:  MOVF   02,W
13C0:  SUBWFB x3E,W
13C2:  MOVWF  x46
13C4:  MOVF   03,W
13C6:  SUBWFB x3F,W
13C8:  MOVWF  x47
13CA:  CLRF   x4B
13CC:  CLRF   x4A
13CE:  CLRF   x49
13D0:  MOVLW  64
13D2:  MOVWF  x48
13D4:  MOVFF  243,24F
13D8:  MOVFF  242,24E
13DC:  MOVFF  241,24D
13E0:  MOVFF  240,24C
13E4:  MOVLB  0
13E6:  RCALL  11AC
13E8:  MOVFF  03,24B
13EC:  MOVFF  02,24A
13F0:  MOVFF  01,249
13F4:  MOVFF  00,248
13F8:  BCF    FD8.1
13FA:  MOVFF  247,24F
13FE:  MOVFF  246,24E
1402:  MOVFF  245,24D
1406:  MOVFF  244,24C
140A:  MOVFF  03,253
140E:  MOVFF  02,252
1412:  MOVFF  01,251
1416:  MOVFF  00,250
141A:  RCALL  1208
141C:  MOVFF  03,134
1420:  MOVFF  02,133
1424:  MOVFF  01,132
1428:  MOVFF  00,131
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
142C:  BCF    FD8.1
142E:  MOVLB  2
1430:  CLRF   x4F
1432:  CLRF   x4E
1434:  CLRF   x4D
1436:  MOVLW  64
1438:  MOVWF  x4C
143A:  MOVFF  243,253
143E:  MOVFF  242,252
1442:  MOVFF  241,251
1446:  MOVFF  240,250
144A:  MOVLB  0
144C:  RCALL  1208
144E:  MOVFF  03,247
1452:  MOVFF  02,246
1456:  MOVFF  01,245
145A:  MOVFF  00,244
145E:  MOVLB  2
1460:  RLCF   00,W
1462:  MOVWF  00
1464:  RLCF   01,W
1466:  MOVWF  01
1468:  RLCF   02,W
146A:  MOVWF  02
146C:  RLCF   03,W
146E:  MOVWF  03
1470:  RLCF   00,F
1472:  RLCF   01,F
1474:  RLCF   02,F
1476:  RLCF   03,F
1478:  RLCF   00,F
147A:  RLCF   01,F
147C:  RLCF   02,F
147E:  RLCF   03,F
1480:  MOVLW  F8
1482:  ANDWF  00,F
1484:  MOVLW  08
1486:  ADDWF  03,W
1488:  MOVWF  x47
148A:  MOVLW  01
148C:  ADDWF  00,W
148E:  MOVLB  1
1490:  MOVWF  x35
1492:  MOVLW  00
1494:  MOVLB  2
1496:  ADDWFC 01,W
1498:  MOVLB  1
149A:  MOVWF  x36
149C:  MOVLW  00
149E:  MOVLB  2
14A0:  ADDWFC 02,W
14A2:  MOVLB  1
14A4:  MOVWF  x37
14A6:  MOVLW  00
14A8:  MOVLB  2
14AA:  ADDWFC x47,W
14AC:  MOVLB  1
14AE:  MOVWF  x38
....................   restart_wdt(); 
14B0:  CLRWDT
....................   Fvco++; 
14B2:  MOVLW  01
14B4:  MOVLB  2
14B6:  ADDWF  x38,F
14B8:  BTFSC  FD8.0
14BA:  INCF   x39,F
14BC:  BTFSC  FD8.2
14BE:  INCF   x3A,F
14C0:  BTFSC  FD8.2
14C2:  INCF   x3B,F
....................   } 
14C4:  MOVLB  0
14C6:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
156C:  MOVLB  2
156E:  CLRF   x3B
1570:  MOVLB  1
1572:  RLCF   x2D,W
1574:  MOVLB  2
1576:  MOVWF  x3C
1578:  MOVLB  1
157A:  RLCF   x2E,W
157C:  MOVLB  2
157E:  MOVWF  x3D
1580:  MOVLB  1
1582:  RLCF   x2F,W
1584:  MOVLB  2
1586:  MOVWF  x3E
1588:  RLCF   x3C,F
158A:  RLCF   x3D,F
158C:  RLCF   x3E,F
158E:  RLCF   x3C,F
1590:  RLCF   x3D,F
1592:  RLCF   x3E,F
1594:  RLCF   x3C,F
1596:  RLCF   x3D,F
1598:  RLCF   x3E,F
159A:  RLCF   x3C,F
159C:  RLCF   x3D,F
159E:  RLCF   x3E,F
15A0:  RLCF   x3C,F
15A2:  RLCF   x3D,F
15A4:  RLCF   x3E,F
15A6:  RLCF   x3C,F
15A8:  RLCF   x3D,F
15AA:  RLCF   x3E,F
15AC:  MOVLW  80
15AE:  ANDWF  x3C,F
15B0:  MOVLB  1
15B2:  RLCF   x31,W
15B4:  MOVWF  00
15B6:  RLCF   x32,W
15B8:  MOVWF  01
15BA:  RLCF   x33,W
15BC:  MOVWF  02
15BE:  RLCF   x34,W
15C0:  MOVWF  03
15C2:  RLCF   00,F
15C4:  RLCF   01,F
15C6:  RLCF   02,F
15C8:  RLCF   03,F
15CA:  RLCF   00,F
15CC:  RLCF   01,F
15CE:  RLCF   02,F
15D0:  RLCF   03,F
15D2:  MOVLW  F8
15D4:  ANDWF  00,F
15D6:  MOVF   00,W
15D8:  MOVLB  2
15DA:  ADDWF  x3B,W
15DC:  MOVWF  x36
15DE:  MOVF   01,W
15E0:  ADDWFC x3C,W
15E2:  MOVWF  x37
15E4:  MOVF   02,W
15E6:  ADDWFC x3D,W
15E8:  MOVWF  x38
15EA:  MOVF   03,W
15EC:  ADDWFC x3E,W
15EE:  MOVWF  x39
....................   PLL_frequency = prog; 
15F0:  MOVFF  239,13C
15F4:  MOVFF  238,13B
15F8:  MOVFF  237,13A
15FC:  MOVFF  236,139
....................   restart_wdt(); 
1600:  CLRWDT
....................   PLL_send_word(prog); 
1602:  MOVFF  239,23D
1606:  MOVFF  238,23C
160A:  MOVFF  237,23B
160E:  MOVFF  236,23A
1612:  MOVLB  0
1614:  RCALL  1516
....................   delay_us(20); 
1616:  MOVLW  1A
1618:  MOVWF  00
161A:  DECFSZ 00,F
161C:  BRA    161A
161E:  NOP   
....................   restart_wdt(); 
1620:  CLRWDT
....................   PLL_send_word(PLL_mod); 
1622:  MOVFF  138,23D
1626:  MOVFF  137,23C
162A:  MOVFF  136,23B
162E:  MOVFF  135,23A
1632:  RCALL  1516
....................   delay_us(20); 
1634:  MOVLW  1A
1636:  MOVWF  00
1638:  DECFSZ 00,F
163A:  BRA    1638
163C:  NOP   
....................   restart_wdt(); 
163E:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
1640:  MOVFF  140,23D
1644:  MOVFF  13F,23C
1648:  MOVFF  13E,23B
164C:  MOVFF  13D,23A
1650:  RCALL  1516
....................    
....................   } 
1652:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0A22:  BCF    F7E.0
0A24:  GOTO   009C
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
*
0A3E:  SETF   26
....................   TMR_1mS_Count++; 
0A40:  INCF   27,F
....................    if (++TMR_SendStatus >= setup.Block_per_second && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
0A42:  INCF   2F,F
0A44:  BTFSC  FD8.2
0A46:  INCF   30,F
0A48:  MOVLB  1
0A4A:  MOVF   x00,W
0A4C:  SUBWF  30,W
0A4E:  BNC   0AA4
0A50:  BNZ   0A62
0A52:  MOVLB  0
0A54:  MOVF   xFF,W
0A56:  SUBWF  2F,W
0A58:  BTFSC  FD8.0
0A5A:  BRA    0A60
0A5C:  MOVLB  1
0A5E:  BRA    0AA4
0A60:  MOVLB  1
0A62:  DECFSZ 33,W
0A64:  BRA    0AA4
0A66:  MOVLB  0
0A68:  DECFSZ xFC,W
0A6A:  BRA    0A6E
0A6C:  BRA    0A72
0A6E:  MOVLB  1
0A70:  BRA    0AA4
0A72:  MOVLB  1
0A74:  DECFSZ x0B,W
0A76:  BRA    0A7C
0A78:  MOVF   x0C,F
0A7A:  BZ    0A84
0A7C:  MOVF   x0B,F
0A7E:  BNZ   0AA4
0A80:  MOVF   x0C,F
0A82:  BNZ   0AA4
....................     { 
....................     TMR_SendStatus = 0; 
0A84:  CLRF   30
0A86:  CLRF   2F
....................     SendStatusFlag = 1; 
0A88:  MOVLW  01
0A8A:  MOVWF  31
....................     TX_Counter++; //VERSION 3.3 21.3.2016 cunt the number of time block is sent 
0A8C:  INCF   x0F,F
0A8E:  BTFSC  FD8.2
0A90:  INCF   x10,F
....................     //if (StartStatusFlag == 1 && setup.UART_Status == 1) 
....................     if (!ttccp_login) 
0A92:  MOVF   x2C,F
0A94:  BNZ   0AA4
....................       { 
....................       	COM1_send_block(25); 
0A96:  MOVLB  2
0A98:  CLRF   x74
0A9A:  MOVLW  19
0A9C:  MOVWF  x73
0A9E:  MOVLB  0
0AA0:  BRA    0A28
0AA2:  MOVLB  1
....................       } 
....................     } 
....................   if (++TMR_1mS_Cnt >= 10) 
0AA4:  INCF   28,F
0AA6:  MOVF   28,W
0AA8:  SUBLW  09
0AAA:  BC    0AE2
....................     { 
....................     TMR_1mS_Cnt = 0; 
0AAC:  CLRF   28
....................     ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
0AAE:  INCF   2F,F
0AB0:  BTFSC  FD8.2
0AB2:  INCF   30,F
....................     TMR_10mS_Count++; 
0AB4:  INCF   29,F
....................     TMR_10mS_Flags = 0xFF; 
0AB6:  SETF   2A
....................     if (++TMR_10mS_Cnt >= 10) 
0AB8:  INCF   2B,F
0ABA:  MOVF   2B,W
0ABC:  SUBLW  09
0ABE:  BC    0AE2
....................       { 
....................       TMR_10mS_Cnt = 0; 
0AC0:  CLRF   2B
....................       TMR_100mS_Flags = 0xFF; 
0AC2:  SETF   2C
....................       if (++TMR_100mS_Cnt >= 10) 
0AC4:  INCF   2D,F
0AC6:  MOVF   2D,W
0AC8:  SUBLW  09
0ACA:  BC    0AE2
....................         { 
....................         TMR_100mS_Cnt = 0; 
0ACC:  CLRF   2D
....................         TMR_1sec_Flags = 0xFF; 
0ACE:  SETF   2E
....................         if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
0AD0:  INCF   32,F
0AD2:  MOVLB  0
0AD4:  MOVF   xFB,W
0AD6:  SUBWF  32,W
0AD8:  BNC   0AE0
....................    				 { 
....................    					 TMR_StartStatus = 0; 
0ADA:  CLRF   32
....................     				 StartStatusFlag = 1; 
0ADC:  MOVLW  01
0ADE:  MOVWF  33
0AE0:  MOVLB  1
....................     				 //test_status++; 
....................     				 //setup.Block_per_second = convert_power(test_status); 
.................... 			     } 
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0AE2:  BCF    F9E.1
0AE4:  MOVLB  0
0AE6:  GOTO   009C
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
0AEA:  BCF    FF2.1
0AEC:  GOTO   009C
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0AF0:  BCF    FF0.0
0AF2:  GOTO   009C
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0AF6:  MOVFF  FAE,273
....................   COM1_rbuf[COM1_rxi] = x; 
0AFA:  CLRF   03
0AFC:  MOVF   35,W
0AFE:  ADDLW  37
0B00:  MOVWF  FE9
0B02:  MOVLW  00
0B04:  ADDWFC 03,W
0B06:  MOVWF  FEA
0B08:  MOVFF  273,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0B0C:  INCF   35,F
0B0E:  MOVF   35,W
0B10:  SUBLW  1F
0B12:  BC    0B16
....................     COM1_rxi = 0; 
0B14:  CLRF   35
....................   if (COM1_rcnt < COM1_RX_LEN) 
0B16:  MOVF   34,W
0B18:  SUBLW  1F
0B1A:  BNC   0B1E
....................     COM1_rcnt++; 
0B1C:  INCF   34,F
....................   } 
....................    
0B1E:  BCF    F9E.5
0B20:  GOTO   009C
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
....................   { 
.................... 	  output_high(RS485_EN); 
*
0B44:  BSF    F8C.5
.................... 	  status_tx_index = 0; 
0B46:  MOVLB  1
0B48:  CLRF   x12
0B4A:  CLRF   x11
.................... 	  while (tx_block_len--) 
.................... 	  { 
0B4C:  MOVFF  10E,03
0B50:  MOVF   x0D,W
0B52:  BTFSC  FD8.2
0B54:  DECF   x0E,F
0B56:  DECF   x0D,F
0B58:  IORWF  03,W
0B5A:  BZ    0B96
.................... 		  output_high(RS485_EN); 
0B5C:  BSF    F8C.5
.................... 		 	TXREG1 = status_buffer[status_tx_index++]; 
0B5E:  MOVFF  112,03
0B62:  MOVF   x11,W
0B64:  INCF   x11,F
0B66:  BTFSC  FD8.2
0B68:  INCF   x12,F
0B6A:  MOVLB  2
0B6C:  MOVWF  x73
0B6E:  MOVLW  13
0B70:  ADDWF  x73,W
0B72:  MOVWF  FE9
0B74:  MOVLW  01
0B76:  ADDWFC 03,W
0B78:  MOVWF  FEA
0B7A:  MOVFF  FEF,FAD
.................... 		 	delay_us(500);  
0B7E:  MOVLW  02
0B80:  MOVWF  x73
0B82:  MOVLW  F9
0B84:  MOVWF  x74
0B86:  MOVLB  0
0B88:  RCALL  0B24
0B8A:  MOVLB  2
0B8C:  DECFSZ x73,F
0B8E:  BRA    0B82
.................... 		 	output_low(RS485_EN); 
0B90:  BCF    F8C.5
.................... 		} 
0B92:  MOVLB  1
0B94:  BRA    0B4C
.................... 		 
.................... 		disable_interrupts(int_TBE);     
0B96:  BCF    F9D.4
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0B98:  BCF    F9E.4
0B9A:  MOVLB  0
0B9C:  GOTO   009C
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
28CC:  CLRF   03
28CE:  MOVF   36,W
28D0:  ADDLW  37
28D2:  MOVWF  FE9
28D4:  MOVLW  00
28D6:  ADDWFC 03,W
28D8:  MOVWF  FEA
28DA:  MOVFF  FEF,1CF
28DE:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
28E0:  INCF   36,F
28E2:  MOVF   36,W
28E4:  SUBLW  1F
28E6:  BC    28EA
....................     COM1_rxo = 0; 
28E8:  CLRF   36
....................   if (COM1_rcnt) 
28EA:  MOVF   34,F
28EC:  BZ    28F0
....................     COM1_rcnt--; 
28EE:  DECF   34,F
....................   return x; 
28F0:  MOVFF  1CF,01
....................   } 
28F4:  MOVLB  0
28F6:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
20D6:  BCF    F9D.5
....................   output_high(RS485_EN); 
20D8:  BSF    F8C.5
....................   delay_us(100); 
20DA:  MOVLW  84
20DC:  MOVWF  00
20DE:  DECFSZ 00,F
20E0:  BRA    20DE
20E2:  BRA    20E4
20E4:  NOP   
....................   pos = 0; 
20E6:  MOVLB  2
20E8:  CLRF   x6F
....................   while (*str) 
....................     { 
20EA:  MOVFF  26D,03
20EE:  MOVFF  26C,FE9
20F2:  MOVFF  26D,FEA
20F6:  MOVF   FEF,F
20F8:  BZ    2186
....................     x = *str++; 
20FA:  MOVFF  26D,03
20FE:  MOVF   x6C,W
2100:  INCF   x6C,F
2102:  BTFSC  FD8.2
2104:  INCF   x6D,F
2106:  MOVWF  FE9
2108:  MOVFF  03,FEA
210C:  MOVFF  FEF,26E
....................     if (x != '\t') 
2110:  MOVF   x6E,W
2112:  SUBLW  09
2114:  BZ    2142
....................       { 
....................       TXREG1 = x; 
2116:  MOVFF  26E,FAD
....................       pos++; 
211A:  INCF   x6F,F
....................       delay_us(300);  
211C:  MOVLW  02
211E:  MOVWF  x71
2120:  CLRF   19
2122:  BTFSC  FF2.7
2124:  BSF    19.7
2126:  BCF    FF2.7
2128:  MOVLW  95
212A:  MOVWF  x74
212C:  MOVLB  0
212E:  CALL   0B24
2132:  BTFSC  19.7
2134:  BSF    FF2.7
2136:  MOVLB  2
2138:  DECFSZ x71,F
213A:  BRA    2120
....................       x = RCREG1; 
213C:  MOVFF  FAE,26E
....................       } 
....................     else 
2140:  BRA    2184
....................       { 
....................       tab_stop = 32; 
2142:  MOVLW  20
2144:  MOVWF  x70
....................       if (pos >= tab_stop) 
2146:  MOVF   x70,W
2148:  SUBWF  x6F,W
214A:  BNC   2152
....................         tab_stop = pos + 2; 
214C:  MOVLW  02
214E:  ADDWF  x6F,W
2150:  MOVWF  x70
....................       while (pos < tab_stop) 
....................         { 
2152:  MOVF   x70,W
2154:  SUBWF  x6F,W
2156:  BC    2184
....................         TXREG1 = ' '; 
2158:  MOVLW  20
215A:  MOVWF  FAD
....................         pos++; 
215C:  INCF   x6F,F
....................         delay_us(300); 
215E:  MOVLW  02
2160:  MOVWF  x71
2162:  CLRF   19
2164:  BTFSC  FF2.7
2166:  BSF    19.7
2168:  BCF    FF2.7
216A:  MOVLW  95
216C:  MOVWF  x74
216E:  MOVLB  0
2170:  CALL   0B24
2174:  BTFSC  19.7
2176:  BSF    FF2.7
2178:  MOVLB  2
217A:  DECFSZ x71,F
217C:  BRA    2162
....................         x = RCREG1; 
217E:  MOVFF  FAE,26E
....................         } 
2182:  BRA    2152
....................       } 
....................     } 
2184:  BRA    20EA
....................   delay_us(100); 
2186:  MOVLW  84
2188:  MOVWF  00
218A:  DECFSZ 00,F
218C:  BRA    218A
218E:  BRA    2190
2190:  NOP   
....................   output_low(RS485_EN); 
2192:  BCF    F8C.5
....................   x = RCREG1; 
2194:  MOVFF  FAE,26E
....................   enable_interrupts(int_RDA); 
2198:  BSF    F9D.5
....................   } 
219A:  MOVLB  0
219C:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
....................   { 
....................   UCHAR pos;//, tab_stop; 
....................   pos = 0; 
*
0A28:  MOVLB  2
0A2A:  CLRF   x75
....................   tx_block_len = len ; 
0A2C:  MOVFF  274,10E
0A30:  MOVFF  273,10D
....................   //status_tx_index = 0; 
....................    
....................   //TXREG1 = status_buffer[0]; 
....................   clear_interrupt(int_TBE); 
0A34:  BCF    F9E.4
....................   enable_interrupts(int_TBE); 
0A36:  BSF    F9D.4
....................   //TXREG1 = status_buffer[0]; 
....................   //output_high(RS485_EN);  
....................   } 
0A38:  MOVLB  0
0A3A:  GOTO   0AA2 (RETURN)
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0E30:  MOVLB  1
0E32:  CLRF   x78
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0E34:  CLRF   34
0E36:  MOVFF  34,36
0E3A:  MOVFF  36,35
....................   comm_state = COMM_INIT; 
0E3E:  CLRF   57
....................   enable_interrupts(int_RDA); 
0E40:  BSF    F9D.5
....................   } 
0E42:  MOVLB  0
0E44:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
2916:  MOVLB  1
2918:  MOVF   x41,W
291A:  INCF   x41,F
291C:  CLRF   03
291E:  ADDLW  59
2920:  MOVWF  FE9
2922:  MOVLW  00
2924:  ADDWFC 03,W
2926:  MOVWF  FEA
2928:  CLRF   03
292A:  MOVFF  FEF,01
292E:  MOVFF  03,02
....................   } 
2932:  MOVLB  0
2934:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
28F8:  CLRF   03
28FA:  MOVLB  1
28FC:  MOVF   x41,W
28FE:  ADDLW  59
2900:  MOVWF  FE9
2902:  MOVLW  00
2904:  ADDWFC 03,W
2906:  MOVWF  FEA
2908:  CLRF   03
290A:  MOVFF  FEF,01
290E:  MOVFF  03,02
....................   } 
2912:  MOVLB  0
2914:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
2936:  CLRF   03
2938:  MOVLB  1
293A:  MOVF   x41,W
293C:  ADDLW  59
293E:  MOVWF  FE9
2940:  MOVLW  00
2942:  ADDWFC 03,W
2944:  MOVWF  FEA
2946:  MOVF   FEF,F
2948:  BZ    297A
294A:  CLRF   03
294C:  MOVF   x41,W
294E:  ADDLW  59
2950:  MOVWF  FE9
2952:  MOVLW  00
2954:  ADDWFC 03,W
2956:  MOVWF  FEA
2958:  MOVF   FEF,W
295A:  SUBLW  2C
295C:  BZ    2972
295E:  CLRF   03
2960:  MOVF   x41,W
2962:  ADDLW  59
2964:  MOVWF  FE9
2966:  MOVLW  00
2968:  ADDWFC 03,W
296A:  MOVWF  FEA
296C:  MOVF   FEF,W
296E:  SUBLW  20
2970:  BNZ   297A
2972:  INCF   x41,F
2974:  MOVLB  0
2976:  BRA    2936
2978:  MOVLB  1
....................   } 
297A:  MOVLB  0
297C:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
29D2:  MOVLB  2
29D4:  CLRF   x39
29D6:  MOVLW  01
29D8:  MOVWF  x38
....................   SINT num, sign = 1; 
....................   skip_spc(); 
29DA:  MOVLB  0
29DC:  RCALL  2936
....................   if (comm_buf[comm_ptr]) 
29DE:  CLRF   03
29E0:  MOVLB  1
29E2:  MOVF   x41,W
29E4:  ADDLW  59
29E6:  MOVWF  FE9
29E8:  MOVLW  00
29EA:  ADDWFC 03,W
29EC:  MOVWF  FEA
29EE:  MOVF   FEF,F
29F0:  BZ    2A7A
....................     { 
....................     num = 0; 
29F2:  MOVLB  2
29F4:  CLRF   x37
29F6:  CLRF   x36
....................     if (peek_char() == '-') 
29F8:  MOVLB  0
29FA:  RCALL  28F8
29FC:  MOVFF  02,23B
2A00:  MOVFF  01,23A
2A04:  MOVLB  2
2A06:  MOVF   01,W
2A08:  SUBLW  2D
2A0A:  BNZ   2A1A
2A0C:  MOVF   x3B,F
2A0E:  BNZ   2A1A
....................       { 
....................       sign = -1; 
2A10:  SETF   x39
2A12:  SETF   x38
....................       get_char(); 
2A14:  MOVLB  0
2A16:  RCALL  2916
2A18:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2A1A:  CLRF   03
2A1C:  MOVLB  1
2A1E:  MOVF   x41,W
2A20:  ADDLW  59
2A22:  MOVWF  FE9
2A24:  MOVLW  00
2A26:  ADDWFC 03,W
2A28:  MOVWF  FEA
2A2A:  MOVFF  FEF,23A
2A2E:  MOVLB  2
2A30:  MOVF   x3A,W
2A32:  SUBLW  2F
2A34:  BC    2A7A
2A36:  MOVF   x3A,W
2A38:  SUBLW  39
2A3A:  BNC   2A7A
2A3C:  MOVFF  237,23B
2A40:  MOVFF  236,23A
2A44:  CLRF   x3D
2A46:  MOVLW  0A
2A48:  MOVWF  x3C
2A4A:  MOVLB  0
2A4C:  RCALL  297E
2A4E:  MOVFF  02,23B
2A52:  MOVFF  01,23A
2A56:  MOVLB  1
2A58:  MOVF   x41,W
2A5A:  INCF   x41,F
2A5C:  CLRF   03
2A5E:  ADDLW  59
2A60:  MOVWF  FE9
2A62:  MOVLW  00
2A64:  ADDWFC 03,W
2A66:  MOVWF  FEA
2A68:  MOVLW  30
2A6A:  SUBWF  FEF,W
2A6C:  MOVLB  2
2A6E:  ADDWF  01,W
2A70:  MOVWF  x36
2A72:  MOVLW  00
2A74:  ADDWFC 02,W
2A76:  MOVWF  x37
2A78:  BRA    2A1A
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
2A7A:  MOVFF  237,23B
2A7E:  MOVFF  236,23A
2A82:  MOVFF  239,23D
2A86:  MOVFF  238,23C
2A8A:  MOVLB  0
2A8C:  RCALL  297E
2A8E:  MOVFF  02,03
2A92:  MOVFF  02,02
....................   } 
2A96:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
5DB2:  CALL   2936
....................   if (comm_buf[comm_ptr]) 
5DB6:  CLRF   03
5DB8:  MOVLB  1
5DBA:  MOVF   x41,W
5DBC:  ADDLW  59
5DBE:  MOVWF  FE9
5DC0:  MOVLW  00
5DC2:  ADDWFC 03,W
5DC4:  MOVWF  FEA
5DC6:  MOVF   FEF,F
5DC8:  BZ    5E58
....................     { 
....................     num = 0; 
5DCA:  MOVLB  2
5DCC:  CLRF   x09
5DCE:  CLRF   x08
5DD0:  CLRF   x07
5DD2:  CLRF   x06
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5DD4:  CLRF   03
5DD6:  MOVLB  1
5DD8:  MOVF   x41,W
5DDA:  ADDLW  59
5DDC:  MOVWF  FE9
5DDE:  MOVLW  00
5DE0:  ADDWFC 03,W
5DE2:  MOVWF  FEA
5DE4:  MOVFF  FEF,20A
5DE8:  MOVLB  2
5DEA:  MOVF   x0A,W
5DEC:  SUBLW  2F
5DEE:  BC    5E56
5DF0:  MOVF   x0A,W
5DF2:  SUBLW  39
5DF4:  BNC   5E56
5DF6:  MOVFF  209,24B
5DFA:  MOVFF  208,24A
5DFE:  MOVFF  207,249
5E02:  MOVFF  206,248
5E06:  CLRF   x4F
5E08:  CLRF   x4E
5E0A:  CLRF   x4D
5E0C:  MOVLW  0A
5E0E:  MOVWF  x4C
5E10:  MOVLB  0
5E12:  CALL   11AC
5E16:  MOVFF  03,20D
5E1A:  MOVFF  02,20C
5E1E:  MOVFF  01,20B
5E22:  MOVFF  00,20A
5E26:  MOVLB  1
5E28:  MOVF   x41,W
5E2A:  INCF   x41,F
5E2C:  CLRF   03
5E2E:  ADDLW  59
5E30:  MOVWF  FE9
5E32:  MOVLW  00
5E34:  ADDWFC 03,W
5E36:  MOVWF  FEA
5E38:  MOVLW  30
5E3A:  SUBWF  FEF,W
5E3C:  MOVLB  2
5E3E:  ADDWF  00,W
5E40:  MOVWF  x06
5E42:  MOVLW  00
5E44:  ADDWFC 01,W
5E46:  MOVWF  x07
5E48:  MOVLW  00
5E4A:  ADDWFC 02,W
5E4C:  MOVWF  x08
5E4E:  MOVLW  00
5E50:  ADDWFC x0D,W
5E52:  MOVWF  x09
5E54:  BRA    5DD4
5E56:  MOVLB  1
....................     } 
.................... //  skip_spc(); 
....................   return num; 
5E58:  MOVFF  206,00
5E5C:  MOVFF  207,01
5E60:  MOVFF  208,02
5E64:  MOVFF  209,03
....................   } 
5E68:  MOVLB  0
5E6A:  GOTO   637A (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
5CBA:  CALL   2936
....................   if (peek_char()) 
5CBE:  CALL   28F8
5CC2:  MOVF   01,W
5CC4:  IORWF  02,W
5CC6:  BTFSC  FD8.2
5CC8:  BRA    5DA0
....................     { 
....................     num = 0; 
5CCA:  MOVLB  2
5CCC:  CLRF   x09
5CCE:  CLRF   x08
5CD0:  CLRF   x07
5CD2:  CLRF   x06
....................     while (isxdigit(peek_char())) 
....................       { 
5CD4:  MOVLB  0
5CD6:  CALL   28F8
5CDA:  MOVFF  02,20C
5CDE:  MOVFF  01,20B
5CE2:  MOVLB  2
5CE4:  MOVF   x0C,F
5CE6:  BNZ   5CEE
5CE8:  MOVF   x0B,W
5CEA:  SUBLW  2F
5CEC:  BC    5CF8
5CEE:  MOVF   x0C,F
5CF0:  BNZ   5CF8
5CF2:  MOVF   x0B,W
5CF4:  SUBLW  39
5CF6:  BC    5D20
5CF8:  MOVF   x0C,F
5CFA:  BNZ   5D02
5CFC:  MOVF   x0B,W
5CFE:  SUBLW  40
5D00:  BC    5D0C
5D02:  MOVF   x0C,F
5D04:  BNZ   5D0C
5D06:  MOVF   x0B,W
5D08:  SUBLW  46
5D0A:  BC    5D20
5D0C:  MOVF   x0C,F
5D0E:  BNZ   5D16
5D10:  MOVF   x0B,W
5D12:  SUBLW  60
5D14:  BC    5D9E
5D16:  MOVF   x0C,F
5D18:  BNZ   5D9E
5D1A:  MOVF   x0B,W
5D1C:  SUBLW  66
5D1E:  BNC   5D9E
....................       chr = get_char(); 
5D20:  MOVLB  0
5D22:  CALL   2916
5D26:  MOVFF  01,20A
....................       chr = toupper(chr); 
5D2A:  MOVLB  2
5D2C:  MOVF   x0A,W
5D2E:  SUBLW  60
5D30:  BC    5D3E
5D32:  MOVF   x0A,W
5D34:  SUBLW  7A
5D36:  BNC   5D3E
5D38:  MOVF   x0A,W
5D3A:  ANDLW  DF
5D3C:  BRA    5D40
5D3E:  MOVF   x0A,W
5D40:  MOVWF  x0A
....................       if (chr <= '9') 
5D42:  MOVF   x0A,W
5D44:  SUBLW  39
5D46:  BNC   5D4E
....................         chr -= '0'; 
5D48:  MOVLW  30
5D4A:  SUBWF  x0A,F
....................       else 
5D4C:  BRA    5D52
....................         chr = chr - ('A' - 10); 
5D4E:  MOVLW  37
5D50:  SUBWF  x0A,F
....................       num = num * 16 + (ULONG)chr; 
5D52:  RLCF   x06,W
5D54:  MOVWF  x0B
5D56:  RLCF   x07,W
5D58:  MOVWF  x0C
5D5A:  RLCF   x08,W
5D5C:  MOVWF  x0D
5D5E:  RLCF   x09,W
5D60:  MOVWF  x0E
5D62:  RLCF   x0B,F
5D64:  RLCF   x0C,F
5D66:  RLCF   x0D,F
5D68:  RLCF   x0E,F
5D6A:  RLCF   x0B,F
5D6C:  RLCF   x0C,F
5D6E:  RLCF   x0D,F
5D70:  RLCF   x0E,F
5D72:  RLCF   x0B,F
5D74:  RLCF   x0C,F
5D76:  RLCF   x0D,F
5D78:  RLCF   x0E,F
5D7A:  MOVLW  F0
5D7C:  ANDWF  x0B,F
5D7E:  CLRF   01
5D80:  CLRF   02
5D82:  CLRF   03
5D84:  MOVF   x0A,W
5D86:  ADDWF  x0B,W
5D88:  MOVWF  x06
5D8A:  MOVF   01,W
5D8C:  ADDWFC x0C,W
5D8E:  MOVWF  x07
5D90:  MOVF   02,W
5D92:  ADDWFC x0D,W
5D94:  MOVWF  x08
5D96:  MOVF   03,W
5D98:  ADDWFC x0E,W
5D9A:  MOVWF  x09
....................       } 
5D9C:  BRA    5CD4
5D9E:  MOVLB  0
....................     } 
....................   return num; 
5DA0:  MOVFF  206,00
5DA4:  MOVFF  207,01
5DA8:  MOVFF  208,02
5DAC:  MOVFF  209,03
....................   } 
5DB0:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
2F66:  RCALL  29D2
2F68:  MOVFF  02,231
2F6C:  MOVFF  01,230
2F70:  MOVFF  02,23B
2F74:  MOVFF  01,23A
2F78:  MOVLB  2
2F7A:  CLRF   x3D
2F7C:  MOVLW  0A
2F7E:  MOVWF  x3C
2F80:  MOVLB  0
2F82:  RCALL  297E
2F84:  MOVFF  02,22F
2F88:  MOVLB  2
2F8A:  MOVFF  01,22E
....................   if (peek_char() == '.') 
2F8E:  MOVLB  0
2F90:  RCALL  28F8
2F92:  MOVFF  02,231
2F96:  MOVFF  01,230
2F9A:  MOVLB  2
2F9C:  MOVF   01,W
2F9E:  SUBLW  2E
2FA0:  BNZ   2FC2
2FA2:  MOVF   x31,F
2FA4:  BNZ   2FC2
....................     { 
....................     get_char(); // skip '.' 
2FA6:  MOVLB  0
2FA8:  RCALL  2916
....................     freq += get_char() - '0'; 
2FAA:  RCALL  2916
2FAC:  MOVLW  30
2FAE:  MOVLB  2
2FB0:  SUBWF  01,W
2FB2:  MOVWF  00
2FB4:  MOVLW  00
2FB6:  SUBWFB 02,W
2FB8:  MOVWF  03
2FBA:  MOVF   00,W
2FBC:  ADDWF  x2E,F
2FBE:  MOVF   03,W
2FC0:  ADDWFC x2F,F
....................     } 
....................   return freq; 
2FC2:  MOVFF  22E,01
2FC6:  MOVFF  22F,02
....................   } 
2FCA:  MOVLB  0
2FCC:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
57DC:  MOVLB  1
57DE:  MOVF   xCF,W
57E0:  XORLW  69
57E2:  MOVLB  0
57E4:  BZ    5818
57E6:  XORLW  20
57E8:  BZ    5848
57EA:  XORLW  2D
57EC:  BZ    5878
57EE:  XORLW  20
57F0:  BZ    58AC
57F2:  XORLW  6F
57F4:  BTFSC  FD8.2
57F6:  BRA    58E0
57F8:  XORLW  16
57FA:  BTFSC  FD8.2
57FC:  BRA    5930
57FE:  XORLW  10
5800:  BTFSC  FD8.2
5802:  BRA    5980
5804:  XORLW  72
5806:  BTFSC  FD8.2
5808:  BRA    59D4
580A:  XORLW  61
580C:  BTFSC  FD8.2
580E:  BRA    5A28
5810:  XORLW  02
5812:  BTFSC  FD8.2
5814:  BRA    5A40
5816:  BRA    5A54
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
5818:  MOVLB  1
581A:  INCF   x6F,F
581C:  BNZ   582A
....................         if (++D2A_image[12] > 3) 
581E:  INCF   x70,F
5820:  MOVF   x70,W
5822:  SUBLW  03
5824:  BC    582A
....................           { 
....................           D2A_image[11] = 0; 
5826:  CLRF   x6F
....................           D2A_image[12] = 0; 
5828:  CLRF   x70
....................           } 
....................       write_D2A(11, D2A_image[11]); 
582A:  MOVLW  0B
582C:  MOVLB  2
582E:  MOVWF  x06
5830:  MOVFF  16F,207
5834:  MOVLB  0
5836:  RCALL  5754
....................       write_D2A(12, D2A_image[12]); 
5838:  MOVLW  0C
583A:  MOVLB  2
583C:  MOVWF  x06
583E:  MOVFF  170,207
5842:  MOVLB  0
5844:  RCALL  5754
....................       break; 
5846:  BRA    5A54
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
5848:  MOVLB  1
584A:  INCF   x73,F
584C:  BNZ   585A
....................         if (++D2A_image[16] > 3) 
584E:  INCF   x74,F
5850:  MOVF   x74,W
5852:  SUBLW  03
5854:  BC    585A
....................           { 
....................           D2A_image[15] = 0; 
5856:  CLRF   x73
....................           D2A_image[16] = 0; 
5858:  CLRF   x74
....................           } 
....................       write_D2A(15, D2A_image[15]); 
585A:  MOVLW  0F
585C:  MOVLB  2
585E:  MOVWF  x06
5860:  MOVFF  173,207
5864:  MOVLB  0
5866:  RCALL  5754
....................       write_D2A(16, D2A_image[16]); 
5868:  MOVLW  10
586A:  MOVLB  2
586C:  MOVWF  x06
586E:  MOVFF  174,207
5872:  MOVLB  0
5874:  RCALL  5754
....................       break; 
5876:  BRA    5A54
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
5878:  MOVLB  1
587A:  DECF   x6F,F
587C:  INCFSZ x6F,W
587E:  BRA    588E
....................         if (--D2A_image[12] > 3) 
5880:  DECF   x70,F
5882:  MOVF   x70,W
5884:  SUBLW  03
5886:  BC    588E
....................           { 
....................           D2A_image[11] = 255; 
5888:  SETF   x6F
....................           D2A_image[12] = 3; 
588A:  MOVLW  03
588C:  MOVWF  x70
....................           } 
....................       write_D2A(11, D2A_image[11]); 
588E:  MOVLW  0B
5890:  MOVLB  2
5892:  MOVWF  x06
5894:  MOVFF  16F,207
5898:  MOVLB  0
589A:  RCALL  5754
....................       write_D2A(12, D2A_image[12]); 
589C:  MOVLW  0C
589E:  MOVLB  2
58A0:  MOVWF  x06
58A2:  MOVFF  170,207
58A6:  MOVLB  0
58A8:  RCALL  5754
....................       break; 
58AA:  BRA    5A54
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
58AC:  MOVLB  1
58AE:  DECF   x73,F
58B0:  INCFSZ x73,W
58B2:  BRA    58C2
....................         if (--D2A_image[16] > 3) 
58B4:  DECF   x74,F
58B6:  MOVF   x74,W
58B8:  SUBLW  03
58BA:  BC    58C2
....................           { 
....................           D2A_image[15] = 255; 
58BC:  SETF   x73
....................           D2A_image[16] = 3; 
58BE:  MOVLW  03
58C0:  MOVWF  x74
....................           } 
....................       write_D2A(15, D2A_image[15]); 
58C2:  MOVLW  0F
58C4:  MOVLB  2
58C6:  MOVWF  x06
58C8:  MOVFF  173,207
58CC:  MOVLB  0
58CE:  RCALL  5754
....................       write_D2A(16, D2A_image[16]); 
58D0:  MOVLW  10
58D2:  MOVLB  2
58D4:  MOVWF  x06
58D6:  MOVFF  174,207
58DA:  MOVLB  0
58DC:  RCALL  5754
....................       break; 
58DE:  BRA    5A54
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
58E0:  MOVLB  1
58E2:  MOVFF  171,1D0
58E6:  MOVF   x72,W
58E8:  ANDLW  03
58EA:  MOVWF  xD1
....................       if (++incdec > 0x3FF) 
58EC:  INCF   xD0,F
58EE:  BTFSC  FD8.2
58F0:  INCF   xD1,F
58F2:  MOVF   xD1,W
58F4:  SUBLW  03
58F6:  BC    58FC
....................         incdec = 0; 
58F8:  CLRF   xD1
58FA:  CLRF   xD0
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
58FC:  MOVF   x72,W
58FE:  ANDLW  C0
5900:  MOVWF  xD2
5902:  MOVLW  00
5904:  IORWF  xD0,F
5906:  MOVF   xD2,W
5908:  IORWF  xD1,F
....................       D2A_image[13] = make8(incdec, 0); 
590A:  MOVFF  1D0,171
....................       D2A_image[14] = make8(incdec, 1); 
590E:  MOVFF  1D1,172
....................       write_D2A(11, D2A_image[13]); 
5912:  MOVLW  0B
5914:  MOVLB  2
5916:  MOVWF  x06
5918:  MOVFF  171,207
591C:  MOVLB  0
591E:  RCALL  5754
....................       write_D2A(12, D2A_image[14]); 
5920:  MOVLW  0C
5922:  MOVLB  2
5924:  MOVWF  x06
5926:  MOVFF  172,207
592A:  MOVLB  0
592C:  RCALL  5754
....................       break; 
592E:  BRA    5A54
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5930:  MOVLB  1
5932:  MOVFF  175,1D0
5936:  MOVF   x76,W
5938:  ANDLW  03
593A:  MOVWF  xD1
....................       if (++incdec > 0x3FF) 
593C:  INCF   xD0,F
593E:  BTFSC  FD8.2
5940:  INCF   xD1,F
5942:  MOVF   xD1,W
5944:  SUBLW  03
5946:  BC    594C
....................         incdec = 0; 
5948:  CLRF   xD1
594A:  CLRF   xD0
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
594C:  MOVF   x76,W
594E:  ANDLW  C0
5950:  MOVWF  xD2
5952:  MOVLW  00
5954:  IORWF  xD0,F
5956:  MOVF   xD2,W
5958:  IORWF  xD1,F
....................       D2A_image[17] = make8(incdec, 0); 
595A:  MOVFF  1D0,175
....................       D2A_image[18] = make8(incdec, 1); 
595E:  MOVFF  1D1,176
....................       write_D2A(11, D2A_image[17]); 
5962:  MOVLW  0B
5964:  MOVLB  2
5966:  MOVWF  x06
5968:  MOVFF  175,207
596C:  MOVLB  0
596E:  RCALL  5754
....................       write_D2A(12, D2A_image[18]); 
5970:  MOVLW  0C
5972:  MOVLB  2
5974:  MOVWF  x06
5976:  MOVFF  176,207
597A:  MOVLB  0
597C:  RCALL  5754
....................       break; 
597E:  BRA    5A54
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5980:  MOVLB  1
5982:  MOVFF  171,1D0
5986:  MOVF   x72,W
5988:  ANDLW  03
598A:  MOVWF  xD1
....................       if (--incdec > 0x3FF) 
598C:  MOVF   xD0,W
598E:  BTFSC  FD8.2
5990:  DECF   xD1,F
5992:  DECF   xD0,F
5994:  MOVF   xD1,W
5996:  SUBLW  03
5998:  BC    59A0
....................         incdec = 0x3FF; 
599A:  MOVLW  03
599C:  MOVWF  xD1
599E:  SETF   xD0
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
59A0:  MOVF   x72,W
59A2:  ANDLW  C0
59A4:  MOVWF  xD2
59A6:  MOVLW  00
59A8:  IORWF  xD0,F
59AA:  MOVF   xD2,W
59AC:  IORWF  xD1,F
....................       D2A_image[13] = make8(incdec, 0); 
59AE:  MOVFF  1D0,171
....................       D2A_image[14] = make8(incdec, 1); 
59B2:  MOVFF  1D1,172
....................       write_D2A(11, D2A_image[13]); 
59B6:  MOVLW  0B
59B8:  MOVLB  2
59BA:  MOVWF  x06
59BC:  MOVFF  171,207
59C0:  MOVLB  0
59C2:  RCALL  5754
....................       write_D2A(12, D2A_image[14]); 
59C4:  MOVLW  0C
59C6:  MOVLB  2
59C8:  MOVWF  x06
59CA:  MOVFF  172,207
59CE:  MOVLB  0
59D0:  RCALL  5754
....................       break; 
59D2:  BRA    5A54
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
59D4:  MOVLB  1
59D6:  MOVFF  175,1D0
59DA:  MOVF   x76,W
59DC:  ANDLW  03
59DE:  MOVWF  xD1
....................       if (--incdec > 0x3FF) 
59E0:  MOVF   xD0,W
59E2:  BTFSC  FD8.2
59E4:  DECF   xD1,F
59E6:  DECF   xD0,F
59E8:  MOVF   xD1,W
59EA:  SUBLW  03
59EC:  BC    59F4
....................         incdec = 0x3FF; 
59EE:  MOVLW  03
59F0:  MOVWF  xD1
59F2:  SETF   xD0
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
59F4:  MOVF   x76,W
59F6:  ANDLW  C0
59F8:  MOVWF  xD2
59FA:  MOVLW  00
59FC:  IORWF  xD0,F
59FE:  MOVF   xD2,W
5A00:  IORWF  xD1,F
....................       D2A_image[17] = make8(incdec, 0); 
5A02:  MOVFF  1D0,175
....................       D2A_image[18] = make8(incdec, 1); 
5A06:  MOVFF  1D1,176
....................       write_D2A(11, D2A_image[17]); 
5A0A:  MOVLW  0B
5A0C:  MOVLB  2
5A0E:  MOVWF  x06
5A10:  MOVFF  175,207
5A14:  MOVLB  0
5A16:  RCALL  5754
....................       write_D2A(12, D2A_image[18]); 
5A18:  MOVLW  0C
5A1A:  MOVLB  2
5A1C:  MOVWF  x06
5A1E:  MOVFF  176,207
5A22:  MOVLB  0
5A24:  RCALL  5754
....................       break; 
5A26:  BRA    5A54
....................     case '>': 
....................       if (setup.phase_offset < 255) 
5A28:  INCFSZ xBD,W
5A2A:  BRA    5A2E
5A2C:  BRA    5A30
....................         setup.phase_offset++; 
5A2E:  INCF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5A30:  MOVLW  01
5A32:  MOVLB  1
5A34:  MOVWF  xD2
5A36:  MOVFF  BD,1D3
5A3A:  MOVLB  0
5A3C:  RCALL  57BE
....................       break; 
5A3E:  BRA    5A54
....................     case '<': 
....................       if (setup.phase_offset) 
5A40:  MOVF   xBD,F
5A42:  BZ    5A46
....................         setup.phase_offset--; 
5A44:  DECF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5A46:  MOVLW  01
5A48:  MOVLB  1
5A4A:  MOVWF  xD2
5A4C:  MOVFF  BD,1D3
5A50:  MOVLB  0
5A52:  RCALL  57BE
....................       break; 
....................     } 
....................   } 
5A54:  GOTO   672E (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
5A58:  MOVLW  0D
5A5A:  MOVLB  2
5A5C:  MOVWF  x06
5A5E:  MOVLW  0A
5A60:  MOVWF  x07
5A62:  CLRF   x08
5A64:  MOVLW  02
5A66:  MOVWF  x6D
5A68:  MOVLW  06
5A6A:  MOVWF  x6C
5A6C:  MOVLB  0
5A6E:  CALL   20D6
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
5A72:  MOVLW  02
5A74:  MOVWF  FEA
5A76:  MOVLW  06
5A78:  MOVWF  FE9
5A7A:  MOVLW  3D
5A7C:  MOVWF  01
5A7E:  CLRF   FF7
5A80:  MOVLW  00
5A82:  CALL   0112
5A86:  TBLRD*-
5A88:  TBLRD*+
5A8A:  MOVFF  FF5,FEE
5A8E:  DECFSZ 01,F
5A90:  BRA    5A88
5A92:  MOVLW  02
5A94:  MOVLB  2
5A96:  MOVWF  x6D
5A98:  MOVLW  06
5A9A:  MOVWF  x6C
5A9C:  MOVLB  0
5A9E:  CALL   20D6
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5AA2:  MOVLW  02
5AA4:  MOVWF  FEA
5AA6:  MOVLW  06
5AA8:  MOVWF  FE9
5AAA:  MOVLW  2E
5AAC:  MOVWF  01
5AAE:  CLRF   FF7
5AB0:  MOVLW  00
5AB2:  CALL   0160
5AB6:  TBLRD*-
5AB8:  TBLRD*+
5ABA:  MOVFF  FF5,FEE
5ABE:  DECFSZ 01,F
5AC0:  BRA    5AB8
5AC2:  MOVLW  02
5AC4:  MOVLB  2
5AC6:  MOVWF  x6D
5AC8:  MOVLW  06
5ACA:  MOVWF  x6C
5ACC:  MOVLB  0
5ACE:  CALL   20D6
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
5AD2:  MOVLW  02
5AD4:  MOVWF  FEA
5AD6:  MOVLW  06
5AD8:  MOVWF  FE9
5ADA:  MOVLW  42
5ADC:  MOVWF  01
5ADE:  CLRF   FF7
5AE0:  MOVLW  00
5AE2:  CALL   019E
5AE6:  TBLRD*-
5AE8:  TBLRD*+
5AEA:  MOVFF  FF5,FEE
5AEE:  DECFSZ 01,F
5AF0:  BRA    5AE8
5AF2:  MOVLW  02
5AF4:  MOVLB  2
5AF6:  MOVWF  x6D
5AF8:  MOVLW  06
5AFA:  MOVWF  x6C
5AFC:  MOVLB  0
5AFE:  CALL   20D6
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
5B02:  MOVLW  02
5B04:  MOVWF  FEA
5B06:  MOVLW  06
5B08:  MOVWF  FE9
5B0A:  MOVLW  23
5B0C:  MOVWF  01
5B0E:  CLRF   FF7
5B10:  MOVLW  00
5B12:  CALL   01F0
5B16:  TBLRD*-
5B18:  TBLRD*+
5B1A:  MOVFF  FF5,FEE
5B1E:  DECFSZ 01,F
5B20:  BRA    5B18
5B22:  MOVLW  02
5B24:  MOVLB  2
5B26:  MOVWF  x6D
5B28:  MOVLW  06
5B2A:  MOVWF  x6C
5B2C:  MOVLB  0
5B2E:  CALL   20D6
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5B32:  MOVLW  02
5B34:  MOVWF  FEA
5B36:  MOVLW  06
5B38:  MOVWF  FE9
5B3A:  MOVLW  2D
5B3C:  MOVWF  01
5B3E:  CLRF   FF7
5B40:  MOVLW  00
5B42:  CALL   0224
5B46:  TBLRD*-
5B48:  TBLRD*+
5B4A:  MOVFF  FF5,FEE
5B4E:  DECFSZ 01,F
5B50:  BRA    5B48
5B52:  MOVLW  02
5B54:  MOVLB  2
5B56:  MOVWF  x6D
5B58:  MOVLW  06
5B5A:  MOVWF  x6C
5B5C:  MOVLB  0
5B5E:  CALL   20D6
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5B62:  MOVLW  02
5B64:  MOVWF  FEA
5B66:  MOVLW  06
5B68:  MOVWF  FE9
5B6A:  MOVLW  2E
5B6C:  MOVWF  01
5B6E:  CLRF   FF7
5B70:  MOVLW  00
5B72:  CALL   0262
5B76:  TBLRD*-
5B78:  TBLRD*+
5B7A:  MOVFF  FF5,FEE
5B7E:  DECFSZ 01,F
5B80:  BRA    5B78
5B82:  MOVLW  02
5B84:  MOVLB  2
5B86:  MOVWF  x6D
5B88:  MOVLW  06
5B8A:  MOVWF  x6C
5B8C:  MOVLB  0
5B8E:  CALL   20D6
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5B92:  MOVLW  02
5B94:  MOVWF  FEA
5B96:  MOVLW  06
5B98:  MOVWF  FE9
5B9A:  MOVLW  36
5B9C:  MOVWF  01
5B9E:  CLRF   FF7
5BA0:  MOVLW  00
5BA2:  CALL   02A0
5BA6:  TBLRD*-
5BA8:  TBLRD*+
5BAA:  MOVFF  FF5,FEE
5BAE:  DECFSZ 01,F
5BB0:  BRA    5BA8
5BB2:  MOVLW  02
5BB4:  MOVLB  2
5BB6:  MOVWF  x6D
5BB8:  MOVLW  06
5BBA:  MOVWF  x6C
5BBC:  MOVLB  0
5BBE:  CALL   20D6
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
5BC2:  MOVLW  02
5BC4:  MOVWF  FEA
5BC6:  MOVLW  06
5BC8:  MOVWF  FE9
5BCA:  MOVLW  16
5BCC:  MOVWF  01
5BCE:  CLRF   FF7
5BD0:  MOVLW  00
5BD2:  CALL   02E6
5BD6:  TBLRD*-
5BD8:  TBLRD*+
5BDA:  MOVFF  FF5,FEE
5BDE:  DECFSZ 01,F
5BE0:  BRA    5BD8
5BE2:  MOVLW  02
5BE4:  MOVLB  2
5BE6:  MOVWF  x6D
5BE8:  MOVLW  06
5BEA:  MOVWF  x6C
5BEC:  MOVLB  0
5BEE:  CALL   20D6
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
5BF2:  MOVLW  02
5BF4:  MOVWF  FEA
5BF6:  MOVLW  06
5BF8:  MOVWF  FE9
5BFA:  MOVLW  3C
5BFC:  MOVWF  01
5BFE:  CLRF   FF7
5C00:  MOVLW  00
5C02:  CALL   030C
5C06:  TBLRD*-
5C08:  TBLRD*+
5C0A:  MOVFF  FF5,FEE
5C0E:  DECFSZ 01,F
5C10:  BRA    5C08
5C12:  MOVLW  02
5C14:  MOVLB  2
5C16:  MOVWF  x6D
5C18:  MOVLW  06
5C1A:  MOVWF  x6C
5C1C:  MOVLB  0
5C1E:  CALL   20D6
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5C22:  MOVLW  02
5C24:  MOVWF  FEA
5C26:  MOVLW  06
5C28:  MOVWF  FE9
5C2A:  MOVLW  3D
5C2C:  MOVWF  01
5C2E:  CLRF   FF7
5C30:  MOVLW  00
5C32:  CALL   0358
5C36:  TBLRD*-
5C38:  TBLRD*+
5C3A:  MOVFF  FF5,FEE
5C3E:  DECFSZ 01,F
5C40:  BRA    5C38
5C42:  MOVLW  02
5C44:  MOVLB  2
5C46:  MOVWF  x6D
5C48:  MOVLW  06
5C4A:  MOVWF  x6C
5C4C:  MOVLB  0
5C4E:  CALL   20D6
....................   COM1_send_str("\r\n"); 
5C52:  MOVLW  0D
5C54:  MOVLB  2
5C56:  MOVWF  x06
5C58:  MOVLW  0A
5C5A:  MOVWF  x07
5C5C:  CLRF   x08
5C5E:  MOVLW  02
5C60:  MOVWF  x6D
5C62:  MOVLW  06
5C64:  MOVWF  x6C
5C66:  MOVLB  0
5C68:  CALL   20D6
....................   } 
5C6C:  GOTO   6094 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
....................   { 
....................   //COM1_send_str("\r\nFAIL\r\n"); 
....................   } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT read_temperature(void)// VERSION 3.3 17.1.2016 
....................   { 
....................   float temp; 
....................   SINT t, val; 
....................   set_adc_channel(A2D_TEMP); // read temperature 
*
25DE:  MOVLW  18
25E0:  MOVWF  01
25E2:  MOVF   FC2,W
25E4:  ANDLW  83
25E6:  IORWF  01,W
25E8:  MOVWF  FC2
....................   delay_us(50); 
25EA:  MOVLW  42
25EC:  MOVWF  00
25EE:  DECFSZ 00,F
25F0:  BRA    25EE
25F2:  NOP   
....................   val = read_adc(); 
25F4:  BSF    FC2.1
25F6:  BTFSC  FC2.1
25F8:  BRA    25F6
25FA:  MOVFF  FC4,1C3
25FE:  MOVLB  1
2600:  MOVFF  FC3,1C2
....................   temp = (float)val / 1024.0 * 3.3; 
2604:  MOVFF  1C3,1C5
2608:  MOVFF  1C2,1C4
260C:  MOVLB  0
260E:  BRA    22D6
2610:  MOVFF  00,1C4
2614:  MOVFF  01,1C5
2618:  MOVFF  02,1C6
261C:  MOVFF  03,1C7
2620:  MOVFF  03,256
2624:  MOVFF  02,255
2628:  MOVFF  01,254
262C:  MOVFF  00,253
2630:  MOVLB  2
2632:  CLRF   x5A
2634:  CLRF   x59
2636:  CLRF   x58
2638:  MOVLW  89
263A:  MOVWF  x57
263C:  MOVLB  0
263E:  CALL   178E
2642:  MOVFF  00,1C4
2646:  MOVFF  01,1C5
264A:  MOVFF  02,1C6
264E:  MOVFF  03,1C7
2652:  MOVFF  03,256
2656:  MOVFF  02,255
265A:  MOVFF  01,254
265E:  MOVFF  00,253
2662:  MOVLW  33
2664:  MOVLB  2
2666:  MOVWF  x5A
2668:  MOVWF  x59
266A:  MOVLW  53
266C:  MOVWF  x58
266E:  MOVLW  80
2670:  MOVWF  x57
2672:  MOVLB  0
2674:  CALL   18EC
2678:  MOVFF  03,1BF
267C:  MOVFF  02,1BE
2680:  MOVFF  01,1BD
2684:  MOVFF  00,1BC
....................   temp -= 0.75; 
2688:  BSF    FD8.1
268A:  MOVFF  1BF,231
268E:  MOVFF  1BE,230
2692:  MOVFF  1BD,22F
2696:  MOVFF  1BC,22E
269A:  MOVLB  2
269C:  CLRF   x35
269E:  CLRF   x34
26A0:  MOVLW  40
26A2:  MOVWF  x33
26A4:  MOVLW  7E
26A6:  MOVWF  x32
26A8:  MOVLB  0
26AA:  RCALL  2328
26AC:  MOVFF  03,1BF
26B0:  MOVFF  02,1BE
26B4:  MOVFF  01,1BD
26B8:  MOVFF  00,1BC
....................   temp *= 100; 
26BC:  MOVFF  1BF,256
26C0:  MOVFF  1BE,255
26C4:  MOVFF  1BD,254
26C8:  MOVFF  1BC,253
26CC:  MOVLB  2
26CE:  CLRF   x5A
26D0:  CLRF   x59
26D2:  MOVLW  48
26D4:  MOVWF  x58
26D6:  MOVLW  85
26D8:  MOVWF  x57
26DA:  MOVLB  0
26DC:  CALL   18EC
26E0:  MOVFF  03,1BF
26E4:  MOVFF  02,1BE
26E8:  MOVFF  01,1BD
26EC:  MOVFF  00,1BC
....................   temp += 25.0; 
26F0:  BCF    FD8.1
26F2:  MOVFF  1BF,231
26F6:  MOVFF  1BE,230
26FA:  MOVFF  1BD,22F
26FE:  MOVFF  1BC,22E
2702:  MOVLB  2
2704:  CLRF   x35
2706:  CLRF   x34
2708:  MOVLW  48
270A:  MOVWF  x33
270C:  MOVLW  83
270E:  MOVWF  x32
2710:  MOVLB  0
2712:  RCALL  2328
2714:  MOVFF  03,1BF
2718:  MOVFF  02,1BE
271C:  MOVFF  01,1BD
2720:  MOVFF  00,1BC
....................   t = (SINT)(temp*100); 
2724:  MOVFF  1BF,256
2728:  MOVFF  1BE,255
272C:  MOVFF  1BD,254
2730:  MOVFF  1BC,253
2734:  MOVLB  2
2736:  CLRF   x5A
2738:  CLRF   x59
273A:  MOVLW  48
273C:  MOVWF  x58
273E:  MOVLW  85
2740:  MOVWF  x57
2742:  MOVLB  0
2744:  CALL   18EC
2748:  MOVFF  03,1C7
274C:  MOVFF  02,1C6
2750:  MOVFF  01,1C5
2754:  MOVFF  00,1C4
2758:  BRA    25A0
275A:  MOVFF  02,1C1
275E:  MOVFF  01,1C0
....................   return t; 
2762:  MOVLB  1
2764:  MOVFF  1C0,01
2768:  MOVFF  1C1,02
....................   } 
276C:  MOVLB  0
276E:  GOTO   2800 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
....................   { 
*
219E:  MOVLB  1
21A0:  CLRF   xBC
....................  // float temp; 
....................   byte t = 0; 
....................   t =          (bit)setup.data_source ; 
21A2:  CLRF   xBC
21A4:  MOVLB  0
21A6:  BTFSS  xB3.0
21A8:  BRA    21B0
21AA:  MOVLB  1
21AC:  INCF   xBC,F
21AE:  MOVLB  0
....................   t = t + ( (bit)setup.data_polarity <<  1); 
21B0:  MOVLW  00
21B2:  BTFSC  xB1.0
21B4:  MOVLW  01
21B6:  MOVWF  00
21B8:  BCF    FD8.0
21BA:  RLCF   00,F
21BC:  MOVF   00,W
21BE:  MOVLB  1
21C0:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.randomizer <<     2); 
21C2:  MOVLW  00
21C4:  MOVLB  0
21C6:  BTFSC  xB5.0
21C8:  MOVLW  01
21CA:  MOVWF  00
21CC:  RLCF   00,F
21CE:  RLCF   00,F
21D0:  MOVLW  FC
21D2:  ANDWF  00,F
21D4:  MOVF   00,W
21D6:  MOVLB  1
21D8:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.clock_source <<   3); 
21DA:  MOVLW  00
21DC:  MOVLB  0
21DE:  BTFSC  xB2.0
21E0:  MOVLW  01
21E2:  MOVWF  00
21E4:  RLCF   00,F
21E6:  RLCF   00,F
21E8:  RLCF   00,F
21EA:  MOVLW  F8
21EC:  ANDWF  00,F
21EE:  MOVF   00,W
21F0:  MOVLB  1
21F2:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.clock_polarity << 4); 
21F4:  MOVLW  00
21F6:  MOVLB  0
21F8:  BTFSC  xB0.0
21FA:  MOVLW  01
21FC:  MOVWF  00
21FE:  SWAPF  00,F
2200:  MOVLW  F0
2202:  ANDWF  00,F
2204:  MOVF   00,W
2206:  MOVLB  1
2208:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.SOQPSK <<         5); 
220A:  MOVLW  00
220C:  MOVLB  0
220E:  BTFSC  xB7.0
2210:  MOVLW  01
2212:  MOVWF  00
2214:  SWAPF  00,F
2216:  RLCF   00,F
2218:  MOVLW  E0
221A:  ANDWF  00,F
221C:  MOVF   00,W
221E:  MOVLB  1
2220:  ADDWF  xBC,F
....................   t = t + ( (bit)0 <<       6); 
....................   t = t + ( (bit)0 <<       7); 
....................    
....................   //  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................   return t; 
2222:  CLRF   03
2224:  MOVFF  1BC,01
2228:  MOVFF  03,02
....................   } 
222C:  MOVLB  0
222E:  GOTO   27F4 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
....................   { 
....................  // float temp; 
....................   if (revp <= 580) 
2232:  MOVLB  1
2234:  MOVF   x08,W
2236:  SUBLW  02
2238:  BNC   2246
223A:  BNZ   2242
223C:  MOVF   x07,W
223E:  SUBLW  44
2240:  BNC   2246
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
2242:  BCF    xA2.0
....................       else 
2244:  BRA    2248
....................         revp_status = 1;//Q strcpy(revstat, "BAD"); 
2246:  BSF    xA2.0
....................  
....................   byte t = 0; 
2248:  CLRF   xBC
....................   t =       (bit)setup.cot ; //RB 
224A:  CLRF   xBC
224C:  MOVLB  0
224E:  BTFSS  xF5.0
2250:  BRA    2258
2252:  MOVLB  1
2254:  INCF   xBC,F
2256:  MOVLB  0
....................   t = t + ( (bit)setup.rc <<  1); 
2258:  MOVLW  00
225A:  BTFSC  xF7.0
225C:  MOVLW  01
225E:  MOVWF  00
2260:  BCF    FD8.0
2262:  RLCF   00,F
2264:  MOVF   00,W
2266:  MOVLB  1
2268:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.pwr << 2);//RF 
226A:  MOVLW  00
226C:  MOVLB  0
226E:  BTFSC  xAD.0
2270:  MOVLW  01
2272:  MOVWF  00
2274:  RLCF   00,F
2276:  RLCF   00,F
2278:  MOVLW  FC
227A:  ANDWF  00,F
227C:  MOVF   00,W
227E:  MOVLB  1
2280:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.rp <<  3); 
2282:  MOVLW  00
2284:  MOVLB  0
2286:  BTFSC  xF9.0
2288:  MOVLW  01
228A:  MOVWF  00
228C:  RLCF   00,F
228E:  RLCF   00,F
2290:  RLCF   00,F
2292:  MOVLW  F8
2294:  ANDWF  00,F
2296:  MOVF   00,W
2298:  MOVLB  1
229A:  ADDWF  xBC,F
....................   t = t + ( (bit)setup.UART_Status << 4); 
229C:  MOVLW  00
229E:  MOVLB  0
22A0:  BTFSC  xFC.0
22A2:  MOVLW  01
22A4:  MOVWF  00
22A6:  SWAPF  00,F
22A8:  MOVLW  F0
22AA:  ANDWF  00,F
22AC:  MOVF   00,W
22AE:  MOVLB  1
22B0:  ADDWF  xBC,F
....................   t = t + ( (bit)revp_status <<       5); 
22B2:  MOVLW  00
22B4:  BTFSC  xA2.0
22B6:  MOVLW  01
22B8:  MOVWF  00
22BA:  SWAPF  00,F
22BC:  RLCF   00,F
22BE:  MOVLW  E0
22C0:  ANDWF  00,F
22C2:  MOVF   00,W
22C4:  ADDWF  xBC,F
....................   t = t + ( (bit)0 <<       6); 
....................   t = t + ( (bit)0 <<       7); 
....................    
....................   
....................   return t; 
22C6:  CLRF   03
22C8:  MOVFF  1BC,01
22CC:  MOVFF  03,02
....................   } 
22D0:  MOVLB  0
22D2:  GOTO   27FA (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
3342:  CALL   29D2
3346:  MOVFF  02,22F
334A:  MOVFF  01,22E
....................   setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
334E:  MOVFF  22E,FE
....................   if (idx <= 40 && idx >= 20) 
3352:  MOVLB  2
3354:  MOVF   x2F,F
3356:  BNZ   33AA
3358:  MOVF   x2E,W
335A:  SUBLW  28
335C:  BNC   33AA
335E:  MOVF   x2F,F
3360:  BNZ   3368
3362:  MOVF   x2E,W
3364:  SUBLW  13
3366:  BC    33AA
....................     { 
....................     setup.power_level = idx - 20; 
3368:  MOVLW  14
336A:  SUBWF  x2E,W
336C:  MOVLB  0
336E:  MOVWF  xBB
3370:  MOVLW  00
3372:  MOVLB  2
3374:  SUBWFB x2F,W
3376:  MOVLB  0
3378:  MOVWF  xBC
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
337A:  BCF    FD8.0
337C:  RLCF   xBB,W
337E:  MOVWF  02
3380:  RLCF   xBC,W
3382:  MOVWF  03
3384:  MOVF   02,W
3386:  ADDLW  C4
3388:  MOVWF  FE9
338A:  MOVLW  00
338C:  ADDWFC 03,W
338E:  MOVWF  FEA
3390:  MOVFF  FEC,03
3394:  MOVF   FED,F
3396:  MOVFF  FEF,1C
339A:  MOVFF  03,1D
....................     return 1; 
339E:  MOVLW  01
33A0:  MOVWF  01
33A2:  MOVLW  00
33A4:  MOVWF  02
33A6:  BRA    33B0
33A8:  MOVLB  2
....................     } 
....................   return 0; 
33AA:  MOVLW  00
33AC:  MOVWF  01
33AE:  MOVWF  02
33B0:  MOVLB  0
....................   } 
33B2:  GOTO   4AB4 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
32CE:  CALL   29D2
32D2:  MOVFF  02,22F
32D6:  MOVFF  01,22E
....................   setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
32DA:  MOVFF  22E,FD
....................   if (idx <= 40 && idx >= 20) 
32DE:  MOVLB  2
32E0:  MOVF   x2F,F
32E2:  BNZ   3336
32E4:  MOVF   x2E,W
32E6:  SUBLW  28
32E8:  BNC   3336
32EA:  MOVF   x2F,F
32EC:  BNZ   32F4
32EE:  MOVF   x2E,W
32F0:  SUBLW  13
32F2:  BC    3336
....................     { 
....................     setup.power_low_level = idx - 20; 
32F4:  MOVLW  14
32F6:  SUBWF  x2E,W
32F8:  MOVLB  0
32FA:  MOVWF  xF3
32FC:  MOVLW  00
32FE:  MOVLB  2
3300:  SUBWFB x2F,W
3302:  MOVLB  0
3304:  MOVWF  xF4
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
3306:  BCF    FD8.0
3308:  RLCF   xF3,W
330A:  MOVWF  02
330C:  RLCF   xF4,W
330E:  MOVWF  03
3310:  MOVF   02,W
3312:  ADDLW  C4
3314:  MOVWF  FE9
3316:  MOVLW  00
3318:  ADDWFC 03,W
331A:  MOVWF  FEA
331C:  MOVFF  FEC,03
3320:  MOVF   FED,F
3322:  MOVFF  FEF,1A
3326:  MOVFF  03,1B
....................     return 1; 
332A:  MOVLW  01
332C:  MOVWF  01
332E:  MOVLW  00
3330:  MOVWF  02
3332:  BRA    333C
3334:  MOVLB  2
....................     } 
....................   return 0; 
3336:  MOVLW  00
3338:  MOVWF  01
333A:  MOVWF  02
333C:  MOVLB  0
....................   } 
333E:  GOTO   4A0A (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... The message structure is defined below. 
....................  
.................... Byte# Description Remarks 
.................... 1 Header  Constant - 47 Hex 
.................... 2 Temperature Send 2's complement 
.................... 3 Power level 
.................... 4 Current 
.................... 5 PLL lock 
.................... 6 Checksum  Checksum of all preceding bytes 
....................  
.................... Table 1 - Status Packet structure 
....................  
.................... The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
....................   { 
*
27EA:  MOVLB  1
27EC:  CLRF   xB7
27EE:  CLRF   xB6
....................   UINT chksum = 0, idx; 
....................   byte BitsStatus1,BitsStatus2; 
....................   BitsStatus1 = Bits_status1(); 
27F0:  MOVLB  0
27F2:  BRA    219E
27F4:  MOVFF  01,1BA
....................   BitsStatus2 = Bits_status2(); 
27F8:  BRA    2232
27FA:  MOVFF  01,1BB
....................   
....................   current_temperature = read_temperature(); 
27FE:  BRA    25DE
2800:  MOVFF  02,10A
2804:  MOVFF  01,109
....................   //measured_current = read_current(); 
....................   //power_level_stat = current_power; 
....................   status_buffer[0] = 0xFB; // Synchronization Byte 1 
2808:  MOVLW  FB
280A:  MOVLB  1
280C:  MOVWF  x13
....................   status_buffer[1] = 0x60; // Synchronization Byte 2 
280E:  MOVLW  60
2810:  MOVWF  x14
....................   status_buffer[2] = TX_Counter; // The counter increments by one each time an update is sent 0 to 255 
2812:  MOVFF  10F,115
....................   status_buffer[3] = setup.frequency / 256; // MSB TX frequency  
2816:  MOVFF  BA,116
....................   status_buffer[4] = setup.frequency % 256; // LSB TX frequency  
281A:  MOVFF  B9,117
281E:  MOVLB  1
....................   status_buffer[5] = setup.mode; // State of modulation state 
2820:  MOVFF  AF,118
....................   status_buffer[6] = BitsStatus1; //0x00; // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
2824:  MOVFF  1BA,119
....................   status_buffer[7] = current_temperature / 256; //MSB TX Temperature  
2828:  MOVFF  10A,1BD
282C:  MOVFF  109,1BC
2830:  MOVLW  01
2832:  MOVWF  xBF
2834:  CLRF   xBE
2836:  MOVLB  0
2838:  RCALL  2772
283A:  MOVFF  01,11A
283E:  MOVLB  1
....................   status_buffer[8] = current_temperature % 256; //LSB TX Temperature  
2840:  MOVFF  10A,1BD
2844:  MOVFF  109,1BC
2848:  MOVLW  01
284A:  MOVWF  xBF
284C:  CLRF   xBE
284E:  MOVLB  0
2850:  RCALL  2772
2852:  MOVFF  00,11B
2856:  MOVLB  1
....................   status_buffer[9] = setup.bitrate / 256; //MSB Bit rate state ,  
2858:  MOVFF  AC,11C
....................   status_buffer[10] = setup.bitrate % 256; //LSB Bit rate state  
285C:  MOVFF  AB,11D
2860:  MOVLB  1
....................   status_buffer[11] = setup.power_level + 20; // TX power in dBm 
2862:  MOVLW  14
2864:  MOVLB  0
2866:  ADDWF  xBB,W
2868:  MOVLB  1
286A:  MOVWF  x1E
....................   status_buffer[12] = setup.internal_pattern; //Data type while using internal data 
286C:  MOVFF  B4,11F
....................   status_buffer[13] = BitsStatus2; // Bits status of: Reverse Power N/A 
2870:  MOVFF  1BB,120
....................   status_buffer[14] = setup.bitlow_power_level ;// TX low power in dBm (VL) 
2874:  MOVFF  FD,121
....................   status_buffer[15] = setup.bitpower_level ;// TX low power in dBm (VP) 
2878:  MOVFF  FE,122
....................   status_buffer[16] = 0xAA;//revp; N/A FOR Now // need to be clilired Revers power 
287C:  MOVLW  AA
287E:  MOVWF  x23
....................   status_buffer[17] = 0xAA;//N/A FOR Now((VERSION(12)*10) + VERSION(14));// TX VERSION 
2880:  MOVWF  x24
....................   status_buffer[18] = setup.unit_ID / 256;//MSB TX Serial number 
2882:  MOVFF  F2,125
....................   status_buffer[19] = setup.unit_ID % 256;//LSB TX Serial number 
2886:  MOVFF  F1,126
288A:  MOVLB  1
....................   status_buffer[20] = 0xAA;// Spare 
288C:  MOVLW  AA
288E:  MOVWF  x27
....................   status_buffer[21] = 0xAA;// Spare 
2890:  MOVWF  x28
....................   status_buffer[22] = 0xAA;// Spare 
2892:  MOVWF  x29
....................    
....................   for (idx = 0; idx < 25; idx++) 
2894:  CLRF   xB9
2896:  CLRF   xB8
2898:  MOVF   xB9,F
289A:  BNZ   28BE
289C:  MOVF   xB8,W
289E:  SUBLW  18
28A0:  BNC   28BE
....................     { 
....................     chksum += status_buffer[idx]; 
28A2:  MOVLW  13
28A4:  ADDWF  xB8,W
28A6:  MOVWF  FE9
28A8:  MOVLW  01
28AA:  ADDWFC xB9,W
28AC:  MOVWF  FEA
28AE:  MOVF   FEF,W
28B0:  ADDWF  xB6,F
28B2:  MOVLW  00
28B4:  ADDWFC xB7,F
....................     } 
28B6:  INCF   xB8,F
28B8:  BTFSC  FD8.2
28BA:  INCF   xB9,F
28BC:  BRA    2898
....................   status_buffer[23] =(chksum ) / 256;//& 255 
28BE:  MOVFF  1B7,12A
....................   status_buffer[24] =(chksum ) % 256;//& 255 
28C2:  MOVFF  1B6,12B
....................   } 
28C6:  MOVLB  0
28C8:  GOTO   6AAA (RETURN)
.................... /* 
....................   for (idx = 0; idx < 5; idx++) 
....................     { 
....................     chksum += status_buffer[idx]; 
....................     } 
....................   status_buffer[5] =chksum & 255; 
....................   } 
....................  */  
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
600A:  MOVLW  02
600C:  MOVLB  1
600E:  MOVWF  xCF
....................   comm_ptr = 0; 
6010:  CLRF   x41
....................   switch (toupper(get_char())) 
....................     { 
6012:  MOVLB  0
6014:  CALL   2916
6018:  MOVFF  02,207
601C:  MOVFF  01,206
6020:  MOVLB  2
6022:  MOVF   x07,F
6024:  BNZ   602C
6026:  MOVF   x06,W
6028:  SUBLW  60
602A:  BC    603C
602C:  MOVF   x07,F
602E:  BNZ   603C
6030:  MOVF   x06,W
6032:  SUBLW  7A
6034:  BNC   603C
6036:  MOVF   x06,W
6038:  ANDLW  DF
603A:  BRA    603E
603C:  MOVF   x06,W
603E:  XORLW  48
6040:  MOVLB  0
6042:  BZ    6092
6044:  XORLW  09
6046:  BZ    609A
6048:  XORLW  02
604A:  BTFSC  FD8.2
604C:  BRA    616E
604E:  XORLW  07
6050:  BTFSC  FD8.2
6052:  BRA    624C
6054:  XORLW  0B
6056:  BTFSC  FD8.2
6058:  BRA    62CA
605A:  XORLW  1D
605C:  BTFSC  FD8.2
605E:  BRA    6308
6060:  XORLW  10
6062:  BTFSC  FD8.2
6064:  BRA    6348
6066:  XORLW  05
6068:  BTFSC  FD8.2
606A:  BRA    63A0
606C:  XORLW  01
606E:  BTFSC  FD8.2
6070:  BRA    64BC
6072:  XORLW  15
6074:  BTFSC  FD8.2
6076:  BRA    654A
6078:  XORLW  07
607A:  BTFSC  FD8.2
607C:  BRA    65F0
607E:  XORLW  65
6080:  BTFSC  FD8.2
6082:  BRA    66B8
6084:  XORLW  03
6086:  BTFSC  FD8.2
6088:  BRA    66C6
608A:  XORLW  01
608C:  BTFSC  FD8.2
608E:  BRA    66D0
6090:  BRA    66DE
....................     case 'H': 
....................       list_help1(); 
6092:  BRA    5A58
....................       return 0; 
6094:  MOVLW  00
6096:  MOVWF  01
6098:  BRA    66E8
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
609A:  CALL   2916
609E:  MOVFF  02,207
60A2:  MOVFF  01,206
60A6:  MOVLB  2
60A8:  MOVF   x07,F
60AA:  BNZ   60B2
60AC:  MOVF   x06,W
60AE:  SUBLW  60
60B0:  BC    60C2
60B2:  MOVF   x07,F
60B4:  BNZ   60C2
60B6:  MOVF   x06,W
60B8:  SUBLW  7A
60BA:  BNC   60C2
60BC:  MOVF   x06,W
60BE:  ANDLW  DF
60C0:  BRA    60C4
60C2:  MOVF   x06,W
60C4:  XORLW  54
60C6:  MOVLB  0
60C8:  BZ    60D0
60CA:  XORLW  1D
60CC:  BZ    60DA
60CE:  BRA    616C
....................         case 'T': 
....................           idx = get_int(); 
60D0:  CALL   29D2
60D4:  MOVFF  01,1D0
....................  
....................           // write to attenuator 
....................           break; 
60D8:  BRA    616C
....................         case 'I': 
....................           idx = get_int(); 
60DA:  CALL   29D2
60DE:  MOVFF  01,1D0
....................           if (idx && idx < 4) 
60E2:  MOVLB  1
60E4:  MOVF   xD0,F
60E6:  BZ    616A
60E8:  MOVF   xD0,W
60EA:  SUBLW  03
60EC:  BNC   616A
....................             { 
....................             set_adc_channel(idx-1); 
60EE:  MOVLW  01
60F0:  SUBWF  xD0,W
60F2:  MOVLB  2
60F4:  MOVWF  x06
60F6:  RLCF   x06,W
60F8:  MOVWF  00
60FA:  RLCF   00,F
60FC:  MOVLW  FC
60FE:  ANDWF  00,F
6100:  MOVF   FC2,W
6102:  ANDLW  83
6104:  IORWF  00,W
6106:  MOVWF  FC2
....................             delay_us(30); 
6108:  MOVLW  27
610A:  MOVWF  00
610C:  DECFSZ 00,F
610E:  BRA    610C
6110:  BRA    6112
....................             value = read_adc(); 
6112:  BSF    FC2.1
6114:  BTFSC  FC2.1
6116:  BRA    6114
6118:  MOVFF  FC3,204
611C:  MOVFF  FC4,205
....................             sprintf(buf, "$AR %lu\r", value); 
6120:  MOVLW  01
6122:  MOVLB  1
6124:  MOVWF  xA4
6126:  MOVLW  D4
6128:  MOVWF  xA3
612A:  MOVLW  A0
612C:  MOVWF  FF6
612E:  MOVLW  0B
6130:  MOVWF  FF7
6132:  MOVLW  04
6134:  MOVLB  2
6136:  MOVWF  x34
6138:  MOVLB  0
613A:  CALL   2E82
613E:  MOVLW  10
6140:  MOVWF  FE9
6142:  MOVFF  205,235
6146:  MOVFF  204,234
614A:  CALL   2EAA
614E:  MOVLW  0D
6150:  MOVLB  2
6152:  MOVWF  x3D
6154:  MOVLB  0
6156:  CALL   2E60
....................             COM1_send_str(buf); 
615A:  MOVLW  01
615C:  MOVLB  2
615E:  MOVWF  x6D
6160:  MOVLW  D4
6162:  MOVWF  x6C
6164:  MOVLB  0
6166:  CALL   20D6
....................             } 
....................           break; 
616A:  MOVLB  0
....................         } 
....................       break; 
616C:  BRA    66E4
....................     case 'C': 
....................       if (chr = toupper(get_char()) == 'F') 
616E:  CALL   2916
6172:  MOVFF  02,207
6176:  MOVFF  01,206
617A:  MOVLB  2
617C:  MOVF   x07,F
617E:  BNZ   6186
6180:  MOVF   x06,W
6182:  SUBLW  60
6184:  BC    6196
6186:  MOVF   x07,F
6188:  BNZ   6196
618A:  MOVF   x06,W
618C:  SUBLW  7A
618E:  BNC   6196
6190:  MOVF   x06,W
6192:  ANDLW  DF
6194:  BRA    6198
6196:  MOVF   x06,W
6198:  SUBLW  46
619A:  BZ    61A0
619C:  MOVLW  00
619E:  BRA    61A2
61A0:  MOVLW  01
61A2:  MOVLB  1
61A4:  MOVWF  xCF
61A6:  MOVF   xCF,F
61A8:  BZ    61DC
....................         { 
....................         freq = get_frequency(); 
61AA:  MOVLB  0
61AC:  CALL   2F66
61B0:  MOVLB  1
61B2:  CLRF   xFF
61B4:  CLRF   xFE
61B6:  MOVFF  02,1FD
61BA:  MOVFF  01,1FC
....................         PLL_compute_freq_parameters(freq); 
61BE:  MOVFF  1FD,207
61C2:  MOVFF  1FC,206
61C6:  MOVFF  1FD,237
61CA:  MOVFF  1FC,236
61CE:  MOVLB  0
61D0:  CALL   129C
....................         PLL_update(); 
61D4:  CALL   156C
....................         } 
....................       else if (chr == 'P') 
61D8:  BRA    6246
61DA:  MOVLB  1
61DC:  MOVF   xCF,W
61DE:  SUBLW  50
61E0:  BNZ   6248
....................         { 
....................         idx = get_int(); 
61E2:  MOVLB  0
61E4:  CALL   29D2
61E8:  MOVFF  01,1D0
....................         if (idx < 2) 
61EC:  MOVLB  1
61EE:  MOVF   xD0,W
61F0:  SUBLW  01
61F2:  BNC   6248
....................           { 
....................           setup.clock_polarity = idx & 1; 
61F4:  MOVF   xD0,W
61F6:  ANDLW  01
61F8:  MOVLB  0
61FA:  MOVWF  xB0
....................           sprintf(buf, "$CP %u\r", idx); 
61FC:  MOVLW  01
61FE:  MOVLB  1
6200:  MOVWF  xA4
6202:  MOVLW  D4
6204:  MOVWF  xA3
6206:  MOVLW  AA
6208:  MOVWF  FF6
620A:  MOVLW  0B
620C:  MOVWF  FF7
620E:  MOVLW  04
6210:  MOVLB  2
6212:  MOVWF  x34
6214:  MOVLB  0
6216:  CALL   2E82
621A:  MOVFF  1D0,234
621E:  MOVLW  1B
6220:  MOVLB  2
6222:  MOVWF  x35
6224:  MOVLB  0
6226:  CALL   2FFA
622A:  MOVLW  0D
622C:  MOVLB  2
622E:  MOVWF  x3D
6230:  MOVLB  0
6232:  CALL   2E60
....................           COM1_send_str(buf); 
6236:  MOVLW  01
6238:  MOVLB  2
623A:  MOVWF  x6D
623C:  MOVLW  D4
623E:  MOVWF  x6C
6240:  MOVLB  0
6242:  CALL   20D6
6246:  MOVLB  1
....................           } 
....................         } 
....................       break; 
6248:  MOVLB  0
624A:  BRA    66E4
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
624C:  CALL   2916
6250:  MOVFF  02,207
6254:  MOVFF  01,206
6258:  MOVLB  2
625A:  MOVF   x07,F
625C:  BNZ   6264
625E:  MOVF   x06,W
6260:  SUBLW  60
6262:  BC    6274
6264:  MOVF   x07,F
6266:  BNZ   6274
6268:  MOVF   x06,W
626A:  SUBLW  7A
626C:  BNC   6274
626E:  MOVF   x06,W
6270:  ANDLW  DF
6272:  BRA    6276
6274:  MOVF   x06,W
6276:  SUBLW  49
6278:  BNZ   62C6
....................         { 
....................         idx = input_c(); // change to REAL input ports 
627A:  MOVFF  F82,1D0
....................         sprintf(buf, "$DR %02X\r", idx); 
627E:  MOVLW  01
6280:  MOVLB  1
6282:  MOVWF  xA4
6284:  MOVLW  D4
6286:  MOVWF  xA3
6288:  MOVLW  B2
628A:  MOVWF  FF6
628C:  MOVLW  0B
628E:  MOVWF  FF7
6290:  MOVLW  04
6292:  MOVLB  2
6294:  MOVWF  x34
6296:  MOVLB  0
6298:  CALL   2E82
629C:  MOVFF  1D0,206
62A0:  MOVLW  37
62A2:  MOVLB  2
62A4:  MOVWF  x07
62A6:  MOVLB  0
62A8:  RCALL  5C70
62AA:  MOVLW  0D
62AC:  MOVLB  2
62AE:  MOVWF  x3D
62B0:  MOVLB  0
62B2:  CALL   2E60
....................         COM1_send_str(buf); 
62B6:  MOVLW  01
62B8:  MOVLB  2
62BA:  MOVWF  x6D
62BC:  MOVLW  D4
62BE:  MOVWF  x6C
62C0:  MOVLB  0
62C2:  CALL   20D6
....................         } 
....................       break; 
62C6:  MOVLB  0
62C8:  BRA    66E4
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
62CA:  CALL   2916
62CE:  MOVFF  02,207
62D2:  MOVFF  01,206
62D6:  MOVLB  2
62D8:  MOVF   x07,F
62DA:  BNZ   62E2
62DC:  MOVF   x06,W
62DE:  SUBLW  60
62E0:  BC    62F2
62E2:  MOVF   x07,F
62E4:  BNZ   62F2
62E6:  MOVF   x06,W
62E8:  SUBLW  7A
62EA:  BNC   62F2
62EC:  MOVF   x06,W
62EE:  ANDLW  DF
62F0:  BRA    62F4
62F2:  MOVF   x06,W
62F4:  SUBLW  54
62F6:  BNZ   6304
....................         { 
....................         value = get_hex(); 
62F8:  MOVLB  0
62FA:  RCALL  5CBA
62FC:  MOVFF  01,205
6300:  MOVFF  00,204
....................         // output bits 
....................         } 
....................       break; 
6304:  MOVLB  0
6306:  BRA    66E4
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
6308:  CALL   2916
630C:  MOVFF  02,207
6310:  MOVFF  01,206
6314:  MOVLB  2
6316:  MOVF   x07,F
6318:  BNZ   6320
631A:  MOVF   x06,W
631C:  SUBLW  60
631E:  BC    6330
6320:  MOVF   x07,F
6322:  BNZ   6330
6324:  MOVF   x06,W
6326:  SUBLW  7A
6328:  BNC   6330
632A:  MOVF   x06,W
632C:  ANDLW  DF
632E:  BRA    6332
6330:  MOVF   x06,W
6332:  SUBLW  44
6334:  BNZ   6344
....................         { 
....................         output_high(D2A_RESET); 
6336:  BSF    F8A.3
....................         delay_ms(100); 
6338:  MOVLW  64
633A:  MOVWF  x43
633C:  MOVLB  0
633E:  CALL   0EAA
....................         output_low(D2A_RESET); 
6342:  BCF    F8A.3
....................         } 
....................       break; 
6344:  MOVLB  0
6346:  BRA    66E4
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
6348:  CALL   2916
634C:  MOVFF  02,207
6350:  MOVFF  01,206
6354:  MOVLB  2
6356:  MOVF   x07,F
6358:  BNZ   6360
635A:  MOVF   x06,W
635C:  SUBLW  60
635E:  BC    6370
6360:  MOVF   x07,F
6362:  BNZ   6370
6364:  MOVF   x06,W
6366:  SUBLW  7A
6368:  BNC   6370
636A:  MOVF   x06,W
636C:  ANDLW  DF
636E:  BRA    6372
6370:  MOVF   x06,W
6372:  SUBLW  52
6374:  BNZ   639C
....................         { 
....................         bitrate = str_to_long(); 
6376:  MOVLB  0
6378:  BRA    5DB2
637A:  MOVFF  03,203
637E:  MOVFF  02,202
6382:  MOVFF  01,201
6386:  MOVFF  00,200
....................         set_bitrate(bitrate); 
638A:  MOVFF  201,207
638E:  MOVFF  200,206
6392:  MOVFF  201,209
6396:  MOVFF  200,208
639A:  BRA    5E6E
....................         } 
....................       break; 
639C:  MOVLB  0
639E:  BRA    66E4
....................     case 'G': 
....................       device = get_char(); 
63A0:  CALL   2916
63A4:  MOVFF  01,1D1
....................       addr = get_hex(); 
63A8:  RCALL  5CBA
63AA:  MOVFF  00,1D2
....................       switch (toupper(device)) 
....................         { 
63AE:  MOVLB  1
63B0:  MOVF   xD1,W
63B2:  SUBLW  60
63B4:  BC    63C2
63B6:  MOVF   xD1,W
63B8:  SUBLW  7A
63BA:  BNC   63C2
63BC:  MOVF   xD1,W
63BE:  ANDLW  DF
63C0:  BRA    63C4
63C2:  MOVF   xD1,W
63C4:  XORLW  46
63C6:  MOVLB  0
63C8:  BZ    63D0
63CA:  XORLW  02
63CC:  BZ    644A
63CE:  BRA    64BA
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
63D0:  MOVFF  1D2,206
63D4:  MOVLW  01
63D6:  MOVLB  2
63D8:  MOVWF  x08
63DA:  MOVLW  D3
63DC:  MOVWF  x07
63DE:  MOVLB  0
63E0:  BRA    5EFE
63E2:  MOVFF  01,1CF
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
63E6:  MOVLW  01
63E8:  MOVLB  1
63EA:  MOVWF  xA4
63EC:  MOVLW  D4
63EE:  MOVWF  xA3
63F0:  MOVLW  BC
63F2:  MOVWF  FF6
63F4:  MOVLW  0B
63F6:  MOVWF  FF7
63F8:  MOVLW  07
63FA:  MOVLB  2
63FC:  MOVWF  x34
63FE:  MOVLB  0
6400:  CALL   2E82
6404:  MOVFF  1D2,206
6408:  MOVLW  37
640A:  MOVLB  2
640C:  MOVWF  x07
640E:  MOVLB  0
6410:  RCALL  5C70
6412:  MOVLW  20
6414:  MOVLB  2
6416:  MOVWF  x3D
6418:  MOVLB  0
641A:  CALL   2E60
641E:  MOVFF  1CF,206
6422:  MOVLW  37
6424:  MOVLB  2
6426:  MOVWF  x07
6428:  MOVLB  0
642A:  RCALL  5C70
642C:  MOVLW  0D
642E:  MOVLB  2
6430:  MOVWF  x3D
6432:  MOVLB  0
6434:  CALL   2E60
....................           COM1_send_str(buf); 
6438:  MOVLW  01
643A:  MOVLB  2
643C:  MOVWF  x6D
643E:  MOVLW  D4
6440:  MOVWF  x6C
6442:  MOVLB  0
6444:  CALL   20D6
....................           break; 
6448:  BRA    64BA
....................         case 'D': 
....................           data = read_D2A(addr); 
644A:  MOVFF  1D2,206
644E:  BRA    5FA8
6450:  MOVFF  01,1D3
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
6454:  MOVLW  01
6456:  MOVLB  1
6458:  MOVWF  xA4
645A:  MOVLW  D4
645C:  MOVWF  xA3
645E:  MOVLW  CE
6460:  MOVWF  FF6
6462:  MOVLW  0B
6464:  MOVWF  FF7
6466:  MOVLW  07
6468:  MOVLB  2
646A:  MOVWF  x34
646C:  MOVLB  0
646E:  CALL   2E82
6472:  MOVFF  1D2,206
6476:  MOVLW  37
6478:  MOVLB  2
647A:  MOVWF  x07
647C:  MOVLB  0
647E:  CALL   5C70
6482:  MOVLW  20
6484:  MOVLB  2
6486:  MOVWF  x3D
6488:  MOVLB  0
648A:  CALL   2E60
648E:  MOVFF  1D3,206
6492:  MOVLW  37
6494:  MOVLB  2
6496:  MOVWF  x07
6498:  MOVLB  0
649A:  CALL   5C70
649E:  MOVLW  0D
64A0:  MOVLB  2
64A2:  MOVWF  x3D
64A4:  MOVLB  0
64A6:  CALL   2E60
....................           COM1_send_str(buf); 
64AA:  MOVLW  01
64AC:  MOVLB  2
64AE:  MOVWF  x6D
64B0:  MOVLW  D4
64B2:  MOVWF  x6C
64B4:  MOVLB  0
64B6:  CALL   20D6
....................           break; 
....................         } 
....................       break; 
64BA:  BRA    66E4
....................     case 'F': // fill tables 
....................       skip_spc(); 
64BC:  CALL   2936
....................       idx = get_char(); // get table designator 
64C0:  CALL   2916
64C4:  MOVFF  01,1D0
....................       addr = get_int(); // get table index 
64C8:  CALL   29D2
64CC:  MOVFF  01,1D2
....................       value = get_int(); // get value to put into table 
64D0:  CALL   29D2
64D4:  MOVFF  02,205
64D8:  MOVFF  01,204
....................       switch (toupper(idx)) 
....................         { 
64DC:  MOVLB  1
64DE:  MOVF   xD0,W
64E0:  SUBLW  60
64E2:  BC    64F0
64E4:  MOVF   xD0,W
64E6:  SUBLW  7A
64E8:  BNC   64F0
64EA:  MOVF   xD0,W
64EC:  ANDLW  DF
64EE:  BRA    64F2
64F0:  MOVF   xD0,W
64F2:  XORLW  4E
64F4:  MOVLB  0
64F6:  BZ    64FE
64F8:  XORLW  1E
64FA:  BZ    6524
64FC:  BRA    6548
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
64FE:  MOVLB  1
6500:  MOVF   xD2,W
6502:  SUBLW  02
6504:  BNC   6520
....................             { 
....................             setup.negative_voltage[addr] = value; 
6506:  BCF    FD8.0
6508:  RLCF   xD2,W
650A:  CLRF   03
650C:  ADDLW  BE
650E:  MOVWF  FE9
6510:  MOVLW  00
6512:  ADDWFC 03,W
6514:  MOVWF  FEA
6516:  MOVFF  205,FEC
651A:  MOVF   FED,F
651C:  MOVFF  204,FEF
....................             } 
....................           break; 
6520:  MOVLB  0
6522:  BRA    6548
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
6524:  MOVLB  1
6526:  MOVF   xD2,W
6528:  SUBLW  14
652A:  BNC   6546
....................             { 
....................             setup.power_in[addr] = value; 
652C:  BCF    FD8.0
652E:  RLCF   xD2,W
6530:  CLRF   03
6532:  ADDLW  C4
6534:  MOVWF  FE9
6536:  MOVLW  00
6538:  ADDWFC 03,W
653A:  MOVWF  FEA
653C:  MOVFF  205,FEC
6540:  MOVF   FED,F
6542:  MOVFF  204,FEF
....................             } 
....................           break; 
6546:  MOVLB  0
....................         } 
....................       break; 
6548:  BRA    66E4
....................     case 'S': 
....................       device = get_char(); 
654A:  CALL   2916
654E:  MOVFF  01,1D1
....................       addr = get_hex(); 
6552:  CALL   5CBA
6556:  MOVFF  00,1D2
....................       data = get_hex(); 
655A:  CALL   5CBA
655E:  MOVFF  00,1D3
....................       switch (toupper(device)) 
....................         { 
6562:  MOVLB  1
6564:  MOVF   xD1,W
6566:  SUBLW  60
6568:  BC    6576
656A:  MOVF   xD1,W
656C:  SUBLW  7A
656E:  BNC   6576
6570:  MOVF   xD1,W
6572:  ANDLW  DF
6574:  BRA    6578
6576:  MOVF   xD1,W
6578:  XORLW  46
657A:  MOVLB  0
657C:  BZ    6588
657E:  XORLW  02
6580:  BZ    65BA
6582:  XORLW  12
6584:  BZ    65DE
6586:  BRA    65EE
....................         case 'F': 
....................           buf[0] = addr; 
6588:  MOVFF  1D2,1D4
....................           buf[1] = data; 
658C:  MOVFF  1D3,1D5
....................           FPGA_image[addr] = data; 
6590:  CLRF   03
6592:  MOVLB  1
6594:  MOVF   xD2,W
6596:  ADDLW  44
6598:  MOVWF  FE9
659A:  MOVLW  01
659C:  ADDWFC 03,W
659E:  MOVWF  FEA
65A0:  MOVFF  1D3,FEF
....................           send_FPGA_command(2, buf); 
65A4:  MOVLW  02
65A6:  MOVLB  2
65A8:  MOVWF  x43
65AA:  MOVLW  01
65AC:  MOVWF  x45
65AE:  MOVLW  D4
65B0:  MOVWF  x44
65B2:  MOVLB  0
65B4:  CALL   1654
....................           break; 
65B8:  BRA    65EE
....................         case 'D': 
....................           D2A_image[addr] = data; 
65BA:  CLRF   03
65BC:  MOVLB  1
65BE:  MOVF   xD2,W
65C0:  ADDLW  64
65C2:  MOVWF  FE9
65C4:  MOVLW  01
65C6:  ADDWFC 03,W
65C8:  MOVWF  FEA
65CA:  MOVFF  1D3,FEF
....................           write_D2A(addr, data); 
65CE:  MOVFF  1D2,206
65D2:  MOVFF  1D3,207
65D6:  MOVLB  0
65D8:  CALL   5754
....................           break; 
65DC:  BRA    65EE
....................         case 'V': 
....................           allow_write = 2975; 
65DE:  MOVLW  0B
65E0:  MOVLB  1
65E2:  MOVWF  x02
65E4:  MOVLW  9F
65E6:  MOVWF  x01
....................           write_setup(); 
65E8:  MOVLB  0
65EA:  CALL   30E6
....................           break; 
....................         } 
....................       break; 
65EE:  BRA    66E4
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
65F0:  CALL   2916
65F4:  MOVFF  02,207
65F8:  MOVFF  01,206
65FC:  MOVLB  2
65FE:  MOVF   x07,F
6600:  BNZ   6608
6602:  MOVF   x06,W
6604:  SUBLW  60
6606:  BC    6618
6608:  MOVF   x07,F
660A:  BNZ   6618
660C:  MOVF   x06,W
660E:  SUBLW  7A
6610:  BNC   6618
6612:  MOVF   x06,W
6614:  ANDLW  DF
6616:  BRA    661A
6618:  MOVF   x06,W
661A:  SUBLW  54
661C:  BNZ   66B4
....................         if (toupper(get_char()) == 'C') 
661E:  MOVLB  0
6620:  CALL   2916
6624:  MOVFF  02,207
6628:  MOVFF  01,206
662C:  MOVLB  2
662E:  MOVF   x07,F
6630:  BNZ   6638
6632:  MOVF   x06,W
6634:  SUBLW  60
6636:  BC    6648
6638:  MOVF   x07,F
663A:  BNZ   6648
663C:  MOVF   x06,W
663E:  SUBLW  7A
6640:  BNC   6648
6642:  MOVF   x06,W
6644:  ANDLW  DF
6646:  BRA    664A
6648:  MOVF   x06,W
664A:  SUBLW  43
664C:  BNZ   66B4
....................           if (toupper(get_char()) == 'C') 
664E:  MOVLB  0
6650:  CALL   2916
6654:  MOVFF  02,207
6658:  MOVFF  01,206
665C:  MOVLB  2
665E:  MOVF   x07,F
6660:  BNZ   6668
6662:  MOVF   x06,W
6664:  SUBLW  60
6666:  BC    6678
6668:  MOVF   x07,F
666A:  BNZ   6678
666C:  MOVF   x06,W
666E:  SUBLW  7A
6670:  BNC   6678
6672:  MOVF   x06,W
6674:  ANDLW  DF
6676:  BRA    667A
6678:  MOVF   x06,W
667A:  SUBLW  43
667C:  BNZ   66B4
....................             if (toupper(get_char()) == 'P') 
667E:  MOVLB  0
6680:  CALL   2916
6684:  MOVFF  02,207
6688:  MOVFF  01,206
668C:  MOVLB  2
668E:  MOVF   x07,F
6690:  BNZ   6698
6692:  MOVF   x06,W
6694:  SUBLW  60
6696:  BC    66A8
6698:  MOVF   x07,F
669A:  BNZ   66A8
669C:  MOVF   x06,W
669E:  SUBLW  7A
66A0:  BNC   66A8
66A2:  MOVF   x06,W
66A4:  ANDLW  DF
66A6:  BRA    66AA
66A8:  MOVF   x06,W
66AA:  SUBLW  50
66AC:  BNZ   66B4
....................               ttccp = 1; 
66AE:  MOVLW  01
66B0:  MOVLB  1
66B2:  MOVWF  x42
....................       break; 
66B4:  MOVLB  0
66B6:  BRA    66E4
....................     case '1': // year 
....................       setup.year = get_int(); 
66B8:  CALL   29D2
66BC:  MOVFF  02,EF
66C0:  MOVFF  01,EE
....................       break; 
66C4:  BRA    66E4
....................     case '2': // week 
....................       setup.week = get_int(); 
66C6:  CALL   29D2
66CA:  MOVFF  01,F0
....................       break; 
66CE:  BRA    66E4
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
66D0:  CALL   29D2
66D4:  MOVFF  02,F2
66D8:  MOVFF  01,F1
....................       break; 
66DC:  BRA    66E4
....................     default: 
....................       return 0; 
66DE:  MOVLW  00
66E0:  MOVWF  01
66E2:  BRA    66E8
....................     } 
....................   return 0; 
66E4:  MOVLW  00
66E6:  MOVWF  01
....................   } 
66E8:  GOTO   6776 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
31DC:  CALL   29D2
31E0:  MOVFF  01,00
31E4:  MOVFF  02,01
31E8:  CLRF   02
31EA:  CLRF   03
31EC:  MOVFF  03,231
31F0:  MOVFF  02,230
31F4:  MOVFF  01,22F
31F8:  MOVFF  00,22E
....................             get_char(); 
31FC:  CALL   2916
....................             sub = get_int(); 
3200:  CALL   29D2
3204:  MOVFF  01,00
3208:  MOVFF  02,01
320C:  CLRF   02
320E:  CLRF   03
3210:  MOVFF  03,235
3214:  MOVFF  02,234
3218:  MOVFF  01,233
321C:  MOVFF  00,232
....................  
....................             if (peek_char() == '.') 
3220:  CALL   28F8
3224:  MOVFF  02,237
3228:  MOVFF  01,236
322C:  MOVLB  2
322E:  MOVF   01,W
3230:  SUBLW  2E
3232:  BNZ   3270
3234:  MOVF   x37,F
3236:  BNZ   3270
....................               { 
....................               get_char(); 
3238:  MOVLB  0
323A:  CALL   2916
....................               sub = get_int(); 
323E:  CALL   29D2
3242:  MOVFF  01,00
3246:  MOVFF  02,01
324A:  CLRF   02
324C:  CLRF   03
324E:  MOVFF  03,235
3252:  MOVFF  02,234
3256:  MOVFF  01,233
325A:  MOVFF  00,232
....................               bitrate += sub; 
325E:  MOVLB  2
3260:  MOVF   x32,W
3262:  ADDWF  x2E,F
3264:  MOVF   x33,W
3266:  ADDWFC x2F,F
3268:  MOVF   x34,W
326A:  ADDWFC x30,F
326C:  MOVF   x35,W
326E:  ADDWFC x31,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
3270:  MOVFF  231,24B
3274:  MOVFF  230,24A
3278:  MOVFF  22F,249
327C:  MOVFF  22E,248
3280:  CLRF   x4F
3282:  CLRF   x4E
3284:  CLRF   x4D
3286:  MOVLW  64
3288:  MOVWF  x4C
328A:  MOVLB  0
328C:  CALL   11AC
3290:  MOVLB  2
3292:  MOVF   x32,W
3294:  ADDWF  00,W
3296:  MOVLB  0
3298:  MOVWF  xAB
329A:  MOVLB  2
329C:  MOVF   x33,W
329E:  ADDWFC 01,W
32A0:  MOVLB  0
32A2:  MOVWF  xAC
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
32A4:  CALL   1B1C
....................  
....................   } 
32A8:  GOTO   48C2 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n\n"); 
*
2A98:  MOVLW  0D
2A9A:  MOVLB  2
2A9C:  MOVWF  x2E
2A9E:  MOVLW  0A
2AA0:  MOVWF  x2F
2AA2:  MOVWF  x30
2AA4:  CLRF   x31
2AA6:  MOVLW  02
2AA8:  MOVWF  x6D
2AAA:  MOVLW  2E
2AAC:  MOVWF  x6C
2AAE:  MOVLB  0
2AB0:  CALL   20D6
....................   COM1_send_str("DS <data soure><cr>  \tSet data sourse (0-1)\r\n"); 
2AB4:  MOVLW  02
2AB6:  MOVWF  FEA
2AB8:  MOVLW  2E
2ABA:  MOVWF  FE9
2ABC:  MOVWF  01
2ABE:  CLRF   FF7
2AC0:  MOVLW  00
2AC2:  CALL   03A6
2AC6:  TBLRD*-
2AC8:  TBLRD*+
2ACA:  MOVFF  FF5,FEE
2ACE:  DECFSZ 01,F
2AD0:  BRA    2AC8
2AD2:  MOVLW  02
2AD4:  MOVLB  2
2AD6:  MOVWF  x6D
2AD8:  MOVLW  2E
2ADA:  MOVWF  x6C
2ADC:  MOVLB  0
2ADE:  CALL   20D6
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2AE2:  MOVLW  02
2AE4:  MOVWF  FEA
2AE6:  MOVLW  2E
2AE8:  MOVWF  FE9
2AEA:  MOVLW  33
2AEC:  MOVWF  01
2AEE:  CLRF   FF7
2AF0:  MOVLW  00
2AF2:  CALL   03E4
2AF6:  TBLRD*-
2AF8:  TBLRD*+
2AFA:  MOVFF  FF5,FEE
2AFE:  DECFSZ 01,F
2B00:  BRA    2AF8
2B02:  MOVLW  02
2B04:  MOVLB  2
2B06:  MOVWF  x6D
2B08:  MOVLW  2E
2B0A:  MOVWF  x6C
2B0C:  MOVLB  0
2B0E:  CALL   20D6
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2B12:  MOVLW  02
2B14:  MOVWF  FEA
2B16:  MOVLW  2E
2B18:  MOVWF  FE9
2B1A:  MOVLW  31
2B1C:  MOVWF  01
2B1E:  CLRF   FF7
2B20:  MOVLW  00
2B22:  CALL   0428
2B26:  TBLRD*-
2B28:  TBLRD*+
2B2A:  MOVFF  FF5,FEE
2B2E:  DECFSZ 01,F
2B30:  BRA    2B28
2B32:  MOVLW  02
2B34:  MOVLB  2
2B36:  MOVWF  x6D
2B38:  MOVLW  2E
2B3A:  MOVWF  x6C
2B3C:  MOVLB  0
2B3E:  CALL   20D6
....................   COM1_send_str("RP <power higth><cr>  \tSet power higth (0-1)\r\n"); 
2B42:  MOVLW  02
2B44:  MOVWF  FEA
2B46:  MOVLW  2E
2B48:  MOVWF  FE9
2B4A:  MOVLW  2F
2B4C:  MOVWF  01
2B4E:  CLRF   FF7
2B50:  MOVLW  00
2B52:  CALL   046A
2B56:  TBLRD*-
2B58:  TBLRD*+
2B5A:  MOVFF  FF5,FEE
2B5E:  DECFSZ 01,F
2B60:  BRA    2B58
2B62:  MOVLW  02
2B64:  MOVLB  2
2B66:  MOVWF  x6D
2B68:  MOVLW  2E
2B6A:  MOVWF  x6C
2B6C:  MOVLB  0
2B6E:  CALL   20D6
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2B72:  MOVLW  02
2B74:  MOVWF  FEA
2B76:  MOVLW  2E
2B78:  MOVWF  FE9
2B7A:  MOVLW  31
2B7C:  MOVWF  01
2B7E:  CLRF   FF7
2B80:  MOVLW  00
2B82:  CALL   04AA
2B86:  TBLRD*-
2B88:  TBLRD*+
2B8A:  MOVFF  FF5,FEE
2B8E:  DECFSZ 01,F
2B90:  BRA    2B88
2B92:  MOVLW  02
2B94:  MOVLB  2
2B96:  MOVWF  x6D
2B98:  MOVLW  2E
2B9A:  MOVWF  x6C
2B9C:  MOVLB  0
2B9E:  CALL   20D6
....................   COM1_send_str("RA <randomizer><cr>  \tset with/without randomizer (0-1)\r\n"); 
2BA2:  MOVLW  02
2BA4:  MOVWF  FEA
2BA6:  MOVLW  2E
2BA8:  MOVWF  FE9
2BAA:  MOVLW  3A
2BAC:  MOVWF  01
2BAE:  CLRF   FF7
2BB0:  MOVLW  00
2BB2:  CALL   04EC
2BB6:  TBLRD*-
2BB8:  TBLRD*+
2BBA:  MOVFF  FF5,FEE
2BBE:  DECFSZ 01,F
2BC0:  BRA    2BB8
2BC2:  MOVLW  02
2BC4:  MOVLB  2
2BC6:  MOVWF  x6D
2BC8:  MOVLW  2E
2BCA:  MOVWF  x6C
2BCC:  MOVLB  0
2BCE:  CALL   20D6
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2BD2:  MOVLW  02
2BD4:  MOVWF  FEA
2BD6:  MOVLW  2E
2BD8:  MOVWF  FE9
2BDA:  MOVLW  35
2BDC:  MOVWF  01
2BDE:  CLRF   FF7
2BE0:  MOVLW  00
2BE2:  CALL   0536
2BE6:  TBLRD*-
2BE8:  TBLRD*+
2BEA:  MOVFF  FF5,FEE
2BEE:  DECFSZ 01,F
2BF0:  BRA    2BE8
2BF2:  MOVLW  02
2BF4:  MOVLB  2
2BF6:  MOVWF  x6D
2BF8:  MOVLW  2E
2BFA:  MOVWF  x6C
2BFC:  MOVLB  0
2BFE:  CALL   20D6
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2C02:  MOVLW  02
2C04:  MOVWF  FEA
2C06:  MOVLW  2E
2C08:  MOVWF  FE9
2C0A:  MOVLW  21
2C0C:  MOVWF  01
2C0E:  CLRF   FF7
2C10:  MOVLW  00
2C12:  CALL   057C
2C16:  TBLRD*-
2C18:  TBLRD*+
2C1A:  MOVFF  FF5,FEE
2C1E:  DECFSZ 01,F
2C20:  BRA    2C18
2C22:  MOVLW  02
2C24:  MOVLB  2
2C26:  MOVWF  x6D
2C28:  MOVLW  2E
2C2A:  MOVWF  x6C
2C2C:  MOVLB  0
2C2E:  CALL   20D6
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2C32:  MOVLW  02
2C34:  MOVWF  FEA
2C36:  MOVLW  2E
2C38:  MOVWF  FE9
2C3A:  MOVLW  32
2C3C:  MOVWF  01
2C3E:  CLRF   FF7
2C40:  MOVLW  00
2C42:  CALL   05AE
2C46:  TBLRD*-
2C48:  TBLRD*+
2C4A:  MOVFF  FF5,FEE
2C4E:  DECFSZ 01,F
2C50:  BRA    2C48
2C52:  MOVLW  02
2C54:  MOVLB  2
2C56:  MOVWF  x6D
2C58:  MOVLW  2E
2C5A:  MOVWF  x6C
2C5C:  MOVLB  0
2C5E:  CALL   20D6
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2C62:  MOVLW  02
2C64:  MOVWF  FEA
2C66:  MOVLW  2E
2C68:  MOVWF  FE9
2C6A:  MOVLW  39
2C6C:  MOVWF  01
2C6E:  CLRF   FF7
2C70:  MOVLW  00
2C72:  CALL   05F0
2C76:  TBLRD*-
2C78:  TBLRD*+
2C7A:  MOVFF  FF5,FEE
2C7E:  DECFSZ 01,F
2C80:  BRA    2C78
2C82:  MOVLW  02
2C84:  MOVLB  2
2C86:  MOVWF  x6D
2C88:  MOVLW  2E
2C8A:  MOVWF  x6C
2C8C:  MOVLB  0
2C8E:  CALL   20D6
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2C92:  MOVLW  02
2C94:  MOVWF  FEA
2C96:  MOVLW  2E
2C98:  MOVWF  FE9
2C9A:  MOVLW  31
2C9C:  MOVWF  01
2C9E:  CLRF   FF7
2CA0:  MOVLW  00
2CA2:  CALL   063A
2CA6:  TBLRD*-
2CA8:  TBLRD*+
2CAA:  MOVFF  FF5,FEE
2CAE:  DECFSZ 01,F
2CB0:  BRA    2CA8
2CB2:  MOVLW  02
2CB4:  MOVLB  2
2CB6:  MOVWF  x6D
2CB8:  MOVLW  2E
2CBA:  MOVWF  x6C
2CBC:  MOVLB  0
2CBE:  CALL   20D6
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2CC2:  MOVLW  02
2CC4:  MOVWF  FEA
2CC6:  MOVLW  2E
2CC8:  MOVWF  FE9
2CCA:  MOVLW  35
2CCC:  MOVWF  01
2CCE:  CLRF   FF7
2CD0:  MOVLW  00
2CD2:  CALL   067C
2CD6:  TBLRD*-
2CD8:  TBLRD*+
2CDA:  MOVFF  FF5,FEE
2CDE:  DECFSZ 01,F
2CE0:  BRA    2CD8
2CE2:  MOVLW  02
2CE4:  MOVLB  2
2CE6:  MOVWF  x6D
2CE8:  MOVLW  2E
2CEA:  MOVWF  x6C
2CEC:  MOVLB  0
2CEE:  CALL   20D6
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2CF2:  MOVLW  02
2CF4:  MOVWF  FEA
2CF6:  MOVLW  2E
2CF8:  MOVWF  FE9
2CFA:  MOVLW  3B
2CFC:  MOVWF  01
2CFE:  CLRF   FF7
2D00:  MOVLW  00
2D02:  CALL   06C2
2D06:  TBLRD*-
2D08:  TBLRD*+
2D0A:  MOVFF  FF5,FEE
2D0E:  DECFSZ 01,F
2D10:  BRA    2D08
2D12:  MOVLW  02
2D14:  MOVLB  2
2D16:  MOVWF  x6D
2D18:  MOVLW  2E
2D1A:  MOVWF  x6C
2D1C:  MOVLB  0
2D1E:  CALL   20D6
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2D22:  MOVLW  02
2D24:  MOVWF  FEA
2D26:  MOVLW  2E
2D28:  MOVWF  FE9
2D2A:  MOVLW  3B
2D2C:  MOVWF  01
2D2E:  CLRF   FF7
2D30:  MOVLW  00
2D32:  CALL   070E
2D36:  TBLRD*-
2D38:  TBLRD*+
2D3A:  MOVFF  FF5,FEE
2D3E:  DECFSZ 01,F
2D40:  BRA    2D38
2D42:  MOVLW  02
2D44:  MOVLB  2
2D46:  MOVWF  x6D
2D48:  MOVLW  2E
2D4A:  MOVWF  x6C
2D4C:  MOVLB  0
2D4E:  CALL   20D6
....................   COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2D52:  MOVLW  02
2D54:  MOVWF  FEA
2D56:  MOVLW  2E
2D58:  MOVWF  FE9
2D5A:  MOVLW  2F
2D5C:  MOVWF  01
2D5E:  CLRF   FF7
2D60:  MOVLW  00
2D62:  CALL   075A
2D66:  TBLRD*-
2D68:  TBLRD*+
2D6A:  MOVFF  FF5,FEE
2D6E:  DECFSZ 01,F
2D70:  BRA    2D68
2D72:  MOVLW  02
2D74:  MOVLB  2
2D76:  MOVWF  x6D
2D78:  MOVLW  2E
2D7A:  MOVWF  x6C
2D7C:  MOVLB  0
2D7E:  CALL   20D6
....................   COM1_send_str("UT <UART Time><cr>  \tSet the stop time current 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
2D82:  MOVLW  02
2D84:  MOVWF  FEA
2D86:  MOVLW  2E
2D88:  MOVWF  FE9
2D8A:  MOVLW  3C
2D8C:  MOVWF  01
2D8E:  CLRF   FF7
2D90:  MOVLW  00
2D92:  CALL   079A
2D96:  TBLRD*-
2D98:  TBLRD*+
2D9A:  MOVFF  FF5,FEE
2D9E:  DECFSZ 01,F
2DA0:  BRA    2D98
2DA2:  MOVLW  02
2DA4:  MOVLB  2
2DA6:  MOVWF  x6D
2DA8:  MOVLW  2E
2DAA:  MOVWF  x6C
2DAC:  MOVLB  0
2DAE:  CALL   20D6
....................   COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
2DB2:  MOVLW  02
2DB4:  MOVWF  FEA
2DB6:  MOVLW  2E
2DB8:  MOVWF  FE9
2DBA:  MOVLW  2D
2DBC:  MOVWF  01
2DBE:  CLRF   FF7
2DC0:  MOVLW  00
2DC2:  CALL   07E6
2DC6:  TBLRD*-
2DC8:  TBLRD*+
2DCA:  MOVFF  FF5,FEE
2DCE:  DECFSZ 01,F
2DD0:  BRA    2DC8
2DD2:  MOVLW  02
2DD4:  MOVLB  2
2DD6:  MOVWF  x6D
2DD8:  MOVLW  2E
2DDA:  MOVWF  x6C
2DDC:  MOVLB  0
2DDE:  CALL   20D6
....................   COM1_send_str("BG <UART Change><cr>  \tSet Block per second (1-20)\r\n");// VERSION 3.3  23.03.2016 
2DE2:  MOVLW  02
2DE4:  MOVWF  FEA
2DE6:  MOVLW  2E
2DE8:  MOVWF  FE9
2DEA:  MOVLW  35
2DEC:  MOVWF  01
2DEE:  CLRF   FF7
2DF0:  MOVLW  00
2DF2:  CALL   0824
2DF6:  TBLRD*-
2DF8:  TBLRD*+
2DFA:  MOVFF  FF5,FEE
2DFE:  DECFSZ 01,F
2E00:  BRA    2DF8
2E02:  MOVLW  02
2E04:  MOVLB  2
2E06:  MOVWF  x6D
2E08:  MOVLW  2E
2E0A:  MOVWF  x6C
2E0C:  MOVLB  0
2E0E:  CALL   20D6
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2E12:  MOVLW  02
2E14:  MOVWF  FEA
2E16:  MOVLW  2E
2E18:  MOVWF  FE9
2E1A:  MOVLW  25
2E1C:  MOVWF  01
2E1E:  CLRF   FF7
2E20:  MOVLW  00
2E22:  CALL   086A
2E26:  TBLRD*-
2E28:  TBLRD*+
2E2A:  MOVFF  FF5,FEE
2E2E:  DECFSZ 01,F
2E30:  BRA    2E28
2E32:  MOVLW  02
2E34:  MOVLB  2
2E36:  MOVWF  x6D
2E38:  MOVLW  2E
2E3A:  MOVWF  x6C
2E3C:  MOVLB  0
2E3E:  CALL   20D6
....................   COM1_send_str("\r\n"); 
2E42:  MOVLW  0D
2E44:  MOVLB  2
2E46:  MOVWF  x2E
2E48:  MOVLW  0A
2E4A:  MOVWF  x2F
2E4C:  CLRF   x30
2E4E:  MOVLW  02
2E50:  MOVWF  x6D
2E52:  MOVLW  2E
2E54:  MOVWF  x6C
2E56:  MOVLB  0
2E58:  CALL   20D6
....................   } 
2E5C:  GOTO   55B2 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
360A:  MOVLB  1
360C:  CLRF   xC2
360E:  CLRF   xEC
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, bitrate, sub; 
....................   float temp; 
....................   UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
....................   chr = 2; 
3610:  MOVLW  02
3612:  MOVWF  xC3
....................   comm_ptr = 0; 
3614:  CLRF   x41
....................     if (peek_char() == ':') // addressed message? 
3616:  MOVLB  0
3618:  CALL   28F8
361C:  MOVFF  02,22F
3620:  MOVFF  01,22E
3624:  MOVLB  2
3626:  MOVF   01,W
3628:  SUBLW  3A
362A:  BNZ   366A
362C:  MOVF   x2F,F
362E:  BNZ   366A
....................     { 
....................     get_char(); // skip ':' 
3630:  MOVLB  0
3632:  CALL   2916
....................     addr = get_int(); 
3636:  CALL   29D2
363A:  MOVFF  01,1FB
....................     if (get_char() != ':') 
363E:  CALL   2916
3642:  MOVFF  02,22F
3646:  MOVFF  01,22E
364A:  MOVLB  2
364C:  MOVF   01,W
364E:  SUBLW  3A
3650:  BNZ   3656
3652:  MOVF   x2F,F
3654:  BNZ   3656
....................       break; 
....................     if (setup.unit_id != addr) 
3656:  MOVLB  1
3658:  MOVF   xFB,W
365A:  MOVLB  0
365C:  SUBWF  xF1,W
365E:  BNZ   3664
3660:  MOVF   xF2,F
3662:  BZ    3668
....................       goto aaa; 
3664:  GOTO   55B2
3668:  MOVLB  2
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
366A:  MOVLB  0
366C:  CALL   2916
3670:  MOVFF  02,22F
3674:  MOVFF  01,22E
3678:  MOVLB  2
367A:  MOVF   x2F,F
367C:  BNZ   3684
367E:  MOVF   x2E,W
3680:  SUBLW  60
3682:  BC    3694
3684:  MOVF   x2F,F
3686:  BNZ   3694
3688:  MOVF   x2E,W
368A:  SUBLW  7A
368C:  BNC   3694
368E:  MOVF   x2E,W
3690:  ANDLW  DF
3692:  BRA    3696
3694:  MOVF   x2E,W
3696:  MOVLB  1
3698:  MOVWF  xED
....................   c2 = toupper(get_char()); 
369A:  MOVLB  0
369C:  CALL   2916
36A0:  MOVFF  02,22F
36A4:  MOVFF  01,22E
36A8:  MOVLB  2
36AA:  MOVF   x2F,F
36AC:  BNZ   36B4
36AE:  MOVF   x2E,W
36B0:  SUBLW  60
36B2:  BC    36C4
36B4:  MOVF   x2F,F
36B6:  BNZ   36C4
36B8:  MOVF   x2E,W
36BA:  SUBLW  7A
36BC:  BNC   36C4
36BE:  MOVF   x2E,W
36C0:  ANDLW  DF
36C2:  BRA    36C6
36C4:  MOVF   x2E,W
36C6:  MOVLB  1
36C8:  MOVWF  xEE
....................   skip_spc(); 
36CA:  MOVLB  0
36CC:  CALL   2936
....................  
....................   if (peek_char() == 13) // is this a query? 
36D0:  CALL   28F8
36D4:  MOVFF  02,22F
36D8:  MOVFF  01,22E
36DC:  MOVLB  2
36DE:  MOVF   01,W
36E0:  SUBLW  0D
36E2:  BNZ   36F0
36E4:  MOVF   x2F,F
36E6:  BNZ   36F0
....................     query = 1; // YES 
36E8:  MOVLW  01
36EA:  MOVLB  1
36EC:  MOVWF  xEC
36EE:  MOVLB  2
....................   switch (c1) 
....................     { 
36F0:  MOVLB  1
36F2:  MOVF   xED,W
36F4:  XORLW  4C
36F6:  MOVLB  0
36F8:  BZ    3770
36FA:  XORLW  68
36FC:  BZ    37B4
36FE:  XORLW  6C
3700:  BTFSC  FD8.2
3702:  BRA    3812
3704:  XORLW  0E
3706:  BTFSC  FD8.2
3708:  BRA    385A
370A:  XORLW  0B
370C:  BTFSC  FD8.2
370E:  BRA    3952
3710:  XORLW  09
3712:  BTFSC  FD8.2
3714:  BRA    3A58
3716:  XORLW  16
3718:  BTFSC  FD8.2
371A:  BRA    3D66
371C:  XORLW  05
371E:  BTFSC  FD8.2
3720:  GOTO   4396
3724:  XORLW  04
3726:  BTFSC  FD8.2
3728:  GOTO   43B4
372C:  XORLW  06
372E:  BTFSC  FD8.2
3730:  GOTO   43F6
3734:  XORLW  17
3736:  BTFSC  FD8.2
3738:  GOTO   4600
373C:  XORLW  0B
373E:  BTFSC  FD8.2
3740:  GOTO   4754
3744:  XORLW  1D
3746:  BTFSC  FD8.2
3748:  GOTO   48CE
374C:  XORLW  02
374E:  BTFSC  FD8.2
3750:  GOTO   48EA
3754:  XORLW  15
3756:  BTFSC  FD8.2
3758:  GOTO   4BB2
375C:  XORLW  04
375E:  BTFSC  FD8.2
3760:  GOTO   4DC0
3764:  XORLW  16
3766:  BTFSC  FD8.2
3768:  GOTO   5072
376C:  GOTO   5574
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
3770:  MOVLB  1
3772:  MOVF   xEE,W
3774:  XORLW  49
3776:  MOVLB  0
3778:  BZ    3780
377A:  XORLW  06
377C:  BZ    37AA
377E:  BRA    37B0
....................         case 'I':               // login 
....................           val = get_int(); 
3780:  CALL   29D2
3784:  MOVFF  02,20D
3788:  MOVFF  01,20C
....................           if (val == 17592) 
378C:  MOVLB  2
378E:  MOVF   x0C,W
3790:  SUBLW  B8
3792:  BNZ   37A0
3794:  MOVF   x0D,W
3796:  SUBLW  44
3798:  BNZ   37A0
....................             ttccp_login = 1; 
379A:  MOVLW  01
379C:  MOVLB  1
379E:  MOVWF  x2C
.................... 			debug_mode = 1; 
37A0:  MOVLW  01
37A2:  MOVLB  1
37A4:  MOVWF  x43
....................           break; 
37A6:  MOVLB  0
37A8:  BRA    37B0
....................         case 'O':              // logout 
....................           ttccp_login = 0; 
37AA:  MOVLB  1
37AC:  CLRF   x2C
....................           break; 
37AE:  MOVLB  0
....................         } 
....................       break; 
37B0:  GOTO   55B2
....................     case '$': 
....................       if (!ttccp_login) break; 
37B4:  MOVLB  1
37B6:  MOVF   x2C,F
37B8:  BNZ   37C2
37BA:  MOVLB  0
37BC:  GOTO   55B2
37C0:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
37C2:  MOVF   xEE,W
37C4:  SUBLW  52
37C6:  BNZ   380C
....................         { 
....................         val = get_int(); 
37C8:  MOVLB  0
37CA:  CALL   29D2
37CE:  MOVFF  02,20D
37D2:  MOVFF  01,20C
....................           if (val != 17591) 
37D6:  MOVLB  2
37D8:  MOVF   x0C,W
37DA:  SUBLW  B7
37DC:  BNZ   37E4
37DE:  MOVF   x0D,W
37E0:  SUBLW  44
37E2:  BZ    37E8
....................             return; 
37E4:  GOTO   55B4
....................         ttccp = 0; 
37E8:  MOVLB  1
37EA:  CLRF   x42
....................         COM1_send_str("\r\n\n*"); 
37EC:  MOVLW  0D
37EE:  MOVLB  2
37F0:  MOVWF  x10
37F2:  MOVLW  0A
37F4:  MOVWF  x11
37F6:  MOVWF  x12
37F8:  MOVLW  2A
37FA:  MOVWF  x13
37FC:  CLRF   x14
37FE:  MOVLW  02
3800:  MOVWF  x6D
3802:  MOVLW  10
3804:  MOVWF  x6C
3806:  MOVLB  0
3808:  CALL   20D6
....................         } 
....................       break; 
380C:  MOVLB  0
380E:  GOTO   55B2
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
3812:  MOVLB  1
3814:  MOVF   x2C,F
3816:  BNZ   3820
3818:  MOVLB  0
381A:  GOTO   55B2
381E:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r"); 
3820:  MOVLW  02
3822:  MOVWF  FEA
3824:  MOVLW  15
3826:  MOVWF  FE9
3828:  MOVLW  0F
382A:  MOVWF  01
382C:  CLRF   FF7
382E:  MOVLW  00
3830:  MOVLB  0
3832:  CALL   08A0
3836:  TBLRD*-
3838:  TBLRD*+
383A:  MOVFF  FF5,FEE
383E:  DECFSZ 01,F
3840:  BRA    3838
3842:  MOVLW  02
3844:  MOVLB  2
3846:  MOVWF  x6D
3848:  MOVLW  15
384A:  MOVWF  x6C
384C:  MOVLB  0
384E:  CALL   20D6
....................       list_help(); 
3852:  GOTO   2A98
....................     break; 
3856:  GOTO   55B2
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
385A:  MOVLB  1
385C:  MOVF   x2C,F
385E:  BNZ   3868
3860:  MOVLB  0
3862:  GOTO   55B2
3866:  MOVLB  1
....................       switch (c2) 
....................         { 
3868:  MOVF   xEE,W
386A:  XORLW  52
386C:  MOVLB  0
386E:  BZ    3872
3870:  BRA    394E
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
3872:  MOVLB  1
3874:  MOVF   xEE,W
3876:  SUBLW  52
3878:  BNZ   391C
....................             { 
....................             if (query) 
387A:  MOVF   xEC,F
387C:  BZ    38CA
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
387E:  MOVLW  01
3880:  MOVWF  xA4
3882:  MOVLW  C4
3884:  MOVWF  xA3
3886:  MOVLW  E0
3888:  MOVWF  FF6
388A:  MOVLW  0B
388C:  MOVWF  FF7
388E:  MOVLW  03
3890:  MOVLB  2
3892:  MOVWF  x34
3894:  MOVLB  0
3896:  CALL   2E82
389A:  MOVLW  10
389C:  MOVWF  FE9
389E:  MOVFF  BA,235
38A2:  MOVFF  B9,234
38A6:  CALL   2EAA
38AA:  MOVLW  0D
38AC:  MOVLB  2
38AE:  MOVWF  x3D
38B0:  MOVLB  0
38B2:  CALL   2E60
....................               COM1_send_str(buf); 
38B6:  MOVLW  01
38B8:  MOVLB  2
38BA:  MOVWF  x6D
38BC:  MOVLW  C4
38BE:  MOVWF  x6C
38C0:  MOVLB  0
38C2:  CALL   20D6
....................               } 
....................               else 
38C6:  BRA    3918
38C8:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
38CA:  MOVLB  0
38CC:  CALL   2F66
38D0:  MOVLB  1
38D2:  CLRF   xFF
38D4:  CLRF   xFE
38D6:  MOVFF  02,1FD
38DA:  MOVFF  01,1FC
....................                 setup.frequency = freq; 
38DE:  MOVFF  1FD,BA
38E2:  MOVFF  1FC,B9
....................                 PLL_compute_freq_parameters(freq); 
38E6:  MOVFF  1FD,22F
38EA:  MOVFF  1FC,22E
38EE:  MOVFF  1FD,237
38F2:  MOVFF  1FC,236
38F6:  MOVLB  0
38F8:  CALL   129C
....................                 PLL_update(); 
38FC:  CALL   156C
.................... 				delay_ms(50); 
3900:  MOVLW  32
3902:  MOVLB  2
3904:  MOVWF  x43
3906:  MOVLB  0
3908:  CALL   0EAA
.................... 				PLL_update(); 
390C:  CALL   156C
....................                 ret = 1; 
3910:  MOVLW  01
3912:  MOVLB  1
3914:  MOVWF  xC2
3916:  MOVLB  0
....................               } 
....................             } 
....................             else 
3918:  BRA    394E
391A:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
391C:  MOVLW  02
391E:  MOVWF  FEA
3920:  MOVLW  15
3922:  MOVWF  FE9
3924:  MOVLW  0A
3926:  MOVWF  01
3928:  CLRF   FF7
392A:  MOVLW  00
392C:  MOVLB  0
392E:  CALL   08C0
3932:  TBLRD*-
3934:  TBLRD*+
3936:  MOVFF  FF5,FEE
393A:  DECFSZ 01,F
393C:  BRA    3934
393E:  MOVLW  02
3940:  MOVLB  2
3942:  MOVWF  x6D
3944:  MOVLW  15
3946:  MOVWF  x6C
3948:  MOVLB  0
394A:  CALL   20D6
....................           break; 
....................         } 
....................       break; 
394E:  GOTO   55B2
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
3952:  MOVLB  1
3954:  MOVF   x2C,F
3956:  BNZ   3960
3958:  MOVLB  0
395A:  GOTO   55B2
395E:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
3960:  MOVF   xEE,W
3962:  SUBLW  4F
3964:  BNZ   3A20
....................           { 
....................             if(query) 
3966:  MOVF   xEC,F
3968:  BZ    39B2
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
396A:  MOVLW  01
396C:  MOVWF  xA4
396E:  MOVLW  C4
3970:  MOVWF  xA3
3972:  MOVLW  E8
3974:  MOVWF  FF6
3976:  MOVLW  0B
3978:  MOVWF  FF7
397A:  MOVLW  03
397C:  MOVLB  2
397E:  MOVWF  x34
3980:  MOVLB  0
3982:  CALL   2E82
3986:  MOVFF  AF,234
398A:  MOVLW  1B
398C:  MOVLB  2
398E:  MOVWF  x35
3990:  MOVLB  0
3992:  CALL   2FFA
3996:  MOVLW  0D
3998:  MOVLB  2
399A:  MOVWF  x3D
399C:  MOVLB  0
399E:  CALL   2E60
....................             COM1_send_str(buf); 
39A2:  MOVLW  01
39A4:  MOVLB  2
39A6:  MOVWF  x6D
39A8:  MOVLW  C4
39AA:  MOVWF  x6C
39AC:  MOVLB  0
39AE:  CALL   20D6
....................             } 
....................           val = get_int(); 
39B2:  MOVLB  0
39B4:  CALL   29D2
39B8:  MOVFF  02,20D
39BC:  MOVFF  01,20C
....................           if (val <= 3) 
39C0:  MOVLB  2
39C2:  MOVF   x0D,F
39C4:  BNZ   39E0
39C6:  MOVF   x0C,W
39C8:  SUBLW  03
39CA:  BNC   39E0
....................             { 
....................             setup.mode = val; 
39CC:  MOVFF  20C,AF
....................             FPGA_set_reg0(); 
39D0:  MOVLB  0
39D2:  CALL   16C2
....................             ret = 1; 
39D6:  MOVLW  01
39D8:  MOVLB  1
39DA:  MOVWF  xC2
....................             } 
....................           else 
39DC:  BRA    3A1E
39DE:  MOVLB  2
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
39E0:  MOVLW  02
39E2:  MOVWF  FEA
39E4:  MOVLW  15
39E6:  MOVWF  FE9
39E8:  MOVLW  09
39EA:  MOVWF  01
39EC:  CLRF   FF7
39EE:  MOVLW  00
39F0:  MOVLB  0
39F2:  CALL   08DA
39F6:  TBLRD*-
39F8:  TBLRD*+
39FA:  MOVFF  FF5,FEE
39FE:  DECFSZ 01,F
3A00:  BRA    39F8
3A02:  MOVLW  02
3A04:  MOVLB  2
3A06:  MOVWF  x6D
3A08:  MOVLW  15
3A0A:  MOVWF  x6C
3A0C:  MOVLB  0
3A0E:  CALL   20D6
....................             ret = 0; 
3A12:  MOVLB  1
3A14:  CLRF   xC2
....................             break; 
3A16:  MOVLB  0
3A18:  GOTO   55B2
3A1C:  MOVLB  1
....................             } 
....................           } 
....................           else 
3A1E:  BRA    3A52
....................               COM1_send_str("\r\nFAIL\r\n"); 
3A20:  MOVLW  02
3A22:  MOVWF  FEA
3A24:  MOVLW  15
3A26:  MOVWF  FE9
3A28:  MOVLW  09
3A2A:  MOVWF  01
3A2C:  CLRF   FF7
3A2E:  MOVLW  00
3A30:  MOVLB  0
3A32:  CALL   08DA
3A36:  TBLRD*-
3A38:  TBLRD*+
3A3A:  MOVFF  FF5,FEE
3A3E:  DECFSZ 01,F
3A40:  BRA    3A38
3A42:  MOVLW  02
3A44:  MOVLB  2
3A46:  MOVWF  x6D
3A48:  MOVLW  15
3A4A:  MOVWF  x6C
3A4C:  MOVLB  0
3A4E:  CALL   20D6
....................       break; 
3A52:  MOVLB  0
3A54:  GOTO   55B2
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
3A58:  MOVLB  1
3A5A:  MOVF   x2C,F
3A5C:  BNZ   3A66
3A5E:  MOVLB  0
3A60:  GOTO   55B2
3A64:  MOVLB  1
....................       switch (c2) 
....................         { 
3A66:  MOVF   xEE,W
3A68:  XORLW  53
3A6A:  MOVLB  0
3A6C:  BZ    3A7C
3A6E:  XORLW  03
3A70:  BTFSC  FD8.2
3A72:  BRA    3B74
3A74:  XORLW  15
3A76:  BTFSC  FD8.2
3A78:  BRA    3C6C
3A7A:  BRA    3D62
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
3A7C:  MOVLB  1
3A7E:  MOVF   xEC,F
3A80:  BZ    3ACE
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
3A82:  MOVLW  01
3A84:  MOVWF  xA4
3A86:  MOVLW  C4
3A88:  MOVWF  xA3
3A8A:  MOVLW  F0
3A8C:  MOVWF  FF6
3A8E:  MOVLW  0B
3A90:  MOVWF  FF7
3A92:  MOVLW  03
3A94:  MOVLB  2
3A96:  MOVWF  x34
3A98:  MOVLB  0
3A9A:  CALL   2E82
3A9E:  MOVFF  B3,234
3AA2:  MOVLW  1B
3AA4:  MOVLB  2
3AA6:  MOVWF  x35
3AA8:  MOVLB  0
3AAA:  CALL   2FFA
3AAE:  MOVLW  0D
3AB0:  MOVLB  2
3AB2:  MOVWF  x3D
3AB4:  MOVLB  0
3AB6:  CALL   2E60
....................             COM1_send_str(buf); 
3ABA:  MOVLW  01
3ABC:  MOVLB  2
3ABE:  MOVWF  x6D
3AC0:  MOVLW  C4
3AC2:  MOVWF  x6C
3AC4:  MOVLB  0
3AC6:  CALL   20D6
....................             } 
....................           else 
3ACA:  BRA    3B6A
3ACC:  MOVLB  1
....................             { 
....................             val = get_int(); 
3ACE:  MOVLB  0
3AD0:  CALL   29D2
3AD4:  MOVFF  02,20D
3AD8:  MOVFF  01,20C
....................             if (val < 2) 
3ADC:  MOVLB  2
3ADE:  MOVF   x0D,F
3AE0:  BNZ   3AF6
3AE2:  MOVF   x0C,W
3AE4:  SUBLW  01
3AE6:  BNC   3AF6
....................               { 
....................               setup.data_source = val; 
3AE8:  MOVFF  20C,B3
....................               FPGA_set_reg6(); 
3AEC:  MOVLB  0
3AEE:  CALL   171E
....................               } 
....................             else 
3AF2:  BRA    3B6A
3AF4:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3AF6:  MOVLW  02
3AF8:  MOVWF  FEA
3AFA:  MOVLW  15
3AFC:  MOVWF  FE9
3AFE:  MOVLW  09
3B00:  MOVWF  01
3B02:  CLRF   FF7
3B04:  MOVLW  00
3B06:  MOVLB  0
3B08:  CALL   08DA
3B0C:  TBLRD*-
3B0E:  TBLRD*+
3B10:  MOVFF  FF5,FEE
3B14:  DECFSZ 01,F
3B16:  BRA    3B0E
3B18:  MOVLW  02
3B1A:  MOVLB  2
3B1C:  MOVWF  x6D
3B1E:  MOVLW  15
3B20:  MOVWF  x6C
3B22:  MOVLB  0
3B24:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3B28:  MOVLW  01
3B2A:  MOVLB  1
3B2C:  MOVWF  xA4
3B2E:  MOVLW  78
3B30:  MOVWF  xA3
3B32:  MOVLW  F8
3B34:  MOVWF  FF6
3B36:  MOVLW  0B
3B38:  MOVWF  FF7
3B3A:  MOVLW  07
3B3C:  MOVLB  2
3B3E:  MOVWF  x34
3B40:  MOVLB  0
3B42:  CALL   2E82
3B46:  MOVFF  B3,234
3B4A:  MOVLW  1B
3B4C:  MOVLB  2
3B4E:  MOVWF  x35
3B50:  MOVLB  0
3B52:  CALL   2FFA
3B56:  MOVLW  0D
3B58:  MOVLB  2
3B5A:  MOVWF  x3D
3B5C:  MOVLB  0
3B5E:  CALL   2E60
....................               ret = 0; 
3B62:  MOVLB  1
3B64:  CLRF   xC2
....................               break; 
3B66:  MOVLB  0
3B68:  BRA    3D62
....................               } 
....................             } 
....................           ret = 1; 
3B6A:  MOVLW  01
3B6C:  MOVLB  1
3B6E:  MOVWF  xC2
....................           break; 
3B70:  MOVLB  0
3B72:  BRA    3D62
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
3B74:  MOVLB  1
3B76:  MOVF   xEC,F
3B78:  BZ    3BC6
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
3B7A:  MOVLW  01
3B7C:  MOVWF  xA4
3B7E:  MOVLW  C4
3B80:  MOVWF  xA3
3B82:  MOVLW  04
3B84:  MOVWF  FF6
3B86:  MOVLW  0C
3B88:  MOVWF  FF7
3B8A:  MOVLW  03
3B8C:  MOVLB  2
3B8E:  MOVWF  x34
3B90:  MOVLB  0
3B92:  CALL   2E82
3B96:  MOVFF  B1,234
3B9A:  MOVLW  1B
3B9C:  MOVLB  2
3B9E:  MOVWF  x35
3BA0:  MOVLB  0
3BA2:  CALL   2FFA
3BA6:  MOVLW  0D
3BA8:  MOVLB  2
3BAA:  MOVWF  x3D
3BAC:  MOVLB  0
3BAE:  CALL   2E60
....................             COM1_send_str(buf); 
3BB2:  MOVLW  01
3BB4:  MOVLB  2
3BB6:  MOVWF  x6D
3BB8:  MOVLW  C4
3BBA:  MOVWF  x6C
3BBC:  MOVLB  0
3BBE:  CALL   20D6
....................             } 
....................           else 
3BC2:  BRA    3C62
3BC4:  MOVLB  1
....................             { 
....................             val = get_int(); 
3BC6:  MOVLB  0
3BC8:  CALL   29D2
3BCC:  MOVFF  02,20D
3BD0:  MOVFF  01,20C
....................             if (val < 2) 
3BD4:  MOVLB  2
3BD6:  MOVF   x0D,F
3BD8:  BNZ   3BEE
3BDA:  MOVF   x0C,W
3BDC:  SUBLW  01
3BDE:  BNC   3BEE
....................               { 
....................               setup.data_polarity = val; 
3BE0:  MOVFF  20C,B1
....................               FPGA_set_reg0(); 
3BE4:  MOVLB  0
3BE6:  CALL   16C2
....................               } 
....................             else 
3BEA:  BRA    3C62
3BEC:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3BEE:  MOVLW  02
3BF0:  MOVWF  FEA
3BF2:  MOVLW  15
3BF4:  MOVWF  FE9
3BF6:  MOVLW  09
3BF8:  MOVWF  01
3BFA:  CLRF   FF7
3BFC:  MOVLW  00
3BFE:  MOVLB  0
3C00:  CALL   08DA
3C04:  TBLRD*-
3C06:  TBLRD*+
3C08:  MOVFF  FF5,FEE
3C0C:  DECFSZ 01,F
3C0E:  BRA    3C06
3C10:  MOVLW  02
3C12:  MOVLB  2
3C14:  MOVWF  x6D
3C16:  MOVLW  15
3C18:  MOVWF  x6C
3C1A:  MOVLB  0
3C1C:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3C20:  MOVLW  01
3C22:  MOVLB  1
3C24:  MOVWF  xA4
3C26:  MOVLW  78
3C28:  MOVWF  xA3
3C2A:  MOVLW  0C
3C2C:  MOVWF  FF6
3C2E:  MOVLW  0C
3C30:  MOVWF  FF7
3C32:  MOVLW  07
3C34:  MOVLB  2
3C36:  MOVWF  x34
3C38:  MOVLB  0
3C3A:  CALL   2E82
3C3E:  MOVFF  B1,234
3C42:  MOVLW  1B
3C44:  MOVLB  2
3C46:  MOVWF  x35
3C48:  MOVLB  0
3C4A:  CALL   2FFA
3C4E:  MOVLW  0D
3C50:  MOVLB  2
3C52:  MOVWF  x3D
3C54:  MOVLB  0
3C56:  CALL   2E60
....................               ret = 0; 
3C5A:  MOVLB  1
3C5C:  CLRF   xC2
....................               break; 
3C5E:  MOVLB  0
3C60:  BRA    3D62
....................               } 
....................             } 
....................           ret = 1; 
3C62:  MOVLW  01
3C64:  MOVLB  1
3C66:  MOVWF  xC2
....................           break; 
3C68:  MOVLB  0
3C6A:  BRA    3D62
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
3C6C:  MOVLB  1
3C6E:  MOVF   xEC,F
3C70:  BZ    3CBE
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
3C72:  MOVLW  01
3C74:  MOVWF  xA4
3C76:  MOVLW  C4
3C78:  MOVWF  xA3
3C7A:  MOVLW  18
3C7C:  MOVWF  FF6
3C7E:  MOVLW  0C
3C80:  MOVWF  FF7
3C82:  MOVLW  03
3C84:  MOVLB  2
3C86:  MOVWF  x34
3C88:  MOVLB  0
3C8A:  CALL   2E82
3C8E:  MOVFF  B7,234
3C92:  MOVLW  1B
3C94:  MOVLB  2
3C96:  MOVWF  x35
3C98:  MOVLB  0
3C9A:  CALL   2FFA
3C9E:  MOVLW  0D
3CA0:  MOVLB  2
3CA2:  MOVWF  x3D
3CA4:  MOVLB  0
3CA6:  CALL   2E60
....................             COM1_send_str(buf); 
3CAA:  MOVLW  01
3CAC:  MOVLB  2
3CAE:  MOVWF  x6D
3CB0:  MOVLW  C4
3CB2:  MOVWF  x6C
3CB4:  MOVLB  0
3CB6:  CALL   20D6
....................             } 
....................           else 
3CBA:  BRA    3D5A
3CBC:  MOVLB  1
....................             { 
....................             val = get_int(); 
3CBE:  MOVLB  0
3CC0:  CALL   29D2
3CC4:  MOVFF  02,20D
3CC8:  MOVFF  01,20C
....................             if (val < 2) 
3CCC:  MOVLB  2
3CCE:  MOVF   x0D,F
3CD0:  BNZ   3CE6
3CD2:  MOVF   x0C,W
3CD4:  SUBLW  01
3CD6:  BNC   3CE6
....................               { 
....................               setup.SOQPSK = val; 
3CD8:  MOVFF  20C,B7
....................               FPGA_set_reg0(); 
3CDC:  MOVLB  0
3CDE:  CALL   16C2
....................               } 
....................             else 
3CE2:  BRA    3D5A
3CE4:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3CE6:  MOVLW  02
3CE8:  MOVWF  FEA
3CEA:  MOVLW  15
3CEC:  MOVWF  FE9
3CEE:  MOVLW  09
3CF0:  MOVWF  01
3CF2:  CLRF   FF7
3CF4:  MOVLW  00
3CF6:  MOVLB  0
3CF8:  CALL   08DA
3CFC:  TBLRD*-
3CFE:  TBLRD*+
3D00:  MOVFF  FF5,FEE
3D04:  DECFSZ 01,F
3D06:  BRA    3CFE
3D08:  MOVLW  02
3D0A:  MOVLB  2
3D0C:  MOVWF  x6D
3D0E:  MOVLW  15
3D10:  MOVWF  x6C
3D12:  MOVLB  0
3D14:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3D18:  MOVLW  01
3D1A:  MOVLB  1
3D1C:  MOVWF  xA4
3D1E:  MOVLW  78
3D20:  MOVWF  xA3
3D22:  MOVLW  20
3D24:  MOVWF  FF6
3D26:  MOVLW  0C
3D28:  MOVWF  FF7
3D2A:  MOVLW  07
3D2C:  MOVLB  2
3D2E:  MOVWF  x34
3D30:  MOVLB  0
3D32:  CALL   2E82
3D36:  MOVFF  B7,234
3D3A:  MOVLW  1B
3D3C:  MOVLB  2
3D3E:  MOVWF  x35
3D40:  MOVLB  0
3D42:  CALL   2FFA
3D46:  MOVLW  0D
3D48:  MOVLB  2
3D4A:  MOVWF  x3D
3D4C:  MOVLB  0
3D4E:  CALL   2E60
....................               ret = 0; 
3D52:  MOVLB  1
3D54:  CLRF   xC2
....................               break; 
3D56:  MOVLB  0
3D58:  BRA    3D62
....................               } 
....................             } 
....................           ret = 1; 
3D5A:  MOVLW  01
3D5C:  MOVLB  1
3D5E:  MOVWF  xC2
....................           break; 
3D60:  MOVLB  0
....................         } 
....................       break; 
3D62:  GOTO   55B2
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
3D66:  MOVLB  1
3D68:  MOVF   x2C,F
3D6A:  BNZ   3D74
3D6C:  MOVLB  0
3D6E:  GOTO   55B2
3D72:  MOVLB  1
....................       switch (c2) 
....................         { 
3D74:  MOVLW  41
3D76:  SUBWF  xEE,W
3D78:  ADDLW  F0
3D7A:  BTFSC  FD8.0
3D7C:  BRA    4390
3D7E:  ADDLW  10
3D80:  MOVLB  0
3D82:  GOTO   55BA
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
3D86:  MOVLB  1
3D88:  MOVF   xEC,F
3D8A:  BZ    3DD8
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
3D8C:  MOVLW  01
3D8E:  MOVWF  xA4
3D90:  MOVLW  C4
3D92:  MOVWF  xA3
3D94:  MOVLW  2C
3D96:  MOVWF  FF6
3D98:  MOVLW  0C
3D9A:  MOVWF  FF7
3D9C:  MOVLW  03
3D9E:  MOVLB  2
3DA0:  MOVWF  x34
3DA2:  MOVLB  0
3DA4:  CALL   2E82
3DA8:  MOVFF  B6,234
3DAC:  MOVLW  1B
3DAE:  MOVLB  2
3DB0:  MOVWF  x35
3DB2:  MOVLB  0
3DB4:  CALL   2FFA
3DB8:  MOVLW  0D
3DBA:  MOVLB  2
3DBC:  MOVWF  x3D
3DBE:  MOVLB  0
3DC0:  CALL   2E60
....................             COM1_send_str(buf); 
3DC4:  MOVLW  01
3DC6:  MOVLB  2
3DC8:  MOVWF  x6D
3DCA:  MOVLW  C4
3DCC:  MOVWF  x6C
3DCE:  MOVLB  0
3DD0:  CALL   20D6
....................             } 
....................           else 
3DD4:  BRA    3ED2
3DD6:  MOVLB  1
....................             { 
....................             val = get_int(); 
3DD8:  MOVLB  0
3DDA:  CALL   29D2
3DDE:  MOVFF  02,20D
3DE2:  MOVFF  01,20C
....................             if (val < 2) 
3DE6:  MOVLB  2
3DE8:  MOVF   x0D,F
3DEA:  BNZ   3E5E
3DEC:  MOVF   x0C,W
3DEE:  SUBLW  01
3DF0:  BNC   3E5E
....................               { 
.................... 	          if(setup.rc == 1) 
3DF2:  MOVLB  0
3DF4:  DECFSZ xF7,W
3DF6:  BRA    3E16
3DF8:  MOVF   xF8,F
3DFA:  BNZ   3E16
.................... 	            { 
.................... 	            if(val == 0) 
3DFC:  MOVLB  2
3DFE:  MOVF   x0C,F
3E00:  BNZ   3E10
3E02:  MOVF   x0D,F
3E04:  BNZ   3E10
.................... 	            { 
.................... 	            setup.rp =1; 
3E06:  MOVLB  0
3E08:  CLRF   xFA
3E0A:  MOVLW  01
3E0C:  MOVWF  xF9
.................... 	            } 
.................... 	          else 
3E0E:  BRA    3E16
....................  
.................... 	          setup.rp = 0; 
3E10:  MOVLB  0
3E12:  CLRF   xFA
3E14:  CLRF   xF9
.................... 	          } 
.................... 	          if(val == 1) 
3E16:  MOVLB  2
3E18:  DECFSZ x0C,W
3E1A:  BRA    3E3E
3E1C:  MOVF   x0D,F
3E1E:  BNZ   3E3E
.................... 	          { 
....................               rp_command = setup.rp = 0; 
3E20:  MOVLB  0
3E22:  CLRF   xFA
3E24:  CLRF   xF9
3E26:  MOVFF  F9,1A0
....................               delay_ms(50); 
3E2A:  MOVLW  32
3E2C:  MOVLB  2
3E2E:  MOVWF  x43
3E30:  MOVLB  0
3E32:  CALL   0EAA
....................               update_all(); 
3E36:  CALL   1C10
....................               } 
....................               else 
3E3A:  BRA    3E5A
3E3C:  MOVLB  2
....................                { 
....................               rp_command = setup.rp = 1; 
3E3E:  MOVLB  0
3E40:  CLRF   xFA
3E42:  MOVLW  01
3E44:  MOVWF  xF9
3E46:  MOVFF  F9,1A0
....................               delay_ms(50); 
3E4A:  MOVLW  32
3E4C:  MOVLB  2
3E4E:  MOVWF  x43
3E50:  MOVLB  0
3E52:  CALL   0EAA
....................               update_all(); 
3E56:  CALL   1C10
....................               } 
....................               } 
....................             else 
3E5A:  BRA    3ED2
3E5C:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3E5E:  MOVLW  02
3E60:  MOVWF  FEA
3E62:  MOVLW  15
3E64:  MOVWF  FE9
3E66:  MOVLW  09
3E68:  MOVWF  01
3E6A:  CLRF   FF7
3E6C:  MOVLW  00
3E6E:  MOVLB  0
3E70:  CALL   08DA
3E74:  TBLRD*-
3E76:  TBLRD*+
3E78:  MOVFF  FF5,FEE
3E7C:  DECFSZ 01,F
3E7E:  BRA    3E76
3E80:  MOVLW  02
3E82:  MOVLB  2
3E84:  MOVWF  x6D
3E86:  MOVLW  15
3E88:  MOVWF  x6C
3E8A:  MOVLB  0
3E8C:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
3E90:  MOVLW  01
3E92:  MOVLB  1
3E94:  MOVWF  xA4
3E96:  MOVLW  78
3E98:  MOVWF  xA3
3E9A:  MOVLW  34
3E9C:  MOVWF  FF6
3E9E:  MOVLW  0C
3EA0:  MOVWF  FF7
3EA2:  MOVLW  07
3EA4:  MOVLB  2
3EA6:  MOVWF  x34
3EA8:  MOVLB  0
3EAA:  CALL   2E82
3EAE:  MOVFF  1A0,234
3EB2:  MOVLW  1B
3EB4:  MOVLB  2
3EB6:  MOVWF  x35
3EB8:  MOVLB  0
3EBA:  CALL   2FFA
3EBE:  MOVLW  0D
3EC0:  MOVLB  2
3EC2:  MOVWF  x3D
3EC4:  MOVLB  0
3EC6:  CALL   2E60
....................               ret = 0; 
3ECA:  MOVLB  1
3ECC:  CLRF   xC2
....................               break; 
3ECE:  BRA    4390
3ED0:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
3ED2:  MOVLW  01
3ED4:  MOVLB  1
3ED6:  MOVWF  xC2
....................           break; 
3ED8:  BRA    4390
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
3EDA:  MOVLB  1
3EDC:  MOVF   xEC,F
3EDE:  BZ    3F2C
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
3EE0:  MOVLW  01
3EE2:  MOVWF  xA4
3EE4:  MOVLW  C4
3EE6:  MOVWF  xA3
3EE8:  MOVLW  40
3EEA:  MOVWF  FF6
3EEC:  MOVLW  0C
3EEE:  MOVWF  FF7
3EF0:  MOVLW  03
3EF2:  MOVLB  2
3EF4:  MOVWF  x34
3EF6:  MOVLB  0
3EF8:  CALL   2E82
3EFC:  MOVFF  1A1,234
3F00:  MOVLW  1B
3F02:  MOVLB  2
3F04:  MOVWF  x35
3F06:  MOVLB  0
3F08:  CALL   2FFA
3F0C:  MOVLW  0D
3F0E:  MOVLB  2
3F10:  MOVWF  x3D
3F12:  MOVLB  0
3F14:  CALL   2E60
....................             COM1_send_str(buf); 
3F18:  MOVLW  01
3F1A:  MOVLB  2
3F1C:  MOVWF  x6D
3F1E:  MOVLW  C4
3F20:  MOVWF  x6C
3F22:  MOVLB  0
3F24:  CALL   20D6
....................             } 
....................           else 
3F28:  BRA    408E
3F2A:  MOVLB  1
....................             { 
....................             val = get_int(); 
3F2C:  MOVLB  0
3F2E:  CALL   29D2
3F32:  MOVFF  02,20D
3F36:  MOVFF  01,20C
....................             if (val == 0) 
3F3A:  MOVLB  2
3F3C:  MOVF   x0C,F
3F3E:  BNZ   3FA8
3F40:  MOVF   x0D,F
3F42:  BNZ   3FA8
....................               { 
.................... 			  if(setup.cot || setup.rc) 
3F44:  MOVLB  0
3F46:  MOVF   xF5,W
3F48:  IORWF  xF6,W
3F4A:  BNZ   3F52
3F4C:  MOVF   xF7,W
3F4E:  IORWF  xF8,W
3F50:  BZ    3F78
.................... 				{ 
....................                 pwr_command = 0; 
3F52:  MOVLB  1
3F54:  CLRF   xA1
....................                 setup.pwr = pwr_command; 
3F56:  MOVLB  0
3F58:  CLRF   xAE
3F5A:  MOVFF  1A1,AD
....................                 delay_ms(60); 
3F5E:  MOVLW  3C
3F60:  MOVLB  2
3F62:  MOVWF  x43
3F64:  MOVLB  0
3F66:  CALL   0EAA
.................... 			 	update_all(); 
3F6A:  CALL   1C10
.................... 			 	ret = 1; 
3F6E:  MOVLW  01
3F70:  MOVLB  1
3F72:  MOVWF  xC2
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
3F74:  BRA    3FA4
3F76:  MOVLB  0
3F78:  MOVF   xF5,F
3F7A:  BNZ   3F80
3F7C:  MOVF   xF6,F
3F7E:  BZ    3F86
3F80:  MOVF   xF7,W
3F82:  IORWF  xF8,W
3F84:  BZ    3FA2
.................... 				  { 
....................                   pwr_command = 0; 
3F86:  MOVLB  1
3F88:  CLRF   xA1
....................                 setup.pwr = pwr_command; 
3F8A:  MOVLB  0
3F8C:  CLRF   xAE
3F8E:  MOVFF  1A1,AD
....................                 delay_ms(60); 
3F92:  MOVLW  3C
3F94:  MOVLB  2
3F96:  MOVWF  x43
3F98:  MOVLB  0
3F9A:  CALL   0EAA
.................... 			 	update_all(); 
3F9E:  CALL   1C10
3FA2:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
3FA4:  BRA    408C
3FA6:  MOVLB  2
.................... 				{ 
.................... 				if (val == 1) 
3FA8:  DECFSZ x0C,W
3FAA:  BRA    401A
3FAC:  MOVF   x0D,F
3FAE:  BNZ   401A
.................... 				  { 
.................... 				  if(setup.cot) 
3FB0:  MOVLB  0
3FB2:  MOVF   xF5,W
3FB4:  IORWF  xF6,W
3FB6:  BZ    3FE4
.................... 				   { 
.................... 				   pwr_command = 1; 
3FB8:  MOVLW  01
3FBA:  MOVLB  1
3FBC:  MOVWF  xA1
.................... 				   setup.pwr = pwr_command; 
3FBE:  MOVLB  0
3FC0:  CLRF   xAE
3FC2:  MOVFF  1A1,AD
.................... 				   power_output(); 
3FC6:  CALL   1C7A
....................                    delay_ms(50); 
3FCA:  MOVLW  32
3FCC:  MOVLB  2
3FCE:  MOVWF  x43
3FD0:  MOVLB  0
3FD2:  CALL   0EAA
.................... 				   ret = 1; 
3FD6:  MOVLW  01
3FD8:  MOVLB  1
3FDA:  MOVWF  xC2
....................                    update_all(); 
3FDC:  MOVLB  0
3FDE:  CALL   1C10
.................... 				   } 
.................... 					else if(setup.cot == 0) 
3FE2:  BRA    4016
3FE4:  MOVF   xF5,F
3FE6:  BNZ   4016
3FE8:  MOVF   xF6,F
3FEA:  BNZ   4016
.................... 				  { 
....................                   pwr_command = 1; 
3FEC:  MOVLW  01
3FEE:  MOVLB  1
3FF0:  MOVWF  xA1
....................                   setup.pwr = pwr_command; 
3FF2:  MOVLB  0
3FF4:  CLRF   xAE
3FF6:  MOVFF  1A1,AD
....................                   power_output(); 
3FFA:  CALL   1C7A
.................... 				  delay_ms(50); 
3FFE:  MOVLW  32
4000:  MOVLB  2
4002:  MOVWF  x43
4004:  MOVLB  0
4006:  CALL   0EAA
.................... 				  ret = 1; 
400A:  MOVLW  01
400C:  MOVLB  1
400E:  MOVWF  xC2
....................                   update_all(); 
4010:  MOVLB  0
4012:  CALL   1C10
....................                   } 
.................... 				} 
....................             else 
4016:  BRA    408E
4018:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
401A:  MOVLW  02
401C:  MOVWF  FEA
401E:  MOVLW  15
4020:  MOVWF  FE9
4022:  MOVLW  09
4024:  MOVWF  01
4026:  CLRF   FF7
4028:  MOVLW  00
402A:  MOVLB  0
402C:  CALL   08DA
4030:  TBLRD*-
4032:  TBLRD*+
4034:  MOVFF  FF5,FEE
4038:  DECFSZ 01,F
403A:  BRA    4032
403C:  MOVLW  02
403E:  MOVLB  2
4040:  MOVWF  x6D
4042:  MOVLW  15
4044:  MOVWF  x6C
4046:  MOVLB  0
4048:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
404C:  MOVLW  01
404E:  MOVLB  1
4050:  MOVWF  xA4
4052:  MOVLW  78
4054:  MOVWF  xA3
4056:  MOVLW  48
4058:  MOVWF  FF6
405A:  MOVLW  0C
405C:  MOVWF  FF7
405E:  MOVLW  07
4060:  MOVLB  2
4062:  MOVWF  x34
4064:  MOVLB  0
4066:  CALL   2E82
406A:  MOVFF  1A1,234
406E:  MOVLW  1B
4070:  MOVLB  2
4072:  MOVWF  x35
4074:  MOVLB  0
4076:  CALL   2FFA
407A:  MOVLW  0D
407C:  MOVLB  2
407E:  MOVWF  x3D
4080:  MOVLB  0
4082:  CALL   2E60
....................               ret = 0; 
4086:  MOVLB  1
4088:  CLRF   xC2
....................               break; 
408A:  BRA    4390
408C:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
408E:  MOVLW  01
4090:  MOVLB  1
4092:  MOVWF  xC2
....................           break; 
4094:  BRA    4390
....................  
....................          case 'C': 
....................          	if (query) 
4096:  MOVLB  1
4098:  MOVF   xEC,F
409A:  BZ    40E8
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
409C:  MOVLW  01
409E:  MOVWF  xA4
40A0:  MOVLW  C4
40A2:  MOVWF  xA3
40A4:  MOVLW  54
40A6:  MOVWF  FF6
40A8:  MOVLW  0C
40AA:  MOVWF  FF7
40AC:  MOVLW  03
40AE:  MOVLB  2
40B0:  MOVWF  x34
40B2:  MOVLB  0
40B4:  CALL   2E82
40B8:  MOVLW  10
40BA:  MOVWF  FE9
40BC:  MOVFF  F8,235
40C0:  MOVFF  F7,234
40C4:  CALL   2EAA
40C8:  MOVLW  0D
40CA:  MOVLB  2
40CC:  MOVWF  x3D
40CE:  MOVLB  0
40D0:  CALL   2E60
....................             COM1_send_str(buf); 
40D4:  MOVLW  01
40D6:  MOVLB  2
40D8:  MOVWF  x6D
40DA:  MOVLW  C4
40DC:  MOVWF  x6C
40DE:  MOVLB  0
40E0:  CALL   20D6
....................             } 
....................           else 
40E4:  BRA    4178
40E6:  MOVLB  1
....................             { 
....................           val = get_int(); 
40E8:  MOVLB  0
40EA:  CALL   29D2
40EE:  MOVFF  02,20D
40F2:  MOVFF  01,20C
....................           if(val < 2) 
40F6:  MOVLB  2
40F8:  MOVF   x0D,F
40FA:  BNZ   4146
40FC:  MOVF   x0C,W
40FE:  SUBLW  01
4100:  BNC   4146
....................           	{ 
.................... 	          	if(val == 0) 
4102:  MOVF   x0C,F
4104:  BNZ   4122
4106:  MOVF   x0D,F
4108:  BNZ   4122
.................... 	          	{ 
.................... 	              setup.rc = 0; 
410A:  MOVLB  0
410C:  CLRF   xF8
410E:  CLRF   xF7
.................... 	              delay_ms(50); 
4110:  MOVLW  32
4112:  MOVLB  2
4114:  MOVWF  x43
4116:  MOVLB  0
4118:  CALL   0EAA
.................... 	              update_all(); 
411C:  CALL   1C10
4120:  MOVLB  2
.................... 	            } 
.................... 	            if(val == 1) 
4122:  DECFSZ x0C,W
4124:  BRA    4144
4126:  MOVF   x0D,F
4128:  BNZ   4144
.................... 	              { 
.................... 	              setup.rc = 1; 
412A:  MOVLB  0
412C:  CLRF   xF8
412E:  MOVLW  01
4130:  MOVWF  xF7
.................... 	              delay_ms(50); 
4132:  MOVLW  32
4134:  MOVLB  2
4136:  MOVWF  x43
4138:  MOVLB  0
413A:  CALL   0EAA
.................... 	              update_all(); 
413E:  CALL   1C10
4142:  MOVLB  2
.................... 	              } 
....................            } 
....................           else 
4144:  BRA    417A
....................             COM1_send_str("\r\nFAULT\r\n"); 
4146:  MOVLW  02
4148:  MOVWF  FEA
414A:  MOVLW  15
414C:  MOVWF  FE9
414E:  MOVLW  0A
4150:  MOVWF  01
4152:  CLRF   FF7
4154:  MOVLW  00
4156:  MOVLB  0
4158:  CALL   08C0
415C:  TBLRD*-
415E:  TBLRD*+
4160:  MOVFF  FF5,FEE
4164:  DECFSZ 01,F
4166:  BRA    415E
4168:  MOVLW  02
416A:  MOVLB  2
416C:  MOVWF  x6D
416E:  MOVLW  15
4170:  MOVWF  x6C
4172:  MOVLB  0
4174:  CALL   20D6
4178:  MOVLB  2
....................             } 
....................           break; 
417A:  MOVLB  1
417C:  BRA    4390
....................  
....................           case 'B': 
....................             if (query) 
417E:  MOVLB  1
4180:  MOVF   xEC,F
4182:  BZ    41D0
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
4184:  MOVLW  01
4186:  MOVWF  xA4
4188:  MOVLW  C4
418A:  MOVWF  xA3
418C:  MOVLW  5C
418E:  MOVWF  FF6
4190:  MOVLW  0C
4192:  MOVWF  FF7
4194:  MOVLW  03
4196:  MOVLB  2
4198:  MOVWF  x34
419A:  MOVLB  0
419C:  CALL   2E82
41A0:  MOVLW  10
41A2:  MOVWF  FE9
41A4:  MOVFF  F6,235
41A8:  MOVFF  F5,234
41AC:  CALL   2EAA
41B0:  MOVLW  0D
41B2:  MOVLB  2
41B4:  MOVWF  x3D
41B6:  MOVLB  0
41B8:  CALL   2E60
....................             COM1_send_str(buf); 
41BC:  MOVLW  01
41BE:  MOVLB  2
41C0:  MOVWF  x6D
41C2:  MOVLW  C4
41C4:  MOVWF  x6C
41C6:  MOVLB  0
41C8:  CALL   20D6
....................             } 
....................           else 
41CC:  BRA    427E
41CE:  MOVLB  1
....................             { 
....................           val = get_int(); 
41D0:  MOVLB  0
41D2:  CALL   29D2
41D6:  MOVFF  02,20D
41DA:  MOVFF  01,20C
....................           if(val < 2) 
41DE:  MOVLB  2
41E0:  MOVF   x0D,F
41E2:  BNZ   424C
41E4:  MOVF   x0C,W
41E6:  SUBLW  01
41E8:  BNC   424C
....................           	{ 
.................... 	          if(val) 
41EA:  MOVF   x0C,W
41EC:  IORWF  x0D,W
41EE:  BZ    4232
.................... 	          	{ 
....................               setup.cot = val; 
41F0:  MOVFF  20D,F6
41F4:  MOVFF  20C,F5
....................               if(pwr_command == 0) 
41F8:  MOVLB  1
41FA:  MOVF   xA1,F
41FC:  BNZ   421A
....................               { 
....................               pwr_command == 1; 
41FE:  DECFSZ xA1,W
4200:  BRA    4204
4202:  BRA    4206
4204:  MOVLW  00
....................               delay_ms(50); 
4206:  MOVLW  32
4208:  MOVLB  2
420A:  MOVWF  x43
420C:  MOVLB  0
420E:  CALL   0EAA
....................               update_all(); 
4212:  CALL   1C10
....................               } 
....................               else 
4216:  BRA    4220
4218:  MOVLB  1
....................               	pwr_command == 0; 
421A:  MOVF   xA1,F
421C:  BZ    4220
421E:  MOVLW  00
....................                delay_ms(50); 
4220:  MOVLW  32
4222:  MOVLB  2
4224:  MOVWF  x43
4226:  MOVLB  0
4228:  CALL   0EAA
....................               update_all(); 
422C:  CALL   1C10
4230:  MOVLB  2
....................             } 
....................             setup.cot = val; 
4232:  MOVFF  20D,F6
4236:  MOVFF  20C,F5
....................               delay_ms(70); 
423A:  MOVLW  46
423C:  MOVWF  x43
423E:  MOVLB  0
4240:  CALL   0EAA
....................               update_all(); 
4244:  CALL   1C10
....................            } 
....................           else 
4248:  BRA    427E
424A:  MOVLB  2
....................             COM1_send_str("\r\nFAULT\r\n"); 
424C:  MOVLW  02
424E:  MOVWF  FEA
4250:  MOVLW  15
4252:  MOVWF  FE9
4254:  MOVLW  0A
4256:  MOVWF  01
4258:  CLRF   FF7
425A:  MOVLW  00
425C:  MOVLB  0
425E:  CALL   08C0
4262:  TBLRD*-
4264:  TBLRD*+
4266:  MOVFF  FF5,FEE
426A:  DECFSZ 01,F
426C:  BRA    4264
426E:  MOVLW  02
4270:  MOVLB  2
4272:  MOVWF  x6D
4274:  MOVLW  15
4276:  MOVWF  x6C
4278:  MOVLB  0
427A:  CALL   20D6
....................             } 
....................           break; 
427E:  MOVLB  1
4280:  BRA    4390
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
4282:  MOVLB  1
4284:  MOVF   xEC,F
4286:  BZ    42D4
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
4288:  MOVLW  01
428A:  MOVWF  xA4
428C:  MOVLW  C4
428E:  MOVWF  xA3
4290:  MOVLW  64
4292:  MOVWF  FF6
4294:  MOVLW  0C
4296:  MOVWF  FF7
4298:  MOVLW  03
429A:  MOVLB  2
429C:  MOVWF  x34
429E:  MOVLB  0
42A0:  CALL   2E82
42A4:  MOVFF  B5,234
42A8:  MOVLW  1B
42AA:  MOVLB  2
42AC:  MOVWF  x35
42AE:  MOVLB  0
42B0:  CALL   2FFA
42B4:  MOVLW  0D
42B6:  MOVLB  2
42B8:  MOVWF  x3D
42BA:  MOVLB  0
42BC:  CALL   2E60
....................             COM1_send_str(buf); 
42C0:  MOVLW  01
42C2:  MOVLB  2
42C4:  MOVWF  x6D
42C6:  MOVLW  C4
42C8:  MOVWF  x6C
42CA:  MOVLB  0
42CC:  CALL   20D6
....................             } 
....................           else 
42D0:  BRA    4374
42D2:  MOVLB  1
....................             { 
....................             val = get_int(); 
42D4:  MOVLB  0
42D6:  CALL   29D2
42DA:  MOVFF  02,20D
42DE:  MOVFF  01,20C
....................             if (val < 2) 
42E2:  MOVLB  2
42E4:  MOVF   x0D,F
42E6:  BNZ   4302
42E8:  MOVF   x0C,W
42EA:  SUBLW  01
42EC:  BNC   4302
....................               { 
....................               setup.randomizer = val; 
42EE:  MOVFF  20C,B5
....................               FPGA_set_reg0(); 
42F2:  MOVLB  0
42F4:  CALL   16C2
....................               ret = 1; 
42F8:  MOVLW  01
42FA:  MOVLB  1
42FC:  MOVWF  xC2
....................               } 
....................             else 
42FE:  BRA    4374
4300:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4302:  MOVLW  02
4304:  MOVWF  FEA
4306:  MOVLW  15
4308:  MOVWF  FE9
430A:  MOVLW  09
430C:  MOVWF  01
430E:  CLRF   FF7
4310:  MOVLW  00
4312:  MOVLB  0
4314:  CALL   08DA
4318:  TBLRD*-
431A:  TBLRD*+
431C:  MOVFF  FF5,FEE
4320:  DECFSZ 01,F
4322:  BRA    431A
4324:  MOVLW  02
4326:  MOVLB  2
4328:  MOVWF  x6D
432A:  MOVLW  15
432C:  MOVWF  x6C
432E:  MOVLB  0
4330:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
4334:  MOVLW  01
4336:  MOVLB  1
4338:  MOVWF  xA4
433A:  MOVLW  78
433C:  MOVWF  xA3
433E:  MOVLW  6C
4340:  MOVWF  FF6
4342:  MOVLW  0C
4344:  MOVWF  FF7
4346:  MOVLW  07
4348:  MOVLB  2
434A:  MOVWF  x34
434C:  MOVLB  0
434E:  CALL   2E82
4352:  MOVFF  B5,234
4356:  MOVLW  1B
4358:  MOVLB  2
435A:  MOVWF  x35
435C:  MOVLB  0
435E:  CALL   2FFA
4362:  MOVLW  0D
4364:  MOVLB  2
4366:  MOVWF  x3D
4368:  MOVLB  0
436A:  CALL   2E60
....................               ret = 0; 
436E:  MOVLB  1
4370:  CLRF   xC2
....................               break; 
4372:  BRA    4390
....................               } 
....................             } 
....................           ret = 1; 
4374:  MOVLW  01
4376:  MOVLB  1
4378:  MOVWF  xC2
....................           break; 
437A:  BRA    4390
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
437C:  CALL   0F46
....................           update_all(); 
4380:  CALL   1C10
....................           ret = 1; 
4384:  MOVLW  01
4386:  MOVLB  1
4388:  MOVWF  xC2
....................           break; 
438A:  BRA    4390
....................         case 'E':   // reset 
....................           reset_cpu(); 
438C:  RESET
....................           break; 
438E:  MOVLB  1
....................         } 
....................       break; 
4390:  MOVLB  0
4392:  GOTO   55B2
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
4396:  MOVLB  1
4398:  MOVF   x2C,F
439A:  BNZ   43A4
439C:  MOVLB  0
439E:  GOTO   55B2
43A2:  MOVLB  1
....................       if (c2 == 'A') 
43A4:  MOVF   xEE,W
43A6:  SUBLW  41
43A8:  BNZ   43AE
....................         { 
....................         //xxxx 
....................         ret = 1; 
43AA:  MOVLW  01
43AC:  MOVWF  xC2
....................         } 
....................       break; 
43AE:  MOVLB  0
43B0:  GOTO   55B2
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
43B4:  MOVLB  1
43B6:  MOVF   x2C,F
43B8:  BNZ   43C2
43BA:  MOVLB  0
43BC:  GOTO   55B2
43C0:  MOVLB  1
....................       switch (c2) 
....................         { 
43C2:  MOVF   xEE,W
43C4:  XORLW  50
43C6:  MOVLB  0
43C8:  BZ    43D0
43CA:  XORLW  06
43CC:  BZ    43DA
43CE:  BRA    43F2
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
43D0:  MOVLW  01
43D2:  MOVLB  1
43D4:  MOVWF  xC2
....................           break; 
43D6:  MOVLB  0
43D8:  BRA    43F2
....................         case 'V': 
....................           allow_write = 2975; 
43DA:  MOVLW  0B
43DC:  MOVLB  1
43DE:  MOVWF  x02
43E0:  MOVLW  9F
43E2:  MOVWF  x01
....................           write_setup(); 
43E4:  MOVLB  0
43E6:  CALL   30E6
....................           ret = 1; 
43EA:  MOVLW  01
43EC:  MOVLB  1
43EE:  MOVWF  xC2
....................           break; 
43F0:  MOVLB  0
....................         } 
....................       break; 
43F2:  GOTO   55B2
....................        
....................  
....................     case 'U': // VERSION 3.3 UT US 
....................       if (!ttccp_login) break; 
43F6:  MOVLB  1
43F8:  MOVF   x2C,F
43FA:  BNZ   4404
43FC:  MOVLB  0
43FE:  GOTO   55B2
4402:  MOVLB  1
....................       switch (c2) 
....................         { 
4404:  MOVF   xEE,W
4406:  XORLW  54
4408:  MOVLB  0
440A:  BZ    4414
440C:  XORLW  07
440E:  BTFSC  FD8.2
4410:  BRA    4510
4412:  BRA    45FC
....................         case 'T':  
....................           if (query) 
4414:  MOVLB  1
4416:  MOVF   xEC,F
4418:  BZ    4466
....................             { 
....................             sprintf(buf, "UT %u\r", setup.UART_Time); 
441A:  MOVLW  01
441C:  MOVWF  xA4
441E:  MOVLW  C4
4420:  MOVWF  xA3
4422:  MOVLW  78
4424:  MOVWF  FF6
4426:  MOVLW  0C
4428:  MOVWF  FF7
442A:  MOVLW  03
442C:  MOVLB  2
442E:  MOVWF  x34
4430:  MOVLB  0
4432:  CALL   2E82
4436:  MOVFF  FB,234
443A:  MOVLW  1B
443C:  MOVLB  2
443E:  MOVWF  x35
4440:  MOVLB  0
4442:  CALL   2FFA
4446:  MOVLW  0D
4448:  MOVLB  2
444A:  MOVWF  x3D
444C:  MOVLB  0
444E:  CALL   2E60
....................             COM1_send_str(buf); 
4452:  MOVLW  01
4454:  MOVLB  2
4456:  MOVWF  x6D
4458:  MOVLW  C4
445A:  MOVWF  x6C
445C:  MOVLB  0
445E:  CALL   20D6
....................             } 
.................... 	            else 
4462:  BRA    4504
4464:  MOVLB  1
.................... 	            { 
.................... 	            val = get_int(); 
4466:  MOVLB  0
4468:  CALL   29D2
446C:  MOVFF  02,20D
4470:  MOVFF  01,20C
.................... 	            if (val < 240 && val >1) 
4474:  MOVLB  2
4476:  MOVF   x0D,F
4478:  BNZ   4490
447A:  MOVF   x0C,W
447C:  SUBLW  EF
447E:  BNC   4490
4480:  MOVF   x0D,F
4482:  BNZ   448A
4484:  MOVF   x0C,W
4486:  SUBLW  01
4488:  BC    4490
.................... 	              { 
.................... 	              setup.UART_Time = val;	               
448A:  MOVFF  20C,FB
.................... 	              } 
.................... 	            else 
448E:  BRA    4506
.................... 	              { 
.................... 				  			COM1_send_str("\r\nFAIL\r\n"); 
4490:  MOVLW  02
4492:  MOVWF  FEA
4494:  MOVLW  15
4496:  MOVWF  FE9
4498:  MOVLW  09
449A:  MOVWF  01
449C:  CLRF   FF7
449E:  MOVLW  00
44A0:  MOVLB  0
44A2:  CALL   08DA
44A6:  TBLRD*-
44A8:  TBLRD*+
44AA:  MOVFF  FF5,FEE
44AE:  DECFSZ 01,F
44B0:  BRA    44A8
44B2:  MOVLW  02
44B4:  MOVLB  2
44B6:  MOVWF  x6D
44B8:  MOVLW  15
44BA:  MOVWF  x6C
44BC:  MOVLB  0
44BE:  CALL   20D6
.................... 	              sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
44C2:  MOVLW  01
44C4:  MOVLB  1
44C6:  MOVWF  xA4
44C8:  MOVLW  78
44CA:  MOVWF  xA3
44CC:  MOVLW  80
44CE:  MOVWF  FF6
44D0:  MOVLW  0C
44D2:  MOVWF  FF7
44D4:  MOVLW  07
44D6:  MOVLB  2
44D8:  MOVWF  x34
44DA:  MOVLB  0
44DC:  CALL   2E82
44E0:  MOVFF  FB,234
44E4:  MOVLW  1B
44E6:  MOVLB  2
44E8:  MOVWF  x35
44EA:  MOVLB  0
44EC:  CALL   2FFA
44F0:  MOVLW  0D
44F2:  MOVLB  2
44F4:  MOVWF  x3D
44F6:  MOVLB  0
44F8:  CALL   2E60
.................... 	              ret = 0; 
44FC:  MOVLB  1
44FE:  CLRF   xC2
.................... 	              break; 
4500:  MOVLB  0
4502:  BRA    45FC
4504:  MOVLB  2
.................... 	              } 
.................... 	            } 
.................... 	            ret = 1; 
4506:  MOVLW  01
4508:  MOVLB  1
450A:  MOVWF  xC2
....................          		  break;  
450C:  MOVLB  0
450E:  BRA    45FC
....................                      
....................         case 'S': 
....................            { 
....................           if (query) 
4510:  MOVLB  1
4512:  MOVF   xEC,F
4514:  BZ    4562
....................             { 
....................             sprintf(buf, "US %u\r",setup.UART_Status); 
4516:  MOVLW  01
4518:  MOVWF  xA4
451A:  MOVLW  C4
451C:  MOVWF  xA3
451E:  MOVLW  8C
4520:  MOVWF  FF6
4522:  MOVLW  0C
4524:  MOVWF  FF7
4526:  MOVLW  03
4528:  MOVLB  2
452A:  MOVWF  x34
452C:  MOVLB  0
452E:  CALL   2E82
4532:  MOVFF  FC,234
4536:  MOVLW  1B
4538:  MOVLB  2
453A:  MOVWF  x35
453C:  MOVLB  0
453E:  CALL   2FFA
4542:  MOVLW  0D
4544:  MOVLB  2
4546:  MOVWF  x3D
4548:  MOVLB  0
454A:  CALL   2E60
....................             COM1_send_str(buf); 
454E:  MOVLW  01
4550:  MOVLB  2
4552:  MOVWF  x6D
4554:  MOVLW  C4
4556:  MOVWF  x6C
4558:  MOVLB  0
455A:  CALL   20D6
....................             } 
....................           else 
455E:  BRA    45F6
4560:  MOVLB  1
....................             { 
....................             val = get_int(); 
4562:  MOVLB  0
4564:  CALL   29D2
4568:  MOVFF  02,20D
456C:  MOVFF  01,20C
....................             if (val < 2) 
4570:  MOVLB  2
4572:  MOVF   x0D,F
4574:  BNZ   4582
4576:  MOVF   x0C,W
4578:  SUBLW  01
457A:  BNC   4582
....................               { 
....................               setup.UART_Status = val; 
457C:  MOVFF  20C,FC
....................               } 
....................             else 
4580:  BRA    45F8
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
4582:  MOVLW  02
4584:  MOVWF  FEA
4586:  MOVLW  15
4588:  MOVWF  FE9
458A:  MOVLW  09
458C:  MOVWF  01
458E:  CLRF   FF7
4590:  MOVLW  00
4592:  MOVLB  0
4594:  CALL   08DA
4598:  TBLRD*-
459A:  TBLRD*+
459C:  MOVFF  FF5,FEE
45A0:  DECFSZ 01,F
45A2:  BRA    459A
45A4:  MOVLW  02
45A6:  MOVLB  2
45A8:  MOVWF  x6D
45AA:  MOVLW  15
45AC:  MOVWF  x6C
45AE:  MOVLB  0
45B0:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
45B4:  MOVLW  01
45B6:  MOVLB  1
45B8:  MOVWF  xA4
45BA:  MOVLW  78
45BC:  MOVWF  xA3
45BE:  MOVLW  94
45C0:  MOVWF  FF6
45C2:  MOVLW  0C
45C4:  MOVWF  FF7
45C6:  MOVLW  07
45C8:  MOVLB  2
45CA:  MOVWF  x34
45CC:  MOVLB  0
45CE:  CALL   2E82
45D2:  MOVFF  FC,234
45D6:  MOVLW  1B
45D8:  MOVLB  2
45DA:  MOVWF  x35
45DC:  MOVLB  0
45DE:  CALL   2FFA
45E2:  MOVLW  0D
45E4:  MOVLB  2
45E6:  MOVWF  x3D
45E8:  MOVLB  0
45EA:  CALL   2E60
....................               ret = 0; 
45EE:  MOVLB  1
45F0:  CLRF   xC2
....................               break; 
45F2:  MOVLB  0
45F4:  BRA    45FC
45F6:  MOVLB  2
....................               } 
....................             } 
....................         break; 
45F8:  MOVLB  0
45FA:  BRA    45FC
....................         } 
....................         break; 
....................         } 
....................       break; 
45FC:  GOTO   55B2
....................        
.................... 	 case 'B': // VERSION 3.3 BG Block Ghange and Check Function 23.0.2016 
....................       if (!ttccp_login) break; 
4600:  MOVLB  1
4602:  MOVF   x2C,F
4604:  BNZ   460E
4606:  MOVLB  0
4608:  GOTO   55B2
460C:  MOVLB  1
....................       switch (c2) 
....................         { 
460E:  MOVF   xEE,W
4610:  XORLW  47
4612:  MOVLB  0
4614:  BZ    4618
4616:  BRA    4750
....................         case 'G':      
....................           if (query) 
4618:  MOVLB  1
461A:  MOVF   xEC,F
461C:  BZ    466A
....................             { 
....................             sprintf(buf, "BG %lu\r", setup.Block_per_second); 
461E:  MOVLW  01
4620:  MOVWF  xA4
4622:  MOVLW  C4
4624:  MOVWF  xA3
4626:  MOVLW  A0
4628:  MOVWF  FF6
462A:  MOVLW  0C
462C:  MOVWF  FF7
462E:  MOVLW  03
4630:  MOVLB  2
4632:  MOVWF  x34
4634:  MOVLB  0
4636:  CALL   2E82
463A:  MOVLW  10
463C:  MOVWF  FE9
463E:  MOVFF  100,235
4642:  MOVFF  FF,234
4646:  CALL   2EAA
464A:  MOVLW  0D
464C:  MOVLB  2
464E:  MOVWF  x3D
4650:  MOVLB  0
4652:  CALL   2E60
....................             COM1_send_str(buf); 
4656:  MOVLW  01
4658:  MOVLB  2
465A:  MOVWF  x6D
465C:  MOVLW  C4
465E:  MOVWF  x6C
4660:  MOVLB  0
4662:  CALL   20D6
....................             } 
....................           else 
4666:  BRA    4748
4668:  MOVLB  1
....................             { 
....................             sub = get_int(); 
466A:  MOVLB  0
466C:  CALL   29D2
4670:  MOVFF  01,00
4674:  MOVFF  02,01
4678:  CLRF   02
467A:  CLRF   03
467C:  MOVFF  03,207
4680:  MOVFF  02,206
4684:  MOVFF  01,205
4688:  MOVFF  00,204
....................             if (sub >= 1 && sub <= 40) 
468C:  MOVLB  2
468E:  MOVF   x07,F
4690:  BNZ   46A0
4692:  MOVF   x06,F
4694:  BNZ   46A0
4696:  MOVF   x05,F
4698:  BNZ   46A0
469A:  MOVF   x04,W
469C:  SUBLW  00
469E:  BC    46D4
46A0:  MOVF   x07,F
46A2:  BNZ   46D4
46A4:  MOVF   x06,F
46A6:  BNZ   46D4
46A8:  MOVF   x05,F
46AA:  BNZ   46D4
46AC:  MOVF   x04,W
46AE:  SUBLW  28
46B0:  BNC   46D4
....................               { 
.................... 	            //sub = sub*10; 
....................               //setup.Block_per_second = sub; 
....................               setup.Block_per_second = convert_power(sub); 
46B2:  MOVFF  205,22F
46B6:  MOVFF  204,22E
46BA:  MOVFF  205,231
46BE:  MOVFF  204,230
46C2:  MOVLB  0
46C4:  GOTO   3114
46C8:  MOVFF  02,100
46CC:  MOVFF  01,FF
....................               } 
....................             else 
46D0:  BRA    4748
46D2:  MOVLB  2
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
46D4:  MOVLW  02
46D6:  MOVWF  FEA
46D8:  MOVLW  15
46DA:  MOVWF  FE9
46DC:  MOVLW  09
46DE:  MOVWF  01
46E0:  CLRF   FF7
46E2:  MOVLW  00
46E4:  MOVLB  0
46E6:  CALL   08DA
46EA:  TBLRD*-
46EC:  TBLRD*+
46EE:  MOVFF  FF5,FEE
46F2:  DECFSZ 01,F
46F4:  BRA    46EC
46F6:  MOVLW  02
46F8:  MOVLB  2
46FA:  MOVWF  x6D
46FC:  MOVLW  15
46FE:  MOVWF  x6C
4700:  MOVLB  0
4702:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR BG %lu\r", setup.Block_per_second); 
4706:  MOVLW  01
4708:  MOVLB  1
470A:  MOVWF  xA4
470C:  MOVLW  78
470E:  MOVWF  xA3
4710:  MOVLW  A8
4712:  MOVWF  FF6
4714:  MOVLW  0C
4716:  MOVWF  FF7
4718:  MOVLW  07
471A:  MOVLB  2
471C:  MOVWF  x34
471E:  MOVLB  0
4720:  CALL   2E82
4724:  MOVLW  10
4726:  MOVWF  FE9
4728:  MOVFF  100,235
472C:  MOVFF  FF,234
4730:  CALL   2EAA
4734:  MOVLW  0D
4736:  MOVLB  2
4738:  MOVWF  x3D
473A:  MOVLB  0
473C:  CALL   2E60
....................               ret = 0; 
4740:  MOVLB  1
4742:  CLRF   xC2
....................               break; 
4744:  MOVLB  0
4746:  BRA    4750
....................               } 
....................             } 
....................           ret = 1; 
4748:  MOVLW  01
474A:  MOVLB  1
474C:  MOVWF  xC2
....................           break; 
474E:  MOVLB  0
....................         } 
....................       break; 
4750:  GOTO   55B2
....................        
....................       	 
....................     case 'I': 
....................       if (!ttccp_login) break; 
4754:  MOVLB  1
4756:  MOVF   x2C,F
4758:  BNZ   4762
475A:  MOVLB  0
475C:  GOTO   55B2
4760:  MOVLB  1
....................       switch (c2) 
....................         { 
4762:  MOVF   xEE,W
4764:  XORLW  44
4766:  MOVLB  0
4768:  BZ    4772
476A:  XORLW  07
476C:  BTFSC  FD8.2
476E:  BRA    486A
4770:  BRA    48CA
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
4772:  MOVLB  1
4774:  MOVF   xEC,F
4776:  BZ    47C4
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
4778:  MOVLW  01
477A:  MOVWF  xA4
477C:  MOVLW  C4
477E:  MOVWF  xA3
4780:  MOVLW  B4
4782:  MOVWF  FF6
4784:  MOVLW  0C
4786:  MOVWF  FF7
4788:  MOVLW  03
478A:  MOVLB  2
478C:  MOVWF  x34
478E:  MOVLB  0
4790:  CALL   2E82
4794:  MOVFF  B4,234
4798:  MOVLW  1B
479A:  MOVLB  2
479C:  MOVWF  x35
479E:  MOVLB  0
47A0:  CALL   2FFA
47A4:  MOVLW  0D
47A6:  MOVLB  2
47A8:  MOVWF  x3D
47AA:  MOVLB  0
47AC:  CALL   2E60
....................             COM1_send_str(buf); 
47B0:  MOVLW  01
47B2:  MOVLB  2
47B4:  MOVWF  x6D
47B6:  MOVLW  C4
47B8:  MOVWF  x6C
47BA:  MOVLB  0
47BC:  CALL   20D6
....................             } 
....................           else 
47C0:  BRA    4860
47C2:  MOVLB  1
....................             { 
....................             val = get_int(); 
47C4:  MOVLB  0
47C6:  CALL   29D2
47CA:  MOVFF  02,20D
47CE:  MOVFF  01,20C
....................             if (val < 4) 
47D2:  MOVLB  2
47D4:  MOVF   x0D,F
47D6:  BNZ   47EC
47D8:  MOVF   x0C,W
47DA:  SUBLW  03
47DC:  BNC   47EC
....................               { 
....................               setup.internal_pattern = val; 
47DE:  MOVFF  20C,B4
....................               FPGA_set_reg6(); 
47E2:  MOVLB  0
47E4:  CALL   171E
....................               } 
....................             else 
47E8:  BRA    4860
47EA:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
47EC:  MOVLW  02
47EE:  MOVWF  FEA
47F0:  MOVLW  15
47F2:  MOVWF  FE9
47F4:  MOVLW  09
47F6:  MOVWF  01
47F8:  CLRF   FF7
47FA:  MOVLW  00
47FC:  MOVLB  0
47FE:  CALL   08DA
4802:  TBLRD*-
4804:  TBLRD*+
4806:  MOVFF  FF5,FEE
480A:  DECFSZ 01,F
480C:  BRA    4804
480E:  MOVLW  02
4810:  MOVLB  2
4812:  MOVWF  x6D
4814:  MOVLW  15
4816:  MOVWF  x6C
4818:  MOVLB  0
481A:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
481E:  MOVLW  01
4820:  MOVLB  1
4822:  MOVWF  xA4
4824:  MOVLW  78
4826:  MOVWF  xA3
4828:  MOVLW  BC
482A:  MOVWF  FF6
482C:  MOVLW  0C
482E:  MOVWF  FF7
4830:  MOVLW  07
4832:  MOVLB  2
4834:  MOVWF  x34
4836:  MOVLB  0
4838:  CALL   2E82
483C:  MOVFF  B4,234
4840:  MOVLW  1B
4842:  MOVLB  2
4844:  MOVWF  x35
4846:  MOVLB  0
4848:  CALL   2FFA
484C:  MOVLW  0D
484E:  MOVLB  2
4850:  MOVWF  x3D
4852:  MOVLB  0
4854:  CALL   2E60
....................               ret = 0; 
4858:  MOVLB  1
485A:  CLRF   xC2
....................               break; 
485C:  MOVLB  0
485E:  BRA    48CA
....................               } 
....................             } 
....................           ret = 1; 
4860:  MOVLW  01
4862:  MOVLB  1
4864:  MOVWF  xC2
....................           break; 
4866:  MOVLB  0
4868:  BRA    48CA
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
486A:  MOVLB  1
486C:  MOVF   xEC,F
486E:  BZ    48BC
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
4870:  MOVLW  01
4872:  MOVWF  xA4
4874:  MOVLW  C4
4876:  MOVWF  xA3
4878:  MOVLW  C8
487A:  MOVWF  FF6
487C:  MOVLW  0C
487E:  MOVWF  FF7
4880:  MOVLW  03
4882:  MOVLB  2
4884:  MOVWF  x34
4886:  MOVLB  0
4888:  CALL   2E82
488C:  MOVLW  10
488E:  MOVWF  FE9
4890:  MOVFF  AC,235
4894:  MOVFF  AB,234
4898:  CALL   2EAA
489C:  MOVLW  0D
489E:  MOVLB  2
48A0:  MOVWF  x3D
48A2:  MOVLB  0
48A4:  CALL   2E60
....................             COM1_send_str(buf); 
48A8:  MOVLW  01
48AA:  MOVLB  2
48AC:  MOVWF  x6D
48AE:  MOVLW  C4
48B0:  MOVWF  x6C
48B2:  MOVLB  0
48B4:  CALL   20D6
....................             } 
....................           else 
48B8:  BRA    48C2
48BA:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
48BC:  MOVLB  0
48BE:  GOTO   31DC
....................             } 
....................           ret = 1; 
48C2:  MOVLW  01
48C4:  MOVLB  1
48C6:  MOVWF  xC2
....................           break; 
48C8:  MOVLB  0
....................         } 
....................       break; 
48CA:  GOTO   55B2
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
48CE:  MOVLB  1
48D0:  MOVF   x2C,F
48D2:  BNZ   48DC
48D4:  MOVLB  0
48D6:  GOTO   55B2
48DA:  MOVLB  1
....................       if (c2 == 'E') 
48DC:  MOVF   xEE,W
48DE:  SUBLW  45
48E0:  BNZ   48E4
....................         { 
....................         goto get_temp; 
48E2:  BRA    4E58
....................         } 
....................       break; 
48E4:  MOVLB  0
48E6:  GOTO   55B2
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
48EA:  MOVLB  1
48EC:  MOVF   x2C,F
48EE:  BNZ   48F8
48F0:  MOVLB  0
48F2:  GOTO   55B2
48F6:  MOVLB  1
....................       switch (c2) 
....................         { 
48F8:  MOVF   xEE,W
48FA:  XORLW  45
48FC:  MOVLB  0
48FE:  BZ    491A
4900:  XORLW  09
4902:  BTFSC  FD8.2
4904:  BRA    49FC
4906:  XORLW  1C
4908:  BTFSC  FD8.2
490A:  BRA    4A48
490C:  XORLW  1D
490E:  BTFSC  FD8.2
4910:  BRA    4ABE
4912:  XORLW  0E
4914:  BTFSC  FD8.2
4916:  BRA    4B34
4918:  BRA    4BAE
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
491A:  MOVLB  1
491C:  MOVF   xEE,W
491E:  SUBLW  45
4920:  BNZ   49C6
.................... 		{ 
....................           sprintf(buf, "VE %s ID=%02lu DT=%02lu%02u\r", VERSION, setup.unit_ID, setup.year, setup.week); 
4922:  MOVLW  01
4924:  MOVWF  xA4
4926:  MOVLW  C4
4928:  MOVWF  xA3
492A:  MOVLW  D0
492C:  MOVWF  FF6
492E:  MOVLW  0C
4930:  MOVWF  FF7
4932:  MOVLW  03
4934:  MOVLB  2
4936:  MOVWF  x34
4938:  MOVLB  0
493A:  CALL   2E82
493E:  MOVLW  04
4940:  MOVWF  FF6
4942:  MOVLW  09
4944:  MOVWF  FF7
4946:  GOTO   32AC
494A:  MOVLW  D5
494C:  MOVWF  FF6
494E:  MOVLW  0C
4950:  MOVWF  FF7
4952:  MOVLW  04
4954:  MOVLB  2
4956:  MOVWF  x34
4958:  MOVLB  0
495A:  CALL   2E82
495E:  MOVLW  0B
4960:  MOVWF  FE9
4962:  MOVFF  F2,235
4966:  MOVFF  F1,234
496A:  CALL   2EAA
496E:  MOVLW  DE
4970:  MOVWF  FF6
4972:  MOVLW  0C
4974:  MOVWF  FF7
4976:  MOVLW  04
4978:  MOVLB  2
497A:  MOVWF  x34
497C:  MOVLB  0
497E:  CALL   2E82
4982:  MOVLW  0B
4984:  MOVWF  FE9
4986:  MOVFF  EF,235
498A:  MOVFF  EE,234
498E:  CALL   2EAA
4992:  MOVFF  F0,234
4996:  MOVLW  01
4998:  MOVLB  2
499A:  MOVWF  x35
499C:  MOVLB  0
499E:  CALL   2FFA
49A2:  MOVLW  0D
49A4:  MOVLB  2
49A6:  MOVWF  x3D
49A8:  MOVLB  0
49AA:  CALL   2E60
....................           COM1_send_str(buf); 
49AE:  MOVLW  01
49B0:  MOVLB  2
49B2:  MOVWF  x6D
49B4:  MOVLW  C4
49B6:  MOVWF  x6C
49B8:  MOVLB  0
49BA:  CALL   20D6
....................           ret = 1; 
49BE:  MOVLW  01
49C0:  MOVLB  1
49C2:  MOVWF  xC2
.................... 		} 
.................... 		else 
49C4:  BRA    49F8
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
49C6:  MOVLW  02
49C8:  MOVWF  FEA
49CA:  MOVLW  15
49CC:  MOVWF  FE9
49CE:  MOVLW  09
49D0:  MOVWF  01
49D2:  CLRF   FF7
49D4:  MOVLW  00
49D6:  MOVLB  0
49D8:  CALL   08DA
49DC:  TBLRD*-
49DE:  TBLRD*+
49E0:  MOVFF  FF5,FEE
49E4:  DECFSZ 01,F
49E6:  BRA    49DE
49E8:  MOVLW  02
49EA:  MOVLB  2
49EC:  MOVWF  x6D
49EE:  MOVLW  15
49F0:  MOVWF  x6C
49F2:  MOVLB  0
49F4:  CALL   20D6
....................           break; 
49F8:  MOVLB  0
49FA:  BRA    4BAE
....................  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
49FC:  MOVLB  1
49FE:  MOVF   xEE,W
4A00:  SUBLW  4C
4A02:  BNZ   4A12
.................... 		{ 
....................  
....................           set_low_power_level(); 
4A04:  MOVLB  0
4A06:  GOTO   32CE
....................           ret = 1; 
4A0A:  MOVLW  01
4A0C:  MOVLB  1
4A0E:  MOVWF  xC2
.................... 		} 
.................... 		else 
4A10:  BRA    4A44
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
4A12:  MOVLW  02
4A14:  MOVWF  FEA
4A16:  MOVLW  15
4A18:  MOVWF  FE9
4A1A:  MOVLW  09
4A1C:  MOVWF  01
4A1E:  CLRF   FF7
4A20:  MOVLW  00
4A22:  MOVLB  0
4A24:  CALL   08DA
4A28:  TBLRD*-
4A2A:  TBLRD*+
4A2C:  MOVFF  FF5,FEE
4A30:  DECFSZ 01,F
4A32:  BRA    4A2A
4A34:  MOVLW  02
4A36:  MOVLB  2
4A38:  MOVWF  x6D
4A3A:  MOVLW  15
4A3C:  MOVWF  x6C
4A3E:  MOVLB  0
4A40:  CALL   20D6
....................           break; 
4A44:  MOVLB  0
4A46:  BRA    4BAE
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
4A48:  MOVLB  1
4A4A:  MOVF   xEC,F
4A4C:  BZ    4AAE
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4A4E:  MOVLW  14
4A50:  MOVLB  0
4A52:  ADDWF  xBB,W
4A54:  MOVLB  2
4A56:  MOVWF  x2E
4A58:  MOVLW  00
4A5A:  MOVLB  0
4A5C:  ADDWFC xBC,W
4A5E:  MOVLB  2
4A60:  MOVWF  x2F
4A62:  MOVLW  01
4A64:  MOVLB  1
4A66:  MOVWF  xA4
4A68:  MOVLW  C4
4A6A:  MOVWF  xA3
4A6C:  MOVLW  EE
4A6E:  MOVWF  FF6
4A70:  MOVLW  0C
4A72:  MOVWF  FF7
4A74:  MOVLW  03
4A76:  MOVLB  2
4A78:  MOVWF  x34
4A7A:  MOVLB  0
4A7C:  CALL   2E82
4A80:  MOVLW  10
4A82:  MOVWF  FE9
4A84:  MOVFF  22F,235
4A88:  MOVFF  22E,234
4A8C:  CALL   2EAA
4A90:  MOVLW  0D
4A92:  MOVLB  2
4A94:  MOVWF  x3D
4A96:  MOVLB  0
4A98:  CALL   2E60
....................             COM1_send_str(buf); 
4A9C:  MOVLW  01
4A9E:  MOVLB  2
4AA0:  MOVWF  x6D
4AA2:  MOVLW  C4
4AA4:  MOVWF  x6C
4AA6:  MOVLB  0
4AA8:  CALL   20D6
....................             } 
....................           else 
4AAC:  BRA    4AB4
....................             set_power_level(); 
4AAE:  MOVLB  0
4AB0:  GOTO   3342
....................             ret = 1; 
4AB4:  MOVLW  01
4AB6:  MOVLB  1
4AB8:  MOVWF  xC2
....................           break; 
4ABA:  MOVLB  0
4ABC:  BRA    4BAE
....................  
....................         case 'M': // manual power level 
....................           if (query) 
4ABE:  MOVLB  1
4AC0:  MOVF   xEC,F
4AC2:  BZ    4B10
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
4AC4:  MOVLW  01
4AC6:  MOVWF  xA4
4AC8:  MOVLW  C4
4ACA:  MOVWF  xA3
4ACC:  MOVLW  F6
4ACE:  MOVWF  FF6
4AD0:  MOVLW  0C
4AD2:  MOVWF  FF7
4AD4:  MOVLW  03
4AD6:  MOVLB  2
4AD8:  MOVWF  x34
4ADA:  MOVLB  0
4ADC:  CALL   2E82
4AE0:  MOVLW  10
4AE2:  MOVWF  FE9
4AE4:  MOVFF  23,235
4AE8:  MOVFF  22,234
4AEC:  CALL   2EAA
4AF0:  MOVLW  0D
4AF2:  MOVLB  2
4AF4:  MOVWF  x3D
4AF6:  MOVLB  0
4AF8:  CALL   2E60
....................             COM1_send_str(buf); 
4AFC:  MOVLW  01
4AFE:  MOVLB  2
4B00:  MOVWF  x6D
4B02:  MOVLW  C4
4B04:  MOVWF  x6C
4B06:  MOVLB  0
4B08:  CALL   20D6
....................             } 
....................           else 
4B0C:  BRA    4B32
4B0E:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
4B10:  MOVLB  0
4B12:  CALL   29D2
4B16:  MOVFF  02,23
4B1A:  MOVFF  01,22
....................             set_AD5312(DAC_NEG_VOLT, val); 
4B1E:  MOVLW  01
4B20:  MOVLB  2
4B22:  MOVWF  x32
4B24:  MOVFF  20D,234
4B28:  MOVFF  20C,233
4B2C:  MOVLB  0
4B2E:  CALL   0F78
....................             } 
....................           break; 
4B32:  BRA    4BAE
....................         case 'C': // manual power level 
....................           if (query) 
4B34:  MOVLB  1
4B36:  MOVF   xEC,F
4B38:  BZ    4B86
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
4B3A:  MOVLW  01
4B3C:  MOVWF  xA4
4B3E:  MOVLW  C4
4B40:  MOVWF  xA3
4B42:  MOVLW  FE
4B44:  MOVWF  FF6
4B46:  MOVLW  0C
4B48:  MOVWF  FF7
4B4A:  MOVLW  03
4B4C:  MOVLB  2
4B4E:  MOVWF  x34
4B50:  MOVLB  0
4B52:  CALL   2E82
4B56:  MOVLW  10
4B58:  MOVWF  FE9
4B5A:  MOVFF  25,235
4B5E:  MOVFF  24,234
4B62:  CALL   2EAA
4B66:  MOVLW  0D
4B68:  MOVLB  2
4B6A:  MOVWF  x3D
4B6C:  MOVLB  0
4B6E:  CALL   2E60
....................             COM1_send_str(buf); 
4B72:  MOVLW  01
4B74:  MOVLB  2
4B76:  MOVWF  x6D
4B78:  MOVLW  C4
4B7A:  MOVWF  x6C
4B7C:  MOVLB  0
4B7E:  CALL   20D6
....................             } 
....................           else 
4B82:  BRA    4BAE
4B84:  MOVLB  1
....................             { 
....................             val = get_int(); 
4B86:  MOVLB  0
4B88:  CALL   29D2
4B8C:  MOVFF  02,20D
4B90:  MOVFF  01,20C
....................             manual_pos = val; 
4B94:  MOVFF  20D,25
4B98:  MOVFF  20C,24
....................             set_AD5312(DAC_POS_VOLT, val); 
4B9C:  MOVLB  2
4B9E:  CLRF   x32
4BA0:  MOVFF  20D,234
4BA4:  MOVFF  20C,233
4BA8:  MOVLB  0
4BAA:  CALL   0F78
....................             } 
....................           break; 
.................... 		} 
....................       break; 
4BAE:  GOTO   55B2
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
4BB2:  MOVLB  1
4BB4:  MOVF   x2C,F
4BB6:  BNZ   4BC0
4BB8:  MOVLB  0
4BBA:  GOTO   55B2
4BBE:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
4BC0:  MOVF   xEE,W
4BC2:  SUBLW  53
4BC4:  BTFSS  FD8.2
4BC6:  BRA    4CBE
....................         { 
....................           if (query) 
4BC8:  MOVF   xEC,F
4BCA:  BZ    4C18
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
4BCC:  MOVLW  01
4BCE:  MOVWF  xA4
4BD0:  MOVLW  C4
4BD2:  MOVWF  xA3
4BD4:  MOVLW  06
4BD6:  MOVWF  FF6
4BD8:  MOVLW  0D
4BDA:  MOVWF  FF7
4BDC:  MOVLW  03
4BDE:  MOVLB  2
4BE0:  MOVWF  x34
4BE2:  MOVLB  0
4BE4:  CALL   2E82
4BE8:  MOVFF  B2,234
4BEC:  MOVLW  1B
4BEE:  MOVLB  2
4BF0:  MOVWF  x35
4BF2:  MOVLB  0
4BF4:  CALL   2FFA
4BF8:  MOVLW  0D
4BFA:  MOVLB  2
4BFC:  MOVWF  x3D
4BFE:  MOVLB  0
4C00:  CALL   2E60
....................             COM1_send_str(buf); 
4C04:  MOVLW  01
4C06:  MOVLB  2
4C08:  MOVWF  x6D
4C0A:  MOVLW  C4
4C0C:  MOVWF  x6C
4C0E:  MOVLB  0
4C10:  CALL   20D6
....................             } 
....................           else 
4C14:  BRA    4CB6
4C16:  MOVLB  1
....................             { 
....................             val = get_int(); 
4C18:  MOVLB  0
4C1A:  CALL   29D2
4C1E:  MOVFF  02,20D
4C22:  MOVFF  01,20C
....................             if (val < 2) 
4C26:  MOVLB  2
4C28:  MOVF   x0D,F
4C2A:  BNZ   4C40
4C2C:  MOVF   x0C,W
4C2E:  SUBLW  01
4C30:  BNC   4C40
....................               { 
....................               setup.clock_source = val; 
4C32:  MOVFF  20C,B2
....................               FPGA_set_reg6(); 
4C36:  MOVLB  0
4C38:  CALL   171E
....................               } 
....................             else 
4C3C:  BRA    4CB6
4C3E:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4C40:  MOVLW  02
4C42:  MOVWF  FEA
4C44:  MOVLW  15
4C46:  MOVWF  FE9
4C48:  MOVLW  09
4C4A:  MOVWF  01
4C4C:  CLRF   FF7
4C4E:  MOVLW  00
4C50:  MOVLB  0
4C52:  CALL   08DA
4C56:  TBLRD*-
4C58:  TBLRD*+
4C5A:  MOVFF  FF5,FEE
4C5E:  DECFSZ 01,F
4C60:  BRA    4C58
4C62:  MOVLW  02
4C64:  MOVLB  2
4C66:  MOVWF  x6D
4C68:  MOVLW  15
4C6A:  MOVWF  x6C
4C6C:  MOVLB  0
4C6E:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
4C72:  MOVLW  01
4C74:  MOVLB  1
4C76:  MOVWF  xA4
4C78:  MOVLW  78
4C7A:  MOVWF  xA3
4C7C:  MOVLW  0E
4C7E:  MOVWF  FF6
4C80:  MOVLW  0D
4C82:  MOVWF  FF7
4C84:  MOVLW  07
4C86:  MOVLB  2
4C88:  MOVWF  x34
4C8A:  MOVLB  0
4C8C:  CALL   2E82
4C90:  MOVFF  B2,234
4C94:  MOVLW  1B
4C96:  MOVLB  2
4C98:  MOVWF  x35
4C9A:  MOVLB  0
4C9C:  CALL   2FFA
4CA0:  MOVLW  0D
4CA2:  MOVLB  2
4CA4:  MOVWF  x3D
4CA6:  MOVLB  0
4CA8:  CALL   2E60
....................               ret = 0; 
4CAC:  MOVLB  1
4CAE:  CLRF   xC2
....................               break; 
4CB0:  MOVLB  0
4CB2:  GOTO   55B2
....................               } 
....................             } 
....................  
....................         ret = 1; 
4CB6:  MOVLW  01
4CB8:  MOVLB  1
4CBA:  MOVWF  xC2
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
4CBC:  BRA    4DBA
4CBE:  MOVF   xEE,W
4CC0:  SUBLW  50
4CC2:  BTFSS  FD8.2
4CC4:  BRA    4DBA
....................         { 
....................           if (query) 
4CC6:  MOVF   xEC,F
4CC8:  BZ    4D16
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
4CCA:  MOVLW  01
4CCC:  MOVWF  xA4
4CCE:  MOVLW  C4
4CD0:  MOVWF  xA3
4CD2:  MOVLW  1A
4CD4:  MOVWF  FF6
4CD6:  MOVLW  0D
4CD8:  MOVWF  FF7
4CDA:  MOVLW  03
4CDC:  MOVLB  2
4CDE:  MOVWF  x34
4CE0:  MOVLB  0
4CE2:  CALL   2E82
4CE6:  MOVFF  B0,234
4CEA:  MOVLW  1B
4CEC:  MOVLB  2
4CEE:  MOVWF  x35
4CF0:  MOVLB  0
4CF2:  CALL   2FFA
4CF6:  MOVLW  0D
4CF8:  MOVLB  2
4CFA:  MOVWF  x3D
4CFC:  MOVLB  0
4CFE:  CALL   2E60
....................             COM1_send_str(buf); 
4D02:  MOVLW  01
4D04:  MOVLB  2
4D06:  MOVWF  x6D
4D08:  MOVLW  C4
4D0A:  MOVWF  x6C
4D0C:  MOVLB  0
4D0E:  CALL   20D6
....................             } 
....................           else 
4D12:  BRA    4DB4
4D14:  MOVLB  1
....................             { 
....................             val = get_int(); 
4D16:  MOVLB  0
4D18:  CALL   29D2
4D1C:  MOVFF  02,20D
4D20:  MOVFF  01,20C
....................             if (val < 2) 
4D24:  MOVLB  2
4D26:  MOVF   x0D,F
4D28:  BNZ   4D3E
4D2A:  MOVF   x0C,W
4D2C:  SUBLW  01
4D2E:  BNC   4D3E
....................               { 
....................               setup.clock_polarity = val; 
4D30:  MOVFF  20C,B0
....................               FPGA_set_reg0(); 
4D34:  MOVLB  0
4D36:  CALL   16C2
....................               } 
....................             else 
4D3A:  BRA    4DB4
4D3C:  MOVLB  2
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4D3E:  MOVLW  02
4D40:  MOVWF  FEA
4D42:  MOVLW  15
4D44:  MOVWF  FE9
4D46:  MOVLW  09
4D48:  MOVWF  01
4D4A:  CLRF   FF7
4D4C:  MOVLW  00
4D4E:  MOVLB  0
4D50:  CALL   08DA
4D54:  TBLRD*-
4D56:  TBLRD*+
4D58:  MOVFF  FF5,FEE
4D5C:  DECFSZ 01,F
4D5E:  BRA    4D56
4D60:  MOVLW  02
4D62:  MOVLB  2
4D64:  MOVWF  x6D
4D66:  MOVLW  15
4D68:  MOVWF  x6C
4D6A:  MOVLB  0
4D6C:  CALL   20D6
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4D70:  MOVLW  01
4D72:  MOVLB  1
4D74:  MOVWF  xA4
4D76:  MOVLW  78
4D78:  MOVWF  xA3
4D7A:  MOVLW  22
4D7C:  MOVWF  FF6
4D7E:  MOVLW  0D
4D80:  MOVWF  FF7
4D82:  MOVLW  07
4D84:  MOVLB  2
4D86:  MOVWF  x34
4D88:  MOVLB  0
4D8A:  CALL   2E82
4D8E:  MOVFF  B0,234
4D92:  MOVLW  1B
4D94:  MOVLB  2
4D96:  MOVWF  x35
4D98:  MOVLB  0
4D9A:  CALL   2FFA
4D9E:  MOVLW  0D
4DA0:  MOVLB  2
4DA2:  MOVWF  x3D
4DA4:  MOVLB  0
4DA6:  CALL   2E60
....................               ret = 0; 
4DAA:  MOVLB  1
4DAC:  CLRF   xC2
....................               break; 
4DAE:  MOVLB  0
4DB0:  GOTO   55B2
....................               } 
....................             } 
....................  
....................         ret = 1; 
4DB4:  MOVLW  01
4DB6:  MOVLB  1
4DB8:  MOVWF  xC2
....................         } 
....................       break; 
4DBA:  MOVLB  0
4DBC:  GOTO   55B2
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
4DC0:  MOVLB  1
4DC2:  MOVF   x2C,F
4DC4:  BNZ   4DCE
4DC6:  MOVLB  0
4DC8:  GOTO   55B2
4DCC:  MOVLB  1
....................       switch (c2) 
....................         { 
4DCE:  MOVF   xEE,W
4DD0:  XORLW  50
4DD2:  MOVLB  0
4DD4:  BZ    4DE2
4DD6:  XORLW  04
4DD8:  BZ    4E56
4DDA:  XORLW  06
4DDC:  BTFSC  FD8.2
4DDE:  BRA    5046
4DE0:  BRA    506E
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
4DE2:  MOVLW  14
4DE4:  MOVWF  01
4DE6:  MOVF   FC2,W
4DE8:  ANDLW  83
4DEA:  IORWF  01,W
4DEC:  MOVWF  FC2
....................           delay_us(50); 
4DEE:  MOVLW  42
4DF0:  MOVWF  00
4DF2:  DECFSZ 00,F
4DF4:  BRA    4DF2
4DF6:  NOP   
....................           val = read_adc(); 
4DF8:  BSF    FC2.1
4DFA:  BTFSC  FC2.1
4DFC:  BRA    4DFA
4DFE:  MOVFF  FC4,20D
4E02:  MOVLB  2
4E04:  MOVFF  FC3,20C
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
4E08:  MOVLW  01
4E0A:  MOVLB  1
4E0C:  MOVWF  xA4
4E0E:  MOVLW  78
4E10:  MOVWF  xA3
4E12:  MOVLW  2E
4E14:  MOVWF  FF6
4E16:  MOVLW  0D
4E18:  MOVWF  FF7
4E1A:  MOVLW  04
4E1C:  MOVLB  2
4E1E:  MOVWF  x34
4E20:  MOVLB  0
4E22:  CALL   2E82
4E26:  MOVLW  10
4E28:  MOVWF  FE9
4E2A:  MOVFF  20D,235
4E2E:  MOVFF  20C,234
4E32:  CALL   2EAA
4E36:  MOVLW  0D
4E38:  MOVLB  2
4E3A:  MOVWF  x3D
4E3C:  MOVLB  0
4E3E:  CALL   2E60
4E42:  MOVLW  0A
4E44:  MOVLB  2
4E46:  MOVWF  x3D
4E48:  MOVLB  0
4E4A:  CALL   2E60
....................           ret = 0; 
4E4E:  MOVLB  1
4E50:  CLRF   xC2
....................           break; 
4E52:  MOVLB  0
4E54:  BRA    506E
4E56:  MOVLB  1
....................         case 'T': 
.................... get_temp: 
....................           set_adc_channel(A2D_TEMP); // read temperature 
4E58:  MOVLW  18
4E5A:  MOVWF  01
4E5C:  MOVF   FC2,W
4E5E:  ANDLW  83
4E60:  IORWF  01,W
4E62:  MOVWF  FC2
....................           delay_us(50); 
4E64:  MOVLW  42
4E66:  MOVWF  00
4E68:  DECFSZ 00,F
4E6A:  BRA    4E68
4E6C:  NOP   
....................           val = read_adc(); 
4E6E:  BSF    FC2.1
4E70:  BTFSC  FC2.1
4E72:  BRA    4E70
4E74:  MOVFF  FC4,20D
4E78:  MOVLB  2
4E7A:  MOVFF  FC3,20C
....................           temp = (float)val / 1024.0 * 3.3; 
4E7E:  MOVFF  20D,22F
4E82:  MOVFF  20C,22E
4E86:  MOVLB  0
4E88:  GOTO   33B6
4E8C:  MOVFF  00,22E
4E90:  MOVFF  01,22F
4E94:  MOVFF  02,230
4E98:  MOVFF  03,231
4E9C:  MOVFF  03,256
4EA0:  MOVFF  02,255
4EA4:  MOVFF  01,254
4EA8:  MOVFF  00,253
4EAC:  MOVLB  2
4EAE:  CLRF   x5A
4EB0:  CLRF   x59
4EB2:  CLRF   x58
4EB4:  MOVLW  89
4EB6:  MOVWF  x57
4EB8:  MOVLB  0
4EBA:  CALL   178E
4EBE:  MOVFF  00,22E
4EC2:  MOVFF  01,22F
4EC6:  MOVFF  02,230
4ECA:  MOVFF  03,231
4ECE:  MOVFF  03,256
4ED2:  MOVFF  02,255
4ED6:  MOVFF  01,254
4EDA:  MOVFF  00,253
4EDE:  MOVLW  33
4EE0:  MOVLB  2
4EE2:  MOVWF  x5A
4EE4:  MOVWF  x59
4EE6:  MOVLW  53
4EE8:  MOVWF  x58
4EEA:  MOVLW  80
4EEC:  MOVWF  x57
4EEE:  MOVLB  0
4EF0:  CALL   18EC
4EF4:  MOVFF  03,20B
4EF8:  MOVFF  02,20A
4EFC:  MOVFF  01,209
4F00:  MOVFF  00,208
....................           temp -= 0.75; 
4F04:  BSF    FD8.1
4F06:  MOVFF  20B,231
4F0A:  MOVFF  20A,230
4F0E:  MOVFF  209,22F
4F12:  MOVFF  208,22E
4F16:  MOVLB  2
4F18:  CLRF   x35
4F1A:  CLRF   x34
4F1C:  MOVLW  40
4F1E:  MOVWF  x33
4F20:  MOVLW  7E
4F22:  MOVWF  x32
4F24:  MOVLB  0
4F26:  CALL   2328
4F2A:  MOVFF  03,20B
4F2E:  MOVFF  02,20A
4F32:  MOVFF  01,209
4F36:  MOVFF  00,208
....................           temp *= 100; 
4F3A:  MOVFF  20B,256
4F3E:  MOVFF  20A,255
4F42:  MOVFF  209,254
4F46:  MOVFF  208,253
4F4A:  MOVLB  2
4F4C:  CLRF   x5A
4F4E:  CLRF   x59
4F50:  MOVLW  48
4F52:  MOVWF  x58
4F54:  MOVLW  85
4F56:  MOVWF  x57
4F58:  MOVLB  0
4F5A:  CALL   18EC
4F5E:  MOVFF  03,20B
4F62:  MOVFF  02,20A
4F66:  MOVFF  01,209
4F6A:  MOVFF  00,208
....................           temp += 25.0; 
4F6E:  BCF    FD8.1
4F70:  MOVFF  20B,231
4F74:  MOVFF  20A,230
4F78:  MOVFF  209,22F
4F7C:  MOVFF  208,22E
4F80:  MOVLB  2
4F82:  CLRF   x35
4F84:  CLRF   x34
4F86:  MOVLW  48
4F88:  MOVWF  x33
4F8A:  MOVLW  83
4F8C:  MOVWF  x32
4F8E:  MOVLB  0
4F90:  CALL   2328
4F94:  MOVFF  03,20B
4F98:  MOVFF  02,20A
4F9C:  MOVFF  01,209
4FA0:  MOVFF  00,208
....................           if(setup.pwr) 
4FA4:  MOVF   xAD,W
4FA6:  IORWF  xAE,W
4FA8:  BZ    5004
....................             { 
....................             sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", temp); 
4FAA:  MOVLW  01
4FAC:  MOVLB  1
4FAE:  MOVWF  xA4
4FB0:  MOVLW  78
4FB2:  MOVWF  xA3
4FB4:  MOVLW  38
4FB6:  MOVWF  FF6
4FB8:  MOVLW  0D
4FBA:  MOVWF  FF7
4FBC:  MOVLW  06
4FBE:  MOVLB  2
4FC0:  MOVWF  x34
4FC2:  MOVLB  0
4FC4:  CALL   2E82
4FC8:  MOVLW  05
4FCA:  MOVWF  FE9
4FCC:  MOVFF  20B,231
4FD0:  MOVFF  20A,230
4FD4:  MOVFF  209,22F
4FD8:  MOVFF  208,22E
4FDC:  MOVLW  02
4FDE:  MOVLB  2
4FE0:  MOVWF  x32
4FE2:  MOVLB  0
4FE4:  GOTO   33EE
4FE8:  MOVLW  43
4FEA:  MOVWF  FF6
4FEC:  MOVLW  0D
4FEE:  MOVWF  FF7
4FF0:  MOVLW  08
4FF2:  MOVLB  2
4FF4:  MOVWF  x34
4FF6:  MOVLB  0
4FF8:  CALL   2E82
....................             ret = 0; 
4FFC:  MOVLB  1
4FFE:  CLRF   xC2
....................             } 
....................             else 
5000:  BRA    5042
5002:  MOVLB  0
....................             { 
....................             temp = 0; 
5004:  MOVLB  2
5006:  CLRF   x0B
5008:  CLRF   x0A
500A:  CLRF   x09
500C:  CLRF   x08
....................             COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
500E:  MOVLW  02
5010:  MOVWF  FEA
5012:  MOVLW  15
5014:  MOVWF  FE9
5016:  MOVWF  01
5018:  CLRF   FF7
501A:  MOVLW  00
501C:  MOVLB  0
501E:  CALL   0914
5022:  TBLRD*-
5024:  TBLRD*+
5026:  MOVFF  FF5,FEE
502A:  DECFSZ 01,F
502C:  BRA    5024
502E:  MOVLW  02
5030:  MOVLB  2
5032:  MOVWF  x6D
5034:  MOVLW  15
5036:  MOVWF  x6C
5038:  MOVLB  0
503A:  CALL   20D6
....................             ret = 0; 
503E:  MOVLB  1
5040:  CLRF   xC2
....................              
....................             } 
....................           break; 
5042:  MOVLB  0
5044:  BRA    506E
....................  
....................         case 'R': 
....................                 set_adc_channel(A2D_PREV); // select forward power input 
5046:  MOVLW  10
5048:  MOVWF  01
504A:  MOVF   FC2,W
504C:  ANDLW  83
504E:  IORWF  01,W
5050:  MOVWF  FC2
....................                 delay_us(20); 
5052:  MOVLW  1A
5054:  MOVWF  00
5056:  DECFSZ 00,F
5058:  BRA    5056
505A:  NOP   
....................                 revp = read_adc(); 
505C:  BSF    FC2.1
505E:  BTFSC  FC2.1
5060:  BRA    505E
5062:  MOVFF  FC4,108
5066:  MOVLB  1
5068:  MOVFF  FC3,107
506C:  MOVLB  0
....................                 } 
....................               break; 
506E:  BRA    55B2
....................       break; 
5070:  BRA    55B2
....................  
....................       case 'Q': //statusl      if (!ttccp_login) break; 
....................  
....................       COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
5072:  MOVLW  02
5074:  MOVWF  FEA
5076:  MOVLW  15
5078:  MOVWF  FE9
507A:  MOVLW  19
507C:  MOVWF  01
507E:  CLRF   FF7
5080:  MOVLW  00
5082:  CALL   093A
5086:  TBLRD*-
5088:  TBLRD*+
508A:  MOVFF  FF5,FEE
508E:  DECFSZ 01,F
5090:  BRA    5088
5092:  MOVLW  02
5094:  MOVLB  2
5096:  MOVWF  x6D
5098:  MOVLW  15
509A:  MOVWF  x6C
509C:  MOVLB  0
509E:  CALL   20D6
....................       COM1_send_str(VERSION); 
50A2:  MOVLW  02
50A4:  MOVWF  FEA
50A6:  MOVLW  15
50A8:  MOVWF  FE9
50AA:  MOVLW  0F
50AC:  MOVWF  01
50AE:  CLRF   FF7
50B0:  MOVLW  00
50B2:  CALL   08F4
50B6:  TBLRD*-
50B8:  TBLRD*+
50BA:  MOVFF  FF5,FEE
50BE:  DECFSZ 01,F
50C0:  BRA    50B8
50C2:  MOVLW  02
50C4:  MOVLB  2
50C6:  MOVWF  x6D
50C8:  MOVLW  15
50CA:  MOVWF  x6C
50CC:  MOVLB  0
50CE:  CALL   20D6
....................       sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................               setup.unit_ID, setup.year, setup.week); 
50D2:  MOVLW  01
50D4:  MOVLB  1
50D6:  MOVWF  xA4
50D8:  MOVLW  C4
50DA:  MOVWF  xA3
50DC:  MOVLW  4C
50DE:  MOVWF  FF6
50E0:  MOVLW  0D
50E2:  MOVWF  FF7
50E4:  MOVLW  05
50E6:  MOVLB  2
50E8:  MOVWF  x34
50EA:  MOVLB  0
50EC:  CALL   2E82
50F0:  MOVLW  10
50F2:  MOVWF  FE9
50F4:  MOVFF  F2,235
50F8:  MOVFF  F1,234
50FC:  CALL   2EAA
5100:  MOVLW  54
5102:  MOVWF  FF6
5104:  MOVLW  0D
5106:  MOVWF  FF7
5108:  MOVLW  04
510A:  MOVLB  2
510C:  MOVWF  x34
510E:  MOVLB  0
5110:  CALL   2E82
5114:  MOVLW  0B
5116:  MOVWF  FE9
5118:  MOVFF  EF,235
511C:  MOVFF  EE,234
5120:  CALL   2EAA
5124:  MOVFF  F0,234
5128:  MOVLW  01
512A:  MOVLB  2
512C:  MOVWF  x35
512E:  MOVLB  0
5130:  CALL   2FFA
5134:  MOVLW  0D
5136:  MOVLB  2
5138:  MOVWF  x3D
513A:  MOVLB  0
513C:  CALL   2E60
....................       COM1_send_str(buf); 
5140:  MOVLW  01
5142:  MOVLB  2
5144:  MOVWF  x6D
5146:  MOVLW  C4
5148:  MOVWF  x6C
514A:  MOVLB  0
514C:  CALL   20D6
....................  
....................                 set_adc_channel(A2D_PREV); // select forward power input 
5150:  MOVLW  10
5152:  MOVWF  01
5154:  MOVF   FC2,W
5156:  ANDLW  83
5158:  IORWF  01,W
515A:  MOVWF  FC2
....................                 delay_us(20); 
515C:  MOVLW  1A
515E:  MOVWF  00
5160:  DECFSZ 00,F
5162:  BRA    5160
5164:  NOP   
....................                 revp = read_adc(); 
5166:  BSF    FC2.1
5168:  BTFSC  FC2.1
516A:  BRA    5168
516C:  MOVFF  FC4,108
5170:  MOVLB  1
5172:  MOVFF  FC3,107
....................  
....................           if (revp <= 580) 
5176:  MOVF   x08,W
5178:  SUBLW  02
517A:  BNC   51A4
517C:  BNZ   5184
517E:  MOVF   x07,W
5180:  SUBLW  44
5182:  BNC   51A4
....................           strcpy(revstat, "GOOD"); 
5184:  MOVLW  01
5186:  MOVWF  FEA
5188:  MOVLW  EF
518A:  MOVWF  FE9
518C:  MOVLW  00
518E:  MOVLB  0
5190:  CALL   0964
5194:  TBLRD*-
5196:  TBLRD*+
5198:  MOVF   FF5,W
519A:  MOVWF  FEE
519C:  IORLW  00
519E:  BNZ   5196
....................           else 
51A0:  BRA    51C0
51A2:  MOVLB  1
....................           strcpy(revstat, "BAD"); 
51A4:  MOVLW  01
51A6:  MOVWF  FEA
51A8:  MOVLW  EF
51AA:  MOVWF  FE9
51AC:  MOVLW  00
51AE:  MOVLB  0
51B0:  CALL   097A
51B4:  TBLRD*-
51B6:  TBLRD*+
51B8:  MOVF   FF5,W
51BA:  MOVWF  FEE
51BC:  IORLW  00
51BE:  BNZ   51B6
....................  
....................           if(setup.rp) 
51C0:  MOVF   xF9,W
51C2:  IORWF  xFA,W
51C4:  BZ    51CE
....................             rp=0; 
51C6:  MOVLB  2
51C8:  CLRF   x0F
51CA:  CLRF   x0E
....................             else 
51CC:  BRA    51D6
....................               rp=1; 
51CE:  MOVLB  2
51D0:  CLRF   x0F
51D2:  MOVLW  01
51D4:  MOVWF  x0E
....................  
....................  
....................       sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................               setup.frequency, revstat, setup.power_level+20, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
51D6:  MOVLW  14
51D8:  MOVLB  0
51DA:  ADDWF  xBB,W
51DC:  MOVLB  2
51DE:  MOVWF  x2E
51E0:  MOVLW  00
51E2:  MOVLB  0
51E4:  ADDWFC xBC,W
51E6:  MOVLB  2
51E8:  MOVWF  x2F
51EA:  MOVFF  AC,233
51EE:  MOVFF  AB,232
51F2:  CLRF   x35
51F4:  MOVLW  64
51F6:  MOVWF  x34
51F8:  MOVLB  0
51FA:  CALL   359E
51FE:  MOVFF  02,231
5202:  MOVFF  01,230
5206:  MOVFF  AC,233
520A:  MOVFF  AB,232
520E:  MOVLB  2
5210:  CLRF   x35
5212:  MOVLW  64
5214:  MOVWF  x34
5216:  MOVLB  0
5218:  CALL   359E
521C:  MOVFF  00,232
5220:  MOVFF  03,233
5224:  MOVLW  01
5226:  MOVLB  1
5228:  MOVWF  xA4
522A:  MOVLW  C4
522C:  MOVWF  xA3
522E:  MOVLW  64
5230:  MOVWF  FF6
5232:  MOVLW  0D
5234:  MOVWF  FF7
5236:  MOVLW  08
5238:  MOVLB  2
523A:  MOVWF  x34
523C:  MOVLB  0
523E:  CALL   2E82
5242:  MOVLW  10
5244:  MOVWF  FE9
5246:  MOVFF  BA,235
524A:  MOVFF  B9,234
524E:  CALL   2EAA
5252:  MOVLW  6F
5254:  MOVWF  FF6
5256:  MOVLW  0D
5258:  MOVWF  FF7
525A:  MOVLW  06
525C:  MOVLB  2
525E:  MOVWF  x34
5260:  MOVLB  0
5262:  CALL   2E82
5266:  MOVLW  01
5268:  MOVWF  FEA
526A:  MOVLW  EF
526C:  MOVWF  FE9
526E:  GOTO   35E4
5272:  MOVLW  77
5274:  MOVWF  FF6
5276:  MOVLW  0D
5278:  MOVWF  FF7
527A:  MOVLW  07
527C:  MOVLB  2
527E:  MOVWF  x34
5280:  MOVLB  0
5282:  CALL   2E82
5286:  MOVLW  10
5288:  MOVWF  FE9
528A:  MOVFF  22F,235
528E:  MOVFF  22E,234
5292:  CALL   2EAA
5296:  MOVLW  81
5298:  MOVWF  FF6
529A:  MOVLW  0D
529C:  MOVWF  FF7
529E:  MOVLW  05
52A0:  MOVLB  2
52A2:  MOVWF  x34
52A4:  MOVLB  0
52A6:  CALL   2E82
52AA:  MOVLW  10
52AC:  MOVWF  FE9
52AE:  MOVFF  231,235
52B2:  MOVFF  230,234
52B6:  CALL   2EAA
52BA:  MOVLW  2E
52BC:  MOVLB  2
52BE:  MOVWF  x3D
52C0:  MOVLB  0
52C2:  CALL   2E60
52C6:  MOVLW  10
52C8:  MOVWF  FE9
52CA:  MOVFF  233,235
52CE:  MOVFF  232,234
52D2:  CALL   2EAA
52D6:  MOVLW  8D
52D8:  MOVWF  FF6
52DA:  MOVLW  0D
52DC:  MOVWF  FF7
52DE:  MOVLW  09
52E0:  MOVLB  2
52E2:  MOVWF  x34
52E4:  MOVLB  0
52E6:  CALL   2E82
52EA:  MOVFF  AF,234
52EE:  MOVLW  1B
52F0:  MOVLB  2
52F2:  MOVWF  x35
52F4:  MOVLB  0
52F6:  CALL   2FFA
52FA:  MOVLW  98
52FC:  MOVWF  FF6
52FE:  MOVLW  0D
5300:  MOVWF  FF7
5302:  MOVLW  05
5304:  MOVLB  2
5306:  MOVWF  x34
5308:  MOVLB  0
530A:  CALL   2E82
530E:  MOVFF  B2,234
5312:  MOVLW  1B
5314:  MOVLB  2
5316:  MOVWF  x35
5318:  MOVLB  0
531A:  CALL   2FFA
531E:  MOVLW  9F
5320:  MOVWF  FF6
5322:  MOVLW  0D
5324:  MOVWF  FF7
5326:  MOVLW  05
5328:  MOVLB  2
532A:  MOVWF  x34
532C:  MOVLB  0
532E:  CALL   2E82
5332:  MOVLW  10
5334:  MOVWF  FE9
5336:  MOVFF  AE,235
533A:  MOVFF  AD,234
533E:  CALL   2EAA
5342:  MOVLW  0D
5344:  MOVLB  2
5346:  MOVWF  x3D
5348:  MOVLB  0
534A:  CALL   2E60
....................       COM1_send_str(buf); 
534E:  MOVLW  01
5350:  MOVLB  2
5352:  MOVWF  x6D
5354:  MOVLW  C4
5356:  MOVWF  x6C
5358:  MOVLB  0
535A:  CALL   20D6
....................  
....................       sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                 setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                         setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                         setup.clock_polarity); 
535E:  MOVLW  14
5360:  ADDWF  xF3,W
5362:  MOVLB  2
5364:  MOVWF  x2E
5366:  MOVLW  00
5368:  MOVLB  0
536A:  ADDWFC xF4,W
536C:  MOVLB  2
536E:  MOVWF  x2F
5370:  MOVLW  01
5372:  MOVLB  1
5374:  MOVWF  xA4
5376:  MOVLW  C4
5378:  MOVWF  xA3
537A:  MOVLW  AA
537C:  MOVWF  FF6
537E:  MOVLW  0D
5380:  MOVWF  FF7
5382:  MOVLW  06
5384:  MOVLB  2
5386:  MOVWF  x34
5388:  MOVLB  0
538A:  CALL   2E82
538E:  MOVFF  B7,234
5392:  MOVLW  1B
5394:  MOVLB  2
5396:  MOVWF  x35
5398:  MOVLB  0
539A:  CALL   2FFA
539E:  MOVLW  B2
53A0:  MOVWF  FF6
53A2:  MOVLW  0D
53A4:  MOVWF  FF7
53A6:  MOVLW  05
53A8:  MOVLB  2
53AA:  MOVWF  x34
53AC:  MOVLB  0
53AE:  CALL   2E82
53B2:  MOVFF  B5,234
53B6:  MOVLW  1B
53B8:  MOVLB  2
53BA:  MOVWF  x35
53BC:  MOVLB  0
53BE:  CALL   2FFA
53C2:  MOVLW  B9
53C4:  MOVWF  FF6
53C6:  MOVLW  0D
53C8:  MOVWF  FF7
53CA:  MOVLW  05
53CC:  MOVLB  2
53CE:  MOVWF  x34
53D0:  MOVLB  0
53D2:  CALL   2E82
53D6:  MOVFF  B1,234
53DA:  MOVLW  1B
53DC:  MOVLB  2
53DE:  MOVWF  x35
53E0:  MOVLB  0
53E2:  CALL   2FFA
53E6:  MOVLW  C0
53E8:  MOVWF  FF6
53EA:  MOVLW  0D
53EC:  MOVWF  FF7
53EE:  MOVLW  05
53F0:  MOVLB  2
53F2:  MOVWF  x34
53F4:  MOVLB  0
53F6:  CALL   2E82
53FA:  MOVLW  10
53FC:  MOVWF  FE9
53FE:  MOVFF  20F,235
5402:  MOVFF  20E,234
5406:  CALL   2EAA
540A:  MOVLW  C8
540C:  MOVWF  FF6
540E:  MOVLW  0D
5410:  MOVWF  FF7
5412:  MOVLW  05
5414:  MOVLB  2
5416:  MOVWF  x34
5418:  MOVLB  0
541A:  CALL   2E82
541E:  MOVFF  B3,234
5422:  MOVLW  1B
5424:  MOVLB  2
5426:  MOVWF  x35
5428:  MOVLB  0
542A:  CALL   2FFA
542E:  MOVLW  CF
5430:  MOVWF  FF6
5432:  MOVLW  0D
5434:  MOVWF  FF7
5436:  MOVLW  05
5438:  MOVLB  2
543A:  MOVWF  x34
543C:  MOVLB  0
543E:  CALL   2E82
5442:  MOVFF  B4,234
5446:  MOVLW  1B
5448:  MOVLB  2
544A:  MOVWF  x35
544C:  MOVLB  0
544E:  CALL   2FFA
5452:  MOVLW  D6
5454:  MOVWF  FF6
5456:  MOVLW  0D
5458:  MOVWF  FF7
545A:  MOVLW  05
545C:  MOVLB  2
545E:  MOVWF  x34
5460:  MOVLB  0
5462:  CALL   2E82
5466:  MOVLW  10
5468:  MOVWF  FE9
546A:  MOVFF  22F,235
546E:  MOVFF  22E,234
5472:  CALL   2EAA
5476:  MOVLW  DE
5478:  MOVWF  FF6
547A:  MOVLW  0D
547C:  MOVWF  FF7
547E:  MOVLW  05
5480:  MOVLB  2
5482:  MOVWF  x34
5484:  MOVLB  0
5486:  CALL   2E82
548A:  MOVLW  10
548C:  MOVWF  FE9
548E:  MOVFF  F6,235
5492:  MOVFF  F5,234
5496:  CALL   2EAA
549A:  MOVLW  E6
549C:  MOVWF  FF6
549E:  MOVLW  0D
54A0:  MOVWF  FF7
54A2:  MOVLW  05
54A4:  MOVLB  2
54A6:  MOVWF  x34
54A8:  MOVLB  0
54AA:  CALL   2E82
54AE:  MOVLW  10
54B0:  MOVWF  FE9
54B2:  MOVFF  F8,235
54B6:  MOVFF  F7,234
54BA:  CALL   2EAA
54BE:  MOVLW  EE
54C0:  MOVWF  FF6
54C2:  MOVLW  0D
54C4:  MOVWF  FF7
54C6:  MOVLW  05
54C8:  MOVLB  2
54CA:  MOVWF  x34
54CC:  MOVLB  0
54CE:  CALL   2E82
54D2:  MOVFF  B0,234
54D6:  MOVLW  1B
54D8:  MOVLB  2
54DA:  MOVWF  x35
54DC:  MOVLB  0
54DE:  CALL   2FFA
54E2:  MOVLW  0D
54E4:  MOVLB  2
54E6:  MOVWF  x3D
54E8:  MOVLB  0
54EA:  CALL   2E60
....................                                         COM1_send_str(buf); 
54EE:  MOVLW  01
54F0:  MOVLB  2
54F2:  MOVWF  x6D
54F4:  MOVLW  C4
54F6:  MOVWF  x6C
54F8:  MOVLB  0
54FA:  CALL   20D6
....................                                          
....................       sprintf(buf, "\r\n\nUT=%u, US=%u\r" setup.UART_Time, setup.UART_Status); // VERSION 3.3 17.1.2016 
54FE:  MOVLW  01
5500:  MOVLB  1
5502:  MOVWF  xA4
5504:  MOVLW  C4
5506:  MOVWF  xA3
5508:  MOVLW  F8
550A:  MOVWF  FF6
550C:  MOVLW  0D
550E:  MOVWF  FF7
5510:  MOVLW  06
5512:  MOVLB  2
5514:  MOVWF  x34
5516:  MOVLB  0
5518:  CALL   2E82
551C:  MOVFF  FB,234
5520:  MOVLW  1B
5522:  MOVLB  2
5524:  MOVWF  x35
5526:  MOVLB  0
5528:  CALL   2FFA
552C:  MOVLW  00
552E:  MOVWF  FF6
5530:  MOVLW  0E
5532:  MOVWF  FF7
5534:  MOVLW  05
5536:  MOVLB  2
5538:  MOVWF  x34
553A:  MOVLB  0
553C:  CALL   2E82
5540:  MOVFF  FC,234
5544:  MOVLW  1B
5546:  MOVLB  2
5548:  MOVWF  x35
554A:  MOVLB  0
554C:  CALL   2FFA
5550:  MOVLW  0D
5552:  MOVLB  2
5554:  MOVWF  x3D
5556:  MOVLB  0
5558:  CALL   2E60
....................       COM1_send_str(buf); 
555C:  MOVLW  01
555E:  MOVLB  2
5560:  MOVWF  x6D
5562:  MOVLW  C4
5564:  MOVWF  x6C
5566:  MOVLB  0
5568:  CALL   20D6
....................  
....................       goto get_temp; 
556C:  MOVLB  1
556E:  BRA    4E58
....................       break; 
5570:  MOVLB  0
5572:  BRA    55B2
....................       default: 
....................       	{ 
....................          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5574:  MOVLB  1
5576:  MOVF   x2C,F
5578:  BNZ   5580
557A:  MOVLB  0
557C:  BRA    55B2
557E:  MOVLB  1
....................          COM1_send_str("\r\nFAIL\r\n"); 
5580:  MOVLW  02
5582:  MOVWF  FEA
5584:  MOVLW  15
5586:  MOVWF  FE9
5588:  MOVLW  09
558A:  MOVWF  01
558C:  CLRF   FF7
558E:  MOVLW  00
5590:  MOVLB  0
5592:  CALL   08DA
5596:  TBLRD*-
5598:  TBLRD*+
559A:  MOVFF  FF5,FEE
559E:  DECFSZ 01,F
55A0:  BRA    5598
55A2:  MOVLW  02
55A4:  MOVLB  2
55A6:  MOVWF  x6D
55A8:  MOVLW  15
55AA:  MOVWF  x6C
55AC:  MOVLB  0
55AE:  CALL   20D6
55B2:  MOVLB  2
....................          
....................         } 
....................     } 
.................... aaa: 
....................   return; 
....................   } 
55B4:  MOVLB  0
55B6:  GOTO   56AE (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
55F4:  MOVF   57,W
55F6:  XORLW  00
55F8:  BZ    5606
55FA:  XORLW  02
55FC:  BZ    5634
55FE:  XORLW  01
5600:  BTFSC  FD8.2
5602:  BRA    5750
5604:  BRA    5750
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
5606:  CLRF   58
....................       comm_state = COMM_WAIT_CR; 
5608:  MOVLW  02
560A:  MOVWF  57
....................       comm_timeout = 0; 
560C:  CLRF   xAA
560E:  CLRF   xA9
....................       if (ttccp_login) 
5610:  MOVLB  1
5612:  MOVF   x2C,F
5614:  BZ    5630
....................       COM1_send_str("\r>"); 
5616:  MOVLW  0D
5618:  MOVWF  xBC
561A:  MOVLW  3E
561C:  MOVWF  xBD
561E:  CLRF   xBE
5620:  MOVLW  01
5622:  MOVLB  2
5624:  MOVWF  x6D
5626:  MOVLW  BC
5628:  MOVWF  x6C
562A:  MOVLB  0
562C:  CALL   20D6
....................       break; 
5630:  MOVLB  0
5632:  BRA    5750
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
5634:  MOVF   34,F
5636:  BTFSC  FD8.2
5638:  BRA    5724
....................         { 
....................         comm_timeout = 0; 
563A:  CLRF   xAA
563C:  CLRF   xA9
....................         chr = COM1_get_chr(); 
563E:  CALL   28CC
5642:  MOVLB  1
5644:  CLRF   xB9
5646:  MOVFF  01,1B8
....................         comm_buf[comm_ridx++] = chr; 
564A:  MOVF   58,W
564C:  INCF   58,F
564E:  CLRF   03
5650:  ADDLW  59
5652:  MOVWF  FE9
5654:  MOVLW  00
5656:  ADDWFC 03,W
5658:  MOVWF  FEA
565A:  MOVFF  1B8,FEF
....................         if (comm_ridx > 70) 
565E:  MOVF   58,W
5660:  SUBLW  46
5662:  BC    566C
....................           { 
....................           comm_state = 0; 
5664:  CLRF   57
....................           break; 
5666:  MOVLB  0
5668:  BRA    5750
566A:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
566C:  MOVF   xB8,W
566E:  SUBLW  0D
5670:  BNZ   5676
5672:  MOVF   xB9,F
5674:  BZ    5680
5676:  MOVF   xB8,W
5678:  SUBLW  3B
567A:  BNZ   5726
567C:  MOVF   xB9,F
567E:  BNZ   5726
....................           { 
....................           if (chr == ';') 
5680:  MOVF   xB8,W
5682:  SUBLW  3B
5684:  BNZ   56A2
5686:  MOVF   xB9,F
5688:  BNZ   56A2
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
568A:  MOVLW  01
568C:  SUBWF  58,W
568E:  CLRF   03
5690:  ADDLW  59
5692:  MOVWF  FE9
5694:  MOVLW  00
5696:  ADDWFC 03,W
5698:  MOVWF  FEA
569A:  MOVLW  0D
569C:  MOVWF  FEF
....................             comm_ridx = 0; 
569E:  CLRF   58
....................             } 
....................           else 
56A0:  BRA    56A8
....................             COM1_init(); 
56A2:  MOVLB  0
56A4:  CALL   0E30
....................           process_ttccp_commands(); 
56A8:  MOVLB  0
56AA:  GOTO   360A
....................           if (debug_mode) 
56AE:  MOVLB  1
56B0:  MOVF   x43,F
56B2:  BZ    56BE
....................           	if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
56B4:  MOVF   x2C,F
56B6:  BNZ   56BE
56B8:  MOVLB  0
56BA:  BRA    5750
56BC:  MOVLB  1
....................             COM1_send_str("\r\nOK\n"); 
56BE:  MOVLW  0D
56C0:  MOVWF  xBC
56C2:  MOVLW  0A
56C4:  MOVWF  xBD
56C6:  MOVLW  4F
56C8:  MOVWF  xBE
56CA:  MOVLW  4B
56CC:  MOVWF  xBF
56CE:  MOVLW  0A
56D0:  MOVWF  xC0
56D2:  CLRF   xC1
56D4:  MOVLW  01
56D6:  MOVLB  2
56D8:  MOVWF  x6D
56DA:  MOVLW  BC
56DC:  MOVWF  x6C
56DE:  MOVLB  0
56E0:  CALL   20D6
....................           if (ret == 1) 
56E4:  MOVLB  1
56E6:  DECFSZ xBA,W
56E8:  BRA    5714
56EA:  MOVF   xBB,F
56EC:  BNZ   5714
....................             { 
.................... 	          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
56EE:  MOVF   x2C,F
56F0:  BNZ   56F8
56F2:  MOVLB  0
56F4:  BRA    5750
56F6:  MOVLB  1
....................             COM1_send_str("\n\r"); 
56F8:  MOVLW  0A
56FA:  MOVWF  xBC
56FC:  MOVLW  0D
56FE:  MOVWF  xBD
5700:  CLRF   xBE
5702:  MOVLW  01
5704:  MOVLB  2
5706:  MOVWF  x6D
5708:  MOVLW  BC
570A:  MOVWF  x6C
570C:  MOVLB  0
570E:  CALL   20D6
....................             } 
....................           else 
5712:  BRA    5724
....................             COM1_send_str(ttccp_error_message); 
5714:  MOVLW  01
5716:  MOVLB  2
5718:  MOVWF  x6D
571A:  MOVLW  78
571C:  MOVWF  x6C
571E:  MOVLB  0
5720:  CALL   20D6
5724:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
5726:  MOVF   57,W
5728:  SUBLW  01
572A:  BC    574C
....................         if (TMR_100MS_COMM_TO) 
572C:  BTFSS  2C.1
572E:  BRA    574C
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
5730:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
5732:  MOVLB  0
5734:  INCF   xA9,F
5736:  BTFSC  FD8.2
5738:  INCF   xAA,F
573A:  MOVF   xAA,W
573C:  SUBLW  26
573E:  BC    574C
5740:  XORLW  FF
5742:  BNZ   574A
5744:  MOVF   xA9,W
5746:  SUBLW  10
5748:  BC    574C
....................             comm_state = 0; 
574A:  CLRF   57
....................           } 
....................       break; 
574C:  MOVLB  0
574E:  BRA    5750
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
5750:  GOTO   6890 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
66EC:  MOVF   57,W
66EE:  ADDLW  FC
66F0:  BTFSC  FD8.0
66F2:  BRA    6834
66F4:  ADDLW  04
66F6:  GOTO   6838
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
66FA:  CLRF   58
....................       comm_state++; 
66FC:  INCF   57,F
....................       break; 
66FE:  BRA    6834
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
6700:  MOVF   34,F
6702:  BZ    672E
....................         if ((chr = COM1_get_chr()) == '$') 
6704:  CALL   28CC
6708:  MOVLB  1
670A:  CLRF   xB9
670C:  MOVFF  01,1B8
6710:  MOVF   xB8,W
6712:  SUBLW  24
6714:  BNZ   6724
6716:  MOVF   xB9,F
6718:  BNZ   6724
....................           { 
....................           comm_state++; 
671A:  INCF   57,F
....................           comm_timeout = 0; 
671C:  MOVLB  0
671E:  CLRF   xAA
6720:  CLRF   xA9
....................           } 
....................         else 
6722:  BRA    672E
....................           inc_dec(chr); 
6724:  MOVFF  1B8,1CF
6728:  MOVLB  0
672A:  GOTO   57DC
....................       break; 
672E:  BRA    6834
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
6730:  MOVF   34,F
6732:  BTFSC  FD8.2
6734:  BRA    6808
....................         { 
....................         comm_timeout = 0; 
6736:  CLRF   xAA
6738:  CLRF   xA9
....................         chr = COM1_get_chr(); 
673A:  CALL   28CC
673E:  MOVLB  1
6740:  CLRF   xB9
6742:  MOVFF  01,1B8
....................         comm_buf[comm_ridx++] = chr; 
6746:  MOVF   58,W
6748:  INCF   58,F
674A:  CLRF   03
674C:  ADDLW  59
674E:  MOVWF  FE9
6750:  MOVLW  00
6752:  ADDWFC 03,W
6754:  MOVWF  FEA
6756:  MOVFF  1B8,FEF
....................         if (comm_ridx > 70) 
675A:  MOVF   58,W
675C:  SUBLW  46
675E:  BC    6768
....................           { 
....................           comm_state = 0; 
6760:  CLRF   57
....................           break; 
6762:  MOVLB  0
6764:  BRA    6834
6766:  MOVLB  1
....................           } 
....................         if (chr == 13) 
6768:  MOVF   xB8,W
676A:  SUBLW  0D
676C:  BNZ   67CA
676E:  MOVF   xB9,F
6770:  BNZ   67CA
....................           { 
....................           ret = process_dollar_commands(); 
6772:  MOVLB  0
6774:  BRA    600A
6776:  MOVLB  1
6778:  CLRF   xBB
677A:  MOVFF  01,1BA
....................           if (ret == 1) 
677E:  DECFSZ xBA,W
6780:  BRA    6786
6782:  MOVF   xBB,F
6784:  BNZ   6786
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
6786:  INCFSZ xBA,W
6788:  BRA    678E
678A:  MOVF   xBB,F
678C:  BZ    67C0
....................             COM1_send_str("\r\nOK\r\n*"); 
678E:  MOVLW  01
6790:  MOVWF  FEA
6792:  MOVLW  BC
6794:  MOVWF  FE9
6796:  MOVLW  08
6798:  MOVWF  01
679A:  CLRF   FF7
679C:  MOVLW  00
679E:  MOVLB  0
67A0:  CALL   098E
67A4:  TBLRD*-
67A6:  TBLRD*+
67A8:  MOVFF  FF5,FEE
67AC:  DECFSZ 01,F
67AE:  BRA    67A6
67B0:  MOVLW  01
67B2:  MOVLB  2
67B4:  MOVWF  x6D
67B6:  MOVLW  BC
67B8:  MOVWF  x6C
67BA:  MOVLB  0
67BC:  CALL   20D6
....................           COM1_init(); 
67C0:  MOVLB  0
67C2:  CALL   0E30
....................           } 
....................         else if (chr == 27) 
67C6:  BRA    6808
67C8:  MOVLB  1
67CA:  MOVF   xB8,W
67CC:  SUBLW  1B
67CE:  BNZ   680A
67D0:  MOVF   xB9,F
67D2:  BNZ   680A
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
67D4:  MOVLW  01
67D6:  MOVWF  FEA
67D8:  MOVLW  C4
67DA:  MOVWF  FE9
67DC:  MOVLW  0B
67DE:  MOVWF  01
67E0:  CLRF   FF7
67E2:  MOVLW  00
67E4:  MOVLB  0
67E6:  CALL   09A6
67EA:  TBLRD*-
67EC:  TBLRD*+
67EE:  MOVFF  FF5,FEE
67F2:  DECFSZ 01,F
67F4:  BRA    67EC
67F6:  MOVLW  01
67F8:  MOVLB  2
67FA:  MOVWF  x6D
67FC:  MOVLW  C4
67FE:  MOVWF  x6C
6800:  MOVLB  0
6802:  CALL   20D6
....................           comm_state = 0; 
6806:  CLRF   57
6808:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
680A:  MOVF   57,W
680C:  SUBLW  01
680E:  BC    6830
....................         if (TMR_100MS_COMM_TO) 
6810:  BTFSS  2C.1
6812:  BRA    6830
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
6814:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
6816:  MOVLB  0
6818:  INCF   xA9,F
681A:  BTFSC  FD8.2
681C:  INCF   xAA,F
681E:  MOVF   xAA,W
6820:  SUBLW  26
6822:  BC    6830
6824:  XORLW  FF
6826:  BNZ   682E
6828:  MOVF   xA9,W
682A:  SUBLW  10
682C:  BC    6830
....................             comm_state = 0; 
682E:  CLRF   57
....................           } 
....................       break; 
6830:  MOVLB  0
6832:  BRA    6834
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
6834:  GOTO   6890 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
685A:  BTFSS  FAB.1
685C:  BRA    686E
....................     { 
....................     OERR = 0; 
685E:  BCF    FAB.1
....................     CREN = 0; 
6860:  BCF    FAB.4
....................     delay_us(5); 
6862:  MOVLW  06
6864:  MOVWF  00
6866:  DECFSZ 00,F
6868:  BRA    6866
686A:  NOP   
....................     CREN = 1; 
686C:  BSF    FAB.4
....................     } 
....................   if (FERR) 
686E:  BTFSS  FAB.2
6870:  BRA    687C
....................     { 
....................     FERR = 0; 
6872:  BCF    FAB.2
....................     chr = RCREG1; 
6874:  MOVLB  1
6876:  CLRF   xB7
6878:  MOVFF  FAE,1B6
....................     } 
....................   if (ttccp) 
687C:  MOVLB  1
687E:  MOVF   x42,F
6880:  BZ    688C
....................     ttccp_handler(); 
6882:  MOVLB  0
6884:  GOTO   55F4
....................   else 
6888:  MOVLB  0
688A:  BRA    6890
....................     dollar_handler(); 
688C:  MOVLB  0
688E:  BRA    66EC
....................   } 
6890:  GOTO   6AC2 (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
1654:  BCF    F8A.2
....................   delay_us(10); 
1656:  MOVLW  0C
1658:  MOVWF  00
165A:  DECFSZ 00,F
165C:  BRA    165A
165E:  BRA    1660
1660:  NOP   
....................   while (length--) 
....................     { 
1662:  MOVLB  2
1664:  MOVF   x43,W
1666:  DECF   x43,F
1668:  XORLW  00
166A:  BZ    16B0
....................     xbyte = *data++; 
166C:  MOVFF  245,03
1670:  MOVF   x44,W
1672:  INCF   x44,F
1674:  BTFSC  FD8.2
1676:  INCF   x45,F
1678:  MOVWF  FE9
167A:  MOVFF  03,FEA
167E:  MOVFF  FEF,246
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
1682:  CLRF   x47
1684:  MOVF   x47,W
1686:  SUBLW  07
1688:  BNC   16AE
....................       { 
....................       if (xbyte & 0x80) 
168A:  BTFSS  x46.7
168C:  BRA    1692
....................         output_high(D2A_MOSI); 
168E:  BSF    F8C.4
....................       else 
1690:  BRA    1694
....................         output_low(D2A_MOSI); 
1692:  BCF    F8C.4
....................       delay_us(1); 
1694:  BRA    1696
1696:  BRA    1698
....................       output_high(D2A_SCLK); 
1698:  BSF    F8C.0
....................       delay_us(1); 
169A:  BRA    169C
169C:  BRA    169E
....................       output_low(D2A_SCLK); 
169E:  BCF    F8C.0
....................       delay_us(1); 
16A0:  BRA    16A2
16A2:  BRA    16A4
....................       } 
16A4:  MOVF   x47,W
16A6:  INCF   x47,F
16A8:  BCF    FD8.0
16AA:  RLCF   x46,F
16AC:  BRA    1684
....................     } 
16AE:  BRA    1664
....................   delay_us(10); 
16B0:  MOVLW  0C
16B2:  MOVWF  00
16B4:  DECFSZ 00,F
16B6:  BRA    16B4
16B8:  BRA    16BA
16BA:  NOP   
....................   output_high(CSN); 
16BC:  BSF    F8A.2
....................   } 
16BE:  MOVLB  0
16C0:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5EFE:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5F00:  MOVLB  2
5F02:  CLRF   x0A
5F04:  MOVF   x0A,W
5F06:  SUBLW  07
5F08:  BNC   5F40
....................     { 
....................     if (addr & 0x80) 
5F0A:  BTFSS  x06.7
5F0C:  BRA    5F12
....................       output_high(D2A_MOSI); 
5F0E:  BSF    F8C.4
....................     else 
5F10:  BRA    5F14
....................       output_low(D2A_MOSI); 
5F12:  BCF    F8C.4
....................     delay_us(5); 
5F14:  MOVLW  06
5F16:  MOVWF  00
5F18:  DECFSZ 00,F
5F1A:  BRA    5F18
5F1C:  NOP   
....................     output_high(D2A_SCLK); 
5F1E:  BSF    F8C.0
....................     delay_us(5); 
5F20:  MOVLW  06
5F22:  MOVWF  00
5F24:  DECFSZ 00,F
5F26:  BRA    5F24
5F28:  NOP   
....................     output_low(D2A_SCLK); 
5F2A:  BCF    F8C.0
....................     delay_us(5); 
5F2C:  MOVLW  06
5F2E:  MOVWF  00
5F30:  DECFSZ 00,F
5F32:  BRA    5F30
5F34:  NOP   
....................     } 
5F36:  MOVF   x0A,W
5F38:  INCF   x0A,F
5F3A:  BCF    FD8.0
5F3C:  RLCF   x06,F
5F3E:  BRA    5F04
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5F40:  CLRF   x09
5F42:  CLRF   x0A
5F44:  MOVF   x0A,W
5F46:  SUBLW  07
5F48:  BNC   5F8E
....................     { 
....................     xbyte <<= 1; 
5F4A:  BCF    FD8.0
5F4C:  RLCF   x09,F
....................     delay_us(5); 
5F4E:  MOVLW  06
5F50:  MOVWF  00
5F52:  DECFSZ 00,F
5F54:  BRA    5F52
5F56:  NOP   
....................     output_high(D2A_SCLK); 
5F58:  BSF    F8C.0
....................     delay_us(3); 
5F5A:  MOVLW  03
5F5C:  MOVWF  00
5F5E:  DECFSZ 00,F
5F60:  BRA    5F5E
5F62:  BRA    5F64
....................     if (input(D2A_MISO)) 
5F64:  BTFSS  F83.1
5F66:  BRA    5F74
....................       { 
....................       xbyte |= 1; 
5F68:  BSF    x09.0
....................       delay_us(2); 
5F6A:  MOVLW  02
5F6C:  MOVWF  00
5F6E:  DECFSZ 00,F
5F70:  BRA    5F6E
5F72:  NOP   
....................       } 
....................     delay_us(2); 
5F74:  MOVLW  02
5F76:  MOVWF  00
5F78:  DECFSZ 00,F
5F7A:  BRA    5F78
5F7C:  NOP   
....................     output_low(D2A_SCLK); 
5F7E:  BCF    F8C.0
....................     delay_us(3); 
5F80:  MOVLW  03
5F82:  MOVWF  00
5F84:  DECFSZ 00,F
5F86:  BRA    5F84
5F88:  BRA    5F8A
....................     } 
5F8A:  INCF   x0A,F
5F8C:  BRA    5F44
....................   *data = xbyte; 
5F8E:  MOVFF  207,FE9
5F92:  MOVFF  208,FEA
5F96:  MOVFF  209,FEF
....................   output_high(CSN); 
5F9A:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
5F9C:  BCF    F8C.0
....................   return xbyte; 
5F9E:  MOVFF  209,01
....................   } 
5FA2:  MOVLB  0
5FA4:  GOTO   63E2 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1A24:  MOVFF  24A,256
1A28:  MOVFF  249,255
1A2C:  MOVFF  248,254
1A30:  MOVFF  247,253
1A34:  BRA    1754
1A36:  MOVFF  03,24E
1A3A:  MOVFF  02,24D
1A3E:  MOVFF  01,24C
1A42:  MOVFF  00,24B
....................   temp = bitspersec / 240000000.0; 
1A46:  MOVFF  24E,256
1A4A:  MOVFF  24D,255
1A4E:  MOVFF  24C,254
1A52:  MOVFF  24B,253
1A56:  MOVLW  C0
1A58:  MOVLB  2
1A5A:  MOVWF  x5A
1A5C:  MOVLW  E1
1A5E:  MOVWF  x59
1A60:  MOVLW  64
1A62:  MOVWF  x58
1A64:  MOVLW  9A
1A66:  MOVWF  x57
1A68:  MOVLB  0
1A6A:  RCALL  178E
1A6C:  MOVFF  03,252
1A70:  MOVFF  02,251
1A74:  MOVFF  01,250
1A78:  MOVFF  00,24F
....................   temp *= 65536.0; 
1A7C:  MOVFF  252,256
1A80:  MOVFF  251,255
1A84:  MOVFF  250,254
1A88:  MOVFF  24F,253
1A8C:  MOVLB  2
1A8E:  CLRF   x5A
1A90:  CLRF   x59
1A92:  CLRF   x58
1A94:  MOVLW  8F
1A96:  MOVWF  x57
1A98:  MOVLB  0
1A9A:  RCALL  18EC
1A9C:  MOVFF  03,252
1AA0:  MOVFF  02,251
1AA4:  MOVFF  01,250
1AA8:  MOVFF  00,24F
....................   temp *= 65536.0; 
1AAC:  MOVFF  252,256
1AB0:  MOVFF  251,255
1AB4:  MOVFF  250,254
1AB8:  MOVFF  24F,253
1ABC:  MOVLB  2
1ABE:  CLRF   x5A
1AC0:  CLRF   x59
1AC2:  CLRF   x58
1AC4:  MOVLW  8F
1AC6:  MOVWF  x57
1AC8:  MOVLB  0
1ACA:  RCALL  18EC
1ACC:  MOVFF  03,252
1AD0:  MOVFF  02,251
1AD4:  MOVFF  01,250
1AD8:  MOVFF  00,24F
....................   return (ULONG)temp - 1; 
1ADC:  MOVFF  252,256
1AE0:  MOVFF  251,255
1AE4:  MOVFF  250,254
1AE8:  MOVFF  24F,253
1AEC:  RCALL  19E2
1AEE:  MOVFF  03,256
1AF2:  MOVFF  02,255
1AF6:  MOVFF  01,254
1AFA:  MOVFF  00,253
1AFE:  MOVLW  01
1B00:  MOVLB  2
1B02:  SUBWF  00,W
1B04:  MOVWF  00
1B06:  MOVLW  00
1B08:  SUBWFB 01,W
1B0A:  MOVWF  01
1B0C:  MOVLW  00
1B0E:  SUBWFB 02,W
1B10:  MOVWF  02
1B12:  MOVLW  00
1B14:  SUBWFB 03,W
1B16:  MOVWF  03
....................   } 
1B18:  MOVLB  0
1B1A:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
57BE:  MOVFF  1D2,1D4
....................   buf[1] = value; 
57C2:  MOVFF  1D3,1D5
....................   send_FPGA_command(2, buf); 
57C6:  MOVLW  02
57C8:  MOVLB  2
57CA:  MOVWF  x43
57CC:  MOVLW  01
57CE:  MOVWF  x45
57D0:  MOVLW  D4
57D2:  MOVWF  x44
57D4:  MOVLB  0
57D6:  CALL   1654
....................   } 
57DA:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
5E6E:  MOVLB  2
5E70:  CLRF   x18
5E72:  CLRF   x17
5E74:  MOVFF  209,216
5E78:  MOVFF  208,215
5E7C:  MOVFF  218,24B
5E80:  MOVFF  217,24A
5E84:  MOVFF  209,249
5E88:  MOVFF  208,248
5E8C:  CLRF   x4F
5E8E:  CLRF   x4E
5E90:  MOVLW  27
5E92:  MOVWF  x4D
5E94:  MOVLW  10
5E96:  MOVWF  x4C
5E98:  MOVLB  0
5E9A:  CALL   11AC
5E9E:  MOVFF  03,218
5EA2:  MOVFF  02,217
5EA6:  MOVFF  01,216
5EAA:  MOVFF  00,215
5EAE:  MOVFF  03,24A
5EB2:  MOVFF  02,249
5EB6:  MOVFF  01,248
5EBA:  MOVFF  00,247
5EBE:  CALL   1A24
5EC2:  MOVFF  03,214
5EC6:  MOVFF  02,213
5ECA:  MOVFF  01,212
5ECE:  MOVFF  00,211
....................   buf[0] = 2; 
5ED2:  MOVLW  02
5ED4:  MOVLB  2
5ED6:  MOVWF  x0A
....................   buf[1] = make8(bitf, 0); 
5ED8:  MOVFF  211,20B
....................   buf[2] = make8(bitf, 1); 
5EDC:  MOVFF  212,20C
....................   buf[3] = make8(bitf, 2); 
5EE0:  MOVFF  213,20D
....................   buf[4] = make8(bitf, 3); 
5EE4:  MOVFF  214,20E
....................   send_FPGA_command(5, buf); 
5EE8:  MOVLW  05
5EEA:  MOVWF  x43
5EEC:  MOVLW  02
5EEE:  MOVWF  x45
5EF0:  MOVLW  0A
5EF2:  MOVWF  x44
5EF4:  MOVLB  0
5EF6:  CALL   1654
....................   } 
5EFA:  GOTO   639C (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 0; 
*
16C2:  MOVLB  2
16C4:  CLRF   x36
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
16C6:  MOVLB  0
16C8:  SWAPF  xB0,W
16CA:  MOVWF  00
16CC:  MOVLW  F0
16CE:  ANDWF  00,F
16D0:  MOVF   00,W
16D2:  IORWF  xAF,W
16D4:  MOVLB  2
16D6:  MOVWF  x3F
16D8:  MOVLB  0
16DA:  SWAPF  xB1,W
16DC:  MOVWF  00
16DE:  RLCF   00,F
16E0:  MOVLW  E0
16E2:  ANDWF  00,F
16E4:  MOVF   00,W
16E6:  MOVLB  2
16E8:  IORWF  x3F,F
16EA:  MOVLB  0
16EC:  SWAPF  xB5,W
16EE:  MOVWF  00
16F0:  RLCF   00,F
16F2:  RLCF   00,F
16F4:  MOVLW  C0
16F6:  ANDWF  00,F
16F8:  MOVF   00,W
16FA:  MOVLB  2
16FC:  IORWF  x3F,F
16FE:  CLRF   00
1700:  MOVLB  0
1702:  BTFSC  xB7.0
1704:  BSF    00.7
1706:  MOVF   00,W
1708:  MOVLB  2
170A:  IORWF  x3F,W
170C:  MOVWF  x37
....................   send_FPGA_command(2, buf); 
170E:  MOVLW  02
1710:  MOVWF  x43
1712:  MOVWF  x45
1714:  MOVLW  36
1716:  MOVWF  x44
1718:  MOVLB  0
171A:  RCALL  1654
....................   } 
171C:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 6; 
171E:  MOVLW  06
1720:  MOVLB  2
1722:  MOVWF  x36
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
1724:  BCF    FD8.0
1726:  MOVLB  0
1728:  RLCF   xB3,W
172A:  IORWF  xB2,W
172C:  MOVLB  2
172E:  MOVWF  x3F
1730:  MOVLB  0
1732:  RLCF   xB4,W
1734:  MOVWF  00
1736:  RLCF   00,F
1738:  MOVLW  FC
173A:  ANDWF  00,F
173C:  MOVF   00,W
173E:  MOVLB  2
1740:  IORWF  x3F,W
1742:  MOVWF  x37
....................   send_FPGA_command(2, buf); 
1744:  MOVLW  02
1746:  MOVWF  x43
1748:  MOVWF  x45
174A:  MOVLW  36
174C:  MOVWF  x44
174E:  MOVLB  0
1750:  RCALL  1654
....................   } 
1752:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1B1C:  MOVLB  2
1B1E:  CLRF   x46
1B20:  CLRF   x45
1B22:  MOVFF  AC,244
1B26:  MOVFF  AB,243
1B2A:  MOVFF  246,24B
1B2E:  MOVFF  245,24A
1B32:  MOVFF  AC,249
1B36:  MOVFF  AB,248
1B3A:  CLRF   x4F
1B3C:  CLRF   x4E
1B3E:  MOVLW  27
1B40:  MOVWF  x4D
1B42:  MOVLW  10
1B44:  MOVWF  x4C
1B46:  MOVLB  0
1B48:  CALL   11AC
1B4C:  MOVFF  03,246
1B50:  MOVFF  02,245
1B54:  MOVFF  01,244
1B58:  MOVFF  00,243
1B5C:  MOVFF  03,24A
1B60:  MOVFF  02,249
1B64:  MOVFF  01,248
1B68:  MOVFF  00,247
1B6C:  RCALL  1A24
1B6E:  MOVFF  03,242
1B72:  MOVFF  02,241
1B76:  MOVFF  01,240
1B7A:  MOVFF  00,23F
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1B7E:  MOVLW  02
1B80:  MOVLB  2
1B82:  MOVWF  x36
1B84:  MOVFF  23F,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1B88:  MOVLW  02
1B8A:  MOVWF  x43
1B8C:  MOVWF  x45
1B8E:  MOVLW  36
1B90:  MOVWF  x44
1B92:  MOVLB  0
1B94:  RCALL  1654
1B96:  MOVLW  0A
1B98:  MOVLB  2
1B9A:  MOVWF  x43
1B9C:  MOVLB  0
1B9E:  CALL   0EAA
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1BA2:  MOVLW  03
1BA4:  MOVLB  2
1BA6:  MOVWF  x36
1BA8:  MOVFF  240,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1BAC:  MOVLW  02
1BAE:  MOVWF  x43
1BB0:  MOVWF  x45
1BB2:  MOVLW  36
1BB4:  MOVWF  x44
1BB6:  MOVLB  0
1BB8:  RCALL  1654
1BBA:  MOVLW  0A
1BBC:  MOVLB  2
1BBE:  MOVWF  x43
1BC0:  MOVLB  0
1BC2:  CALL   0EAA
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1BC6:  MOVLW  04
1BC8:  MOVLB  2
1BCA:  MOVWF  x36
1BCC:  MOVFF  241,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1BD0:  MOVLW  02
1BD2:  MOVWF  x43
1BD4:  MOVWF  x45
1BD6:  MOVLW  36
1BD8:  MOVWF  x44
1BDA:  MOVLB  0
1BDC:  RCALL  1654
1BDE:  MOVLW  0A
1BE0:  MOVLB  2
1BE2:  MOVWF  x43
1BE4:  MOVLB  0
1BE6:  CALL   0EAA
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1BEA:  MOVLW  05
1BEC:  MOVLB  2
1BEE:  MOVWF  x36
1BF0:  MOVFF  242,237
....................   send_FPGA_command(2, buf); delay_ms(10); 
1BF4:  MOVLW  02
1BF6:  MOVWF  x43
1BF8:  MOVWF  x45
1BFA:  MOVLW  36
1BFC:  MOVWF  x44
1BFE:  MOVLB  0
1C00:  RCALL  1654
1C02:  MOVLW  0A
1C04:  MOVLB  2
1C06:  MOVWF  x43
1C08:  MOVLB  0
1C0A:  CALL   0EAA
....................   } 
1C0E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
3076:  MOVLB  2
3078:  MOVF   x33,W
307A:  MOVWF  03
307C:  MOVF   x32,W
307E:  BTFSC  FD8.2
3080:  DECF   x33,F
3082:  DECF   x32,F
3084:  IORWF  03,W
3086:  BZ    30E0
3088:  MOVF   x2F,W
308A:  MOVWF  03
308C:  MOVF   x2E,W
308E:  INCF   x2E,F
3090:  BTFSC  FD8.2
3092:  INCF   x2F,F
3094:  MOVWF  x34
3096:  MOVFF  03,235
309A:  MOVF   x31,W
309C:  MOVWF  03
309E:  MOVF   x30,W
30A0:  INCF   x30,F
30A2:  BTFSC  FD8.2
30A4:  INCF   x31,F
30A6:  MOVWF  FE9
30A8:  MOVFF  03,FEA
30AC:  MOVFF  FEF,236
30B0:  MOVF   FF2,W
30B2:  MOVWF  00
30B4:  BCF    FF2.7
30B6:  MOVFF  234,FA9
30BA:  MOVFF  236,FA8
30BE:  BCF    FA6.6
30C0:  BCF    FA6.7
30C2:  BSF    FA6.2
30C4:  MOVLB  F
30C6:  MOVLW  55
30C8:  MOVWF  FA7
30CA:  MOVLW  AA
30CC:  MOVWF  FA7
30CE:  BSF    FA6.1
30D0:  BTFSC  FA6.1
30D2:  BRA    30D0
30D4:  BCF    FA6.2
30D6:  MOVF   00,W
30D8:  IORWF  FF2,F
30DA:  MOVLB  0
30DC:  BRA    3076
30DE:  MOVLB  2
....................   } 
30E0:  MOVLB  0
30E2:  GOTO   310A (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0ED4:  MOVLB  2
0ED6:  MOVF   x33,W
0ED8:  MOVWF  03
0EDA:  MOVF   x32,W
0EDC:  BTFSC  FD8.2
0EDE:  DECF   x33,F
0EE0:  DECF   x32,F
0EE2:  IORWF  03,W
0EE4:  BZ    0F24
0EE6:  MOVF   x31,W
0EE8:  MOVWF  03
0EEA:  MOVF   x30,W
0EEC:  INCF   x30,F
0EEE:  BTFSC  FD8.2
0EF0:  INCF   x31,F
0EF2:  MOVWF  FE9
0EF4:  MOVFF  03,FEA
0EF8:  MOVF   x2F,W
0EFA:  MOVWF  03
0EFC:  MOVF   x2E,W
0EFE:  INCF   x2E,F
0F00:  BTFSC  FD8.2
0F02:  INCF   x2F,F
0F04:  MOVWF  x36
0F06:  MOVFF  03,237
0F0A:  MOVFF  FF2,238
0F0E:  BCF    FF2.7
0F10:  MOVFF  236,FA9
0F14:  BCF    FA6.6
0F16:  BCF    FA6.7
0F18:  BSF    FA6.0
0F1A:  MOVF   FA8,W
0F1C:  BTFSC  x38.7
0F1E:  BSF    FF2.7
0F20:  MOVWF  FEF
0F22:  BRA    0ED6
....................   } 
0F24:  MOVLB  0
0F26:  GOTO   0F5C (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
30E6:  MOVLB  1
30E8:  MOVF   x01,W
30EA:  SUBLW  9F
30EC:  BNZ   310C
30EE:  MOVF   x02,W
30F0:  SUBLW  0B
30F2:  BNZ   310C
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
30F4:  MOVLB  2
30F6:  CLRF   x2F
30F8:  CLRF   x2E
30FA:  CLRF   x31
30FC:  MOVLW  AB
30FE:  MOVWF  x30
3100:  CLRF   x33
3102:  MOVLW  56
3104:  MOVWF  x32
3106:  MOVLB  0
3108:  BRA    3076
310A:  MOVLB  1
....................   allow_write = 0; 
310C:  CLRF   x02
310E:  CLRF   x01
....................   } 
3110:  MOVLB  0
3112:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0F46:  MOVLB  2
0F48:  CLRF   x2F
0F4A:  CLRF   x2E
0F4C:  CLRF   x31
0F4E:  MOVLW  AB
0F50:  MOVWF  x30
0F52:  CLRF   x33
0F54:  MOVLW  56
0F56:  MOVWF  x32
0F58:  MOVLB  0
0F5A:  BRA    0ED4
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0F5C:  INCFSZ xB2,W
0F5E:  BRA    0F62
0F60:  BRA    0F66
0F62:  INCFSZ xB3,W
0F64:  BRA    0F76
....................     memset(&setup, 0, sizeof(setup)); 
0F66:  CLRF   FEA
0F68:  MOVLW  AB
0F6A:  MOVWF  FE9
0F6C:  CLRF   00
0F6E:  CLRF   02
0F70:  MOVLW  56
0F72:  MOVWF  01
0F74:  BRA    0F2A
....................   } 
0F76:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
3114:  MOVLB  2
3116:  CLRF   x33
3118:  CLRF   x32
311A:  MOVF   x33,F
311C:  BNZ   31D0
311E:  MOVF   x32,W
3120:  SUBLW  13
3122:  BNC   31D0
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
3124:  RLCF   x32,W
3126:  MOVWF  x34
3128:  RLCF   x33,W
312A:  MOVWF  x35
312C:  RLCF   x34,F
312E:  RLCF   x35,F
3130:  MOVLW  FC
3132:  ANDWF  x34,F
3134:  MOVFF  235,03
3138:  MOVF   x34,W
313A:  MOVLB  0
313C:  CALL   09C2
3140:  TBLRD*+
3142:  MOVFF  FF5,03
3146:  MOVWF  01
3148:  MOVF   03,W
314A:  MOVLB  2
314C:  SUBWF  x31,W
314E:  BNC   31C8
3150:  BNZ   3158
3152:  MOVF   01,W
3154:  SUBWF  x30,W
3156:  BNC   31C8
3158:  MOVLW  01
315A:  ADDWF  x32,W
315C:  MOVWF  x36
315E:  MOVLW  00
3160:  ADDWFC x33,W
3162:  MOVWF  x37
3164:  RLCF   x36,F
3166:  RLCF   x37,F
3168:  RLCF   x36,F
316A:  RLCF   x37,F
316C:  MOVLW  FC
316E:  ANDWF  x36,F
3170:  MOVFF  237,03
3174:  MOVF   x36,W
3176:  MOVLB  0
3178:  CALL   09C2
317C:  TBLRD*+
317E:  MOVFF  FF5,03
3182:  MOVWF  01
3184:  MOVLB  2
3186:  MOVF   x31,W
3188:  SUBWF  03,W
318A:  BNC   31C8
318C:  BNZ   3194
318E:  MOVF   01,W
3190:  SUBWF  x30,W
3192:  BC    31C8
....................     return Ptrans[idx].Pout; 
3194:  RLCF   x32,W
3196:  MOVWF  x34
3198:  RLCF   x33,W
319A:  MOVWF  x35
319C:  RLCF   x34,F
319E:  RLCF   x35,F
31A0:  MOVLW  FC
31A2:  ANDWF  x34,F
31A4:  MOVLW  02
31A6:  ADDWF  x34,W
31A8:  MOVWF  01
31AA:  MOVLW  00
31AC:  ADDWFC x35,W
31AE:  MOVWF  03
31B0:  MOVF   01,W
31B2:  MOVLB  0
31B4:  CALL   09C2
31B8:  TBLRD*+
31BA:  MOVFF  FF5,03
31BE:  MOVWF  01
31C0:  MOVFF  03,02
31C4:  BRA    31D6
31C6:  MOVLB  2
....................   } 
31C8:  INCF   x32,F
31CA:  BTFSC  FD8.2
31CC:  INCF   x33,F
31CE:  BRA    311A
....................   return 0; 
31D0:  MOVLW  00
31D2:  MOVWF  01
31D4:  MOVWF  02
31D6:  MOVLB  0
....................   } 
31D8:  GOTO   46C8 (RETURN)
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
*
1C7A:  INCFSZ 24,W
1C7C:  BRA    1C84
1C7E:  INCFSZ 25,W
1C80:  BRA    1C84
1C82:  BRA    1CC6
....................     { 
....................     if (TMR_100MS_POWER) 
1C84:  BTFSS  2C.3
1C86:  BRA    1CC4
....................       { 
....................       TMR_100MS_POWER = 0; 
1C88:  BCF    2C.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1C8A:  MOVLB  2
1C8C:  CLRF   x32
1C8E:  MOVFF  25,234
1C92:  MOVFF  24,233
1C96:  MOVLB  0
1C98:  CALL   0F78
....................       set_adc_channel(A2D_POWER); // select forward power input 
1C9C:  MOVLW  14
1C9E:  MOVWF  01
1CA0:  MOVF   FC2,W
1CA2:  ANDLW  83
1CA4:  IORWF  01,W
1CA6:  MOVWF  FC2
....................       delay_us(20); 
1CA8:  MOVLW  1A
1CAA:  MOVWF  00
1CAC:  DECFSZ 00,F
1CAE:  BRA    1CAC
1CB0:  NOP   
....................       power = read_adc(); 
1CB2:  BSF    FC2.1
1CB4:  BTFSC  FC2.1
1CB6:  BRA    1CB4
1CB8:  MOVFF  FC4,22F
1CBC:  MOVLB  2
1CBE:  MOVFF  FC3,22E
1CC2:  MOVLB  0
....................       } 
....................     return; 
1CC4:  BRA    2026
....................     } 
....................      
....................      if (input(STANDBY) && setup.cot ==0) 
1CC6:  BTFSS  F83.7
1CC8:  BRA    1D24
1CCA:  MOVF   xF5,F
1CCC:  BNZ   1D24
1CCE:  MOVF   xF6,F
1CD0:  BNZ   1D24
....................     { 
....................     if (setup.pwr == 1) 
1CD2:  DECFSZ xAD,W
1CD4:  BRA    1D18
1CD6:  MOVF   xAE,F
1CD8:  BNZ   1D18
....................       { 
....................       output_high(POWER_EN); 
1CDA:  BSF    F8C.6
....................       a++; 
1CDC:  MOVLB  1
1CDE:  INCF   x03,F
1CE0:  BTFSC  FD8.2
1CE2:  INCF   x04,F
....................        if(a==1) 
1CE4:  DECFSZ x03,W
1CE6:  BRA    1CFE
1CE8:  MOVF   x04,F
1CEA:  BNZ   1CFE
.................... 	{ 
.................... 	output_high(POWER_EN); 
1CEC:  BSF    F8C.6
.................... 	delay_ms(50); 
1CEE:  MOVLW  32
1CF0:  MOVLB  2
1CF2:  MOVWF  x43
1CF4:  MOVLB  0
1CF6:  CALL   0EAA
.................... 	update_all(); 
1CFA:  RCALL  1C10
1CFC:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1CFE:  MOVF   x04,W
1D00:  SUBLW  E9
1D02:  BC    1D14
1D04:  XORLW  FF
1D06:  BNZ   1D0E
1D08:  MOVF   x03,W
1D0A:  SUBLW  60
1D0C:  BC    1D14
....................       { 
....................       a=2; 
1D0E:  CLRF   x04
1D10:  MOVLW  02
1D12:  MOVWF  x03
....................       } 
....................       }   
....................     else 
1D14:  BRA    1D20
1D16:  MOVLB  0
....................     	{ 
....................       	output_low(POWER_EN); 
1D18:  BCF    F8C.6
....................      	a=0; 
1D1A:  MOVLB  1
1D1C:  CLRF   x04
1D1E:  CLRF   x03
....................     	} 	 
....................     } 
....................     else if(!input(STANDBY) && setup.cot ==0) 
1D20:  BRA    1D7E
1D22:  MOVLB  0
1D24:  BTFSC  F83.7
1D26:  BRA    1D80
1D28:  MOVF   xF5,F
1D2A:  BNZ   1D80
1D2C:  MOVF   xF6,F
1D2E:  BNZ   1D80
....................       { 
....................        if(setup.pwr == 1) 
1D30:  DECFSZ xAD,W
1D32:  BRA    1D44
1D34:  MOVF   xAE,F
1D36:  BNZ   1D44
....................        	{ 
....................          output_low(POWER_EN);  
1D38:  BCF    F8C.6
....................          a=0; 
1D3A:  MOVLB  1
1D3C:  CLRF   x04
1D3E:  CLRF   x03
....................         } 
....................        else 
1D40:  BRA    1D4E
1D42:  MOVLB  0
....................        { 
....................          output_high(POWER_EN); 
1D44:  BSF    F8C.6
....................           a++; 
1D46:  MOVLB  1
1D48:  INCF   x03,F
1D4A:  BTFSC  FD8.2
1D4C:  INCF   x04,F
....................        }    
....................        if(a==1) 
1D4E:  DECFSZ x03,W
1D50:  BRA    1D68
1D52:  MOVF   x04,F
1D54:  BNZ   1D68
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1D56:  BSF    F8C.6
.................... 	delay_ms(50); 
1D58:  MOVLW  32
1D5A:  MOVLB  2
1D5C:  MOVWF  x43
1D5E:  MOVLB  0
1D60:  CALL   0EAA
.................... 	update_all(); 
1D64:  RCALL  1C10
1D66:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1D68:  MOVF   x04,W
1D6A:  SUBLW  E9
1D6C:  BC    1D7E
1D6E:  XORLW  FF
1D70:  BNZ   1D78
1D72:  MOVF   x03,W
1D74:  SUBLW  60
1D76:  BC    1D7E
....................       { 
....................       a=2; 
1D78:  CLRF   x04
1D7A:  MOVLW  02
1D7C:  MOVWF  x03
1D7E:  MOVLB  0
....................       } 
....................       BREAK; 
....................       }  
....................       {  
.................... } 
....................  
....................  
.................... if (!input(STANDBY) && setup.cot ==1) 
1D80:  BTFSC  F83.7
1D82:  BRA    1DF2
1D84:  DECFSZ xF5,W
1D86:  BRA    1DF2
1D88:  MOVF   xF6,F
1D8A:  BNZ   1DF2
....................     { 
....................     if (setup.pwr == 1) 
1D8C:  DECFSZ xAD,W
1D8E:  BRA    1DD0
1D90:  MOVF   xAE,F
1D92:  BNZ   1DD0
....................       { 
....................       output_high(POWER_EN); 
1D94:  BSF    F8C.6
....................       b++; 
1D96:  MOVLB  1
1D98:  INCF   x05,F
1D9A:  BTFSC  FD8.2
1D9C:  INCF   x06,F
....................        if(b==1) 
1D9E:  DECFSZ x05,W
1DA0:  BRA    1DB8
1DA2:  MOVF   x06,F
1DA4:  BNZ   1DB8
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1DA6:  BSF    F8C.6
.................... 	delay_ms(60); 
1DA8:  MOVLW  3C
1DAA:  MOVLB  2
1DAC:  MOVWF  x43
1DAE:  MOVLB  0
1DB0:  CALL   0EAA
.................... 	update_all(); 
1DB4:  RCALL  1C10
1DB6:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(b>60000) 
1DB8:  MOVF   x06,W
1DBA:  SUBLW  E9
1DBC:  BC    1DCE
1DBE:  XORLW  FF
1DC0:  BNZ   1DC8
1DC2:  MOVF   x05,W
1DC4:  SUBLW  60
1DC6:  BC    1DCE
....................       { 
....................       b=2; 
1DC8:  CLRF   x06
1DCA:  MOVLW  02
1DCC:  MOVWF  x05
1DCE:  MOVLB  0
....................       } 
....................       }   
....................     if(setup.pwr == 0) 
1DD0:  MOVF   xAD,F
1DD2:  BNZ   1DF0
1DD4:  MOVF   xAE,F
1DD6:  BNZ   1DF0
....................     	{ 
....................       	output_low(POWER_EN); 
1DD8:  BCF    F8C.6
....................      	set_AD5312(DAC_POS_VOLT, 0); 
1DDA:  MOVLB  2
1DDC:  CLRF   x32
1DDE:  CLRF   x34
1DE0:  CLRF   x33
1DE2:  MOVLB  0
1DE4:  CALL   0F78
....................      	b=0; 
1DE8:  MOVLB  1
1DEA:  CLRF   x06
1DEC:  CLRF   x05
1DEE:  MOVLB  0
....................      	} 	 
....................     } 
....................     else if(input(STANDBY) && setup.cot ==1) 
1DF0:  BRA    1E7C
1DF2:  BTFSS  F83.7
1DF4:  BRA    1E7C
1DF6:  DECFSZ xF5,W
1DF8:  BRA    1E7C
1DFA:  MOVF   xF6,F
1DFC:  BNZ   1E7C
....................       { 
....................        if(setup.pwr == 1) 
1DFE:  DECFSZ xAD,W
1E00:  BRA    1E1E
1E02:  MOVF   xAE,F
1E04:  BNZ   1E1E
....................        	{ 
....................          output_low(POWER_EN);  
1E06:  BCF    F8C.6
....................          set_AD5312(DAC_POS_VOLT, 0); 
1E08:  MOVLB  2
1E0A:  CLRF   x32
1E0C:  CLRF   x34
1E0E:  CLRF   x33
1E10:  MOVLB  0
1E12:  CALL   0F78
....................          b=0; 
1E16:  MOVLB  1
1E18:  CLRF   x06
1E1A:  CLRF   x05
1E1C:  MOVLB  0
....................         } 
....................        if(setup.pwr == 0) 
1E1E:  MOVF   xAD,F
1E20:  BNZ   1E48
1E22:  MOVF   xAE,F
1E24:  BNZ   1E48
....................        { 
.................... 	       if(b==1) 
1E26:  MOVLB  1
1E28:  DECFSZ x05,W
1E2A:  BRA    1E48
1E2C:  MOVF   x06,F
1E2E:  BNZ   1E48
.................... 	       { 
....................  
....................          output_high(POWER_EN); 
1E30:  BSF    F8C.6
....................          	delay_ms(60); 
1E32:  MOVLW  3C
1E34:  MOVLB  2
1E36:  MOVWF  x43
1E38:  MOVLB  0
1E3A:  CALL   0EAA
.................... 			update_all(); 
1E3E:  RCALL  1C10
....................           b++; 
1E40:  MOVLB  1
1E42:  INCF   x05,F
1E44:  BTFSC  FD8.2
1E46:  INCF   x06,F
....................         }   
....................        }    
....................        if(b==1) 
1E48:  MOVLB  1
1E4A:  DECFSZ x05,W
1E4C:  BRA    1E64
1E4E:  MOVF   x06,F
1E50:  BNZ   1E64
.................... 	{ 
.................... 	output_high(POWER_EN); 
1E52:  BSF    F8C.6
.................... 	delay_ms(50); 
1E54:  MOVLW  32
1E56:  MOVLB  2
1E58:  MOVWF  x43
1E5A:  MOVLB  0
1E5C:  CALL   0EAA
.................... 	update_all(); 
1E60:  RCALL  1C10
1E62:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1E64:  MOVF   x04,W
1E66:  SUBLW  E9
1E68:  BC    1E7A
1E6A:  XORLW  FF
1E6C:  BNZ   1E74
1E6E:  MOVF   x03,W
1E70:  SUBLW  60
1E72:  BC    1E7A
....................       { 
....................       b=2; 
1E74:  CLRF   x06
1E76:  MOVLW  02
1E78:  MOVWF  x05
1E7A:  MOVLB  0
....................       } 
....................        
....................       }  
....................       break; 
....................       {  
....................     } 
....................      
....................      if (setup.frequency < FREQ_LOW_THRESH) 
1E7C:  MOVF   xBA,W
1E7E:  SUBLW  58
1E80:  BNC   1EA0
1E82:  BNZ   1E8A
1E84:  MOVF   xB9,W
1E86:  SUBLW  29
1E88:  BNC   1EA0
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1E8A:  MOVLW  01
1E8C:  MOVLB  2
1E8E:  MOVWF  x32
1E90:  MOVFF  BF,234
1E94:  MOVFF  BE,233
1E98:  MOVLB  0
1E9A:  CALL   0F78
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1E9E:  BRA    1ED8
1EA0:  MOVF   xBA,W
1EA2:  SUBLW  5A
1EA4:  BNC   1EC4
1EA6:  BNZ   1EAE
1EA8:  MOVF   xB9,W
1EAA:  SUBLW  F9
1EAC:  BNC   1EC4
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1EAE:  MOVLW  01
1EB0:  MOVLB  2
1EB2:  MOVWF  x32
1EB4:  MOVFF  C1,234
1EB8:  MOVFF  C0,233
1EBC:  MOVLB  0
1EBE:  CALL   0F78
....................   else 
1EC2:  BRA    1ED8
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1EC4:  MOVLW  01
1EC6:  MOVLB  2
1EC8:  MOVWF  x32
1ECA:  MOVFF  C3,234
1ECE:  MOVFF  C2,233
1ED2:  MOVLB  0
1ED4:  CALL   0F78
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input 
1ED8:  MOVLW  14
1EDA:  MOVWF  01
1EDC:  MOVF   FC2,W
1EDE:  ANDLW  83
1EE0:  IORWF  01,W
1EE2:  MOVWF  FC2
....................   delay_us(20); 
1EE4:  MOVLW  1A
1EE6:  MOVWF  00
1EE8:  DECFSZ 00,F
1EEA:  BRA    1EE8
1EEC:  NOP   
....................   power = read_adc(); 
1EEE:  BSF    FC2.1
1EF0:  BTFSC  FC2.1
1EF2:  BRA    1EF0
1EF4:  MOVFF  FC4,22F
1EF8:  MOVLB  2
1EFA:  MOVFF  FC3,22E
....................   
....................      
.................... if(setup.rc == 1) 
1EFE:  MOVLB  0
1F00:  DECFSZ xF7,W
1F02:  BRA    1F52
1F04:  MOVF   xF8,F
1F06:  BNZ   1F52
.................... {      
.................... 	 if (input(HILO) && setup.rp == 1) 
1F08:  BTFSS  F83.2
1F0A:  BRA    1F1E
1F0C:  DECFSZ xF9,W
1F0E:  BRA    1F1E
1F10:  MOVF   xFA,F
1F12:  BNZ   1F1E
.................... 	 { 
....................     level = power_level;  //SV 
1F14:  MOVFF  1D,231
1F18:  MOVFF  1C,230
....................      }   
....................   else if (input(HILO) && setup.rp == 0) 
1F1C:  BRA    1F52
1F1E:  BTFSS  F83.2
1F20:  BRA    1F34
1F22:  MOVF   xF9,F
1F24:  BNZ   1F34
1F26:  MOVF   xFA,F
1F28:  BNZ   1F34
....................     { 
....................     level = low_power_level; //VL 
1F2A:  MOVFF  1B,231
1F2E:  MOVFF  1A,230
....................     } 
....................     else if(!input(HILO) && setup.rp == 0) 
1F32:  BRA    1F52
1F34:  BTFSC  F83.2
1F36:  BRA    1F4A
1F38:  MOVF   xF9,F
1F3A:  BNZ   1F4A
1F3C:  MOVF   xFA,F
1F3E:  BNZ   1F4A
....................     { 
....................     level = power_level;  //SV 
1F40:  MOVFF  1D,231
1F44:  MOVFF  1C,230
....................     } 
....................   else 
1F48:  BRA    1F52
....................   { 
....................     level = low_power_level;  // VL 
1F4A:  MOVFF  1B,231
1F4E:  MOVFF  1A,230
....................   }   
.................... } 
.................... 	 
.................... 	if(setup.rc == 0) 
1F52:  MOVF   xF7,F
1F54:  BNZ   1FA4
1F56:  MOVF   xF8,F
1F58:  BNZ   1FA4
.................... 	{ 
.................... 	  if (input(HILO) && setup.rp == 0) 
1F5A:  BTFSS  F83.2
1F5C:  BRA    1F70
1F5E:  MOVF   xF9,F
1F60:  BNZ   1F70
1F62:  MOVF   xFA,F
1F64:  BNZ   1F70
.................... 	    { 
....................     level = power_level;  //SV  
1F66:  MOVFF  1D,231
1F6A:  MOVFF  1C,230
....................         }    
....................   else if (!input(HILO) && setup.rp == 1) 
1F6E:  BRA    1FA4
1F70:  BTFSC  F83.2
1F72:  BRA    1F86
1F74:  DECFSZ xF9,W
1F76:  BRA    1F86
1F78:  MOVF   xFA,F
1F7A:  BNZ   1F86
....................     { 
....................     level = power_level; 
1F7C:  MOVFF  1D,231
1F80:  MOVFF  1C,230
....................     } 
....................     else if(input(HILO) && setup.rp == 1) 
1F84:  BRA    1FA4
1F86:  BTFSS  F83.2
1F88:  BRA    1F9C
1F8A:  DECFSZ xF9,W
1F8C:  BRA    1F9C
1F8E:  MOVF   xFA,F
1F90:  BNZ   1F9C
....................     { 
....................     level = low_power_level; 
1F92:  MOVFF  1B,231
1F96:  MOVFF  1A,230
....................     } 
....................   else 
1F9A:  BRA    1FA4
....................     level = low_power_level; // VL 
1F9C:  MOVFF  1B,231
1FA0:  MOVFF  1A,230
.................... } 
....................  
....................  
....................  
....................      
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
1FA4:  MOVLW  06
1FA6:  MOVLB  2
1FA8:  ADDWF  x30,W
1FAA:  MOVWF  01
1FAC:  MOVLW  00
1FAE:  ADDWFC x31,W
1FB0:  MOVWF  03
1FB2:  MOVF   03,W
1FB4:  SUBWF  x2F,W
1FB6:  BNC   1FC0
1FB8:  BNZ   1FDE
1FBA:  MOVF   x2E,W
1FBC:  SUBWF  01,W
1FBE:  BNC   1FDE
1FC0:  MOVLW  06
1FC2:  SUBWF  x30,W
1FC4:  MOVWF  00
1FC6:  MOVLW  00
1FC8:  SUBWFB x31,W
1FCA:  MOVWF  03
1FCC:  MOVFF  00,01
1FD0:  MOVF   x2F,W
1FD2:  SUBWF  03,W
1FD4:  BNC   2028
1FD6:  BNZ   1FDE
1FD8:  MOVF   01,W
1FDA:  SUBWF  x2E,W
1FDC:  BC    2028
....................     { 
....................     if (power < level) 
1FDE:  MOVF   x2F,W
1FE0:  SUBWF  x31,W
1FE2:  BNC   2000
1FE4:  BNZ   1FEC
1FE6:  MOVF   x30,W
1FE8:  SUBWF  x2E,W
1FEA:  BC    2000
....................       { 
....................       if (power_control >= 150) 
1FEC:  MOVF   1F,F
1FEE:  BNZ   1FF6
1FF0:  MOVF   1E,W
1FF2:  SUBLW  95
1FF4:  BC    1FFE
....................         power_control -= DEADBAND / 2; 
1FF6:  MOVLW  03
1FF8:  SUBWF  1E,F
1FFA:  MOVLW  00
1FFC:  SUBWFB 1F,F
....................       } 
....................     else if (power_control <= 1010) 
1FFE:  BRA    2016
2000:  MOVF   1F,W
2002:  SUBLW  03
2004:  BNC   2016
2006:  BNZ   200E
2008:  MOVF   1E,W
200A:  SUBLW  F2
200C:  BNC   2016
....................       { 
....................       power_control += DEADBAND / 2; 
200E:  MOVLW  03
2010:  ADDWF  1E,F
2012:  MOVLW  00
2014:  ADDWFC 1F,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
2016:  CLRF   x32
2018:  MOVFF  1F,234
201C:  MOVFF  1E,233
2020:  MOVLB  0
2022:  CALL   0F78
2026:  MOVLB  2
....................     }	 
....................  
....................  
....................   } 
2028:  MOVLB  0
202A:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0E0A:  CLRF   F89
....................   output_b(0); 
0E0C:  CLRF   F8A
....................   output_c(0); 
0E0E:  CLRF   F8B
....................   output_d(0); 
0E10:  CLRF   F8C
....................   output_e(0); 
0E12:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0E14:  MOVLW  E1
0E16:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0E18:  MOVLW  C1
0E1A:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0E1C:  MOVLW  F1
0E1E:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0E20:  MOVLW  8E
0E22:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0E24:  BSF    F96.0
0E26:  BSF    F96.1
0E28:  BCF    F96.2
0E2A:  BSF    F96.3
....................   } 
0E2C:  GOTO   0E70 (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0E46:  MOVLW  48
0E48:  IORLW  05
0E4A:  MOVWF  FBA
0E4C:  MOVLW  63
0E4E:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0E50:  CLRF   FB4
0E52:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0E54:  MOVLW  00
0E56:  IORLW  05
0E58:  MOVLB  F
0E5A:  MOVWF  x51
0E5C:  MOVLW  63
0E5E:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0E60:  CLRF   x4D
0E62:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0E64:  MOVLW  00
0E66:  MOVWF  x4A
0E68:  MOVLW  00
0E6A:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0E6C:  MOVLB  0
0E6E:  BRA    0E0A
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0E70:  MOVF   FC1,W
0E72:  ANDLW  F0
0E74:  MOVWF  FC1
0E76:  MOVLW  21
0E78:  MOVLB  F
0E7A:  MOVWF  x38
0E7C:  MOVLW  03
0E7E:  MOVWF  x3C
0E80:  MOVLW  00
0E82:  MOVWF  x39
0E84:  MOVWF  x3A
0E86:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0E88:  MOVF   FC0,W
0E8A:  ANDLW  C0
0E8C:  IORLW  25
0E8E:  MOVWF  FC0
0E90:  BSF    FC0.7
0E92:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0E94:  CLRF   F77
0E96:  MOVLW  04
0E98:  MOVWF  F78
0E9A:  MOVWF  F79
....................  
....................   COM1_init(); 
0E9C:  MOVLB  0
0E9E:  RCALL  0E30
....................   enable_interrupts(INT_TIMER2); 
0EA0:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0EA2:  MOVLW  C0
0EA4:  IORWF  FF2,F
....................   } 
0EA6:  GOTO   691E (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1C10:  MOVFF  BA,233
1C14:  MOVFF  B9,232
....................   delay_ms(5); 
1C18:  MOVLW  05
1C1A:  MOVLB  2
1C1C:  MOVWF  x43
1C1E:  MOVLB  0
1C20:  CALL   0EAA
....................   PLL_compute_freq_parameters(freq); 
1C24:  MOVFF  233,237
1C28:  MOVFF  232,236
1C2C:  CALL   129C
....................   delay_ms(5); 
1C30:  MOVLW  05
1C32:  MOVLB  2
1C34:  MOVWF  x43
1C36:  MOVLB  0
1C38:  CALL   0EAA
....................   PLL_update(); 
1C3C:  RCALL  156C
....................   delay_ms(5); 
1C3E:  MOVLW  05
1C40:  MOVLB  2
1C42:  MOVWF  x43
1C44:  MOVLB  0
1C46:  CALL   0EAA
....................   FPGA_set_reg0(); 
1C4A:  RCALL  16C2
....................   delay_ms(5); 
1C4C:  MOVLW  05
1C4E:  MOVLB  2
1C50:  MOVWF  x43
1C52:  MOVLB  0
1C54:  CALL   0EAA
....................   FPGA_set_reg6(); 
1C58:  RCALL  171E
....................   delay_ms(5); 
1C5A:  MOVLW  05
1C5C:  MOVLB  2
1C5E:  MOVWF  x43
1C60:  MOVLB  0
1C62:  CALL   0EAA
....................   FPGA_set_bitrate(); 
1C66:  RCALL  1B1C
....................   bitr = setup.bitrate; 
1C68:  MOVFF  AC,235
1C6C:  MOVFF  AB,234
....................   power_control = 1000; 
1C70:  MOVLW  03
1C72:  MOVWF  1F
1C74:  MOVLW  E8
1C76:  MOVWF  1E
....................   } 
1C78:  RETURN 0
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
6894:  CLRF   FF8
6896:  BCF    FD0.7
6898:  BSF    07.7
689A:  CLRF   FEA
689C:  CLRF   FE9
689E:  MOVLW  70
68A0:  MOVWF  FD3
68A2:  BCF    F9B.6
68A4:  BCF    F9B.7
68A6:  BCF    FB8.3
68A8:  MOVLW  19
68AA:  MOVWF  FAF
68AC:  MOVLW  A6
68AE:  MOVWF  FAC
68B0:  MOVLW  90
68B2:  MOVWF  FAB
68B4:  SETF   23
68B6:  SETF   22
68B8:  SETF   25
68BA:  SETF   24
68BC:  CLRF   30
68BE:  CLRF   2F
68C0:  CLRF   31
68C2:  CLRF   32
68C4:  CLRF   33
68C6:  MOVLB  1
68C8:  CLRF   x02
68CA:  CLRF   x01
68CC:  CLRF   x04
68CE:  MOVLW  02
68D0:  MOVWF  x03
68D2:  CLRF   x06
68D4:  MOVWF  x05
68D6:  CLRF   x0C
68D8:  CLRF   x0B
68DA:  CLRF   x10
68DC:  CLRF   x0F
68DE:  CLRF   x2C
68E0:  MOVLW  01
68E2:  MOVWF  x42
68E4:  CLRF   x43
68E6:  MOVFF  F9,1A0
68EA:  MOVFF  AD,1A1
68EE:  CLRF   xA4
68F0:  CLRF   xA3
68F2:  MOVF   FC1,W
68F4:  ANDLW  F0
68F6:  MOVWF  FC1
68F8:  MOVLW  00
68FA:  MOVLB  F
68FC:  MOVWF  x38
68FE:  MOVWF  x3C
6900:  MOVWF  x39
6902:  MOVWF  x3A
6904:  MOVWF  x3B
6906:  MOVLB  1
6908:  CLRF   x88
690A:  CLRF   F77
690C:  CLRF   F78
690E:  CLRF   F79
6910:  MOVLW  03
6912:  MOVWF  xA6
6914:  MOVLW  E8
6916:  MOVWF  xA5
....................   int16 vouta = 1000; 
....................   init_system();  
6918:  MOVLB  0
691A:  GOTO   0E46
....................   output_high(D2A_CSB); 
691E:  BSF    F8A.1
....................   delay_ms(100); 
6920:  MOVLW  64
6922:  MOVLB  2
6924:  MOVWF  x43
6926:  MOVLB  0
6928:  CALL   0EAA
....................   read_setup(); 
692C:  CALL   0F46
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
6930:  MOVF   xFB,F
6932:  BNZ   6938
.................... 		setup.UART_Time = 10; 
6934:  MOVLW  0A
6936:  MOVWF  xFB
.................... 	if (setup.Block_per_second == 0) 
6938:  MOVF   xFF,F
693A:  BNZ   6950
693C:  MOVLB  1
693E:  MOVF   x00,F
6940:  BTFSC  FD8.2
6942:  BRA    6948
6944:  MOVLB  0
6946:  BRA    6950
....................     setup.Block_per_second = 100; 
6948:  CLRF   x00
694A:  MOVLW  64
694C:  MOVLB  0
694E:  MOVWF  xFF
.................... 	//setup.UART_Status = 1;// VERSION 3.3: 10.2.2016  
....................   power_level = setup.power_in[setup.power_level]; 
6950:  BCF    FD8.0
6952:  RLCF   xBB,W
6954:  MOVWF  02
6956:  RLCF   xBC,W
6958:  MOVWF  03
695A:  MOVF   02,W
695C:  ADDLW  C4
695E:  MOVWF  FE9
6960:  MOVLW  00
6962:  ADDWFC 03,W
6964:  MOVWF  FEA
6966:  MOVFF  FEC,03
696A:  MOVF   FED,F
696C:  MOVFF  FEF,1C
6970:  MOVFF  03,1D
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6974:  BCF    FD8.0
6976:  RLCF   xF3,W
6978:  MOVWF  02
697A:  RLCF   xF4,W
697C:  MOVWF  03
697E:  MOVF   02,W
6980:  ADDLW  C4
6982:  MOVWF  FE9
6984:  MOVLW  00
6986:  ADDWFC 03,W
6988:  MOVWF  FEA
698A:  MOVFF  FEC,03
698E:  MOVF   FED,F
6990:  MOVFF  FEF,1A
6994:  MOVFF  03,1B
....................   power_control = 1000; 
6998:  MOVLW  03
699A:  MOVWF  1F
699C:  MOVLW  E8
699E:  MOVWF  1E
....................   power_output(); 
69A0:  CALL   1C7A
....................    
....................  
....................   PLL_initialize(); 
69A4:  GOTO   202C
....................   delay_ms(50); 
69A8:  MOVLW  32
69AA:  MOVLB  2
69AC:  MOVWF  x43
69AE:  MOVLB  0
69B0:  CALL   0EAA
....................   update_all(); 
69B4:  CALL   1C10
....................  
....................   output_high(D2A_RESET); 
69B8:  BSF    F8A.3
....................   delay_ms(50); 
69BA:  MOVLW  32
69BC:  MOVLB  2
69BE:  MOVWF  x43
69C0:  MOVLB  0
69C2:  CALL   0EAA
....................   output_low(D2A_RESET); 
69C6:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
69C8:  MOVLW  0D
69CA:  MOVLB  1
69CC:  MOVWF  xA7
69CE:  MOVLW  0A
69D0:  MOVWF  xA8
69D2:  CLRF   xA9
69D4:  MOVLW  01
69D6:  MOVLB  2
69D8:  MOVWF  x6D
69DA:  MOVLW  A7
69DC:  MOVWF  x6C
69DE:  MOVLB  0
69E0:  CALL   20D6
....................   COM1_send_str(VERSION); 
69E4:  MOVLW  01
69E6:  MOVWF  FEA
69E8:  MOVLW  A7
69EA:  MOVWF  FE9
69EC:  MOVLW  0F
69EE:  MOVWF  01
69F0:  CLRF   FF7
69F2:  MOVLW  00
69F4:  CALL   08F4
69F8:  TBLRD*-
69FA:  TBLRD*+
69FC:  MOVFF  FF5,FEE
6A00:  DECFSZ 01,F
6A02:  BRA    69FA
6A04:  MOVLW  01
6A06:  MOVLB  2
6A08:  MOVWF  x6D
6A0A:  MOVLW  A7
6A0C:  MOVWF  x6C
6A0E:  MOVLB  0
6A10:  CALL   20D6
....................   COM1_send_str("\r\n"); 
6A14:  MOVLW  0D
6A16:  MOVLB  1
6A18:  MOVWF  xA7
6A1A:  MOVLW  0A
6A1C:  MOVWF  xA8
6A1E:  CLRF   xA9
6A20:  MOVLW  01
6A22:  MOVLB  2
6A24:  MOVWF  x6D
6A26:  MOVLW  A7
6A28:  MOVWF  x6C
6A2A:  MOVLB  0
6A2C:  CALL   20D6
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
6A30:  MOVLB  2
6A32:  CLRF   x32
6A34:  MOVFF  1A6,234
6A38:  MOVFF  1A5,233
6A3C:  MOVLB  0
6A3E:  CALL   0F78
....................  
....................  
....................   delay_ms(500); 
6A42:  MOVLW  02
6A44:  MOVLB  1
6A46:  MOVWF  xB6
6A48:  MOVLW  FA
6A4A:  MOVLB  2
6A4C:  MOVWF  x43
6A4E:  MOVLB  0
6A50:  CALL   0EAA
6A54:  MOVLB  1
6A56:  DECFSZ xB6,F
6A58:  BRA    6A48
....................   output_high(POWER_EN); 
6A5A:  BSF    F8C.6
....................  
.................... update_all(); 
6A5C:  MOVLB  0
6A5E:  CALL   1C10
....................  
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6A62:  CLRWDT
....................     if (TMR_100mS_BLINK) 
6A64:  BTFSS  2C.0
6A66:  BRA    6A70
....................       { 
....................       TMR_100mS_BLINK = 0; 
6A68:  BCF    2C.0
....................       output_toggle(LED1); 
6A6A:  BTG    F8A.4
....................       delay_us(1); 
6A6C:  BRA    6A6E
6A6E:  BRA    6A70
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6A70:  DECFSZ 33,W
6A72:  BRA    6AAA
6A74:  MOVF   36,F
6A76:  BNZ   6AAA
6A78:  MOVLB  1
6A7A:  DECFSZ x0B,W
6A7C:  BRA    6A82
6A7E:  MOVF   x0C,F
6A80:  BZ    6A96
6A82:  MOVF   x0B,F
6A84:  BTFSC  FD8.2
6A86:  BRA    6A8C
6A88:  MOVLB  0
6A8A:  BRA    6AAA
6A8C:  MOVF   x0C,F
6A8E:  BTFSC  FD8.2
6A90:  BRA    6A96
6A92:  MOVLB  0
6A94:  BRA    6AAA
....................     	{         
.................... 				if (setup.UART_Status == 1) 
6A96:  MOVLB  0
6A98:  DECFSZ xFC,W
6A9A:  BRA    6AAA
.................... 		      { 
.................... 			      stay_on = 1; 
6A9C:  MOVLB  1
6A9E:  CLRF   x0C
6AA0:  MOVLW  01
6AA2:  MOVWF  x0B
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
6AA4:  MOVLB  0
6AA6:  GOTO   27EA
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6AAA:  MOVLB  1
6AAC:  MOVF   x0B,W
6AAE:  SUBLW  02
6AB0:  BNZ   6AB6
6AB2:  MOVF   x0C,F
6AB4:  BZ    6ABE
6AB6:  MOVF   x0B,F
6AB8:  BNZ   6ACE
6ABA:  MOVF   x0C,F
6ABC:  BNZ   6ACE
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6ABE:  MOVLB  0
6AC0:  BRA    685A
.................... 		   			if (COM1_rxo != 0 ) 
6AC2:  MOVF   36,F
6AC4:  BZ    6AD0
.................... 		   				stay_on = 2; 
6AC6:  MOVLB  1
6AC8:  CLRF   x0C
6ACA:  MOVLW  02
6ACC:  MOVWF  x0B
6ACE:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6AD0:  CALL   1C7A
....................    } 
6AD4:  BRA    6A62
....................   } 
6AD6:  SLEEP 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
