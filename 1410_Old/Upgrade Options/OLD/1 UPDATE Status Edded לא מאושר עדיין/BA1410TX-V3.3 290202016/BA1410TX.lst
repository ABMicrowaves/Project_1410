CCS PCH C Compiler, Version 4.137, 5799               29-פבר-16 14:27

               Filename: D:\nati\projects\1410TX\BA1410TX-V3.2 New Update Status Block\Thirteenth\BA1410TX.lst

               ROM used: 26492 bytes (81%)
                         Largest free fragment is 6272
               RAM used: 423 (28%) at main() level
                         625 (41%) worst case
               Stack:    10 worst case (8 in main + 2 for interrupts)

*
0000:  GOTO   658E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   0998
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   0A0E
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0A14
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   0A1A
0084:  BTFSS  F9D.4
0086:  GOTO   0090
008A:  BTFSC  F9E.4
008C:  GOTO   0A68
0090:  BTFSS  F7D.0
0092:  GOTO   009C
0096:  BTFSC  F7E.0
0098:  GOTO   097C
009C:  MOVFF  0E,00
00A0:  MOVFF  0F,01
00A4:  MOVFF  10,02
00A8:  MOVFF  11,03
00AC:  MOVFF  0C,FE9
00B0:  MOVFF  07,FEA
00B4:  BSF    07.7
00B6:  MOVFF  08,FE1
00BA:  MOVFF  09,FE2
00BE:  MOVFF  0A,FD9
00C2:  MOVFF  0B,FDA
00C6:  MOVFF  12,FF3
00CA:  MOVFF  13,FF4
00CE:  MOVFF  14,FFA
00D2:  MOVFF  15,FF5
00D6:  MOVFF  16,FF6
00DA:  MOVFF  17,FF7
00DE:  MOVF   04,W
00E0:  MOVFF  06,FE0
00E4:  MOVFF  05,FD8
00E8:  RETFIE 0
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0A48:  MOVLW  04
0A4A:  MOVLB  2
0A4C:  SUBWF  x6E,F
0A4E:  BNC   0A64
0A50:  MOVLW  02
0A52:  MOVWF  FEA
0A54:  MOVLW  6E
0A56:  MOVWF  FE9
0A58:  MOVF   FEF,W
0A5A:  BZ    0A64
0A5C:  BRA    0A60
0A5E:  NOP   
0A60:  DECFSZ FEF,F
0A62:  BRA    0A5E
0A64:  MOVLB  0
0A66:  RETURN 0
*
0DBA:  MOVLW  02
0DBC:  MOVWF  FEA
0DBE:  MOVLW  3D
0DC0:  MOVWF  FE9
0DC2:  MOVF   FEF,W
0DC4:  BZ    0DE2
0DC6:  MOVLW  05
0DC8:  MOVWF  01
0DCA:  CLRF   00
0DCC:  DECFSZ 00,F
0DCE:  BRA    0DCC
0DD0:  DECFSZ 01,F
0DD2:  BRA    0DCA
0DD4:  MOVLW  2E
0DD6:  MOVWF  00
0DD8:  DECFSZ 00,F
0DDA:  BRA    0DD8
0DDC:  BRA    0DDE
0DDE:  DECFSZ FEF,F
0DE0:  BRA    0DC6
0DE2:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION " BA1410TX V3.3" 
.................... // VERSION 3.3 Custmmer chenge Add Status Block 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... UINT bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UCHAR  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
....................  
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
.................... 	   UINT  cot; 
.................... 	   UINT  rc; 
.................... 	   UINT  rp; 
.................... 	   UCHAR UART_Time; // VERSION 3.3 UT 
.................... 	   
.................... 	    
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT a=2, b=2; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
....................  
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[24]; 
....................  
.................... UCHAR ttccp_login = 0; 
.................... UCHAR UART_Status = 0; // VERSION 3.3 US 
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len); 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0E88:  BCF    F89.2
....................  
....................   if (channel) 
0E8A:  MOVLB  2
0E8C:  MOVF   x2C,F
0E8E:  BZ    0E94
....................     output_high(DA2_DAT);    // send to VOUTB 
0E90:  BSF    F89.4
....................   else 
0E92:  BRA    0E96
....................     output_low(DA2_DAT);    // send to VOUTA 
0E94:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0E96:  BSF    F89.3
....................   delay_cycles(15); 
0E98:  MOVLW  04
0E9A:  MOVWF  00
0E9C:  DECFSZ 00,F
0E9E:  BRA    0E9C
0EA0:  BRA    0EA2
....................   output_low(DA2_CLK); 
0EA2:  BCF    F89.3
....................   delay_cycles(15); 
0EA4:  MOVLW  04
0EA6:  MOVWF  00
0EA8:  DECFSZ 00,F
0EAA:  BRA    0EA8
0EAC:  BRA    0EAE
....................  
....................   output_low(DA2_DAT); 
0EAE:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0EB0:  BSF    F89.3
....................   delay_cycles(15); 
0EB2:  MOVLW  04
0EB4:  MOVWF  00
0EB6:  DECFSZ 00,F
0EB8:  BRA    0EB6
0EBA:  BRA    0EBC
....................   output_low(DA2_CLK); 
0EBC:  BCF    F89.3
....................   delay_cycles(15); 
0EBE:  MOVLW  04
0EC0:  MOVWF  00
0EC2:  DECFSZ 00,F
0EC4:  BRA    0EC2
0EC6:  BRA    0EC8
....................  
....................   output_high(DA2_CLK); 
0EC8:  BSF    F89.3
....................   delay_cycles(15); 
0ECA:  MOVLW  04
0ECC:  MOVWF  00
0ECE:  DECFSZ 00,F
0ED0:  BRA    0ECE
0ED2:  BRA    0ED4
....................   output_low(DA2_CLK); 
0ED4:  BCF    F89.3
....................   delay_cycles(15); 
0ED6:  MOVLW  04
0ED8:  MOVWF  00
0EDA:  DECFSZ 00,F
0EDC:  BRA    0EDA
0EDE:  BRA    0EE0
....................  
....................   output_high(DA2_CLK); 
0EE0:  BSF    F89.3
....................   delay_cycles(15); 
0EE2:  MOVLW  04
0EE4:  MOVWF  00
0EE6:  DECFSZ 00,F
0EE8:  BRA    0EE6
0EEA:  BRA    0EEC
....................   output_low(DA2_CLK); 
0EEC:  BCF    F89.3
....................   delay_cycles(15); 
0EEE:  MOVLW  04
0EF0:  MOVWF  00
0EF2:  DECFSZ 00,F
0EF4:  BRA    0EF2
0EF6:  BRA    0EF8
....................  
....................  
....................   output_high(DA2_CLK); 
0EF8:  BSF    F89.3
....................   if (level & 0x0200) 
0EFA:  ANDLW  00
0EFC:  MOVWF  00
0EFE:  MOVF   x2E,W
0F00:  ANDLW  02
0F02:  MOVWF  03
0F04:  MOVF   00,W
0F06:  IORWF  03,W
0F08:  BZ    0F0E
....................     output_high(DA2_DAT); 
0F0A:  BSF    F89.4
....................   else 
0F0C:  BRA    0F10
....................     output_low(DA2_DAT); 
0F0E:  BCF    F89.4
....................   delay_cycles(15); 
0F10:  MOVLW  04
0F12:  MOVWF  00
0F14:  DECFSZ 00,F
0F16:  BRA    0F14
0F18:  BRA    0F1A
....................   output_low(DA2_CLK); 
0F1A:  BCF    F89.3
....................   delay_cycles(15); 
0F1C:  MOVLW  04
0F1E:  MOVWF  00
0F20:  DECFSZ 00,F
0F22:  BRA    0F20
0F24:  BRA    0F26
....................  
....................   output_high(DA2_CLK); 
0F26:  BSF    F89.3
....................   if (level & 0x0100) 
0F28:  ANDLW  00
0F2A:  MOVWF  00
0F2C:  MOVF   x2E,W
0F2E:  ANDLW  01
0F30:  MOVWF  03
0F32:  MOVF   00,W
0F34:  IORWF  03,W
0F36:  BZ    0F3C
....................     output_high(DA2_DAT); 
0F38:  BSF    F89.4
....................   else 
0F3A:  BRA    0F3E
....................     output_low(DA2_DAT); 
0F3C:  BCF    F89.4
....................   output_low(DA2_CLK); 
0F3E:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0F40:  BSF    F89.3
....................   if (level & 0x0080) 
0F42:  MOVF   x2D,W
0F44:  ANDLW  80
0F46:  MOVWF  00
0F48:  CLRF   03
0F4A:  MOVF   00,W
0F4C:  IORWF  03,W
0F4E:  BZ    0F54
....................     output_high(DA2_DAT); 
0F50:  BSF    F89.4
....................   else 
0F52:  BRA    0F56
....................     output_low(DA2_DAT); 
0F54:  BCF    F89.4
....................   delay_cycles(15); 
0F56:  MOVLW  04
0F58:  MOVWF  00
0F5A:  DECFSZ 00,F
0F5C:  BRA    0F5A
0F5E:  BRA    0F60
....................   output_low(DA2_CLK); 
0F60:  BCF    F89.3
....................   delay_cycles(15); 
0F62:  MOVLW  04
0F64:  MOVWF  00
0F66:  DECFSZ 00,F
0F68:  BRA    0F66
0F6A:  BRA    0F6C
....................  
....................   output_high(DA2_CLK); 
0F6C:  BSF    F89.3
....................   if (level & 0x0040) 
0F6E:  MOVF   x2D,W
0F70:  ANDLW  40
0F72:  MOVWF  00
0F74:  CLRF   03
0F76:  MOVF   00,W
0F78:  IORWF  03,W
0F7A:  BZ    0F80
....................     output_high(DA2_DAT); 
0F7C:  BSF    F89.4
....................   else 
0F7E:  BRA    0F82
....................     output_low(DA2_DAT); 
0F80:  BCF    F89.4
....................   delay_cycles(15); 
0F82:  MOVLW  04
0F84:  MOVWF  00
0F86:  DECFSZ 00,F
0F88:  BRA    0F86
0F8A:  BRA    0F8C
....................   output_low(DA2_CLK); 
0F8C:  BCF    F89.3
....................   delay_cycles(15); 
0F8E:  MOVLW  04
0F90:  MOVWF  00
0F92:  DECFSZ 00,F
0F94:  BRA    0F92
0F96:  BRA    0F98
....................  
....................   output_high(DA2_CLK); 
0F98:  BSF    F89.3
....................   if (level & 0x0020) 
0F9A:  MOVF   x2D,W
0F9C:  ANDLW  20
0F9E:  MOVWF  00
0FA0:  CLRF   03
0FA2:  MOVF   00,W
0FA4:  IORWF  03,W
0FA6:  BZ    0FAC
....................     output_high(DA2_DAT); 
0FA8:  BSF    F89.4
....................   else 
0FAA:  BRA    0FAE
....................     output_low(DA2_DAT); 
0FAC:  BCF    F89.4
....................   output_low(DA2_CLK); 
0FAE:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0FB0:  BSF    F89.3
....................   if (level & 0x0010) 
0FB2:  MOVF   x2D,W
0FB4:  ANDLW  10
0FB6:  MOVWF  00
0FB8:  CLRF   03
0FBA:  MOVF   00,W
0FBC:  IORWF  03,W
0FBE:  BZ    0FC4
....................     output_high(DA2_DAT); 
0FC0:  BSF    F89.4
....................   else 
0FC2:  BRA    0FC6
....................     output_low(DA2_DAT); 
0FC4:  BCF    F89.4
....................   delay_cycles(15); 
0FC6:  MOVLW  04
0FC8:  MOVWF  00
0FCA:  DECFSZ 00,F
0FCC:  BRA    0FCA
0FCE:  BRA    0FD0
....................   output_low(DA2_CLK); 
0FD0:  BCF    F89.3
....................   delay_cycles(15); 
0FD2:  MOVLW  04
0FD4:  MOVWF  00
0FD6:  DECFSZ 00,F
0FD8:  BRA    0FD6
0FDA:  BRA    0FDC
....................  
....................   output_high(DA2_CLK); 
0FDC:  BSF    F89.3
....................   if (level & 0x0008) 
0FDE:  MOVF   x2D,W
0FE0:  ANDLW  08
0FE2:  MOVWF  00
0FE4:  CLRF   03
0FE6:  MOVF   00,W
0FE8:  IORWF  03,W
0FEA:  BZ    0FF0
....................     output_high(DA2_DAT); 
0FEC:  BSF    F89.4
....................   else 
0FEE:  BRA    0FF2
....................     output_low(DA2_DAT); 
0FF0:  BCF    F89.4
....................   output_low(DA2_CLK); 
0FF2:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0FF4:  BSF    F89.3
....................   if (level & 0x0004) 
0FF6:  MOVF   x2D,W
0FF8:  ANDLW  04
0FFA:  MOVWF  00
0FFC:  CLRF   03
0FFE:  MOVF   00,W
1000:  IORWF  03,W
1002:  BZ    1008
....................     output_high(DA2_DAT); 
1004:  BSF    F89.4
....................   else 
1006:  BRA    100A
....................     output_low(DA2_DAT); 
1008:  BCF    F89.4
....................   delay_cycles(15); 
100A:  MOVLW  04
100C:  MOVWF  00
100E:  DECFSZ 00,F
1010:  BRA    100E
1012:  BRA    1014
....................   output_low(DA2_CLK); 
1014:  BCF    F89.3
....................   delay_cycles(15); 
1016:  MOVLW  04
1018:  MOVWF  00
101A:  DECFSZ 00,F
101C:  BRA    101A
101E:  BRA    1020
....................  
....................   output_high(DA2_CLK); 
1020:  BSF    F89.3
....................   if (level & 0x0002) 
1022:  MOVF   x2D,W
1024:  ANDLW  02
1026:  MOVWF  00
1028:  CLRF   03
102A:  MOVF   00,W
102C:  IORWF  03,W
102E:  BZ    1034
....................     output_high(DA2_DAT); 
1030:  BSF    F89.4
....................   else 
1032:  BRA    1036
....................     output_low(DA2_DAT); 
1034:  BCF    F89.4
....................   output_low(DA2_CLK); 
1036:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1038:  BSF    F89.3
....................   if (level & 0x0001) 
103A:  MOVF   x2D,W
103C:  ANDLW  01
103E:  MOVWF  00
1040:  CLRF   03
1042:  MOVF   00,W
1044:  IORWF  03,W
1046:  BZ    104C
....................     output_high(DA2_DAT); 
1048:  BSF    F89.4
....................   else 
104A:  BRA    104E
....................     output_low(DA2_DAT); 
104C:  BCF    F89.4
....................   delay_cycles(15); 
104E:  MOVLW  04
1050:  MOVWF  00
1052:  DECFSZ 00,F
1054:  BRA    1052
1056:  BRA    1058
....................   output_low(DA2_CLK); 
1058:  BCF    F89.3
....................   delay_cycles(15); 
105A:  MOVLW  04
105C:  MOVWF  00
105E:  DECFSZ 00,F
1060:  BRA    105E
1062:  BRA    1064
....................  
....................  
....................   output_high(DA2_CLK); 
1064:  BSF    F89.3
....................   delay_cycles(15); 
1066:  MOVLW  04
1068:  MOVWF  00
106A:  DECFSZ 00,F
106C:  BRA    106A
106E:  BRA    1070
....................   output_low(DA2_CLK); 
1070:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1072:  BSF    F89.3
....................   delay_cycles(15); 
1074:  MOVLW  04
1076:  MOVWF  00
1078:  DECFSZ 00,F
107A:  BRA    1078
107C:  BRA    107E
....................   delay_cycles(15); 
107E:  MOVLW  04
1080:  MOVWF  00
1082:  DECFSZ 00,F
1084:  BRA    1082
1086:  BRA    1088
....................   output_low(DA2_CLK); 
1088:  BCF    F89.3
....................   delay_cycles(15); 
108A:  MOVLW  04
108C:  MOVWF  00
108E:  DECFSZ 00,F
1090:  BRA    108E
1092:  BRA    1094
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
1094:  BSF    F89.2
....................   delay_cycles(15); 
1096:  MOVLW  04
1098:  MOVWF  00
109A:  DECFSZ 00,F
109C:  BRA    109A
109E:  BRA    10A0
....................   output_low(DA2_LAT); 
10A0:  BCF    F89.1
....................   delay_cycles(15); 
10A2:  MOVLW  04
10A4:  MOVWF  00
10A6:  DECFSZ 00,F
10A8:  BRA    10A6
10AA:  BRA    10AC
....................   output_high(DA2_LAT); 
10AC:  BSF    F89.1
....................   delay_cycles(15); 
10AE:  MOVLW  04
10B0:  MOVWF  00
10B2:  DECFSZ 00,F
10B4:  BRA    10B2
10B6:  BRA    10B8
....................   } 
10B8:  MOVLB  0
10BA:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5CA6:  BCF    F8A.1
....................   addr |= 0x80; 
5CA8:  MOVLB  2
5CAA:  BSF    x00.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5CAC:  CLRF   x02
5CAE:  MOVF   x02,W
5CB0:  SUBLW  07
5CB2:  BNC   5CDA
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5CB4:  MOVF   x00,W
5CB6:  ANDLW  80
5CB8:  BNZ   5CBE
5CBA:  BCF    F8C.4
5CBC:  BRA    5CC0
5CBE:  BSF    F8C.4
....................     delay_us(1); 
5CC0:  BRA    5CC2
5CC2:  BRA    5CC4
....................     output_high(D2A_SCLK); 
5CC4:  BSF    F8C.0
....................     delay_us(1); 
5CC6:  BRA    5CC8
5CC8:  BRA    5CCA
....................     output_low(D2A_SCLK); 
5CCA:  BCF    F8C.0
....................     delay_us(1); 
5CCC:  BRA    5CCE
5CCE:  BRA    5CD0
....................     } 
5CD0:  MOVF   x02,W
5CD2:  INCF   x02,F
5CD4:  BCF    FD8.0
5CD6:  RLCF   x00,F
5CD8:  BRA    5CAE
....................   for (ix = 0; ix < 8; ix++) 
5CDA:  CLRF   x02
5CDC:  MOVF   x02,W
5CDE:  SUBLW  07
5CE0:  BNC   5CFC
....................     { 
....................     output_high(D2A_SCLK); 
5CE2:  BSF    F8C.0
....................     delay_us(1); 
5CE4:  BRA    5CE6
5CE6:  BRA    5CE8
....................     output_low(D2A_SCLK); 
5CE8:  BCF    F8C.0
....................     delay_us(1); 
5CEA:  BRA    5CEC
5CEC:  BRA    5CEE
....................     dout <<= 1; 
5CEE:  BCF    FD8.0
5CF0:  RLCF   x01,F
....................     if (input(D2A_MISO)) 
5CF2:  BTFSS  F83.1
5CF4:  BRA    5CF8
....................       dout |= 1; 
5CF6:  BSF    x01.0
....................     } 
5CF8:  INCF   x02,F
5CFA:  BRA    5CDC
....................   output_high(D2A_CSB); 
5CFC:  BSF    F8A.1
....................   return dout; 
5CFE:  MOVFF  201,01
....................   } 
5D02:  MOVLB  0
5D04:  GOTO   614E (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
547E:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5480:  MOVLB  2
5482:  CLRF   x03
5484:  MOVF   x03,W
5486:  SUBLW  07
5488:  BNC   54B0
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
548A:  MOVF   x00,W
548C:  ANDLW  80
548E:  BNZ   5494
5490:  BCF    F8C.4
5492:  BRA    5496
5494:  BSF    F8C.4
....................     delay_us(1); 
5496:  BRA    5498
5498:  BRA    549A
....................     output_high(D2A_SCLK); 
549A:  BSF    F8C.0
....................     delay_us(1); 
549C:  BRA    549E
549E:  BRA    54A0
....................     output_low(D2A_SCLK); 
54A0:  BCF    F8C.0
....................     delay_us(1); 
54A2:  BRA    54A4
54A4:  BRA    54A6
....................     } 
54A6:  MOVF   x03,W
54A8:  INCF   x03,F
54AA:  BCF    FD8.0
54AC:  RLCF   x00,F
54AE:  BRA    5484
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
54B0:  CLRF   x03
54B2:  MOVF   x03,W
54B4:  SUBLW  07
54B6:  BNC   54DE
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
54B8:  MOVF   x01,W
54BA:  ANDLW  80
54BC:  BNZ   54C2
54BE:  BCF    F8C.4
54C0:  BRA    54C4
54C2:  BSF    F8C.4
....................     delay_us(1); 
54C4:  BRA    54C6
54C6:  BRA    54C8
....................     output_high(D2A_SCLK); 
54C8:  BSF    F8C.0
....................     delay_us(1); 
54CA:  BRA    54CC
54CC:  BRA    54CE
....................     output_low(D2A_SCLK); 
54CE:  BCF    F8C.0
....................     delay_us(1); 
54D0:  BRA    54D2
54D2:  BRA    54D4
....................     } 
54D4:  MOVF   x03,W
54D6:  INCF   x03,F
54D8:  BCF    FD8.0
54DA:  RLCF   x01,F
54DC:  BRA    54B2
....................   output_high(D2A_CSB); 
54DE:  BSF    F8A.1
....................   return dout; 
54E0:  MOVFF  202,01
....................   } 
54E4:  MOVLB  0
54E6:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
13D8:  MOVLW  08
13DA:  MOVLB  2
13DC:  MOVWF  x3A
13DE:  MOVF   x3A,F
13E0:  BZ    141E
....................     { 
....................     if (data & 0X80) 
13E2:  BTFSS  x39.7
13E4:  BRA    13EA
....................       output_high(PLL_DAT); 
13E6:  BSF    F8B.3
....................     else 
13E8:  BRA    13EC
....................       output_low(PLL_DAT); 
13EA:  BCF    F8B.3
....................     delay_us(10); 
13EC:  MOVLW  0C
13EE:  MOVWF  00
13F0:  DECFSZ 00,F
13F2:  BRA    13F0
13F4:  BRA    13F6
13F6:  NOP   
....................     output_high(PLL_CLK); 
13F8:  BSF    F8B.2
....................     delay_us(10); 
13FA:  MOVLW  0C
13FC:  MOVWF  00
13FE:  DECFSZ 00,F
1400:  BRA    13FE
1402:  BRA    1404
1404:  NOP   
....................     output_low(PLL_CLK); 
1406:  BCF    F8B.2
....................  
....................     delay_us(25); 
1408:  MOVLW  20
140A:  MOVWF  00
140C:  DECFSZ 00,F
140E:  BRA    140C
1410:  BRA    1412
1412:  NOP   
....................     } 
1414:  MOVF   x3A,W
1416:  DECF   x3A,F
1418:  BCF    FD8.0
141A:  RLCF   x39,F
141C:  BRA    13DE
....................   output_low(PLL_DAT); 
141E:  BCF    F8B.3
....................   output_low(PLL_CLK); 
1420:  BCF    F8B.2
....................   } 
1422:  MOVLB  0
1424:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
1426:  CLRWDT
....................   disable_interrupts(GLOBAL); 
1428:  BCF    FF2.6
142A:  BCF    FF2.7
142C:  BTFSC  FF2.7
142E:  BRA    142A
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
1430:  MOVFF  237,238
1434:  MOVFF  237,239
1438:  RCALL  13D8
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
143A:  MOVFF  236,238
143E:  MOVFF  236,239
1442:  RCALL  13D8
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1444:  MOVFF  235,238
1448:  MOVFF  235,239
144C:  RCALL  13D8
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
144E:  MOVFF  234,238
1452:  MOVFF  234,239
1456:  RCALL  13D8
....................   delay_us(40); 
1458:  MOVLW  34
145A:  MOVWF  00
145C:  DECFSZ 00,F
145E:  BRA    145C
1460:  BRA    1462
1462:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1464:  BSF    F8B.1
....................   delay_us(5); 
1466:  MOVLW  06
1468:  MOVWF  00
146A:  DECFSZ 00,F
146C:  BRA    146A
146E:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
1470:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
1472:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
1474:  MOVLW  C0
1476:  IORWF  FF2,F
....................   restart_wdt(); 
1478:  CLRWDT
....................   } 
147A:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
1F9A:  MOVLB  1
1F9C:  CLRF   xB5
1F9E:  MOVLW  05
1FA0:  MOVWF  xB4
1FA2:  MOVF   xB5,W
1FA4:  SUBLW  05
1FA6:  BNC   2014
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
1FA8:  MOVF   xB4,W
1FAA:  MULLW  04
1FAC:  MOVF   FF3,W
1FAE:  CLRF   03
1FB0:  MOVLB  0
1FB2:  CALL   00EA
1FB6:  TBLRD*+
1FB8:  MOVFF  FF5,01
1FBC:  TBLRD*+
1FBE:  MOVFF  FF5,02
1FC2:  TBLRD*+
1FC4:  MOVFF  FF5,03
1FC8:  MOVFF  03,1B3
1FCC:  MOVFF  02,1B2
1FD0:  MOVFF  01,1B1
1FD4:  MOVFF  FE8,1B0
....................     prog |= (ULONG)idx; 
1FD8:  MOVFF  1B4,00
1FDC:  CLRF   01
1FDE:  CLRF   02
1FE0:  CLRF   03
1FE2:  MOVF   00,W
1FE4:  MOVLB  1
1FE6:  IORWF  xB0,F
1FE8:  MOVF   01,W
1FEA:  IORWF  xB1,F
1FEC:  MOVF   02,W
1FEE:  IORWF  xB2,F
1FF0:  MOVF   03,W
1FF2:  IORWF  xB3,F
....................     PLL_send_word(prog); 
1FF4:  MOVFF  1B3,237
1FF8:  MOVFF  1B2,236
1FFC:  MOVFF  1B1,235
2000:  MOVFF  1B0,234
2004:  MOVLB  0
2006:  CALL   1426
....................     } 
200A:  MOVLB  1
200C:  MOVF   xB5,W
200E:  INCF   xB5,F
2010:  DECF   xB4,F
2012:  BRA    1FA2
....................   delay_ms(250); 
2014:  MOVLW  FA
2016:  MOVLB  2
2018:  MOVWF  x3D
201A:  MOVLB  0
201C:  CALL   0DBA
....................   PLL_send_word(prog); 
2020:  MOVFF  1B3,237
2024:  MOVFF  1B2,236
2028:  MOVFF  1B1,235
202C:  MOVFF  1B0,234
2030:  CALL   1426
....................   delay_ms(250); 
2034:  MOVLW  FA
2036:  MOVLB  2
2038:  MOVWF  x3D
203A:  MOVLB  0
203C:  CALL   0DBA
....................   } 
2040:  GOTO   668A (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
11AC:  MOVLB  2
11AE:  CLRF   x3D
11B0:  CLRF   x3C
11B2:  CLRF   x3B
11B4:  MOVLW  02
11B6:  MOVWF  x3A
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
11B8:  CLRWDT
....................   D = Frequest; 
11BA:  CLRF   x39
11BC:  CLRF   x38
11BE:  MOVFF  231,237
11C2:  MOVFF  230,236
....................   PLL_RFdiv = 0x0095003CL; 
11C6:  MOVLB  1
11C8:  CLRF   x3A
11CA:  MOVLW  95
11CC:  MOVWF  x39
11CE:  CLRF   x38
11D0:  MOVLW  3C
11D2:  MOVWF  x37
....................   if (Frequest >= 22000) 
11D4:  MOVLB  2
11D6:  MOVF   x31,W
11D8:  SUBLW  54
11DA:  BC    1200
11DC:  XORLW  FF
11DE:  BNZ   11E6
11E0:  MOVF   x30,W
11E2:  SUBLW  EF
11E4:  BC    1200
....................     { 
....................     RFdiv = 1; 
11E6:  CLRF   x3D
11E8:  CLRF   x3C
11EA:  CLRF   x3B
11EC:  MOVLW  01
11EE:  MOVWF  x3A
....................     PLL_RFdiv = 0x0085003CL; 
11F0:  MOVLB  1
11F2:  CLRF   x3A
11F4:  MOVLW  85
11F6:  MOVWF  x39
11F8:  CLRF   x38
11FA:  MOVLW  3C
11FC:  MOVWF  x37
11FE:  MOVLB  2
....................     }   
....................   restart_wdt(); 
1200:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
1202:  MOVFF  239,245
1206:  MOVFF  238,244
120A:  MOVFF  237,243
120E:  MOVFF  236,242
1212:  MOVFF  23D,249
1216:  MOVFF  23C,248
121A:  MOVFF  23B,247
121E:  MOVFF  23A,246
1222:  MOVLB  0
1224:  RCALL  10BC
1226:  MOVFF  03,241
122A:  MOVFF  02,240
122E:  MOVFF  01,23F
1232:  MOVFF  00,23E
1236:  MOVFF  03,245
123A:  MOVFF  02,244
123E:  MOVFF  01,243
1242:  MOVFF  00,242
1246:  MOVLB  2
1248:  CLRF   x49
124A:  CLRF   x48
124C:  CLRF   x47
124E:  MOVLW  64
1250:  MOVWF  x46
1252:  MOVLB  0
1254:  RCALL  10BC
1256:  MOVFF  03,239
125A:  MOVFF  02,238
125E:  MOVFF  01,237
1262:  MOVFF  00,236
....................   restart_wdt(); 
1266:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
1268:  BCF    FD8.1
126A:  MOVFF  239,249
126E:  MOVFF  238,248
1272:  MOVFF  237,247
1276:  MOVFF  236,246
127A:  MOVLB  2
127C:  CLRF   x4D
127E:  CLRF   x4C
1280:  MOVLW  27
1282:  MOVWF  x4B
1284:  MOVLW  10
1286:  MOVWF  x4A
1288:  MOVLB  0
128A:  RCALL  1118
128C:  MOVFF  03,12A
1290:  MOVFF  02,129
1294:  MOVFF  01,128
1298:  MOVFF  00,127
....................   restart_wdt(); 
129C:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
129E:  MOVFF  12A,245
12A2:  MOVFF  129,244
12A6:  MOVFF  128,243
12AA:  MOVFF  127,242
12AE:  MOVLB  2
12B0:  CLRF   x49
12B2:  CLRF   x48
12B4:  MOVLW  27
12B6:  MOVWF  x47
12B8:  MOVLW  10
12BA:  MOVWF  x46
12BC:  MOVLB  0
12BE:  RCALL  10BC
12C0:  MOVF   00,W
12C2:  MOVLB  2
12C4:  SUBWF  x36,W
12C6:  MOVWF  x3E
12C8:  MOVF   01,W
12CA:  SUBWFB x37,W
12CC:  MOVWF  x3F
12CE:  MOVF   02,W
12D0:  SUBWFB x38,W
12D2:  MOVWF  x40
12D4:  MOVF   03,W
12D6:  SUBWFB x39,W
12D8:  MOVWF  x41
12DA:  CLRF   x45
12DC:  CLRF   x44
12DE:  CLRF   x43
12E0:  MOVLW  64
12E2:  MOVWF  x42
12E4:  MOVFF  23D,249
12E8:  MOVFF  23C,248
12EC:  MOVFF  23B,247
12F0:  MOVFF  23A,246
12F4:  MOVLB  0
12F6:  RCALL  10BC
12F8:  MOVFF  03,245
12FC:  MOVFF  02,244
1300:  MOVFF  01,243
1304:  MOVFF  00,242
1308:  BCF    FD8.1
130A:  MOVFF  241,249
130E:  MOVFF  240,248
1312:  MOVFF  23F,247
1316:  MOVFF  23E,246
131A:  MOVFF  03,24D
131E:  MOVFF  02,24C
1322:  MOVFF  01,24B
1326:  MOVFF  00,24A
132A:  RCALL  1118
132C:  MOVFF  03,12E
1330:  MOVFF  02,12D
1334:  MOVFF  01,12C
1338:  MOVFF  00,12B
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
133C:  BCF    FD8.1
133E:  MOVLB  2
1340:  CLRF   x49
1342:  CLRF   x48
1344:  CLRF   x47
1346:  MOVLW  64
1348:  MOVWF  x46
134A:  MOVFF  23D,24D
134E:  MOVFF  23C,24C
1352:  MOVFF  23B,24B
1356:  MOVFF  23A,24A
135A:  MOVLB  0
135C:  RCALL  1118
135E:  MOVFF  03,241
1362:  MOVFF  02,240
1366:  MOVFF  01,23F
136A:  MOVFF  00,23E
136E:  MOVLB  2
1370:  RLCF   00,W
1372:  MOVWF  00
1374:  RLCF   01,W
1376:  MOVWF  01
1378:  RLCF   02,W
137A:  MOVWF  02
137C:  RLCF   03,W
137E:  MOVWF  03
1380:  RLCF   00,F
1382:  RLCF   01,F
1384:  RLCF   02,F
1386:  RLCF   03,F
1388:  RLCF   00,F
138A:  RLCF   01,F
138C:  RLCF   02,F
138E:  RLCF   03,F
1390:  MOVLW  F8
1392:  ANDWF  00,F
1394:  MOVLW  08
1396:  ADDWF  03,W
1398:  MOVWF  x41
139A:  MOVLW  01
139C:  ADDWF  00,W
139E:  MOVLB  1
13A0:  MOVWF  x2F
13A2:  MOVLW  00
13A4:  MOVLB  2
13A6:  ADDWFC 01,W
13A8:  MOVLB  1
13AA:  MOVWF  x30
13AC:  MOVLW  00
13AE:  MOVLB  2
13B0:  ADDWFC 02,W
13B2:  MOVLB  1
13B4:  MOVWF  x31
13B6:  MOVLW  00
13B8:  MOVLB  2
13BA:  ADDWFC x41,W
13BC:  MOVLB  1
13BE:  MOVWF  x32
....................   restart_wdt(); 
13C0:  CLRWDT
....................   Fvco++; 
13C2:  MOVLW  01
13C4:  MOVLB  2
13C6:  ADDWF  x32,F
13C8:  BTFSC  FD8.0
13CA:  INCF   x33,F
13CC:  BTFSC  FD8.2
13CE:  INCF   x34,F
13D0:  BTFSC  FD8.2
13D2:  INCF   x35,F
....................   } 
13D4:  MOVLB  0
13D6:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
147C:  MOVLB  2
147E:  CLRF   x35
1480:  MOVLB  1
1482:  RLCF   x27,W
1484:  MOVLB  2
1486:  MOVWF  x36
1488:  MOVLB  1
148A:  RLCF   x28,W
148C:  MOVLB  2
148E:  MOVWF  x37
1490:  MOVLB  1
1492:  RLCF   x29,W
1494:  MOVLB  2
1496:  MOVWF  x38
1498:  RLCF   x36,F
149A:  RLCF   x37,F
149C:  RLCF   x38,F
149E:  RLCF   x36,F
14A0:  RLCF   x37,F
14A2:  RLCF   x38,F
14A4:  RLCF   x36,F
14A6:  RLCF   x37,F
14A8:  RLCF   x38,F
14AA:  RLCF   x36,F
14AC:  RLCF   x37,F
14AE:  RLCF   x38,F
14B0:  RLCF   x36,F
14B2:  RLCF   x37,F
14B4:  RLCF   x38,F
14B6:  RLCF   x36,F
14B8:  RLCF   x37,F
14BA:  RLCF   x38,F
14BC:  MOVLW  80
14BE:  ANDWF  x36,F
14C0:  MOVLB  1
14C2:  RLCF   x2B,W
14C4:  MOVWF  00
14C6:  RLCF   x2C,W
14C8:  MOVWF  01
14CA:  RLCF   x2D,W
14CC:  MOVWF  02
14CE:  RLCF   x2E,W
14D0:  MOVWF  03
14D2:  RLCF   00,F
14D4:  RLCF   01,F
14D6:  RLCF   02,F
14D8:  RLCF   03,F
14DA:  RLCF   00,F
14DC:  RLCF   01,F
14DE:  RLCF   02,F
14E0:  RLCF   03,F
14E2:  MOVLW  F8
14E4:  ANDWF  00,F
14E6:  MOVF   00,W
14E8:  MOVLB  2
14EA:  ADDWF  x35,W
14EC:  MOVWF  x30
14EE:  MOVF   01,W
14F0:  ADDWFC x36,W
14F2:  MOVWF  x31
14F4:  MOVF   02,W
14F6:  ADDWFC x37,W
14F8:  MOVWF  x32
14FA:  MOVF   03,W
14FC:  ADDWFC x38,W
14FE:  MOVWF  x33
....................   PLL_frequency = prog; 
1500:  MOVFF  233,136
1504:  MOVFF  232,135
1508:  MOVFF  231,134
150C:  MOVFF  230,133
....................   restart_wdt(); 
1510:  CLRWDT
....................   PLL_send_word(prog); 
1512:  MOVFF  233,237
1516:  MOVFF  232,236
151A:  MOVFF  231,235
151E:  MOVFF  230,234
1522:  MOVLB  0
1524:  RCALL  1426
....................   delay_us(20); 
1526:  MOVLW  1A
1528:  MOVWF  00
152A:  DECFSZ 00,F
152C:  BRA    152A
152E:  NOP   
....................   restart_wdt(); 
1530:  CLRWDT
....................   PLL_send_word(PLL_mod); 
1532:  MOVFF  132,237
1536:  MOVFF  131,236
153A:  MOVFF  130,235
153E:  MOVFF  12F,234
1542:  RCALL  1426
....................   delay_us(20); 
1544:  MOVLW  1A
1546:  MOVWF  00
1548:  DECFSZ 00,F
154A:  BRA    1548
154C:  NOP   
....................   restart_wdt(); 
154E:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
1550:  MOVFF  13A,237
1554:  MOVFF  139,236
1558:  MOVFF  138,235
155C:  MOVFF  137,234
1560:  RCALL  1426
....................    
....................   } 
1562:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
097C:  BCF    F7E.0
097E:  GOTO   009C
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
*
0998:  SETF   28
....................   TMR_1mS_Count++; 
099A:  INCF   29,F
....................    if (++TMR_SendStatus >= 100 && StartStatusFlag == 1 && UART_Status == 1) // VERSION 3.3 17.1.2016 
099C:  INCF   31,F
099E:  MOVF   31,W
09A0:  SUBLW  63
09A2:  BC    09CA
09A4:  DECFSZ 34,W
09A6:  BRA    09CA
09A8:  MOVLB  1
09AA:  DECFSZ x26,W
09AC:  BRA    09B0
09AE:  BRA    09B4
09B0:  MOVLB  0
09B2:  BRA    09CA
....................     { 
....................     TMR_SendStatus = 0; 
09B4:  CLRF   31
....................     SendStatusFlag = 1; 
09B6:  MOVLW  01
09B8:  MOVWF  32
....................     //if (StartStatusFlag == 1 && setup.UART_Status == 1) 
....................     if (!ttccp_login) 
09BA:  MOVF   x25,F
09BC:  BNZ   09CC
....................       { 
....................       	COM1_send_block(24); 
09BE:  MOVLB  2
09C0:  CLRF   x6E
09C2:  MOVLW  18
09C4:  MOVWF  x6D
09C6:  MOVLB  0
09C8:  BRA    0982
09CA:  MOVLB  1
....................       } 
....................     } 
....................   if (++TMR_1mS_Cnt >= 10) 
09CC:  INCF   2A,F
09CE:  MOVF   2A,W
09D0:  SUBLW  09
09D2:  BC    0A06
....................     { 
....................     TMR_1mS_Cnt = 0; 
09D4:  CLRF   2A
....................     ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
09D6:  INCF   31,F
....................     TMR_10mS_Count++; 
09D8:  INCF   2B,F
....................     TMR_10mS_Flags = 0xFF; 
09DA:  SETF   2C
....................     if (++TMR_10mS_Cnt >= 10) 
09DC:  INCF   2D,F
09DE:  MOVF   2D,W
09E0:  SUBLW  09
09E2:  BC    0A06
....................       { 
....................       TMR_10mS_Cnt = 0; 
09E4:  CLRF   2D
....................       TMR_100mS_Flags = 0xFF; 
09E6:  SETF   2E
....................       if (++TMR_100mS_Cnt >= 10) 
09E8:  INCF   2F,F
09EA:  MOVF   2F,W
09EC:  SUBLW  09
09EE:  BC    0A06
....................         { 
....................         TMR_100mS_Cnt = 0; 
09F0:  CLRF   2F
....................         TMR_1sec_Flags = 0xFF; 
09F2:  SETF   30
....................         if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
09F4:  INCF   33,F
09F6:  MOVLB  0
09F8:  MOVF   xFC,W
09FA:  SUBWF  33,W
09FC:  BNC   0A04
....................    				 { 
....................    					 TMR_StartStatus = 0; 
09FE:  CLRF   33
....................     				 StartStatusFlag = 1; 
0A00:  MOVLW  01
0A02:  MOVWF  34
0A04:  MOVLB  1
.................... 			     } 
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0A06:  BCF    F9E.1
0A08:  MOVLB  0
0A0A:  GOTO   009C
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
0A0E:  BCF    FF2.1
0A10:  GOTO   009C
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0A14:  BCF    FF0.0
0A16:  GOTO   009C
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0A1A:  MOVFF  FAE,26D
....................   COM1_rbuf[COM1_rxi] = x; 
0A1E:  CLRF   03
0A20:  MOVF   36,W
0A22:  ADDLW  38
0A24:  MOVWF  FE9
0A26:  MOVLW  00
0A28:  ADDWFC 03,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  26D,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0A30:  INCF   36,F
0A32:  MOVF   36,W
0A34:  SUBLW  1F
0A36:  BC    0A3A
....................     COM1_rxi = 0; 
0A38:  CLRF   36
....................   if (COM1_rcnt < COM1_RX_LEN) 
0A3A:  MOVF   35,W
0A3C:  SUBLW  1F
0A3E:  BNC   0A42
....................     COM1_rcnt++; 
0A40:  INCF   35,F
....................   } 
....................    
0A42:  BCF    F9E.5
0A44:  GOTO   009C
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
....................   { 
.................... 	  output_high(RS485_EN); 
*
0A68:  BSF    F8C.5
.................... 	  status_tx_index = 0; 
0A6A:  MOVLB  1
0A6C:  CLRF   x0C
0A6E:  CLRF   x0B
.................... 	  while (tx_block_len--) 
.................... 	  { 
0A70:  MOVFF  108,03
0A74:  MOVF   x07,W
0A76:  BTFSC  FD8.2
0A78:  DECF   x08,F
0A7A:  DECF   x07,F
0A7C:  IORWF  03,W
0A7E:  BZ    0ABA
.................... 		  output_high(RS485_EN); 
0A80:  BSF    F8C.5
.................... 		 	TXREG1 = status_buffer[status_tx_index++]; 
0A82:  MOVFF  10C,03
0A86:  MOVF   x0B,W
0A88:  INCF   x0B,F
0A8A:  BTFSC  FD8.2
0A8C:  INCF   x0C,F
0A8E:  MOVLB  2
0A90:  MOVWF  x6D
0A92:  MOVLW  0D
0A94:  ADDWF  x6D,W
0A96:  MOVWF  FE9
0A98:  MOVLW  01
0A9A:  ADDWFC 03,W
0A9C:  MOVWF  FEA
0A9E:  MOVFF  FEF,FAD
.................... 		 	delay_us(500);  
0AA2:  MOVLW  02
0AA4:  MOVWF  x6D
0AA6:  MOVLW  F9
0AA8:  MOVWF  x6E
0AAA:  MOVLB  0
0AAC:  RCALL  0A48
0AAE:  MOVLB  2
0AB0:  DECFSZ x6D,F
0AB2:  BRA    0AA6
.................... 		 	output_low(RS485_EN); 
0AB4:  BCF    F8C.5
.................... 		} 
0AB6:  MOVLB  1
0AB8:  BRA    0A70
.................... 		 
.................... 		disable_interrupts(int_TBE);     
0ABA:  BCF    F9D.4
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0ABC:  BCF    F9E.4
0ABE:  MOVLB  0
0AC0:  GOTO   009C
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
2862:  CLRF   03
2864:  MOVF   37,W
2866:  ADDLW  38
2868:  MOVWF  FE9
286A:  MOVLW  00
286C:  ADDWFC 03,W
286E:  MOVWF  FEA
2870:  MOVFF  FEF,1C9
2874:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
2876:  INCF   37,F
2878:  MOVF   37,W
287A:  SUBLW  1F
287C:  BC    2880
....................     COM1_rxo = 0; 
287E:  CLRF   37
....................   if (COM1_rcnt) 
2880:  MOVF   35,F
2882:  BZ    2886
....................     COM1_rcnt--; 
2884:  DECF   35,F
....................   return x; 
2886:  MOVFF  1C9,01
....................   } 
288A:  MOVLB  0
288C:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
2044:  BCF    F9D.5
....................   output_high(RS485_EN); 
2046:  BSF    F8C.5
....................   delay_us(100); 
2048:  MOVLW  84
204A:  MOVWF  00
204C:  DECFSZ 00,F
204E:  BRA    204C
2050:  BRA    2052
2052:  NOP   
....................   pos = 0; 
2054:  MOVLB  2
2056:  CLRF   x69
....................   while (*str) 
....................     { 
2058:  MOVFF  267,03
205C:  MOVFF  266,FE9
2060:  MOVFF  267,FEA
2064:  MOVF   FEF,F
2066:  BZ    20F4
....................     x = *str++; 
2068:  MOVFF  267,03
206C:  MOVF   x66,W
206E:  INCF   x66,F
2070:  BTFSC  FD8.2
2072:  INCF   x67,F
2074:  MOVWF  FE9
2076:  MOVFF  03,FEA
207A:  MOVFF  FEF,268
....................     if (x != '\t') 
207E:  MOVF   x68,W
2080:  SUBLW  09
2082:  BZ    20B0
....................       { 
....................       TXREG1 = x; 
2084:  MOVFF  268,FAD
....................       pos++; 
2088:  INCF   x69,F
....................       delay_us(300);  
208A:  MOVLW  02
208C:  MOVWF  x6B
208E:  CLRF   19
2090:  BTFSC  FF2.7
2092:  BSF    19.7
2094:  BCF    FF2.7
2096:  MOVLW  95
2098:  MOVWF  x6E
209A:  MOVLB  0
209C:  CALL   0A48
20A0:  BTFSC  19.7
20A2:  BSF    FF2.7
20A4:  MOVLB  2
20A6:  DECFSZ x6B,F
20A8:  BRA    208E
....................       x = RCREG1; 
20AA:  MOVFF  FAE,268
....................       } 
....................     else 
20AE:  BRA    20F2
....................       { 
....................       tab_stop = 32; 
20B0:  MOVLW  20
20B2:  MOVWF  x6A
....................       if (pos >= tab_stop) 
20B4:  MOVF   x6A,W
20B6:  SUBWF  x69,W
20B8:  BNC   20C0
....................         tab_stop = pos + 2; 
20BA:  MOVLW  02
20BC:  ADDWF  x69,W
20BE:  MOVWF  x6A
....................       while (pos < tab_stop) 
....................         { 
20C0:  MOVF   x6A,W
20C2:  SUBWF  x69,W
20C4:  BC    20F2
....................         TXREG1 = ' '; 
20C6:  MOVLW  20
20C8:  MOVWF  FAD
....................         pos++; 
20CA:  INCF   x69,F
....................         delay_us(300); 
20CC:  MOVLW  02
20CE:  MOVWF  x6B
20D0:  CLRF   19
20D2:  BTFSC  FF2.7
20D4:  BSF    19.7
20D6:  BCF    FF2.7
20D8:  MOVLW  95
20DA:  MOVWF  x6E
20DC:  MOVLB  0
20DE:  CALL   0A48
20E2:  BTFSC  19.7
20E4:  BSF    FF2.7
20E6:  MOVLB  2
20E8:  DECFSZ x6B,F
20EA:  BRA    20D0
....................         x = RCREG1; 
20EC:  MOVFF  FAE,268
....................         } 
20F0:  BRA    20C0
....................       } 
....................     } 
20F2:  BRA    2058
....................   delay_us(100); 
20F4:  MOVLW  84
20F6:  MOVWF  00
20F8:  DECFSZ 00,F
20FA:  BRA    20F8
20FC:  BRA    20FE
20FE:  NOP   
....................   output_low(RS485_EN); 
2100:  BCF    F8C.5
....................   x = RCREG1; 
2102:  MOVFF  FAE,268
....................   enable_interrupts(int_RDA); 
2106:  BSF    F9D.5
....................   } 
2108:  MOVLB  0
210A:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
....................   { 
....................   UCHAR pos;//, tab_stop; 
....................   pos = 0; 
*
0982:  MOVLB  2
0984:  CLRF   x6F
....................   tx_block_len = len ; 
0986:  MOVFF  26E,108
098A:  MOVFF  26D,107
....................   //status_tx_index = 0; 
....................    
....................   //TXREG1 = status_buffer[0]; 
....................   clear_interrupt(int_TBE); 
098E:  BCF    F9E.4
....................   enable_interrupts(int_TBE); 
0990:  BSF    F9D.4
....................   //TXREG1 = status_buffer[0]; 
....................   //output_high(RS485_EN);  
....................   } 
0992:  MOVLB  0
0994:  GOTO   09CA (RETURN)
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0D40:  MOVLB  1
0D42:  CLRF   x72
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0D44:  CLRF   35
0D46:  MOVFF  35,37
0D4A:  MOVFF  37,36
....................   comm_state = COMM_INIT; 
0D4E:  CLRF   58
....................   enable_interrupts(int_RDA); 
0D50:  BSF    F9D.5
....................   } 
0D52:  MOVLB  0
0D54:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
28AC:  MOVLB  1
28AE:  MOVF   x3B,W
28B0:  INCF   x3B,F
28B2:  CLRF   03
28B4:  ADDLW  5A
28B6:  MOVWF  FE9
28B8:  MOVLW  00
28BA:  ADDWFC 03,W
28BC:  MOVWF  FEA
28BE:  CLRF   03
28C0:  MOVFF  FEF,01
28C4:  MOVFF  03,02
....................   } 
28C8:  MOVLB  0
28CA:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
288E:  CLRF   03
2890:  MOVLB  1
2892:  MOVF   x3B,W
2894:  ADDLW  5A
2896:  MOVWF  FE9
2898:  MOVLW  00
289A:  ADDWFC 03,W
289C:  MOVWF  FEA
289E:  CLRF   03
28A0:  MOVFF  FEF,01
28A4:  MOVFF  03,02
....................   } 
28A8:  MOVLB  0
28AA:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
28CC:  CLRF   03
28CE:  MOVLB  1
28D0:  MOVF   x3B,W
28D2:  ADDLW  5A
28D4:  MOVWF  FE9
28D6:  MOVLW  00
28D8:  ADDWFC 03,W
28DA:  MOVWF  FEA
28DC:  MOVF   FEF,F
28DE:  BZ    2910
28E0:  CLRF   03
28E2:  MOVF   x3B,W
28E4:  ADDLW  5A
28E6:  MOVWF  FE9
28E8:  MOVLW  00
28EA:  ADDWFC 03,W
28EC:  MOVWF  FEA
28EE:  MOVF   FEF,W
28F0:  SUBLW  2C
28F2:  BZ    2908
28F4:  CLRF   03
28F6:  MOVF   x3B,W
28F8:  ADDLW  5A
28FA:  MOVWF  FE9
28FC:  MOVLW  00
28FE:  ADDWFC 03,W
2900:  MOVWF  FEA
2902:  MOVF   FEF,W
2904:  SUBLW  20
2906:  BNZ   2910
2908:  INCF   x3B,F
290A:  MOVLB  0
290C:  BRA    28CC
290E:  MOVLB  1
....................   } 
2910:  MOVLB  0
2912:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
2968:  MOVLB  2
296A:  CLRF   x33
296C:  MOVLW  01
296E:  MOVWF  x32
....................   SINT num, sign = 1; 
....................   skip_spc(); 
2970:  MOVLB  0
2972:  RCALL  28CC
....................   if (comm_buf[comm_ptr]) 
2974:  CLRF   03
2976:  MOVLB  1
2978:  MOVF   x3B,W
297A:  ADDLW  5A
297C:  MOVWF  FE9
297E:  MOVLW  00
2980:  ADDWFC 03,W
2982:  MOVWF  FEA
2984:  MOVF   FEF,F
2986:  BZ    2A10
....................     { 
....................     num = 0; 
2988:  MOVLB  2
298A:  CLRF   x31
298C:  CLRF   x30
....................     if (peek_char() == '-') 
298E:  MOVLB  0
2990:  RCALL  288E
2992:  MOVFF  02,235
2996:  MOVFF  01,234
299A:  MOVLB  2
299C:  MOVF   01,W
299E:  SUBLW  2D
29A0:  BNZ   29B0
29A2:  MOVF   x35,F
29A4:  BNZ   29B0
....................       { 
....................       sign = -1; 
29A6:  SETF   x33
29A8:  SETF   x32
....................       get_char(); 
29AA:  MOVLB  0
29AC:  RCALL  28AC
29AE:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
29B0:  CLRF   03
29B2:  MOVLB  1
29B4:  MOVF   x3B,W
29B6:  ADDLW  5A
29B8:  MOVWF  FE9
29BA:  MOVLW  00
29BC:  ADDWFC 03,W
29BE:  MOVWF  FEA
29C0:  MOVFF  FEF,234
29C4:  MOVLB  2
29C6:  MOVF   x34,W
29C8:  SUBLW  2F
29CA:  BC    2A10
29CC:  MOVF   x34,W
29CE:  SUBLW  39
29D0:  BNC   2A10
29D2:  MOVFF  231,235
29D6:  MOVFF  230,234
29DA:  CLRF   x37
29DC:  MOVLW  0A
29DE:  MOVWF  x36
29E0:  MOVLB  0
29E2:  RCALL  2914
29E4:  MOVFF  02,235
29E8:  MOVFF  01,234
29EC:  MOVLB  1
29EE:  MOVF   x3B,W
29F0:  INCF   x3B,F
29F2:  CLRF   03
29F4:  ADDLW  5A
29F6:  MOVWF  FE9
29F8:  MOVLW  00
29FA:  ADDWFC 03,W
29FC:  MOVWF  FEA
29FE:  MOVLW  30
2A00:  SUBWF  FEF,W
2A02:  MOVLB  2
2A04:  ADDWF  01,W
2A06:  MOVWF  x30
2A08:  MOVLW  00
2A0A:  ADDWFC 02,W
2A0C:  MOVWF  x31
2A0E:  BRA    29B0
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
2A10:  MOVFF  231,235
2A14:  MOVFF  230,234
2A18:  MOVFF  233,237
2A1C:  MOVFF  232,236
2A20:  MOVLB  0
2A22:  RCALL  2914
2A24:  MOVFF  02,03
2A28:  MOVFF  02,02
....................   } 
2A2C:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
5AB0:  CALL   28CC
....................   if (comm_buf[comm_ptr]) 
5AB4:  CLRF   03
5AB6:  MOVLB  1
5AB8:  MOVF   x3B,W
5ABA:  ADDLW  5A
5ABC:  MOVWF  FE9
5ABE:  MOVLW  00
5AC0:  ADDWFC 03,W
5AC2:  MOVWF  FEA
5AC4:  MOVF   FEF,F
5AC6:  BZ    5B56
....................     { 
....................     num = 0; 
5AC8:  MOVLB  2
5ACA:  CLRF   x03
5ACC:  CLRF   x02
5ACE:  CLRF   x01
5AD0:  CLRF   x00
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5AD2:  CLRF   03
5AD4:  MOVLB  1
5AD6:  MOVF   x3B,W
5AD8:  ADDLW  5A
5ADA:  MOVWF  FE9
5ADC:  MOVLW  00
5ADE:  ADDWFC 03,W
5AE0:  MOVWF  FEA
5AE2:  MOVFF  FEF,204
5AE6:  MOVLB  2
5AE8:  MOVF   x04,W
5AEA:  SUBLW  2F
5AEC:  BC    5B54
5AEE:  MOVF   x04,W
5AF0:  SUBLW  39
5AF2:  BNC   5B54
5AF4:  MOVFF  203,245
5AF8:  MOVFF  202,244
5AFC:  MOVFF  201,243
5B00:  MOVFF  200,242
5B04:  CLRF   x49
5B06:  CLRF   x48
5B08:  CLRF   x47
5B0A:  MOVLW  0A
5B0C:  MOVWF  x46
5B0E:  MOVLB  0
5B10:  CALL   10BC
5B14:  MOVFF  03,207
5B18:  MOVFF  02,206
5B1C:  MOVFF  01,205
5B20:  MOVFF  00,204
5B24:  MOVLB  1
5B26:  MOVF   x3B,W
5B28:  INCF   x3B,F
5B2A:  CLRF   03
5B2C:  ADDLW  5A
5B2E:  MOVWF  FE9
5B30:  MOVLW  00
5B32:  ADDWFC 03,W
5B34:  MOVWF  FEA
5B36:  MOVLW  30
5B38:  SUBWF  FEF,W
5B3A:  MOVLB  2
5B3C:  ADDWF  00,W
5B3E:  MOVWF  x00
5B40:  MOVLW  00
5B42:  ADDWFC 01,W
5B44:  MOVWF  x01
5B46:  MOVLW  00
5B48:  ADDWFC 02,W
5B4A:  MOVWF  x02
5B4C:  MOVLW  00
5B4E:  ADDWFC x07,W
5B50:  MOVWF  x03
5B52:  BRA    5AD2
5B54:  MOVLB  1
....................     } 
.................... //  skip_spc(); 
....................   return num; 
5B56:  MOVFF  200,00
5B5A:  MOVFF  201,01
5B5E:  MOVFF  202,02
5B62:  MOVFF  203,03
....................   } 
5B66:  MOVLB  0
5B68:  GOTO   6078 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
59B8:  CALL   28CC
....................   if (peek_char()) 
59BC:  CALL   288E
59C0:  MOVF   01,W
59C2:  IORWF  02,W
59C4:  BTFSC  FD8.2
59C6:  BRA    5A9E
....................     { 
....................     num = 0; 
59C8:  MOVLB  2
59CA:  CLRF   x03
59CC:  CLRF   x02
59CE:  CLRF   x01
59D0:  CLRF   x00
....................     while (isxdigit(peek_char())) 
....................       { 
59D2:  MOVLB  0
59D4:  CALL   288E
59D8:  MOVFF  02,206
59DC:  MOVFF  01,205
59E0:  MOVLB  2
59E2:  MOVF   x06,F
59E4:  BNZ   59EC
59E6:  MOVF   x05,W
59E8:  SUBLW  2F
59EA:  BC    59F6
59EC:  MOVF   x06,F
59EE:  BNZ   59F6
59F0:  MOVF   x05,W
59F2:  SUBLW  39
59F4:  BC    5A1E
59F6:  MOVF   x06,F
59F8:  BNZ   5A00
59FA:  MOVF   x05,W
59FC:  SUBLW  40
59FE:  BC    5A0A
5A00:  MOVF   x06,F
5A02:  BNZ   5A0A
5A04:  MOVF   x05,W
5A06:  SUBLW  46
5A08:  BC    5A1E
5A0A:  MOVF   x06,F
5A0C:  BNZ   5A14
5A0E:  MOVF   x05,W
5A10:  SUBLW  60
5A12:  BC    5A9C
5A14:  MOVF   x06,F
5A16:  BNZ   5A9C
5A18:  MOVF   x05,W
5A1A:  SUBLW  66
5A1C:  BNC   5A9C
....................       chr = get_char(); 
5A1E:  MOVLB  0
5A20:  CALL   28AC
5A24:  MOVFF  01,204
....................       chr = toupper(chr); 
5A28:  MOVLB  2
5A2A:  MOVF   x04,W
5A2C:  SUBLW  60
5A2E:  BC    5A3C
5A30:  MOVF   x04,W
5A32:  SUBLW  7A
5A34:  BNC   5A3C
5A36:  MOVF   x04,W
5A38:  ANDLW  DF
5A3A:  BRA    5A3E
5A3C:  MOVF   x04,W
5A3E:  MOVWF  x04
....................       if (chr <= '9') 
5A40:  MOVF   x04,W
5A42:  SUBLW  39
5A44:  BNC   5A4C
....................         chr -= '0'; 
5A46:  MOVLW  30
5A48:  SUBWF  x04,F
....................       else 
5A4A:  BRA    5A50
....................         chr = chr - ('A' - 10); 
5A4C:  MOVLW  37
5A4E:  SUBWF  x04,F
....................       num = num * 16 + (ULONG)chr; 
5A50:  RLCF   x00,W
5A52:  MOVWF  x05
5A54:  RLCF   x01,W
5A56:  MOVWF  x06
5A58:  RLCF   x02,W
5A5A:  MOVWF  x07
5A5C:  RLCF   x03,W
5A5E:  MOVWF  x08
5A60:  RLCF   x05,F
5A62:  RLCF   x06,F
5A64:  RLCF   x07,F
5A66:  RLCF   x08,F
5A68:  RLCF   x05,F
5A6A:  RLCF   x06,F
5A6C:  RLCF   x07,F
5A6E:  RLCF   x08,F
5A70:  RLCF   x05,F
5A72:  RLCF   x06,F
5A74:  RLCF   x07,F
5A76:  RLCF   x08,F
5A78:  MOVLW  F0
5A7A:  ANDWF  x05,F
5A7C:  CLRF   01
5A7E:  CLRF   02
5A80:  CLRF   03
5A82:  MOVF   x04,W
5A84:  ADDWF  x05,W
5A86:  MOVWF  x00
5A88:  MOVF   01,W
5A8A:  ADDWFC x06,W
5A8C:  MOVWF  x01
5A8E:  MOVF   02,W
5A90:  ADDWFC x07,W
5A92:  MOVWF  x02
5A94:  MOVF   03,W
5A96:  ADDWFC x08,W
5A98:  MOVWF  x03
....................       } 
5A9A:  BRA    59D2
5A9C:  MOVLB  0
....................     } 
....................   return num; 
5A9E:  MOVFF  200,00
5AA2:  MOVFF  201,01
5AA6:  MOVFF  202,02
5AAA:  MOVFF  203,03
....................   } 
5AAE:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
2ECE:  RCALL  2968
2ED0:  MOVFF  02,22B
2ED4:  MOVFF  01,22A
2ED8:  MOVFF  02,235
2EDC:  MOVFF  01,234
2EE0:  MOVLB  2
2EE2:  CLRF   x37
2EE4:  MOVLW  0A
2EE6:  MOVWF  x36
2EE8:  MOVLB  0
2EEA:  RCALL  2914
2EEC:  MOVFF  02,229
2EF0:  MOVLB  2
2EF2:  MOVFF  01,228
....................   if (peek_char() == '.') 
2EF6:  MOVLB  0
2EF8:  RCALL  288E
2EFA:  MOVFF  02,22B
2EFE:  MOVFF  01,22A
2F02:  MOVLB  2
2F04:  MOVF   01,W
2F06:  SUBLW  2E
2F08:  BNZ   2F2A
2F0A:  MOVF   x2B,F
2F0C:  BNZ   2F2A
....................     { 
....................     get_char(); // skip '.' 
2F0E:  MOVLB  0
2F10:  RCALL  28AC
....................     freq += get_char() - '0'; 
2F12:  RCALL  28AC
2F14:  MOVLW  30
2F16:  MOVLB  2
2F18:  SUBWF  01,W
2F1A:  MOVWF  00
2F1C:  MOVLW  00
2F1E:  SUBWFB 02,W
2F20:  MOVWF  03
2F22:  MOVF   00,W
2F24:  ADDWF  x28,F
2F26:  MOVF   03,W
2F28:  ADDWFC x29,F
....................     } 
....................   return freq; 
2F2A:  MOVFF  228,01
2F2E:  MOVFF  229,02
....................   } 
2F32:  MOVLB  0
2F34:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
5506:  MOVLB  1
5508:  MOVF   xC9,W
550A:  XORLW  69
550C:  MOVLB  0
550E:  BZ    5542
5510:  XORLW  20
5512:  BZ    5572
5514:  XORLW  2D
5516:  BZ    55A2
5518:  XORLW  20
551A:  BZ    55D6
551C:  XORLW  6F
551E:  BTFSC  FD8.2
5520:  BRA    560A
5522:  XORLW  16
5524:  BTFSC  FD8.2
5526:  BRA    565A
5528:  XORLW  10
552A:  BTFSC  FD8.2
552C:  BRA    56AA
552E:  XORLW  72
5530:  BTFSC  FD8.2
5532:  BRA    56FE
5534:  XORLW  61
5536:  BTFSC  FD8.2
5538:  BRA    5752
553A:  XORLW  02
553C:  BTFSC  FD8.2
553E:  BRA    576A
5540:  BRA    577E
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
5542:  MOVLB  1
5544:  INCF   x69,F
5546:  BNZ   5554
....................         if (++D2A_image[12] > 3) 
5548:  INCF   x6A,F
554A:  MOVF   x6A,W
554C:  SUBLW  03
554E:  BC    5554
....................           { 
....................           D2A_image[11] = 0; 
5550:  CLRF   x69
....................           D2A_image[12] = 0; 
5552:  CLRF   x6A
....................           } 
....................       write_D2A(11, D2A_image[11]); 
5554:  MOVLW  0B
5556:  MOVLB  2
5558:  MOVWF  x00
555A:  MOVFF  169,201
555E:  MOVLB  0
5560:  RCALL  547E
....................       write_D2A(12, D2A_image[12]); 
5562:  MOVLW  0C
5564:  MOVLB  2
5566:  MOVWF  x00
5568:  MOVFF  16A,201
556C:  MOVLB  0
556E:  RCALL  547E
....................       break; 
5570:  BRA    577E
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
5572:  MOVLB  1
5574:  INCF   x6D,F
5576:  BNZ   5584
....................         if (++D2A_image[16] > 3) 
5578:  INCF   x6E,F
557A:  MOVF   x6E,W
557C:  SUBLW  03
557E:  BC    5584
....................           { 
....................           D2A_image[15] = 0; 
5580:  CLRF   x6D
....................           D2A_image[16] = 0; 
5582:  CLRF   x6E
....................           } 
....................       write_D2A(15, D2A_image[15]); 
5584:  MOVLW  0F
5586:  MOVLB  2
5588:  MOVWF  x00
558A:  MOVFF  16D,201
558E:  MOVLB  0
5590:  RCALL  547E
....................       write_D2A(16, D2A_image[16]); 
5592:  MOVLW  10
5594:  MOVLB  2
5596:  MOVWF  x00
5598:  MOVFF  16E,201
559C:  MOVLB  0
559E:  RCALL  547E
....................       break; 
55A0:  BRA    577E
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
55A2:  MOVLB  1
55A4:  DECF   x69,F
55A6:  INCFSZ x69,W
55A8:  BRA    55B8
....................         if (--D2A_image[12] > 3) 
55AA:  DECF   x6A,F
55AC:  MOVF   x6A,W
55AE:  SUBLW  03
55B0:  BC    55B8
....................           { 
....................           D2A_image[11] = 255; 
55B2:  SETF   x69
....................           D2A_image[12] = 3; 
55B4:  MOVLW  03
55B6:  MOVWF  x6A
....................           } 
....................       write_D2A(11, D2A_image[11]); 
55B8:  MOVLW  0B
55BA:  MOVLB  2
55BC:  MOVWF  x00
55BE:  MOVFF  169,201
55C2:  MOVLB  0
55C4:  RCALL  547E
....................       write_D2A(12, D2A_image[12]); 
55C6:  MOVLW  0C
55C8:  MOVLB  2
55CA:  MOVWF  x00
55CC:  MOVFF  16A,201
55D0:  MOVLB  0
55D2:  RCALL  547E
....................       break; 
55D4:  BRA    577E
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
55D6:  MOVLB  1
55D8:  DECF   x6D,F
55DA:  INCFSZ x6D,W
55DC:  BRA    55EC
....................         if (--D2A_image[16] > 3) 
55DE:  DECF   x6E,F
55E0:  MOVF   x6E,W
55E2:  SUBLW  03
55E4:  BC    55EC
....................           { 
....................           D2A_image[15] = 255; 
55E6:  SETF   x6D
....................           D2A_image[16] = 3; 
55E8:  MOVLW  03
55EA:  MOVWF  x6E
....................           } 
....................       write_D2A(15, D2A_image[15]); 
55EC:  MOVLW  0F
55EE:  MOVLB  2
55F0:  MOVWF  x00
55F2:  MOVFF  16D,201
55F6:  MOVLB  0
55F8:  RCALL  547E
....................       write_D2A(16, D2A_image[16]); 
55FA:  MOVLW  10
55FC:  MOVLB  2
55FE:  MOVWF  x00
5600:  MOVFF  16E,201
5604:  MOVLB  0
5606:  RCALL  547E
....................       break; 
5608:  BRA    577E
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
560A:  MOVLB  1
560C:  MOVFF  16B,1CA
5610:  MOVF   x6C,W
5612:  ANDLW  03
5614:  MOVWF  xCB
....................       if (++incdec > 0x3FF) 
5616:  INCF   xCA,F
5618:  BTFSC  FD8.2
561A:  INCF   xCB,F
561C:  MOVF   xCB,W
561E:  SUBLW  03
5620:  BC    5626
....................         incdec = 0; 
5622:  CLRF   xCB
5624:  CLRF   xCA
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5626:  MOVF   x6C,W
5628:  ANDLW  C0
562A:  MOVWF  xCC
562C:  MOVLW  00
562E:  IORWF  xCA,F
5630:  MOVF   xCC,W
5632:  IORWF  xCB,F
....................       D2A_image[13] = make8(incdec, 0); 
5634:  MOVFF  1CA,16B
....................       D2A_image[14] = make8(incdec, 1); 
5638:  MOVFF  1CB,16C
....................       write_D2A(11, D2A_image[13]); 
563C:  MOVLW  0B
563E:  MOVLB  2
5640:  MOVWF  x00
5642:  MOVFF  16B,201
5646:  MOVLB  0
5648:  RCALL  547E
....................       write_D2A(12, D2A_image[14]); 
564A:  MOVLW  0C
564C:  MOVLB  2
564E:  MOVWF  x00
5650:  MOVFF  16C,201
5654:  MOVLB  0
5656:  RCALL  547E
....................       break; 
5658:  BRA    577E
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
565A:  MOVLB  1
565C:  MOVFF  16F,1CA
5660:  MOVF   x70,W
5662:  ANDLW  03
5664:  MOVWF  xCB
....................       if (++incdec > 0x3FF) 
5666:  INCF   xCA,F
5668:  BTFSC  FD8.2
566A:  INCF   xCB,F
566C:  MOVF   xCB,W
566E:  SUBLW  03
5670:  BC    5676
....................         incdec = 0; 
5672:  CLRF   xCB
5674:  CLRF   xCA
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5676:  MOVF   x70,W
5678:  ANDLW  C0
567A:  MOVWF  xCC
567C:  MOVLW  00
567E:  IORWF  xCA,F
5680:  MOVF   xCC,W
5682:  IORWF  xCB,F
....................       D2A_image[17] = make8(incdec, 0); 
5684:  MOVFF  1CA,16F
....................       D2A_image[18] = make8(incdec, 1); 
5688:  MOVFF  1CB,170
....................       write_D2A(11, D2A_image[17]); 
568C:  MOVLW  0B
568E:  MOVLB  2
5690:  MOVWF  x00
5692:  MOVFF  16F,201
5696:  MOVLB  0
5698:  RCALL  547E
....................       write_D2A(12, D2A_image[18]); 
569A:  MOVLW  0C
569C:  MOVLB  2
569E:  MOVWF  x00
56A0:  MOVFF  170,201
56A4:  MOVLB  0
56A6:  RCALL  547E
....................       break; 
56A8:  BRA    577E
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
56AA:  MOVLB  1
56AC:  MOVFF  16B,1CA
56B0:  MOVF   x6C,W
56B2:  ANDLW  03
56B4:  MOVWF  xCB
....................       if (--incdec > 0x3FF) 
56B6:  MOVF   xCA,W
56B8:  BTFSC  FD8.2
56BA:  DECF   xCB,F
56BC:  DECF   xCA,F
56BE:  MOVF   xCB,W
56C0:  SUBLW  03
56C2:  BC    56CA
....................         incdec = 0x3FF; 
56C4:  MOVLW  03
56C6:  MOVWF  xCB
56C8:  SETF   xCA
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
56CA:  MOVF   x6C,W
56CC:  ANDLW  C0
56CE:  MOVWF  xCC
56D0:  MOVLW  00
56D2:  IORWF  xCA,F
56D4:  MOVF   xCC,W
56D6:  IORWF  xCB,F
....................       D2A_image[13] = make8(incdec, 0); 
56D8:  MOVFF  1CA,16B
....................       D2A_image[14] = make8(incdec, 1); 
56DC:  MOVFF  1CB,16C
....................       write_D2A(11, D2A_image[13]); 
56E0:  MOVLW  0B
56E2:  MOVLB  2
56E4:  MOVWF  x00
56E6:  MOVFF  16B,201
56EA:  MOVLB  0
56EC:  RCALL  547E
....................       write_D2A(12, D2A_image[14]); 
56EE:  MOVLW  0C
56F0:  MOVLB  2
56F2:  MOVWF  x00
56F4:  MOVFF  16C,201
56F8:  MOVLB  0
56FA:  RCALL  547E
....................       break; 
56FC:  BRA    577E
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
56FE:  MOVLB  1
5700:  MOVFF  16F,1CA
5704:  MOVF   x70,W
5706:  ANDLW  03
5708:  MOVWF  xCB
....................       if (--incdec > 0x3FF) 
570A:  MOVF   xCA,W
570C:  BTFSC  FD8.2
570E:  DECF   xCB,F
5710:  DECF   xCA,F
5712:  MOVF   xCB,W
5714:  SUBLW  03
5716:  BC    571E
....................         incdec = 0x3FF; 
5718:  MOVLW  03
571A:  MOVWF  xCB
571C:  SETF   xCA
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
571E:  MOVF   x70,W
5720:  ANDLW  C0
5722:  MOVWF  xCC
5724:  MOVLW  00
5726:  IORWF  xCA,F
5728:  MOVF   xCC,W
572A:  IORWF  xCB,F
....................       D2A_image[17] = make8(incdec, 0); 
572C:  MOVFF  1CA,16F
....................       D2A_image[18] = make8(incdec, 1); 
5730:  MOVFF  1CB,170
....................       write_D2A(11, D2A_image[17]); 
5734:  MOVLW  0B
5736:  MOVLB  2
5738:  MOVWF  x00
573A:  MOVFF  16F,201
573E:  MOVLB  0
5740:  RCALL  547E
....................       write_D2A(12, D2A_image[18]); 
5742:  MOVLW  0C
5744:  MOVLB  2
5746:  MOVWF  x00
5748:  MOVFF  170,201
574C:  MOVLB  0
574E:  RCALL  547E
....................       break; 
5750:  BRA    577E
....................     case '>': 
....................       if (setup.phase_offset < 255) 
5752:  INCFSZ xBE,W
5754:  BRA    5758
5756:  BRA    575A
....................         setup.phase_offset++; 
5758:  INCF   xBE,F
....................       update_FPGA(1, setup.phase_offset); 
575A:  MOVLW  01
575C:  MOVLB  1
575E:  MOVWF  xCC
5760:  MOVFF  BE,1CD
5764:  MOVLB  0
5766:  RCALL  54E8
....................       break; 
5768:  BRA    577E
....................     case '<': 
....................       if (setup.phase_offset) 
576A:  MOVF   xBE,F
576C:  BZ    5770
....................         setup.phase_offset--; 
576E:  DECF   xBE,F
....................       update_FPGA(1, setup.phase_offset); 
5770:  MOVLW  01
5772:  MOVLB  1
5774:  MOVWF  xCC
5776:  MOVFF  BE,1CD
577A:  MOVLB  0
577C:  RCALL  54E8
....................       break; 
....................     } 
....................   } 
577E:  GOTO   6428 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
5782:  MOVLW  0D
5784:  MOVLB  2
5786:  MOVWF  x00
5788:  MOVLW  0A
578A:  MOVWF  x01
578C:  CLRF   x02
578E:  MOVLW  02
5790:  MOVWF  x67
5792:  CLRF   x66
5794:  MOVLB  0
5796:  CALL   2044
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
579A:  MOVLW  02
579C:  MOVWF  FEA
579E:  CLRF   FE9
57A0:  MOVLW  3D
57A2:  MOVWF  01
57A4:  CLRF   FF7
57A6:  MOVLW  00
57A8:  CALL   0112
57AC:  TBLRD*-
57AE:  TBLRD*+
57B0:  MOVFF  FF5,FEE
57B4:  DECFSZ 01,F
57B6:  BRA    57AE
57B8:  MOVLW  02
57BA:  MOVLB  2
57BC:  MOVWF  x67
57BE:  CLRF   x66
57C0:  MOVLB  0
57C2:  CALL   2044
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
57C6:  MOVLW  02
57C8:  MOVWF  FEA
57CA:  CLRF   FE9
57CC:  MOVLW  2E
57CE:  MOVWF  01
57D0:  CLRF   FF7
57D2:  MOVLW  00
57D4:  CALL   0160
57D8:  TBLRD*-
57DA:  TBLRD*+
57DC:  MOVFF  FF5,FEE
57E0:  DECFSZ 01,F
57E2:  BRA    57DA
57E4:  MOVLW  02
57E6:  MOVLB  2
57E8:  MOVWF  x67
57EA:  CLRF   x66
57EC:  MOVLB  0
57EE:  CALL   2044
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
57F2:  MOVLW  02
57F4:  MOVWF  FEA
57F6:  CLRF   FE9
57F8:  MOVLW  42
57FA:  MOVWF  01
57FC:  CLRF   FF7
57FE:  MOVLW  00
5800:  CALL   019E
5804:  TBLRD*-
5806:  TBLRD*+
5808:  MOVFF  FF5,FEE
580C:  DECFSZ 01,F
580E:  BRA    5806
5810:  MOVLW  02
5812:  MOVLB  2
5814:  MOVWF  x67
5816:  CLRF   x66
5818:  MOVLB  0
581A:  CALL   2044
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
581E:  MOVLW  02
5820:  MOVWF  FEA
5822:  CLRF   FE9
5824:  MOVLW  23
5826:  MOVWF  01
5828:  CLRF   FF7
582A:  MOVLW  00
582C:  CALL   01F0
5830:  TBLRD*-
5832:  TBLRD*+
5834:  MOVFF  FF5,FEE
5838:  DECFSZ 01,F
583A:  BRA    5832
583C:  MOVLW  02
583E:  MOVLB  2
5840:  MOVWF  x67
5842:  CLRF   x66
5844:  MOVLB  0
5846:  CALL   2044
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
584A:  MOVLW  02
584C:  MOVWF  FEA
584E:  CLRF   FE9
5850:  MOVLW  2D
5852:  MOVWF  01
5854:  CLRF   FF7
5856:  MOVLW  00
5858:  CALL   0224
585C:  TBLRD*-
585E:  TBLRD*+
5860:  MOVFF  FF5,FEE
5864:  DECFSZ 01,F
5866:  BRA    585E
5868:  MOVLW  02
586A:  MOVLB  2
586C:  MOVWF  x67
586E:  CLRF   x66
5870:  MOVLB  0
5872:  CALL   2044
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5876:  MOVLW  02
5878:  MOVWF  FEA
587A:  CLRF   FE9
587C:  MOVLW  2E
587E:  MOVWF  01
5880:  CLRF   FF7
5882:  MOVLW  00
5884:  CALL   0262
5888:  TBLRD*-
588A:  TBLRD*+
588C:  MOVFF  FF5,FEE
5890:  DECFSZ 01,F
5892:  BRA    588A
5894:  MOVLW  02
5896:  MOVLB  2
5898:  MOVWF  x67
589A:  CLRF   x66
589C:  MOVLB  0
589E:  CALL   2044
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
58A2:  MOVLW  02
58A4:  MOVWF  FEA
58A6:  CLRF   FE9
58A8:  MOVLW  36
58AA:  MOVWF  01
58AC:  CLRF   FF7
58AE:  MOVLW  00
58B0:  CALL   02A0
58B4:  TBLRD*-
58B6:  TBLRD*+
58B8:  MOVFF  FF5,FEE
58BC:  DECFSZ 01,F
58BE:  BRA    58B6
58C0:  MOVLW  02
58C2:  MOVLB  2
58C4:  MOVWF  x67
58C6:  CLRF   x66
58C8:  MOVLB  0
58CA:  CALL   2044
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
58CE:  MOVLW  02
58D0:  MOVWF  FEA
58D2:  CLRF   FE9
58D4:  MOVLW  16
58D6:  MOVWF  01
58D8:  CLRF   FF7
58DA:  MOVLW  00
58DC:  CALL   02E6
58E0:  TBLRD*-
58E2:  TBLRD*+
58E4:  MOVFF  FF5,FEE
58E8:  DECFSZ 01,F
58EA:  BRA    58E2
58EC:  MOVLW  02
58EE:  MOVLB  2
58F0:  MOVWF  x67
58F2:  CLRF   x66
58F4:  MOVLB  0
58F6:  CALL   2044
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
58FA:  MOVLW  02
58FC:  MOVWF  FEA
58FE:  CLRF   FE9
5900:  MOVLW  3C
5902:  MOVWF  01
5904:  CLRF   FF7
5906:  MOVLW  00
5908:  CALL   030C
590C:  TBLRD*-
590E:  TBLRD*+
5910:  MOVFF  FF5,FEE
5914:  DECFSZ 01,F
5916:  BRA    590E
5918:  MOVLW  02
591A:  MOVLB  2
591C:  MOVWF  x67
591E:  CLRF   x66
5920:  MOVLB  0
5922:  CALL   2044
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5926:  MOVLW  02
5928:  MOVWF  FEA
592A:  CLRF   FE9
592C:  MOVLW  3D
592E:  MOVWF  01
5930:  CLRF   FF7
5932:  MOVLW  00
5934:  CALL   0358
5938:  TBLRD*-
593A:  TBLRD*+
593C:  MOVFF  FF5,FEE
5940:  DECFSZ 01,F
5942:  BRA    593A
5944:  MOVLW  02
5946:  MOVLB  2
5948:  MOVWF  x67
594A:  CLRF   x66
594C:  MOVLB  0
594E:  CALL   2044
....................   COM1_send_str("\r\n"); 
5952:  MOVLW  0D
5954:  MOVLB  2
5956:  MOVWF  x00
5958:  MOVLW  0A
595A:  MOVWF  x01
595C:  CLRF   x02
595E:  MOVLW  02
5960:  MOVWF  x67
5962:  CLRF   x66
5964:  MOVLB  0
5966:  CALL   2044
....................   } 
596A:  GOTO   5D92 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
....................   { 
....................   //COM1_send_str("\r\nFAIL\r\n"); 
....................   } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT read_temperature(void)// VERSION 3.3 17.1.2016 
....................   { 
....................   float temp; 
....................   SINT t, val; 
....................   set_adc_channel(A2D_TEMP); // read temperature 
*
256C:  MOVLW  18
256E:  MOVWF  01
2570:  MOVF   FC2,W
2572:  ANDLW  83
2574:  IORWF  01,W
2576:  MOVWF  FC2
....................   delay_us(50); 
2578:  MOVLW  42
257A:  MOVWF  00
257C:  DECFSZ 00,F
257E:  BRA    257C
2580:  NOP   
....................   val = read_adc(); 
2582:  BSF    FC2.1
2584:  BTFSC  FC2.1
2586:  BRA    2584
2588:  MOVFF  FC4,1BD
258C:  MOVLB  1
258E:  MOVFF  FC3,1BC
....................   temp = (float)val / 1024.0 * 3.3; 
2592:  MOVFF  1BD,1BF
2596:  MOVFF  1BC,1BE
259A:  MOVLB  0
259C:  BRA    2264
259E:  MOVFF  00,1BE
25A2:  MOVFF  01,1BF
25A6:  MOVFF  02,1C0
25AA:  MOVFF  03,1C1
25AE:  MOVFF  03,250
25B2:  MOVFF  02,24F
25B6:  MOVFF  01,24E
25BA:  MOVFF  00,24D
25BE:  MOVLB  2
25C0:  CLRF   x54
25C2:  CLRF   x53
25C4:  CLRF   x52
25C6:  MOVLW  89
25C8:  MOVWF  x51
25CA:  MOVLB  0
25CC:  CALL   169E
25D0:  MOVFF  00,1BE
25D4:  MOVFF  01,1BF
25D8:  MOVFF  02,1C0
25DC:  MOVFF  03,1C1
25E0:  MOVFF  03,250
25E4:  MOVFF  02,24F
25E8:  MOVFF  01,24E
25EC:  MOVFF  00,24D
25F0:  MOVLW  33
25F2:  MOVLB  2
25F4:  MOVWF  x54
25F6:  MOVWF  x53
25F8:  MOVLW  53
25FA:  MOVWF  x52
25FC:  MOVLW  80
25FE:  MOVWF  x51
2600:  MOVLB  0
2602:  CALL   17FC
2606:  MOVFF  03,1B9
260A:  MOVFF  02,1B8
260E:  MOVFF  01,1B7
2612:  MOVFF  00,1B6
....................   temp -= 0.75; 
2616:  BSF    FD8.1
2618:  MOVFF  1B9,22B
261C:  MOVFF  1B8,22A
2620:  MOVFF  1B7,229
2624:  MOVFF  1B6,228
2628:  MOVLB  2
262A:  CLRF   x2F
262C:  CLRF   x2E
262E:  MOVLW  40
2630:  MOVWF  x2D
2632:  MOVLW  7E
2634:  MOVWF  x2C
2636:  MOVLB  0
2638:  RCALL  22B6
263A:  MOVFF  03,1B9
263E:  MOVFF  02,1B8
2642:  MOVFF  01,1B7
2646:  MOVFF  00,1B6
....................   temp *= 100; 
264A:  MOVFF  1B9,250
264E:  MOVFF  1B8,24F
2652:  MOVFF  1B7,24E
2656:  MOVFF  1B6,24D
265A:  MOVLB  2
265C:  CLRF   x54
265E:  CLRF   x53
2660:  MOVLW  48
2662:  MOVWF  x52
2664:  MOVLW  85
2666:  MOVWF  x51
2668:  MOVLB  0
266A:  CALL   17FC
266E:  MOVFF  03,1B9
2672:  MOVFF  02,1B8
2676:  MOVFF  01,1B7
267A:  MOVFF  00,1B6
....................   temp += 25.0; 
267E:  BCF    FD8.1
2680:  MOVFF  1B9,22B
2684:  MOVFF  1B8,22A
2688:  MOVFF  1B7,229
268C:  MOVFF  1B6,228
2690:  MOVLB  2
2692:  CLRF   x2F
2694:  CLRF   x2E
2696:  MOVLW  48
2698:  MOVWF  x2D
269A:  MOVLW  83
269C:  MOVWF  x2C
269E:  MOVLB  0
26A0:  RCALL  22B6
26A2:  MOVFF  03,1B9
26A6:  MOVFF  02,1B8
26AA:  MOVFF  01,1B7
26AE:  MOVFF  00,1B6
....................   t = (SINT)(temp*100); 
26B2:  MOVFF  1B9,250
26B6:  MOVFF  1B8,24F
26BA:  MOVFF  1B7,24E
26BE:  MOVFF  1B6,24D
26C2:  MOVLB  2
26C4:  CLRF   x54
26C6:  CLRF   x53
26C8:  MOVLW  48
26CA:  MOVWF  x52
26CC:  MOVLW  85
26CE:  MOVWF  x51
26D0:  MOVLB  0
26D2:  CALL   17FC
26D6:  MOVFF  03,1C1
26DA:  MOVFF  02,1C0
26DE:  MOVFF  01,1BF
26E2:  MOVFF  00,1BE
26E6:  BRA    252E
26E8:  MOVFF  02,1BB
26EC:  MOVFF  01,1BA
....................   return t; 
26F0:  MOVLB  1
26F2:  MOVFF  1BA,01
26F6:  MOVFF  1BB,02
....................   } 
26FA:  MOVLB  0
26FC:  GOTO   278E (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
....................   { 
*
210C:  MOVLB  1
210E:  CLRF   xB6
....................  // float temp; 
....................   byte t = 0; 
....................   t = (0 * 1); 
2110:  CLRF   xB6
....................   t = (t + (0 * 10)); 
....................   t = t + ( (bit)setup.SOQPSK <<         2); 
2112:  MOVLW  00
2114:  MOVLB  0
2116:  BTFSC  xB8.0
2118:  MOVLW  01
211A:  MOVWF  00
211C:  RLCF   00,F
211E:  RLCF   00,F
2120:  MOVLW  FC
2122:  ANDWF  00,F
2124:  MOVF   00,W
2126:  MOVLB  1
2128:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.clock_polarity << 3); 
212A:  MOVLW  00
212C:  MOVLB  0
212E:  BTFSC  xB1.0
2130:  MOVLW  01
2132:  MOVWF  00
2134:  RLCF   00,F
2136:  RLCF   00,F
2138:  RLCF   00,F
213A:  MOVLW  F8
213C:  ANDWF  00,F
213E:  MOVF   00,W
2140:  MOVLB  1
2142:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.clock_source <<   4); 
2144:  MOVLW  00
2146:  MOVLB  0
2148:  BTFSC  xB3.0
214A:  MOVLW  01
214C:  MOVWF  00
214E:  SWAPF  00,F
2150:  MOVLW  F0
2152:  ANDWF  00,F
2154:  MOVF   00,W
2156:  MOVLB  1
2158:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.randomizer <<     5); 
215A:  MOVLW  00
215C:  MOVLB  0
215E:  BTFSC  xB6.0
2160:  MOVLW  01
2162:  MOVWF  00
2164:  SWAPF  00,F
2166:  RLCF   00,F
2168:  MOVLW  E0
216A:  ANDWF  00,F
216C:  MOVF   00,W
216E:  MOVLB  1
2170:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.data_polarity <<  6); 
2172:  MOVLW  00
2174:  MOVLB  0
2176:  BTFSC  xB2.0
2178:  MOVLW  01
217A:  MOVWF  00
217C:  SWAPF  00,F
217E:  RLCF   00,F
2180:  RLCF   00,F
2182:  MOVLW  C0
2184:  ANDWF  00,F
2186:  MOVF   00,W
2188:  MOVLB  1
218A:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.data_source <<    7); 
218C:  MOVLW  00
218E:  MOVLB  0
2190:  BTFSC  xB4.0
2192:  MOVLW  01
2194:  MOVWF  00
2196:  RRCF   00,W
2198:  CLRF   00
219A:  BTFSC  FD8.0
219C:  BSF    00.7
219E:  MOVF   00,W
21A0:  MOVLB  1
21A2:  ADDWF  xB6,F
....................    
....................   //  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................   return t; 
21A4:  CLRF   03
21A6:  MOVFF  1B6,01
21AA:  MOVFF  03,02
....................   } 
21AE:  MOVLB  0
21B0:  GOTO   2782 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
....................   { 
....................  // float temp; 
....................   if (revp <= 580) 
21B4:  MOVLB  1
21B6:  MOVF   x04,W
21B8:  SUBLW  02
21BA:  BNC   21C8
21BC:  BNZ   21C4
21BE:  MOVF   x03,W
21C0:  SUBLW  44
21C2:  BNC   21C8
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
21C4:  BCF    x9C.0
....................       else 
21C6:  BRA    21CA
....................         revp_status = 1;//Q strcpy(revstat, "BAD"); 
21C8:  BSF    x9C.0
....................  
....................   byte t = 0; 
21CA:  CLRF   xB6
....................   t = (0 * 1); 
21CC:  CLRF   xB6
....................   t = (t + (0 * 10)); 
....................   t = t + ( (bit)revp_status <<         2); 
21CE:  MOVLW  00
21D0:  BTFSC  x9C.0
21D2:  MOVLW  01
21D4:  MOVWF  00
21D6:  RLCF   00,F
21D8:  RLCF   00,F
21DA:  MOVLW  FC
21DC:  ANDWF  00,F
21DE:  MOVF   00,W
21E0:  ADDWF  xB6,F
....................   t = t + ( (bit)UART_Status << 3); 
21E2:  MOVLW  00
21E4:  BTFSC  x26.0
21E6:  MOVLW  01
21E8:  MOVWF  00
21EA:  RLCF   00,F
21EC:  RLCF   00,F
21EE:  RLCF   00,F
21F0:  MOVLW  F8
21F2:  ANDWF  00,F
21F4:  MOVF   00,W
21F6:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.rp <<   4); 
21F8:  MOVLW  00
21FA:  MOVLB  0
21FC:  BTFSC  xFA.0
21FE:  MOVLW  01
2200:  MOVWF  00
2202:  SWAPF  00,F
2204:  MOVLW  F0
2206:  ANDWF  00,F
2208:  MOVF   00,W
220A:  MOVLB  1
220C:  ADDWF  xB6,F
....................   t = t + ( (bit)pwr_command <<     5);//RF 
220E:  MOVLW  00
2210:  BTFSC  x9B.0
2212:  MOVLW  01
2214:  MOVWF  00
2216:  SWAPF  00,F
2218:  RLCF   00,F
221A:  MOVLW  E0
221C:  ANDWF  00,F
221E:  MOVF   00,W
2220:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.rc <<  6); 
2222:  MOVLW  00
2224:  MOVLB  0
2226:  BTFSC  xF8.0
2228:  MOVLW  01
222A:  MOVWF  00
222C:  SWAPF  00,F
222E:  RLCF   00,F
2230:  RLCF   00,F
2232:  MOVLW  C0
2234:  ANDWF  00,F
2236:  MOVF   00,W
2238:  MOVLB  1
223A:  ADDWF  xB6,F
....................   t = t + ( (bit)setup.cot <<    7); //RB 
223C:  MOVLW  00
223E:  MOVLB  0
2240:  BTFSC  xF6.0
2242:  MOVLW  01
2244:  MOVWF  00
2246:  RRCF   00,W
2248:  CLRF   00
224A:  BTFSC  FD8.0
224C:  BSF    00.7
224E:  MOVF   00,W
2250:  MOVLB  1
2252:  ADDWF  xB6,F
....................    
....................   
....................   return t; 
2254:  CLRF   03
2256:  MOVFF  1B6,01
225A:  MOVFF  03,02
....................   } 
225E:  MOVLB  0
2260:  GOTO   2788 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... The message structure is defined below. 
....................  
.................... Byte# Description Remarks 
.................... 1 Header  Constant - 47 Hex 
.................... 2 Temperature Send 2's complement 
.................... 3 Power level 
.................... 4 Current 
.................... 5 PLL lock 
.................... 6 Checksum  Checksum of all preceding bytes 
....................  
.................... Table 1 - Status Packet structure 
....................  
.................... The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
....................   { 
*
2778:  MOVLB  1
277A:  CLRF   xB1
277C:  CLRF   xB0
....................   UINT chksum = 0, idx; 
....................   byte BitsStatus1,BitsStatus2; 
....................   BitsStatus1 = Bits_status1(); 
277E:  MOVLB  0
2780:  BRA    210C
2782:  MOVFF  01,1B4
....................   BitsStatus2 = Bits_status2(); 
2786:  BRA    21B4
2788:  MOVFF  01,1B5
....................   
....................   current_temperature = read_temperature(); 
278C:  BRA    256C
278E:  MOVFF  02,106
2792:  MOVFF  01,105
....................   //measured_current = read_current(); 
....................   //power_level_stat = current_power; 
....................   status_buffer[0] = 0xFB; // Synchronization Byte 1 
2796:  MOVLW  FB
2798:  MOVLB  1
279A:  MOVWF  x0D
....................   status_buffer[1] = 0x60; // Synchronization Byte 2 
279C:  MOVLW  60
279E:  MOVWF  x0E
....................   status_buffer[2] = TX_Counter++; // The counter increments by one each time an update is sent 0 to 255 
27A0:  MOVFF  10A,03
27A4:  MOVF   x09,W
27A6:  INCF   x09,F
27A8:  BTFSC  FD8.2
27AA:  INCF   x0A,F
27AC:  MOVWF  x0F
....................   status_buffer[3] = setup.frequency / 256; // MSB TX frequency  
27AE:  MOVFF  BB,110
....................   status_buffer[4] = setup.frequency % 256; // LSB TX frequency  
27B2:  MOVFF  BA,111
27B6:  MOVLB  1
....................   status_buffer[5] = setup.mode; // State of modulation state 
27B8:  MOVFF  B0,112
....................   status_buffer[6] = BitsStatus1; //0x00; // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
27BC:  MOVFF  1B4,113
....................   status_buffer[7] = current_temperature / 256; //MSB TX Temperature  
27C0:  MOVFF  106,1B7
27C4:  MOVFF  105,1B6
27C8:  MOVLW  01
27CA:  MOVWF  xB9
27CC:  CLRF   xB8
27CE:  MOVLB  0
27D0:  RCALL  2700
27D2:  MOVFF  01,114
27D6:  MOVLB  1
....................   status_buffer[8] = current_temperature % 256; //LSB TX Temperature  
27D8:  MOVFF  106,1B7
27DC:  MOVFF  105,1B6
27E0:  MOVLW  01
27E2:  MOVWF  xB9
27E4:  CLRF   xB8
27E6:  MOVLB  0
27E8:  RCALL  2700
27EA:  MOVFF  00,115
27EE:  MOVLB  1
....................   status_buffer[9] = setup.bitrate / 256; //MSB Bit rate state ,  
27F0:  MOVFF  AD,116
....................   status_buffer[10] = setup.bitrate % 256; //LSB Bit rate state  
27F4:  MOVFF  AC,117
27F8:  MOVLB  1
....................   status_buffer[11] = setup.power_level + 20; // TX power in dBm 
27FA:  MOVLW  14
27FC:  MOVLB  0
27FE:  ADDWF  xBC,W
2800:  MOVLB  1
2802:  MOVWF  x18
....................   status_buffer[12] = setup.internal_pattern; //Data type while using internal data 
2804:  MOVFF  B5,119
....................   status_buffer[13] = BitsStatus2; // Bits status of: Reverse Power N/A 
2808:  MOVFF  1B5,11A
....................   status_buffer[14] = bitlow_power_level;// TX low power in dBm (VL) 
280C:  MOVFF  20,11B
....................   status_buffer[15] = bitpower_level;// TX low power in dBm (VP) 
2810:  MOVFF  22,11C
....................   status_buffer[16] = 0xBB;//revp; N/A FOR Now // need to be clilired Revers power 
2814:  MOVLW  BB
2816:  MOVWF  x1D
....................   status_buffer[17] = 0xBB;//N/A FOR Now((VERSION(12)*10) + VERSION(14));// TX VERSION 
2818:  MOVWF  x1E
....................   status_buffer[18] = setup.unit_ID / 256;//MSB TX Serial number 
281A:  MOVFF  F3,11F
....................   status_buffer[19] = setup.unit_ID % 256;//LSB TX Serial number 
281E:  MOVFF  F2,120
2822:  MOVLB  1
....................   status_buffer[20] = 0xAA;// Spare 
2824:  MOVLW  AA
2826:  MOVWF  x21
....................   status_buffer[21] = 0xAA;// Spare 
2828:  MOVWF  x22
....................    
....................   for (idx = 0; idx < 23; idx++) 
282A:  CLRF   xB3
282C:  CLRF   xB2
282E:  MOVF   xB3,F
2830:  BNZ   2854
2832:  MOVF   xB2,W
2834:  SUBLW  16
2836:  BNC   2854
....................     { 
....................     chksum += status_buffer[idx]; 
2838:  MOVLW  0D
283A:  ADDWF  xB2,W
283C:  MOVWF  FE9
283E:  MOVLW  01
2840:  ADDWFC xB3,W
2842:  MOVWF  FEA
2844:  MOVF   FEF,W
2846:  ADDWF  xB0,F
2848:  MOVLW  00
284A:  ADDWFC xB1,F
....................     } 
284C:  INCF   xB2,F
284E:  BTFSC  FD8.2
2850:  INCF   xB3,F
2852:  BRA    282E
....................   status_buffer[22] =(chksum ) / 256;//& 255 
2854:  MOVFF  1B1,123
....................   status_buffer[23] =(chksum ) % 256;//& 255 
2858:  MOVFF  1B0,124
....................   } 
285C:  MOVLB  0
285E:  GOTO   6766 (RETURN)
.................... /* 
....................   for (idx = 0; idx < 5; idx++) 
....................     { 
....................     chksum += status_buffer[idx]; 
....................     } 
....................   status_buffer[5] =chksum & 255; 
....................   } 
....................  */  
.................... //----------------------------------------------------------------------------   
.................... bit set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
31D0:  CALL   2968
31D4:  MOVFF  02,229
31D8:  MOVFF  01,228
....................   bitlow_power_level = idx;// VERSION 3.3 29.02.2016 
31DC:  MOVFF  229,21
31E0:  MOVFF  228,20
....................   if (idx <= 40 && idx >= 20) 
31E4:  MOVLB  2
31E6:  MOVF   x29,F
31E8:  BNZ   3238
31EA:  MOVF   x28,W
31EC:  SUBLW  28
31EE:  BNC   3238
31F0:  MOVF   x29,F
31F2:  BNZ   31FA
31F4:  MOVF   x28,W
31F6:  SUBLW  13
31F8:  BC    3238
....................     { 
....................     setup.power_level = idx - 20; 
31FA:  MOVLW  14
31FC:  SUBWF  x28,W
31FE:  MOVLB  0
3200:  MOVWF  xBC
3202:  MOVLW  00
3204:  MOVLB  2
3206:  SUBWFB x29,W
3208:  MOVLB  0
320A:  MOVWF  xBD
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
320C:  BCF    FD8.0
320E:  RLCF   xBC,W
3210:  MOVWF  02
3212:  RLCF   xBD,W
3214:  MOVWF  03
3216:  MOVF   02,W
3218:  ADDLW  C5
321A:  MOVWF  FE9
321C:  MOVLW  00
321E:  ADDWFC 03,W
3220:  MOVWF  FEA
3222:  MOVFF  FEC,03
3226:  MOVF   FED,F
3228:  MOVFF  FEF,1C
322C:  MOVFF  03,1D
....................     return 1; 
3230:  MOVLW  01
3232:  MOVWF  01
3234:  BRA    323C
3236:  MOVLB  2
....................     } 
....................   return 0; 
3238:  MOVLW  00
323A:  MOVWF  01
323C:  MOVLB  0
....................   } 
323E:  GOTO   47DE (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... bit set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
3160:  RCALL  2968
3162:  MOVFF  02,229
3166:  MOVFF  01,228
....................   bitpower_level = idx;// VERSION 3.3 29.02.2016 
316A:  MOVFF  229,23
316E:  MOVFF  228,22
....................   if (idx <= 40 && idx >= 20) 
3172:  MOVLB  2
3174:  MOVF   x29,F
3176:  BNZ   31C6
3178:  MOVF   x28,W
317A:  SUBLW  28
317C:  BNC   31C6
317E:  MOVF   x29,F
3180:  BNZ   3188
3182:  MOVF   x28,W
3184:  SUBLW  13
3186:  BC    31C6
....................     { 
....................     setup.power_low_level = idx - 20; 
3188:  MOVLW  14
318A:  SUBWF  x28,W
318C:  MOVLB  0
318E:  MOVWF  xF4
3190:  MOVLW  00
3192:  MOVLB  2
3194:  SUBWFB x29,W
3196:  MOVLB  0
3198:  MOVWF  xF5
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
319A:  BCF    FD8.0
319C:  RLCF   xF4,W
319E:  MOVWF  02
31A0:  RLCF   xF5,W
31A2:  MOVWF  03
31A4:  MOVF   02,W
31A6:  ADDLW  C5
31A8:  MOVWF  FE9
31AA:  MOVLW  00
31AC:  ADDWFC 03,W
31AE:  MOVWF  FEA
31B0:  MOVFF  FEC,03
31B4:  MOVF   FED,F
31B6:  MOVFF  FEF,1A
31BA:  MOVFF  03,1B
....................     return 1; 
31BE:  MOVLW  01
31C0:  MOVWF  01
31C2:  BRA    31CA
31C4:  MOVLB  2
....................     } 
....................   return 0; 
31C6:  MOVLW  00
31C8:  MOVWF  01
31CA:  MOVLB  0
....................   } 
31CC:  GOTO   4734 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
5D08:  MOVLW  02
5D0A:  MOVLB  1
5D0C:  MOVWF  xC9
....................   comm_ptr = 0; 
5D0E:  CLRF   x3B
....................   switch (toupper(get_char())) 
....................     { 
5D10:  MOVLB  0
5D12:  CALL   28AC
5D16:  MOVFF  02,201
5D1A:  MOVFF  01,200
5D1E:  MOVLB  2
5D20:  MOVF   x01,F
5D22:  BNZ   5D2A
5D24:  MOVF   x00,W
5D26:  SUBLW  60
5D28:  BC    5D3A
5D2A:  MOVF   x01,F
5D2C:  BNZ   5D3A
5D2E:  MOVF   x00,W
5D30:  SUBLW  7A
5D32:  BNC   5D3A
5D34:  MOVF   x00,W
5D36:  ANDLW  DF
5D38:  BRA    5D3C
5D3A:  MOVF   x00,W
5D3C:  XORLW  48
5D3E:  MOVLB  0
5D40:  BZ    5D90
5D42:  XORLW  09
5D44:  BZ    5D98
5D46:  XORLW  02
5D48:  BTFSC  FD8.2
5D4A:  BRA    5E6C
5D4C:  XORLW  07
5D4E:  BTFSC  FD8.2
5D50:  BRA    5F4A
5D52:  XORLW  0B
5D54:  BTFSC  FD8.2
5D56:  BRA    5FC8
5D58:  XORLW  1D
5D5A:  BTFSC  FD8.2
5D5C:  BRA    6006
5D5E:  XORLW  10
5D60:  BTFSC  FD8.2
5D62:  BRA    6046
5D64:  XORLW  05
5D66:  BTFSC  FD8.2
5D68:  BRA    609E
5D6A:  XORLW  01
5D6C:  BTFSC  FD8.2
5D6E:  BRA    61BA
5D70:  XORLW  15
5D72:  BTFSC  FD8.2
5D74:  BRA    6248
5D76:  XORLW  07
5D78:  BTFSC  FD8.2
5D7A:  BRA    62EA
5D7C:  XORLW  65
5D7E:  BTFSC  FD8.2
5D80:  BRA    63B2
5D82:  XORLW  03
5D84:  BTFSC  FD8.2
5D86:  BRA    63C0
5D88:  XORLW  01
5D8A:  BTFSC  FD8.2
5D8C:  BRA    63CA
5D8E:  BRA    63D8
....................     case 'H': 
....................       list_help1(); 
5D90:  BRA    5782
....................       return 0; 
5D92:  MOVLW  00
5D94:  MOVWF  01
5D96:  BRA    63E2
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
5D98:  CALL   28AC
5D9C:  MOVFF  02,201
5DA0:  MOVFF  01,200
5DA4:  MOVLB  2
5DA6:  MOVF   x01,F
5DA8:  BNZ   5DB0
5DAA:  MOVF   x00,W
5DAC:  SUBLW  60
5DAE:  BC    5DC0
5DB0:  MOVF   x01,F
5DB2:  BNZ   5DC0
5DB4:  MOVF   x00,W
5DB6:  SUBLW  7A
5DB8:  BNC   5DC0
5DBA:  MOVF   x00,W
5DBC:  ANDLW  DF
5DBE:  BRA    5DC2
5DC0:  MOVF   x00,W
5DC2:  XORLW  54
5DC4:  MOVLB  0
5DC6:  BZ    5DCE
5DC8:  XORLW  1D
5DCA:  BZ    5DD8
5DCC:  BRA    5E6A
....................         case 'T': 
....................           idx = get_int(); 
5DCE:  CALL   2968
5DD2:  MOVFF  01,1CA
....................  
....................           // write to attenuator 
....................           break; 
5DD6:  BRA    5E6A
....................         case 'I': 
....................           idx = get_int(); 
5DD8:  CALL   2968
5DDC:  MOVFF  01,1CA
....................           if (idx && idx < 4) 
5DE0:  MOVLB  1
5DE2:  MOVF   xCA,F
5DE4:  BZ    5E68
5DE6:  MOVF   xCA,W
5DE8:  SUBLW  03
5DEA:  BNC   5E68
....................             { 
....................             set_adc_channel(idx-1); 
5DEC:  MOVLW  01
5DEE:  SUBWF  xCA,W
5DF0:  MOVLB  2
5DF2:  MOVWF  x00
5DF4:  RLCF   x00,W
5DF6:  MOVWF  00
5DF8:  RLCF   00,F
5DFA:  MOVLW  FC
5DFC:  ANDWF  00,F
5DFE:  MOVF   FC2,W
5E00:  ANDLW  83
5E02:  IORWF  00,W
5E04:  MOVWF  FC2
....................             delay_us(30); 
5E06:  MOVLW  27
5E08:  MOVWF  00
5E0A:  DECFSZ 00,F
5E0C:  BRA    5E0A
5E0E:  BRA    5E10
....................             value = read_adc(); 
5E10:  BSF    FC2.1
5E12:  BTFSC  FC2.1
5E14:  BRA    5E12
5E16:  MOVFF  FC4,1FF
5E1A:  MOVLB  1
5E1C:  MOVFF  FC3,1FE
....................             sprintf(buf, "$AR %lu\r", value); 
5E20:  MOVLW  01
5E22:  MOVWF  x9E
5E24:  MOVLW  CE
5E26:  MOVWF  x9D
5E28:  MOVLW  C4
5E2A:  MOVWF  FF6
5E2C:  MOVLW  0A
5E2E:  MOVWF  FF7
5E30:  MOVLW  04
5E32:  MOVLB  2
5E34:  MOVWF  x2E
5E36:  MOVLB  0
5E38:  CALL   2DEA
5E3C:  MOVLW  10
5E3E:  MOVWF  FE9
5E40:  MOVFF  1FF,22F
5E44:  MOVFF  1FE,22E
5E48:  CALL   2E12
5E4C:  MOVLW  0D
5E4E:  MOVLB  2
5E50:  MOVWF  x37
5E52:  MOVLB  0
5E54:  CALL   2DC8
....................             COM1_send_str(buf); 
5E58:  MOVLW  01
5E5A:  MOVLB  2
5E5C:  MOVWF  x67
5E5E:  MOVLW  CE
5E60:  MOVWF  x66
5E62:  MOVLB  0
5E64:  CALL   2044
....................             } 
....................           break; 
5E68:  MOVLB  0
....................         } 
....................       break; 
5E6A:  BRA    63DE
....................     case 'C': 
....................       if (chr = toupper(get_char()) == 'F') 
5E6C:  CALL   28AC
5E70:  MOVFF  02,201
5E74:  MOVFF  01,200
5E78:  MOVLB  2
5E7A:  MOVF   x01,F
5E7C:  BNZ   5E84
5E7E:  MOVF   x00,W
5E80:  SUBLW  60
5E82:  BC    5E94
5E84:  MOVF   x01,F
5E86:  BNZ   5E94
5E88:  MOVF   x00,W
5E8A:  SUBLW  7A
5E8C:  BNC   5E94
5E8E:  MOVF   x00,W
5E90:  ANDLW  DF
5E92:  BRA    5E96
5E94:  MOVF   x00,W
5E96:  SUBLW  46
5E98:  BZ    5E9E
5E9A:  MOVLW  00
5E9C:  BRA    5EA0
5E9E:  MOVLW  01
5EA0:  MOVLB  1
5EA2:  MOVWF  xC9
5EA4:  MOVF   xC9,F
5EA6:  BZ    5EDA
....................         { 
....................         freq = get_frequency(); 
5EA8:  MOVLB  0
5EAA:  CALL   2ECE
5EAE:  MOVLB  1
5EB0:  CLRF   xF9
5EB2:  CLRF   xF8
5EB4:  MOVFF  02,1F7
5EB8:  MOVFF  01,1F6
....................         PLL_compute_freq_parameters(freq); 
5EBC:  MOVFF  1F7,201
5EC0:  MOVFF  1F6,200
5EC4:  MOVFF  1F7,231
5EC8:  MOVFF  1F6,230
5ECC:  MOVLB  0
5ECE:  CALL   11AC
....................         PLL_update(); 
5ED2:  CALL   147C
....................         } 
....................       else if (chr == 'P') 
5ED6:  BRA    5F44
5ED8:  MOVLB  1
5EDA:  MOVF   xC9,W
5EDC:  SUBLW  50
5EDE:  BNZ   5F46
....................         { 
....................         idx = get_int(); 
5EE0:  MOVLB  0
5EE2:  CALL   2968
5EE6:  MOVFF  01,1CA
....................         if (idx < 2) 
5EEA:  MOVLB  1
5EEC:  MOVF   xCA,W
5EEE:  SUBLW  01
5EF0:  BNC   5F46
....................           { 
....................           setup.clock_polarity = idx & 1; 
5EF2:  MOVF   xCA,W
5EF4:  ANDLW  01
5EF6:  MOVLB  0
5EF8:  MOVWF  xB1
....................           sprintf(buf, "$CP %u\r", idx); 
5EFA:  MOVLW  01
5EFC:  MOVLB  1
5EFE:  MOVWF  x9E
5F00:  MOVLW  CE
5F02:  MOVWF  x9D
5F04:  MOVLW  CE
5F06:  MOVWF  FF6
5F08:  MOVLW  0A
5F0A:  MOVWF  FF7
5F0C:  MOVLW  04
5F0E:  MOVLB  2
5F10:  MOVWF  x2E
5F12:  MOVLB  0
5F14:  CALL   2DEA
5F18:  MOVFF  1CA,22E
5F1C:  MOVLW  1B
5F1E:  MOVLB  2
5F20:  MOVWF  x2F
5F22:  MOVLB  0
5F24:  CALL   2F62
5F28:  MOVLW  0D
5F2A:  MOVLB  2
5F2C:  MOVWF  x37
5F2E:  MOVLB  0
5F30:  CALL   2DC8
....................           COM1_send_str(buf); 
5F34:  MOVLW  01
5F36:  MOVLB  2
5F38:  MOVWF  x67
5F3A:  MOVLW  CE
5F3C:  MOVWF  x66
5F3E:  MOVLB  0
5F40:  CALL   2044
5F44:  MOVLB  1
....................           } 
....................         } 
....................       break; 
5F46:  MOVLB  0
5F48:  BRA    63DE
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
5F4A:  CALL   28AC
5F4E:  MOVFF  02,201
5F52:  MOVFF  01,200
5F56:  MOVLB  2
5F58:  MOVF   x01,F
5F5A:  BNZ   5F62
5F5C:  MOVF   x00,W
5F5E:  SUBLW  60
5F60:  BC    5F72
5F62:  MOVF   x01,F
5F64:  BNZ   5F72
5F66:  MOVF   x00,W
5F68:  SUBLW  7A
5F6A:  BNC   5F72
5F6C:  MOVF   x00,W
5F6E:  ANDLW  DF
5F70:  BRA    5F74
5F72:  MOVF   x00,W
5F74:  SUBLW  49
5F76:  BNZ   5FC4
....................         { 
....................         idx = input_c(); // change to REAL input ports 
5F78:  MOVFF  F82,1CA
....................         sprintf(buf, "$DR %02X\r", idx); 
5F7C:  MOVLW  01
5F7E:  MOVLB  1
5F80:  MOVWF  x9E
5F82:  MOVLW  CE
5F84:  MOVWF  x9D
5F86:  MOVLW  D6
5F88:  MOVWF  FF6
5F8A:  MOVLW  0A
5F8C:  MOVWF  FF7
5F8E:  MOVLW  04
5F90:  MOVLB  2
5F92:  MOVWF  x2E
5F94:  MOVLB  0
5F96:  CALL   2DEA
5F9A:  MOVFF  1CA,200
5F9E:  MOVLW  37
5FA0:  MOVLB  2
5FA2:  MOVWF  x01
5FA4:  MOVLB  0
5FA6:  RCALL  596E
5FA8:  MOVLW  0D
5FAA:  MOVLB  2
5FAC:  MOVWF  x37
5FAE:  MOVLB  0
5FB0:  CALL   2DC8
....................         COM1_send_str(buf); 
5FB4:  MOVLW  01
5FB6:  MOVLB  2
5FB8:  MOVWF  x67
5FBA:  MOVLW  CE
5FBC:  MOVWF  x66
5FBE:  MOVLB  0
5FC0:  CALL   2044
....................         } 
....................       break; 
5FC4:  MOVLB  0
5FC6:  BRA    63DE
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
5FC8:  CALL   28AC
5FCC:  MOVFF  02,201
5FD0:  MOVFF  01,200
5FD4:  MOVLB  2
5FD6:  MOVF   x01,F
5FD8:  BNZ   5FE0
5FDA:  MOVF   x00,W
5FDC:  SUBLW  60
5FDE:  BC    5FF0
5FE0:  MOVF   x01,F
5FE2:  BNZ   5FF0
5FE4:  MOVF   x00,W
5FE6:  SUBLW  7A
5FE8:  BNC   5FF0
5FEA:  MOVF   x00,W
5FEC:  ANDLW  DF
5FEE:  BRA    5FF2
5FF0:  MOVF   x00,W
5FF2:  SUBLW  54
5FF4:  BNZ   6002
....................         { 
....................         value = get_hex(); 
5FF6:  MOVLB  0
5FF8:  RCALL  59B8
5FFA:  MOVFF  01,1FF
5FFE:  MOVFF  00,1FE
....................         // output bits 
....................         } 
....................       break; 
6002:  MOVLB  0
6004:  BRA    63DE
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
6006:  CALL   28AC
600A:  MOVFF  02,201
600E:  MOVFF  01,200
6012:  MOVLB  2
6014:  MOVF   x01,F
6016:  BNZ   601E
6018:  MOVF   x00,W
601A:  SUBLW  60
601C:  BC    602E
601E:  MOVF   x01,F
6020:  BNZ   602E
6022:  MOVF   x00,W
6024:  SUBLW  7A
6026:  BNC   602E
6028:  MOVF   x00,W
602A:  ANDLW  DF
602C:  BRA    6030
602E:  MOVF   x00,W
6030:  SUBLW  44
6032:  BNZ   6042
....................         { 
....................         output_high(D2A_RESET); 
6034:  BSF    F8A.3
....................         delay_ms(100); 
6036:  MOVLW  64
6038:  MOVWF  x3D
603A:  MOVLB  0
603C:  CALL   0DBA
....................         output_low(D2A_RESET); 
6040:  BCF    F8A.3
....................         } 
....................       break; 
6042:  MOVLB  0
6044:  BRA    63DE
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
6046:  CALL   28AC
604A:  MOVFF  02,201
604E:  MOVFF  01,200
6052:  MOVLB  2
6054:  MOVF   x01,F
6056:  BNZ   605E
6058:  MOVF   x00,W
605A:  SUBLW  60
605C:  BC    606E
605E:  MOVF   x01,F
6060:  BNZ   606E
6062:  MOVF   x00,W
6064:  SUBLW  7A
6066:  BNC   606E
6068:  MOVF   x00,W
606A:  ANDLW  DF
606C:  BRA    6070
606E:  MOVF   x00,W
6070:  SUBLW  52
6072:  BNZ   609A
....................         { 
....................         bitrate = str_to_long(); 
6074:  MOVLB  0
6076:  BRA    5AB0
6078:  MOVFF  03,1FD
607C:  MOVFF  02,1FC
6080:  MOVFF  01,1FB
6084:  MOVFF  00,1FA
....................         set_bitrate(bitrate); 
6088:  MOVFF  1FB,201
608C:  MOVFF  1FA,200
6090:  MOVFF  1FB,203
6094:  MOVFF  1FA,202
6098:  BRA    5B6C
....................         } 
....................       break; 
609A:  MOVLB  0
609C:  BRA    63DE
....................     case 'G': 
....................       device = get_char(); 
609E:  CALL   28AC
60A2:  MOVFF  01,1CB
....................       addr = get_hex(); 
60A6:  RCALL  59B8
60A8:  MOVFF  00,1CC
....................       switch (toupper(device)) 
....................         { 
60AC:  MOVLB  1
60AE:  MOVF   xCB,W
60B0:  SUBLW  60
60B2:  BC    60C0
60B4:  MOVF   xCB,W
60B6:  SUBLW  7A
60B8:  BNC   60C0
60BA:  MOVF   xCB,W
60BC:  ANDLW  DF
60BE:  BRA    60C2
60C0:  MOVF   xCB,W
60C2:  XORLW  46
60C4:  MOVLB  0
60C6:  BZ    60CE
60C8:  XORLW  02
60CA:  BZ    6148
60CC:  BRA    61B8
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
60CE:  MOVFF  1CC,200
60D2:  MOVLW  01
60D4:  MOVLB  2
60D6:  MOVWF  x02
60D8:  MOVLW  CD
60DA:  MOVWF  x01
60DC:  MOVLB  0
60DE:  BRA    5BFC
60E0:  MOVFF  01,1C9
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
60E4:  MOVLW  01
60E6:  MOVLB  1
60E8:  MOVWF  x9E
60EA:  MOVLW  CE
60EC:  MOVWF  x9D
60EE:  MOVLW  E0
60F0:  MOVWF  FF6
60F2:  MOVLW  0A
60F4:  MOVWF  FF7
60F6:  MOVLW  07
60F8:  MOVLB  2
60FA:  MOVWF  x2E
60FC:  MOVLB  0
60FE:  CALL   2DEA
6102:  MOVFF  1CC,200
6106:  MOVLW  37
6108:  MOVLB  2
610A:  MOVWF  x01
610C:  MOVLB  0
610E:  RCALL  596E
6110:  MOVLW  20
6112:  MOVLB  2
6114:  MOVWF  x37
6116:  MOVLB  0
6118:  CALL   2DC8
611C:  MOVFF  1C9,200
6120:  MOVLW  37
6122:  MOVLB  2
6124:  MOVWF  x01
6126:  MOVLB  0
6128:  RCALL  596E
612A:  MOVLW  0D
612C:  MOVLB  2
612E:  MOVWF  x37
6130:  MOVLB  0
6132:  CALL   2DC8
....................           COM1_send_str(buf); 
6136:  MOVLW  01
6138:  MOVLB  2
613A:  MOVWF  x67
613C:  MOVLW  CE
613E:  MOVWF  x66
6140:  MOVLB  0
6142:  CALL   2044
....................           break; 
6146:  BRA    61B8
....................         case 'D': 
....................           data = read_D2A(addr); 
6148:  MOVFF  1CC,200
614C:  BRA    5CA6
614E:  MOVFF  01,1CD
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
6152:  MOVLW  01
6154:  MOVLB  1
6156:  MOVWF  x9E
6158:  MOVLW  CE
615A:  MOVWF  x9D
615C:  MOVLW  F2
615E:  MOVWF  FF6
6160:  MOVLW  0A
6162:  MOVWF  FF7
6164:  MOVLW  07
6166:  MOVLB  2
6168:  MOVWF  x2E
616A:  MOVLB  0
616C:  CALL   2DEA
6170:  MOVFF  1CC,200
6174:  MOVLW  37
6176:  MOVLB  2
6178:  MOVWF  x01
617A:  MOVLB  0
617C:  CALL   596E
6180:  MOVLW  20
6182:  MOVLB  2
6184:  MOVWF  x37
6186:  MOVLB  0
6188:  CALL   2DC8
618C:  MOVFF  1CD,200
6190:  MOVLW  37
6192:  MOVLB  2
6194:  MOVWF  x01
6196:  MOVLB  0
6198:  CALL   596E
619C:  MOVLW  0D
619E:  MOVLB  2
61A0:  MOVWF  x37
61A2:  MOVLB  0
61A4:  CALL   2DC8
....................           COM1_send_str(buf); 
61A8:  MOVLW  01
61AA:  MOVLB  2
61AC:  MOVWF  x67
61AE:  MOVLW  CE
61B0:  MOVWF  x66
61B2:  MOVLB  0
61B4:  CALL   2044
....................           break; 
....................         } 
....................       break; 
61B8:  BRA    63DE
....................     case 'F': // fill tables 
....................       skip_spc(); 
61BA:  CALL   28CC
....................       idx = get_char(); // get table designator 
61BE:  CALL   28AC
61C2:  MOVFF  01,1CA
....................       addr = get_int(); // get table index 
61C6:  CALL   2968
61CA:  MOVFF  01,1CC
....................       value = get_int(); // get value to put into table 
61CE:  CALL   2968
61D2:  MOVFF  02,1FF
61D6:  MOVFF  01,1FE
....................       switch (toupper(idx)) 
....................         { 
61DA:  MOVLB  1
61DC:  MOVF   xCA,W
61DE:  SUBLW  60
61E0:  BC    61EE
61E2:  MOVF   xCA,W
61E4:  SUBLW  7A
61E6:  BNC   61EE
61E8:  MOVF   xCA,W
61EA:  ANDLW  DF
61EC:  BRA    61F0
61EE:  MOVF   xCA,W
61F0:  XORLW  4E
61F2:  MOVLB  0
61F4:  BZ    61FC
61F6:  XORLW  1E
61F8:  BZ    6222
61FA:  BRA    6246
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
61FC:  MOVLB  1
61FE:  MOVF   xCC,W
6200:  SUBLW  02
6202:  BNC   621E
....................             { 
....................             setup.negative_voltage[addr] = value; 
6204:  BCF    FD8.0
6206:  RLCF   xCC,W
6208:  CLRF   03
620A:  ADDLW  BF
620C:  MOVWF  FE9
620E:  MOVLW  00
6210:  ADDWFC 03,W
6212:  MOVWF  FEA
6214:  MOVFF  1FF,FEC
6218:  MOVF   FED,F
621A:  MOVFF  1FE,FEF
....................             } 
....................           break; 
621E:  MOVLB  0
6220:  BRA    6246
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
6222:  MOVLB  1
6224:  MOVF   xCC,W
6226:  SUBLW  14
6228:  BNC   6244
....................             { 
....................             setup.power_in[addr] = value; 
622A:  BCF    FD8.0
622C:  RLCF   xCC,W
622E:  CLRF   03
6230:  ADDLW  C5
6232:  MOVWF  FE9
6234:  MOVLW  00
6236:  ADDWFC 03,W
6238:  MOVWF  FEA
623A:  MOVFF  1FF,FEC
623E:  MOVF   FED,F
6240:  MOVFF  1FE,FEF
....................             } 
....................           break; 
6244:  MOVLB  0
....................         } 
....................       break; 
6246:  BRA    63DE
....................     case 'S': 
....................       device = get_char(); 
6248:  CALL   28AC
624C:  MOVFF  01,1CB
....................       addr = get_hex(); 
6250:  CALL   59B8
6254:  MOVFF  00,1CC
....................       data = get_hex(); 
6258:  CALL   59B8
625C:  MOVFF  00,1CD
....................       switch (toupper(device)) 
....................         { 
6260:  MOVLB  1
6262:  MOVF   xCB,W
6264:  SUBLW  60
6266:  BC    6274
6268:  MOVF   xCB,W
626A:  SUBLW  7A
626C:  BNC   6274
626E:  MOVF   xCB,W
6270:  ANDLW  DF
6272:  BRA    6276
6274:  MOVF   xCB,W
6276:  XORLW  46
6278:  MOVLB  0
627A:  BZ    6286
627C:  XORLW  02
627E:  BZ    62B8
6280:  XORLW  12
6282:  BZ    62DC
6284:  BRA    62E8
....................         case 'F': 
....................           buf[0] = addr; 
6286:  MOVFF  1CC,1CE
....................           buf[1] = data; 
628A:  MOVFF  1CD,1CF
....................           FPGA_image[addr] = data; 
628E:  CLRF   03
6290:  MOVLB  1
6292:  MOVF   xCC,W
6294:  ADDLW  3E
6296:  MOVWF  FE9
6298:  MOVLW  01
629A:  ADDWFC 03,W
629C:  MOVWF  FEA
629E:  MOVFF  1CD,FEF
....................           send_FPGA_command(2, buf); 
62A2:  MOVLW  02
62A4:  MOVLB  2
62A6:  MOVWF  x3D
62A8:  MOVLW  01
62AA:  MOVWF  x3F
62AC:  MOVLW  CE
62AE:  MOVWF  x3E
62B0:  MOVLB  0
62B2:  CALL   1564
....................           break; 
62B6:  BRA    62E8
....................         case 'D': 
....................           D2A_image[addr] = data; 
62B8:  CLRF   03
62BA:  MOVLB  1
62BC:  MOVF   xCC,W
62BE:  ADDLW  5E
62C0:  MOVWF  FE9
62C2:  MOVLW  01
62C4:  ADDWFC 03,W
62C6:  MOVWF  FEA
62C8:  MOVFF  1CD,FEF
....................           write_D2A(addr, data); 
62CC:  MOVFF  1CC,200
62D0:  MOVFF  1CD,201
62D4:  MOVLB  0
62D6:  CALL   547E
....................           break; 
62DA:  BRA    62E8
....................         case 'V': 
....................           allow_write = 2975; 
62DC:  MOVLW  0B
62DE:  MOVWF  xFE
62E0:  MOVLW  9F
62E2:  MOVWF  xFD
....................           write_setup(); 
62E4:  CALL   304E
....................           break; 
....................         } 
....................       break; 
62E8:  BRA    63DE
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
62EA:  CALL   28AC
62EE:  MOVFF  02,201
62F2:  MOVFF  01,200
62F6:  MOVLB  2
62F8:  MOVF   x01,F
62FA:  BNZ   6302
62FC:  MOVF   x00,W
62FE:  SUBLW  60
6300:  BC    6312
6302:  MOVF   x01,F
6304:  BNZ   6312
6306:  MOVF   x00,W
6308:  SUBLW  7A
630A:  BNC   6312
630C:  MOVF   x00,W
630E:  ANDLW  DF
6310:  BRA    6314
6312:  MOVF   x00,W
6314:  SUBLW  54
6316:  BNZ   63AE
....................         if (toupper(get_char()) == 'C') 
6318:  MOVLB  0
631A:  CALL   28AC
631E:  MOVFF  02,201
6322:  MOVFF  01,200
6326:  MOVLB  2
6328:  MOVF   x01,F
632A:  BNZ   6332
632C:  MOVF   x00,W
632E:  SUBLW  60
6330:  BC    6342
6332:  MOVF   x01,F
6334:  BNZ   6342
6336:  MOVF   x00,W
6338:  SUBLW  7A
633A:  BNC   6342
633C:  MOVF   x00,W
633E:  ANDLW  DF
6340:  BRA    6344
6342:  MOVF   x00,W
6344:  SUBLW  43
6346:  BNZ   63AE
....................           if (toupper(get_char()) == 'C') 
6348:  MOVLB  0
634A:  CALL   28AC
634E:  MOVFF  02,201
6352:  MOVFF  01,200
6356:  MOVLB  2
6358:  MOVF   x01,F
635A:  BNZ   6362
635C:  MOVF   x00,W
635E:  SUBLW  60
6360:  BC    6372
6362:  MOVF   x01,F
6364:  BNZ   6372
6366:  MOVF   x00,W
6368:  SUBLW  7A
636A:  BNC   6372
636C:  MOVF   x00,W
636E:  ANDLW  DF
6370:  BRA    6374
6372:  MOVF   x00,W
6374:  SUBLW  43
6376:  BNZ   63AE
....................             if (toupper(get_char()) == 'P') 
6378:  MOVLB  0
637A:  CALL   28AC
637E:  MOVFF  02,201
6382:  MOVFF  01,200
6386:  MOVLB  2
6388:  MOVF   x01,F
638A:  BNZ   6392
638C:  MOVF   x00,W
638E:  SUBLW  60
6390:  BC    63A2
6392:  MOVF   x01,F
6394:  BNZ   63A2
6396:  MOVF   x00,W
6398:  SUBLW  7A
639A:  BNC   63A2
639C:  MOVF   x00,W
639E:  ANDLW  DF
63A0:  BRA    63A4
63A2:  MOVF   x00,W
63A4:  SUBLW  50
63A6:  BNZ   63AE
....................               ttccp = 1; 
63A8:  MOVLW  01
63AA:  MOVLB  1
63AC:  MOVWF  x3C
....................       break; 
63AE:  MOVLB  0
63B0:  BRA    63DE
....................     case '1': // year 
....................       setup.year = get_int(); 
63B2:  CALL   2968
63B6:  MOVFF  02,F0
63BA:  MOVFF  01,EF
....................       break; 
63BE:  BRA    63DE
....................     case '2': // week 
....................       setup.week = get_int(); 
63C0:  CALL   2968
63C4:  MOVFF  01,F1
....................       break; 
63C8:  BRA    63DE
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
63CA:  CALL   2968
63CE:  MOVFF  02,F3
63D2:  MOVFF  01,F2
....................       break; 
63D6:  BRA    63DE
....................     default: 
....................       return 0; 
63D8:  MOVLW  00
63DA:  MOVWF  01
63DC:  BRA    63E2
....................     } 
....................   return 0; 
63DE:  MOVLW  00
63E0:  MOVWF  01
....................   } 
63E2:  GOTO   6470 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
3076:  RCALL  2968
3078:  MOVFF  01,00
307C:  MOVFF  02,01
3080:  CLRF   02
3082:  CLRF   03
3084:  MOVFF  03,22B
3088:  MOVFF  02,22A
308C:  MOVFF  01,229
3090:  MOVFF  00,228
....................             get_char(); 
3094:  RCALL  28AC
....................             sub = get_int(); 
3096:  RCALL  2968
3098:  MOVFF  01,00
309C:  MOVFF  02,01
30A0:  CLRF   02
30A2:  CLRF   03
30A4:  MOVFF  03,22F
30A8:  MOVFF  02,22E
30AC:  MOVFF  01,22D
30B0:  MOVFF  00,22C
....................  
....................             if (peek_char() == '.') 
30B4:  CALL   288E
30B8:  MOVFF  02,231
30BC:  MOVFF  01,230
30C0:  MOVLB  2
30C2:  MOVF   01,W
30C4:  SUBLW  2E
30C6:  BNZ   3102
30C8:  MOVF   x31,F
30CA:  BNZ   3102
....................               { 
....................               get_char(); 
30CC:  MOVLB  0
30CE:  CALL   28AC
....................               sub = get_int(); 
30D2:  RCALL  2968
30D4:  MOVFF  01,00
30D8:  MOVFF  02,01
30DC:  CLRF   02
30DE:  CLRF   03
30E0:  MOVFF  03,22F
30E4:  MOVFF  02,22E
30E8:  MOVFF  01,22D
30EC:  MOVFF  00,22C
....................               bitrate += sub; 
30F0:  MOVLB  2
30F2:  MOVF   x2C,W
30F4:  ADDWF  x28,F
30F6:  MOVF   x2D,W
30F8:  ADDWFC x29,F
30FA:  MOVF   x2E,W
30FC:  ADDWFC x2A,F
30FE:  MOVF   x2F,W
3100:  ADDWFC x2B,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
3102:  MOVFF  22B,245
3106:  MOVFF  22A,244
310A:  MOVFF  229,243
310E:  MOVFF  228,242
3112:  CLRF   x49
3114:  CLRF   x48
3116:  CLRF   x47
3118:  MOVLW  64
311A:  MOVWF  x46
311C:  MOVLB  0
311E:  CALL   10BC
3122:  MOVLB  2
3124:  MOVF   x2C,W
3126:  ADDWF  00,W
3128:  MOVLB  0
312A:  MOVWF  xAC
312C:  MOVLB  2
312E:  MOVF   x2D,W
3130:  ADDWFC 01,W
3132:  MOVLB  0
3134:  MOVWF  xAD
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
3136:  CALL   1A2C
....................  
....................   } 
313A:  GOTO   45EC (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n\n"); 
*
2A2E:  MOVLW  0D
2A30:  MOVLB  2
2A32:  MOVWF  x28
2A34:  MOVLW  0A
2A36:  MOVWF  x29
2A38:  MOVWF  x2A
2A3A:  CLRF   x2B
2A3C:  MOVLW  02
2A3E:  MOVWF  x67
2A40:  MOVLW  28
2A42:  MOVWF  x66
2A44:  MOVLB  0
2A46:  CALL   2044
....................   COM1_send_str("DS <data soure><cr>  \tSet data sourse (0-1)\r\n"); 
2A4A:  MOVLW  02
2A4C:  MOVWF  FEA
2A4E:  MOVLW  28
2A50:  MOVWF  FE9
2A52:  MOVLW  2E
2A54:  MOVWF  01
2A56:  CLRF   FF7
2A58:  MOVLW  00
2A5A:  CALL   03A6
2A5E:  TBLRD*-
2A60:  TBLRD*+
2A62:  MOVFF  FF5,FEE
2A66:  DECFSZ 01,F
2A68:  BRA    2A60
2A6A:  MOVLW  02
2A6C:  MOVLB  2
2A6E:  MOVWF  x67
2A70:  MOVLW  28
2A72:  MOVWF  x66
2A74:  MOVLB  0
2A76:  CALL   2044
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2A7A:  MOVLW  02
2A7C:  MOVWF  FEA
2A7E:  MOVLW  28
2A80:  MOVWF  FE9
2A82:  MOVLW  33
2A84:  MOVWF  01
2A86:  CLRF   FF7
2A88:  MOVLW  00
2A8A:  CALL   03E4
2A8E:  TBLRD*-
2A90:  TBLRD*+
2A92:  MOVFF  FF5,FEE
2A96:  DECFSZ 01,F
2A98:  BRA    2A90
2A9A:  MOVLW  02
2A9C:  MOVLB  2
2A9E:  MOVWF  x67
2AA0:  MOVLW  28
2AA2:  MOVWF  x66
2AA4:  MOVLB  0
2AA6:  CALL   2044
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2AAA:  MOVLW  02
2AAC:  MOVWF  FEA
2AAE:  MOVLW  28
2AB0:  MOVWF  FE9
2AB2:  MOVLW  31
2AB4:  MOVWF  01
2AB6:  CLRF   FF7
2AB8:  MOVLW  00
2ABA:  CALL   0428
2ABE:  TBLRD*-
2AC0:  TBLRD*+
2AC2:  MOVFF  FF5,FEE
2AC6:  DECFSZ 01,F
2AC8:  BRA    2AC0
2ACA:  MOVLW  02
2ACC:  MOVLB  2
2ACE:  MOVWF  x67
2AD0:  MOVLW  28
2AD2:  MOVWF  x66
2AD4:  MOVLB  0
2AD6:  CALL   2044
....................   COM1_send_str("RP <power higth><cr>  \tSet power higth (0-1)\r\n"); 
2ADA:  MOVLW  02
2ADC:  MOVWF  FEA
2ADE:  MOVLW  28
2AE0:  MOVWF  FE9
2AE2:  MOVLW  2F
2AE4:  MOVWF  01
2AE6:  CLRF   FF7
2AE8:  MOVLW  00
2AEA:  CALL   046A
2AEE:  TBLRD*-
2AF0:  TBLRD*+
2AF2:  MOVFF  FF5,FEE
2AF6:  DECFSZ 01,F
2AF8:  BRA    2AF0
2AFA:  MOVLW  02
2AFC:  MOVLB  2
2AFE:  MOVWF  x67
2B00:  MOVLW  28
2B02:  MOVWF  x66
2B04:  MOVLB  0
2B06:  CALL   2044
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2B0A:  MOVLW  02
2B0C:  MOVWF  FEA
2B0E:  MOVLW  28
2B10:  MOVWF  FE9
2B12:  MOVLW  31
2B14:  MOVWF  01
2B16:  CLRF   FF7
2B18:  MOVLW  00
2B1A:  CALL   04AA
2B1E:  TBLRD*-
2B20:  TBLRD*+
2B22:  MOVFF  FF5,FEE
2B26:  DECFSZ 01,F
2B28:  BRA    2B20
2B2A:  MOVLW  02
2B2C:  MOVLB  2
2B2E:  MOVWF  x67
2B30:  MOVLW  28
2B32:  MOVWF  x66
2B34:  MOVLB  0
2B36:  CALL   2044
....................   COM1_send_str("RA <randomizer><cr>  \tset with/without randomizer (0-1)\r\n"); 
2B3A:  MOVLW  02
2B3C:  MOVWF  FEA
2B3E:  MOVLW  28
2B40:  MOVWF  FE9
2B42:  MOVLW  3A
2B44:  MOVWF  01
2B46:  CLRF   FF7
2B48:  MOVLW  00
2B4A:  CALL   04EC
2B4E:  TBLRD*-
2B50:  TBLRD*+
2B52:  MOVFF  FF5,FEE
2B56:  DECFSZ 01,F
2B58:  BRA    2B50
2B5A:  MOVLW  02
2B5C:  MOVLB  2
2B5E:  MOVWF  x67
2B60:  MOVLW  28
2B62:  MOVWF  x66
2B64:  MOVLB  0
2B66:  CALL   2044
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2B6A:  MOVLW  02
2B6C:  MOVWF  FEA
2B6E:  MOVLW  28
2B70:  MOVWF  FE9
2B72:  MOVLW  35
2B74:  MOVWF  01
2B76:  CLRF   FF7
2B78:  MOVLW  00
2B7A:  CALL   0536
2B7E:  TBLRD*-
2B80:  TBLRD*+
2B82:  MOVFF  FF5,FEE
2B86:  DECFSZ 01,F
2B88:  BRA    2B80
2B8A:  MOVLW  02
2B8C:  MOVLB  2
2B8E:  MOVWF  x67
2B90:  MOVLW  28
2B92:  MOVWF  x66
2B94:  MOVLB  0
2B96:  CALL   2044
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2B9A:  MOVLW  02
2B9C:  MOVWF  FEA
2B9E:  MOVLW  28
2BA0:  MOVWF  FE9
2BA2:  MOVLW  21
2BA4:  MOVWF  01
2BA6:  CLRF   FF7
2BA8:  MOVLW  00
2BAA:  CALL   057C
2BAE:  TBLRD*-
2BB0:  TBLRD*+
2BB2:  MOVFF  FF5,FEE
2BB6:  DECFSZ 01,F
2BB8:  BRA    2BB0
2BBA:  MOVLW  02
2BBC:  MOVLB  2
2BBE:  MOVWF  x67
2BC0:  MOVLW  28
2BC2:  MOVWF  x66
2BC4:  MOVLB  0
2BC6:  CALL   2044
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2BCA:  MOVLW  02
2BCC:  MOVWF  FEA
2BCE:  MOVLW  28
2BD0:  MOVWF  FE9
2BD2:  MOVLW  32
2BD4:  MOVWF  01
2BD6:  CLRF   FF7
2BD8:  MOVLW  00
2BDA:  CALL   05AE
2BDE:  TBLRD*-
2BE0:  TBLRD*+
2BE2:  MOVFF  FF5,FEE
2BE6:  DECFSZ 01,F
2BE8:  BRA    2BE0
2BEA:  MOVLW  02
2BEC:  MOVLB  2
2BEE:  MOVWF  x67
2BF0:  MOVLW  28
2BF2:  MOVWF  x66
2BF4:  MOVLB  0
2BF6:  CALL   2044
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2BFA:  MOVLW  02
2BFC:  MOVWF  FEA
2BFE:  MOVLW  28
2C00:  MOVWF  FE9
2C02:  MOVLW  39
2C04:  MOVWF  01
2C06:  CLRF   FF7
2C08:  MOVLW  00
2C0A:  CALL   05F0
2C0E:  TBLRD*-
2C10:  TBLRD*+
2C12:  MOVFF  FF5,FEE
2C16:  DECFSZ 01,F
2C18:  BRA    2C10
2C1A:  MOVLW  02
2C1C:  MOVLB  2
2C1E:  MOVWF  x67
2C20:  MOVLW  28
2C22:  MOVWF  x66
2C24:  MOVLB  0
2C26:  CALL   2044
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2C2A:  MOVLW  02
2C2C:  MOVWF  FEA
2C2E:  MOVLW  28
2C30:  MOVWF  FE9
2C32:  MOVLW  31
2C34:  MOVWF  01
2C36:  CLRF   FF7
2C38:  MOVLW  00
2C3A:  CALL   063A
2C3E:  TBLRD*-
2C40:  TBLRD*+
2C42:  MOVFF  FF5,FEE
2C46:  DECFSZ 01,F
2C48:  BRA    2C40
2C4A:  MOVLW  02
2C4C:  MOVLB  2
2C4E:  MOVWF  x67
2C50:  MOVLW  28
2C52:  MOVWF  x66
2C54:  MOVLB  0
2C56:  CALL   2044
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2C5A:  MOVLW  02
2C5C:  MOVWF  FEA
2C5E:  MOVLW  28
2C60:  MOVWF  FE9
2C62:  MOVLW  35
2C64:  MOVWF  01
2C66:  CLRF   FF7
2C68:  MOVLW  00
2C6A:  CALL   067C
2C6E:  TBLRD*-
2C70:  TBLRD*+
2C72:  MOVFF  FF5,FEE
2C76:  DECFSZ 01,F
2C78:  BRA    2C70
2C7A:  MOVLW  02
2C7C:  MOVLB  2
2C7E:  MOVWF  x67
2C80:  MOVLW  28
2C82:  MOVWF  x66
2C84:  MOVLB  0
2C86:  CALL   2044
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2C8A:  MOVLW  02
2C8C:  MOVWF  FEA
2C8E:  MOVLW  28
2C90:  MOVWF  FE9
2C92:  MOVLW  3B
2C94:  MOVWF  01
2C96:  CLRF   FF7
2C98:  MOVLW  00
2C9A:  CALL   06C2
2C9E:  TBLRD*-
2CA0:  TBLRD*+
2CA2:  MOVFF  FF5,FEE
2CA6:  DECFSZ 01,F
2CA8:  BRA    2CA0
2CAA:  MOVLW  02
2CAC:  MOVLB  2
2CAE:  MOVWF  x67
2CB0:  MOVLW  28
2CB2:  MOVWF  x66
2CB4:  MOVLB  0
2CB6:  CALL   2044
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2CBA:  MOVLW  02
2CBC:  MOVWF  FEA
2CBE:  MOVLW  28
2CC0:  MOVWF  FE9
2CC2:  MOVLW  3B
2CC4:  MOVWF  01
2CC6:  CLRF   FF7
2CC8:  MOVLW  00
2CCA:  CALL   070E
2CCE:  TBLRD*-
2CD0:  TBLRD*+
2CD2:  MOVFF  FF5,FEE
2CD6:  DECFSZ 01,F
2CD8:  BRA    2CD0
2CDA:  MOVLW  02
2CDC:  MOVLB  2
2CDE:  MOVWF  x67
2CE0:  MOVLW  28
2CE2:  MOVWF  x66
2CE4:  MOVLB  0
2CE6:  CALL   2044
....................   COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2CEA:  MOVLW  02
2CEC:  MOVWF  FEA
2CEE:  MOVLW  28
2CF0:  MOVWF  FE9
2CF2:  MOVLW  2F
2CF4:  MOVWF  01
2CF6:  CLRF   FF7
2CF8:  MOVLW  00
2CFA:  CALL   075A
2CFE:  TBLRD*-
2D00:  TBLRD*+
2D02:  MOVFF  FF5,FEE
2D06:  DECFSZ 01,F
2D08:  BRA    2D00
2D0A:  MOVLW  02
2D0C:  MOVLB  2
2D0E:  MOVWF  x67
2D10:  MOVLW  28
2D12:  MOVWF  x66
2D14:  MOVLB  0
2D16:  CALL   2044
....................   COM1_send_str("UT <UART Time><cr>  \tSet the stop time current 15 (0-240)\r\n"); 
2D1A:  MOVLW  02
2D1C:  MOVWF  FEA
2D1E:  MOVLW  28
2D20:  MOVWF  FE9
2D22:  MOVLW  3C
2D24:  MOVWF  01
2D26:  CLRF   FF7
2D28:  MOVLW  00
2D2A:  CALL   079A
2D2E:  TBLRD*-
2D30:  TBLRD*+
2D32:  MOVFF  FF5,FEE
2D36:  DECFSZ 01,F
2D38:  BRA    2D30
2D3A:  MOVLW  02
2D3C:  MOVLB  2
2D3E:  MOVWF  x67
2D40:  MOVLW  28
2D42:  MOVWF  x66
2D44:  MOVLB  0
2D46:  CALL   2044
....................   COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n"); 
2D4A:  MOVLW  02
2D4C:  MOVWF  FEA
2D4E:  MOVLW  28
2D50:  MOVWF  FE9
2D52:  MOVLW  2D
2D54:  MOVWF  01
2D56:  CLRF   FF7
2D58:  MOVLW  00
2D5A:  CALL   07E6
2D5E:  TBLRD*-
2D60:  TBLRD*+
2D62:  MOVFF  FF5,FEE
2D66:  DECFSZ 01,F
2D68:  BRA    2D60
2D6A:  MOVLW  02
2D6C:  MOVLB  2
2D6E:  MOVWF  x67
2D70:  MOVLW  28
2D72:  MOVWF  x66
2D74:  MOVLB  0
2D76:  CALL   2044
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2D7A:  MOVLW  02
2D7C:  MOVWF  FEA
2D7E:  MOVLW  28
2D80:  MOVWF  FE9
2D82:  MOVLW  25
2D84:  MOVWF  01
2D86:  CLRF   FF7
2D88:  MOVLW  00
2D8A:  CALL   0824
2D8E:  TBLRD*-
2D90:  TBLRD*+
2D92:  MOVFF  FF5,FEE
2D96:  DECFSZ 01,F
2D98:  BRA    2D90
2D9A:  MOVLW  02
2D9C:  MOVLB  2
2D9E:  MOVWF  x67
2DA0:  MOVLW  28
2DA2:  MOVWF  x66
2DA4:  MOVLB  0
2DA6:  CALL   2044
....................   COM1_send_str("\r\n"); 
2DAA:  MOVLW  0D
2DAC:  MOVLB  2
2DAE:  MOVWF  x28
2DB0:  MOVLW  0A
2DB2:  MOVWF  x29
2DB4:  CLRF   x2A
2DB6:  MOVLW  02
2DB8:  MOVWF  x67
2DBA:  MOVLW  28
2DBC:  MOVWF  x66
2DBE:  MOVLB  0
2DC0:  CALL   2044
....................   } 
2DC4:  GOTO   52DC (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
3496:  MOVLB  1
3498:  CLRF   xBC
349A:  CLRF   xE6
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, bitrate, sub; 
....................   float temp; 
....................   UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
....................   chr = 2; 
349C:  MOVLW  02
349E:  MOVWF  xBD
....................   comm_ptr = 0; 
34A0:  CLRF   x3B
....................     if (peek_char() == ':') // addressed message? 
34A2:  MOVLB  0
34A4:  CALL   288E
34A8:  MOVFF  02,229
34AC:  MOVFF  01,228
34B0:  MOVLB  2
34B2:  MOVF   01,W
34B4:  SUBLW  3A
34B6:  BNZ   34F6
34B8:  MOVF   x29,F
34BA:  BNZ   34F6
....................     { 
....................     get_char(); // skip ':' 
34BC:  MOVLB  0
34BE:  CALL   28AC
....................     addr = get_int(); 
34C2:  CALL   2968
34C6:  MOVFF  01,1F5
....................     if (get_char() != ':') 
34CA:  CALL   28AC
34CE:  MOVFF  02,229
34D2:  MOVFF  01,228
34D6:  MOVLB  2
34D8:  MOVF   01,W
34DA:  SUBLW  3A
34DC:  BNZ   34E2
34DE:  MOVF   x29,F
34E0:  BNZ   34E2
....................       break; 
....................     if (setup.unit_id != addr) 
34E2:  MOVLB  1
34E4:  MOVF   xF5,W
34E6:  MOVLB  0
34E8:  SUBWF  xF2,W
34EA:  BNZ   34F0
34EC:  MOVF   xF3,F
34EE:  BZ    34F4
....................       goto aaa; 
34F0:  GOTO   52DC
34F4:  MOVLB  2
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
34F6:  MOVLB  0
34F8:  CALL   28AC
34FC:  MOVFF  02,229
3500:  MOVFF  01,228
3504:  MOVLB  2
3506:  MOVF   x29,F
3508:  BNZ   3510
350A:  MOVF   x28,W
350C:  SUBLW  60
350E:  BC    3520
3510:  MOVF   x29,F
3512:  BNZ   3520
3514:  MOVF   x28,W
3516:  SUBLW  7A
3518:  BNC   3520
351A:  MOVF   x28,W
351C:  ANDLW  DF
351E:  BRA    3522
3520:  MOVF   x28,W
3522:  MOVLB  1
3524:  MOVWF  xE7
....................   c2 = toupper(get_char()); 
3526:  MOVLB  0
3528:  CALL   28AC
352C:  MOVFF  02,229
3530:  MOVFF  01,228
3534:  MOVLB  2
3536:  MOVF   x29,F
3538:  BNZ   3540
353A:  MOVF   x28,W
353C:  SUBLW  60
353E:  BC    3550
3540:  MOVF   x29,F
3542:  BNZ   3550
3544:  MOVF   x28,W
3546:  SUBLW  7A
3548:  BNC   3550
354A:  MOVF   x28,W
354C:  ANDLW  DF
354E:  BRA    3552
3550:  MOVF   x28,W
3552:  MOVLB  1
3554:  MOVWF  xE8
....................   skip_spc(); 
3556:  MOVLB  0
3558:  CALL   28CC
....................  
....................   if (peek_char() == 13) // is this a query? 
355C:  CALL   288E
3560:  MOVFF  02,229
3564:  MOVFF  01,228
3568:  MOVLB  2
356A:  MOVF   01,W
356C:  SUBLW  0D
356E:  BNZ   357C
3570:  MOVF   x29,F
3572:  BNZ   357C
....................     query = 1; // YES 
3574:  MOVLW  01
3576:  MOVLB  1
3578:  MOVWF  xE6
357A:  MOVLB  2
....................   switch (c1) 
....................     { 
357C:  MOVLB  1
357E:  MOVF   xE7,W
3580:  XORLW  4C
3582:  MOVLB  0
3584:  BZ    35F4
3586:  XORLW  68
3588:  BZ    3638
358A:  XORLW  6C
358C:  BTFSC  FD8.2
358E:  BRA    3696
3590:  XORLW  0E
3592:  BTFSC  FD8.2
3594:  BRA    36DC
3596:  XORLW  0B
3598:  BTFSC  FD8.2
359A:  BRA    37D4
359C:  XORLW  09
359E:  BTFSC  FD8.2
35A0:  BRA    38DA
35A2:  XORLW  16
35A4:  BTFSC  FD8.2
35A6:  BRA    3BE8
35A8:  XORLW  05
35AA:  BTFSC  FD8.2
35AC:  GOTO   4218
35B0:  XORLW  04
35B2:  BTFSC  FD8.2
35B4:  GOTO   4236
35B8:  XORLW  06
35BA:  BTFSC  FD8.2
35BC:  GOTO   4274
35C0:  XORLW  1C
35C2:  BTFSC  FD8.2
35C4:  GOTO   447E
35C8:  XORLW  1D
35CA:  BTFSC  FD8.2
35CC:  GOTO   45F8
35D0:  XORLW  02
35D2:  BTFSC  FD8.2
35D4:  GOTO   4614
35D8:  XORLW  15
35DA:  BTFSC  FD8.2
35DC:  GOTO   48DC
35E0:  XORLW  04
35E2:  BTFSC  FD8.2
35E4:  GOTO   4AEA
35E8:  XORLW  16
35EA:  BTFSC  FD8.2
35EC:  GOTO   4D9E
35F0:  GOTO   529E
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
35F4:  MOVLB  1
35F6:  MOVF   xE8,W
35F8:  XORLW  49
35FA:  MOVLB  0
35FC:  BZ    3604
35FE:  XORLW  06
3600:  BZ    362E
3602:  BRA    3634
....................         case 'I':               // login 
....................           val = get_int(); 
3604:  CALL   2968
3608:  MOVFF  02,207
360C:  MOVFF  01,206
....................           if (val == 17592) 
3610:  MOVLB  2
3612:  MOVF   x06,W
3614:  SUBLW  B8
3616:  BNZ   3624
3618:  MOVF   x07,W
361A:  SUBLW  44
361C:  BNZ   3624
....................             ttccp_login = 1; 
361E:  MOVLW  01
3620:  MOVLB  1
3622:  MOVWF  x25
.................... 			debug_mode = 1; 
3624:  MOVLW  01
3626:  MOVLB  1
3628:  MOVWF  x3D
....................           break; 
362A:  MOVLB  0
362C:  BRA    3634
....................         case 'O':              // logout 
....................           ttccp_login = 0; 
362E:  MOVLB  1
3630:  CLRF   x25
....................           break; 
3632:  MOVLB  0
....................         } 
....................       break; 
3634:  GOTO   52DC
....................     case '$': 
....................       if (!ttccp_login) break; 
3638:  MOVLB  1
363A:  MOVF   x25,F
363C:  BNZ   3646
363E:  MOVLB  0
3640:  GOTO   52DC
3644:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
3646:  MOVF   xE8,W
3648:  SUBLW  52
364A:  BNZ   3690
....................         { 
....................         val = get_int(); 
364C:  MOVLB  0
364E:  CALL   2968
3652:  MOVFF  02,207
3656:  MOVFF  01,206
....................           if (val != 17591) 
365A:  MOVLB  2
365C:  MOVF   x06,W
365E:  SUBLW  B7
3660:  BNZ   3668
3662:  MOVF   x07,W
3664:  SUBLW  44
3666:  BZ    366C
....................             return; 
3668:  GOTO   52DE
....................         ttccp = 0; 
366C:  MOVLB  1
366E:  CLRF   x3C
....................         COM1_send_str("\r\n\n*"); 
3670:  MOVLW  0D
3672:  MOVLB  2
3674:  MOVWF  x0A
3676:  MOVLW  0A
3678:  MOVWF  x0B
367A:  MOVWF  x0C
367C:  MOVLW  2A
367E:  MOVWF  x0D
3680:  CLRF   x0E
3682:  MOVLW  02
3684:  MOVWF  x67
3686:  MOVLW  0A
3688:  MOVWF  x66
368A:  MOVLB  0
368C:  CALL   2044
....................         } 
....................       break; 
3690:  MOVLB  0
3692:  GOTO   52DC
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
3696:  MOVLB  1
3698:  MOVF   x25,F
369A:  BNZ   36A4
369C:  MOVLB  0
369E:  GOTO   52DC
36A2:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r"); 
36A4:  MOVLW  02
36A6:  MOVWF  FEA
36A8:  MOVLW  0F
36AA:  MOVWF  FE9
36AC:  MOVWF  01
36AE:  CLRF   FF7
36B0:  MOVLW  00
36B2:  MOVLB  0
36B4:  CALL   085A
36B8:  TBLRD*-
36BA:  TBLRD*+
36BC:  MOVFF  FF5,FEE
36C0:  DECFSZ 01,F
36C2:  BRA    36BA
36C4:  MOVLW  02
36C6:  MOVLB  2
36C8:  MOVWF  x67
36CA:  MOVLW  0F
36CC:  MOVWF  x66
36CE:  MOVLB  0
36D0:  CALL   2044
....................       list_help(); 
36D4:  GOTO   2A2E
....................     break; 
36D8:  GOTO   52DC
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
36DC:  MOVLB  1
36DE:  MOVF   x25,F
36E0:  BNZ   36EA
36E2:  MOVLB  0
36E4:  GOTO   52DC
36E8:  MOVLB  1
....................       switch (c2) 
....................         { 
36EA:  MOVF   xE8,W
36EC:  XORLW  52
36EE:  MOVLB  0
36F0:  BZ    36F4
36F2:  BRA    37D0
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
36F4:  MOVLB  1
36F6:  MOVF   xE8,W
36F8:  SUBLW  52
36FA:  BNZ   379E
....................             { 
....................             if (query) 
36FC:  MOVF   xE6,F
36FE:  BZ    374C
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
3700:  MOVLW  01
3702:  MOVWF  x9E
3704:  MOVLW  BE
3706:  MOVWF  x9D
3708:  MOVLW  04
370A:  MOVWF  FF6
370C:  MOVLW  0B
370E:  MOVWF  FF7
3710:  MOVLW  03
3712:  MOVLB  2
3714:  MOVWF  x2E
3716:  MOVLB  0
3718:  CALL   2DEA
371C:  MOVLW  10
371E:  MOVWF  FE9
3720:  MOVFF  BB,22F
3724:  MOVFF  BA,22E
3728:  CALL   2E12
372C:  MOVLW  0D
372E:  MOVLB  2
3730:  MOVWF  x37
3732:  MOVLB  0
3734:  CALL   2DC8
....................               COM1_send_str(buf); 
3738:  MOVLW  01
373A:  MOVLB  2
373C:  MOVWF  x67
373E:  MOVLW  BE
3740:  MOVWF  x66
3742:  MOVLB  0
3744:  CALL   2044
....................               } 
....................               else 
3748:  BRA    379A
374A:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
374C:  MOVLB  0
374E:  CALL   2ECE
3752:  MOVLB  1
3754:  CLRF   xF9
3756:  CLRF   xF8
3758:  MOVFF  02,1F7
375C:  MOVFF  01,1F6
....................                 setup.frequency = freq; 
3760:  MOVFF  1F7,BB
3764:  MOVFF  1F6,BA
....................                 PLL_compute_freq_parameters(freq); 
3768:  MOVFF  1F7,229
376C:  MOVFF  1F6,228
3770:  MOVFF  1F7,231
3774:  MOVFF  1F6,230
3778:  MOVLB  0
377A:  CALL   11AC
....................                 PLL_update(); 
377E:  CALL   147C
.................... 				delay_ms(50); 
3782:  MOVLW  32
3784:  MOVLB  2
3786:  MOVWF  x3D
3788:  MOVLB  0
378A:  CALL   0DBA
.................... 				PLL_update(); 
378E:  CALL   147C
....................                 ret = 1; 
3792:  MOVLW  01
3794:  MOVLB  1
3796:  MOVWF  xBC
3798:  MOVLB  0
....................               } 
....................             } 
....................             else 
379A:  BRA    37D0
379C:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
379E:  MOVLW  02
37A0:  MOVWF  FEA
37A2:  MOVLW  0F
37A4:  MOVWF  FE9
37A6:  MOVLW  0A
37A8:  MOVWF  01
37AA:  CLRF   FF7
37AC:  MOVLW  00
37AE:  MOVLB  0
37B0:  CALL   087A
37B4:  TBLRD*-
37B6:  TBLRD*+
37B8:  MOVFF  FF5,FEE
37BC:  DECFSZ 01,F
37BE:  BRA    37B6
37C0:  MOVLW  02
37C2:  MOVLB  2
37C4:  MOVWF  x67
37C6:  MOVLW  0F
37C8:  MOVWF  x66
37CA:  MOVLB  0
37CC:  CALL   2044
....................           break; 
....................         } 
....................       break; 
37D0:  GOTO   52DC
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
37D4:  MOVLB  1
37D6:  MOVF   x25,F
37D8:  BNZ   37E2
37DA:  MOVLB  0
37DC:  GOTO   52DC
37E0:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
37E2:  MOVF   xE8,W
37E4:  SUBLW  4F
37E6:  BNZ   38A2
....................           { 
....................             if(query) 
37E8:  MOVF   xE6,F
37EA:  BZ    3834
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
37EC:  MOVLW  01
37EE:  MOVWF  x9E
37F0:  MOVLW  BE
37F2:  MOVWF  x9D
37F4:  MOVLW  0C
37F6:  MOVWF  FF6
37F8:  MOVLW  0B
37FA:  MOVWF  FF7
37FC:  MOVLW  03
37FE:  MOVLB  2
3800:  MOVWF  x2E
3802:  MOVLB  0
3804:  CALL   2DEA
3808:  MOVFF  B0,22E
380C:  MOVLW  1B
380E:  MOVLB  2
3810:  MOVWF  x2F
3812:  MOVLB  0
3814:  CALL   2F62
3818:  MOVLW  0D
381A:  MOVLB  2
381C:  MOVWF  x37
381E:  MOVLB  0
3820:  CALL   2DC8
....................             COM1_send_str(buf); 
3824:  MOVLW  01
3826:  MOVLB  2
3828:  MOVWF  x67
382A:  MOVLW  BE
382C:  MOVWF  x66
382E:  MOVLB  0
3830:  CALL   2044
....................             } 
....................           val = get_int(); 
3834:  MOVLB  0
3836:  CALL   2968
383A:  MOVFF  02,207
383E:  MOVFF  01,206
....................           if (val <= 3) 
3842:  MOVLB  2
3844:  MOVF   x07,F
3846:  BNZ   3862
3848:  MOVF   x06,W
384A:  SUBLW  03
384C:  BNC   3862
....................             { 
....................             setup.mode = val; 
384E:  MOVFF  206,B0
....................             FPGA_set_reg0(); 
3852:  MOVLB  0
3854:  CALL   15D2
....................             ret = 1; 
3858:  MOVLW  01
385A:  MOVLB  1
385C:  MOVWF  xBC
....................             } 
....................           else 
385E:  BRA    38A0
3860:  MOVLB  2
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
3862:  MOVLW  02
3864:  MOVWF  FEA
3866:  MOVLW  0F
3868:  MOVWF  FE9
386A:  MOVLW  09
386C:  MOVWF  01
386E:  CLRF   FF7
3870:  MOVLW  00
3872:  MOVLB  0
3874:  CALL   0894
3878:  TBLRD*-
387A:  TBLRD*+
387C:  MOVFF  FF5,FEE
3880:  DECFSZ 01,F
3882:  BRA    387A
3884:  MOVLW  02
3886:  MOVLB  2
3888:  MOVWF  x67
388A:  MOVLW  0F
388C:  MOVWF  x66
388E:  MOVLB  0
3890:  CALL   2044
....................             ret = 0; 
3894:  MOVLB  1
3896:  CLRF   xBC
....................             break; 
3898:  MOVLB  0
389A:  GOTO   52DC
389E:  MOVLB  1
....................             } 
....................           } 
....................           else 
38A0:  BRA    38D4
....................               COM1_send_str("\r\nFAIL\r\n"); 
38A2:  MOVLW  02
38A4:  MOVWF  FEA
38A6:  MOVLW  0F
38A8:  MOVWF  FE9
38AA:  MOVLW  09
38AC:  MOVWF  01
38AE:  CLRF   FF7
38B0:  MOVLW  00
38B2:  MOVLB  0
38B4:  CALL   0894
38B8:  TBLRD*-
38BA:  TBLRD*+
38BC:  MOVFF  FF5,FEE
38C0:  DECFSZ 01,F
38C2:  BRA    38BA
38C4:  MOVLW  02
38C6:  MOVLB  2
38C8:  MOVWF  x67
38CA:  MOVLW  0F
38CC:  MOVWF  x66
38CE:  MOVLB  0
38D0:  CALL   2044
....................       break; 
38D4:  MOVLB  0
38D6:  GOTO   52DC
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
38DA:  MOVLB  1
38DC:  MOVF   x25,F
38DE:  BNZ   38E8
38E0:  MOVLB  0
38E2:  GOTO   52DC
38E6:  MOVLB  1
....................       switch (c2) 
....................         { 
38E8:  MOVF   xE8,W
38EA:  XORLW  53
38EC:  MOVLB  0
38EE:  BZ    38FE
38F0:  XORLW  03
38F2:  BTFSC  FD8.2
38F4:  BRA    39F6
38F6:  XORLW  15
38F8:  BTFSC  FD8.2
38FA:  BRA    3AEE
38FC:  BRA    3BE4
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
38FE:  MOVLB  1
3900:  MOVF   xE6,F
3902:  BZ    3950
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
3904:  MOVLW  01
3906:  MOVWF  x9E
3908:  MOVLW  BE
390A:  MOVWF  x9D
390C:  MOVLW  14
390E:  MOVWF  FF6
3910:  MOVLW  0B
3912:  MOVWF  FF7
3914:  MOVLW  03
3916:  MOVLB  2
3918:  MOVWF  x2E
391A:  MOVLB  0
391C:  CALL   2DEA
3920:  MOVFF  B4,22E
3924:  MOVLW  1B
3926:  MOVLB  2
3928:  MOVWF  x2F
392A:  MOVLB  0
392C:  CALL   2F62
3930:  MOVLW  0D
3932:  MOVLB  2
3934:  MOVWF  x37
3936:  MOVLB  0
3938:  CALL   2DC8
....................             COM1_send_str(buf); 
393C:  MOVLW  01
393E:  MOVLB  2
3940:  MOVWF  x67
3942:  MOVLW  BE
3944:  MOVWF  x66
3946:  MOVLB  0
3948:  CALL   2044
....................             } 
....................           else 
394C:  BRA    39EC
394E:  MOVLB  1
....................             { 
....................             val = get_int(); 
3950:  MOVLB  0
3952:  CALL   2968
3956:  MOVFF  02,207
395A:  MOVFF  01,206
....................             if (val < 2) 
395E:  MOVLB  2
3960:  MOVF   x07,F
3962:  BNZ   3978
3964:  MOVF   x06,W
3966:  SUBLW  01
3968:  BNC   3978
....................               { 
....................               setup.data_source = val; 
396A:  MOVFF  206,B4
....................               FPGA_set_reg6(); 
396E:  MOVLB  0
3970:  CALL   162E
....................               } 
....................             else 
3974:  BRA    39EC
3976:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3978:  MOVLW  02
397A:  MOVWF  FEA
397C:  MOVLW  0F
397E:  MOVWF  FE9
3980:  MOVLW  09
3982:  MOVWF  01
3984:  CLRF   FF7
3986:  MOVLW  00
3988:  MOVLB  0
398A:  CALL   0894
398E:  TBLRD*-
3990:  TBLRD*+
3992:  MOVFF  FF5,FEE
3996:  DECFSZ 01,F
3998:  BRA    3990
399A:  MOVLW  02
399C:  MOVLB  2
399E:  MOVWF  x67
39A0:  MOVLW  0F
39A2:  MOVWF  x66
39A4:  MOVLB  0
39A6:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
39AA:  MOVLW  01
39AC:  MOVLB  1
39AE:  MOVWF  x9E
39B0:  MOVLW  72
39B2:  MOVWF  x9D
39B4:  MOVLW  1C
39B6:  MOVWF  FF6
39B8:  MOVLW  0B
39BA:  MOVWF  FF7
39BC:  MOVLW  07
39BE:  MOVLB  2
39C0:  MOVWF  x2E
39C2:  MOVLB  0
39C4:  CALL   2DEA
39C8:  MOVFF  B4,22E
39CC:  MOVLW  1B
39CE:  MOVLB  2
39D0:  MOVWF  x2F
39D2:  MOVLB  0
39D4:  CALL   2F62
39D8:  MOVLW  0D
39DA:  MOVLB  2
39DC:  MOVWF  x37
39DE:  MOVLB  0
39E0:  CALL   2DC8
....................               ret = 0; 
39E4:  MOVLB  1
39E6:  CLRF   xBC
....................               break; 
39E8:  MOVLB  0
39EA:  BRA    3BE4
....................               } 
....................             } 
....................           ret = 1; 
39EC:  MOVLW  01
39EE:  MOVLB  1
39F0:  MOVWF  xBC
....................           break; 
39F2:  MOVLB  0
39F4:  BRA    3BE4
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
39F6:  MOVLB  1
39F8:  MOVF   xE6,F
39FA:  BZ    3A48
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
39FC:  MOVLW  01
39FE:  MOVWF  x9E
3A00:  MOVLW  BE
3A02:  MOVWF  x9D
3A04:  MOVLW  28
3A06:  MOVWF  FF6
3A08:  MOVLW  0B
3A0A:  MOVWF  FF7
3A0C:  MOVLW  03
3A0E:  MOVLB  2
3A10:  MOVWF  x2E
3A12:  MOVLB  0
3A14:  CALL   2DEA
3A18:  MOVFF  B2,22E
3A1C:  MOVLW  1B
3A1E:  MOVLB  2
3A20:  MOVWF  x2F
3A22:  MOVLB  0
3A24:  CALL   2F62
3A28:  MOVLW  0D
3A2A:  MOVLB  2
3A2C:  MOVWF  x37
3A2E:  MOVLB  0
3A30:  CALL   2DC8
....................             COM1_send_str(buf); 
3A34:  MOVLW  01
3A36:  MOVLB  2
3A38:  MOVWF  x67
3A3A:  MOVLW  BE
3A3C:  MOVWF  x66
3A3E:  MOVLB  0
3A40:  CALL   2044
....................             } 
....................           else 
3A44:  BRA    3AE4
3A46:  MOVLB  1
....................             { 
....................             val = get_int(); 
3A48:  MOVLB  0
3A4A:  CALL   2968
3A4E:  MOVFF  02,207
3A52:  MOVFF  01,206
....................             if (val < 2) 
3A56:  MOVLB  2
3A58:  MOVF   x07,F
3A5A:  BNZ   3A70
3A5C:  MOVF   x06,W
3A5E:  SUBLW  01
3A60:  BNC   3A70
....................               { 
....................               setup.data_polarity = val; 
3A62:  MOVFF  206,B2
....................               FPGA_set_reg0(); 
3A66:  MOVLB  0
3A68:  CALL   15D2
....................               } 
....................             else 
3A6C:  BRA    3AE4
3A6E:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3A70:  MOVLW  02
3A72:  MOVWF  FEA
3A74:  MOVLW  0F
3A76:  MOVWF  FE9
3A78:  MOVLW  09
3A7A:  MOVWF  01
3A7C:  CLRF   FF7
3A7E:  MOVLW  00
3A80:  MOVLB  0
3A82:  CALL   0894
3A86:  TBLRD*-
3A88:  TBLRD*+
3A8A:  MOVFF  FF5,FEE
3A8E:  DECFSZ 01,F
3A90:  BRA    3A88
3A92:  MOVLW  02
3A94:  MOVLB  2
3A96:  MOVWF  x67
3A98:  MOVLW  0F
3A9A:  MOVWF  x66
3A9C:  MOVLB  0
3A9E:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3AA2:  MOVLW  01
3AA4:  MOVLB  1
3AA6:  MOVWF  x9E
3AA8:  MOVLW  72
3AAA:  MOVWF  x9D
3AAC:  MOVLW  30
3AAE:  MOVWF  FF6
3AB0:  MOVLW  0B
3AB2:  MOVWF  FF7
3AB4:  MOVLW  07
3AB6:  MOVLB  2
3AB8:  MOVWF  x2E
3ABA:  MOVLB  0
3ABC:  CALL   2DEA
3AC0:  MOVFF  B2,22E
3AC4:  MOVLW  1B
3AC6:  MOVLB  2
3AC8:  MOVWF  x2F
3ACA:  MOVLB  0
3ACC:  CALL   2F62
3AD0:  MOVLW  0D
3AD2:  MOVLB  2
3AD4:  MOVWF  x37
3AD6:  MOVLB  0
3AD8:  CALL   2DC8
....................               ret = 0; 
3ADC:  MOVLB  1
3ADE:  CLRF   xBC
....................               break; 
3AE0:  MOVLB  0
3AE2:  BRA    3BE4
....................               } 
....................             } 
....................           ret = 1; 
3AE4:  MOVLW  01
3AE6:  MOVLB  1
3AE8:  MOVWF  xBC
....................           break; 
3AEA:  MOVLB  0
3AEC:  BRA    3BE4
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
3AEE:  MOVLB  1
3AF0:  MOVF   xE6,F
3AF2:  BZ    3B40
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
3AF4:  MOVLW  01
3AF6:  MOVWF  x9E
3AF8:  MOVLW  BE
3AFA:  MOVWF  x9D
3AFC:  MOVLW  3C
3AFE:  MOVWF  FF6
3B00:  MOVLW  0B
3B02:  MOVWF  FF7
3B04:  MOVLW  03
3B06:  MOVLB  2
3B08:  MOVWF  x2E
3B0A:  MOVLB  0
3B0C:  CALL   2DEA
3B10:  MOVFF  B8,22E
3B14:  MOVLW  1B
3B16:  MOVLB  2
3B18:  MOVWF  x2F
3B1A:  MOVLB  0
3B1C:  CALL   2F62
3B20:  MOVLW  0D
3B22:  MOVLB  2
3B24:  MOVWF  x37
3B26:  MOVLB  0
3B28:  CALL   2DC8
....................             COM1_send_str(buf); 
3B2C:  MOVLW  01
3B2E:  MOVLB  2
3B30:  MOVWF  x67
3B32:  MOVLW  BE
3B34:  MOVWF  x66
3B36:  MOVLB  0
3B38:  CALL   2044
....................             } 
....................           else 
3B3C:  BRA    3BDC
3B3E:  MOVLB  1
....................             { 
....................             val = get_int(); 
3B40:  MOVLB  0
3B42:  CALL   2968
3B46:  MOVFF  02,207
3B4A:  MOVFF  01,206
....................             if (val < 2) 
3B4E:  MOVLB  2
3B50:  MOVF   x07,F
3B52:  BNZ   3B68
3B54:  MOVF   x06,W
3B56:  SUBLW  01
3B58:  BNC   3B68
....................               { 
....................               setup.SOQPSK = val; 
3B5A:  MOVFF  206,B8
....................               FPGA_set_reg0(); 
3B5E:  MOVLB  0
3B60:  CALL   15D2
....................               } 
....................             else 
3B64:  BRA    3BDC
3B66:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3B68:  MOVLW  02
3B6A:  MOVWF  FEA
3B6C:  MOVLW  0F
3B6E:  MOVWF  FE9
3B70:  MOVLW  09
3B72:  MOVWF  01
3B74:  CLRF   FF7
3B76:  MOVLW  00
3B78:  MOVLB  0
3B7A:  CALL   0894
3B7E:  TBLRD*-
3B80:  TBLRD*+
3B82:  MOVFF  FF5,FEE
3B86:  DECFSZ 01,F
3B88:  BRA    3B80
3B8A:  MOVLW  02
3B8C:  MOVLB  2
3B8E:  MOVWF  x67
3B90:  MOVLW  0F
3B92:  MOVWF  x66
3B94:  MOVLB  0
3B96:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3B9A:  MOVLW  01
3B9C:  MOVLB  1
3B9E:  MOVWF  x9E
3BA0:  MOVLW  72
3BA2:  MOVWF  x9D
3BA4:  MOVLW  44
3BA6:  MOVWF  FF6
3BA8:  MOVLW  0B
3BAA:  MOVWF  FF7
3BAC:  MOVLW  07
3BAE:  MOVLB  2
3BB0:  MOVWF  x2E
3BB2:  MOVLB  0
3BB4:  CALL   2DEA
3BB8:  MOVFF  B8,22E
3BBC:  MOVLW  1B
3BBE:  MOVLB  2
3BC0:  MOVWF  x2F
3BC2:  MOVLB  0
3BC4:  CALL   2F62
3BC8:  MOVLW  0D
3BCA:  MOVLB  2
3BCC:  MOVWF  x37
3BCE:  MOVLB  0
3BD0:  CALL   2DC8
....................               ret = 0; 
3BD4:  MOVLB  1
3BD6:  CLRF   xBC
....................               break; 
3BD8:  MOVLB  0
3BDA:  BRA    3BE4
....................               } 
....................             } 
....................           ret = 1; 
3BDC:  MOVLW  01
3BDE:  MOVLB  1
3BE0:  MOVWF  xBC
....................           break; 
3BE2:  MOVLB  0
....................         } 
....................       break; 
3BE4:  GOTO   52DC
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
3BE8:  MOVLB  1
3BEA:  MOVF   x25,F
3BEC:  BNZ   3BF6
3BEE:  MOVLB  0
3BF0:  GOTO   52DC
3BF4:  MOVLB  1
....................       switch (c2) 
....................         { 
3BF6:  MOVLW  41
3BF8:  SUBWF  xE8,W
3BFA:  ADDLW  F0
3BFC:  BTFSC  FD8.0
3BFE:  BRA    4212
3C00:  ADDLW  10
3C02:  MOVLB  0
3C04:  GOTO   52E4
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
3C08:  MOVLB  1
3C0A:  MOVF   xE6,F
3C0C:  BZ    3C5A
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
3C0E:  MOVLW  01
3C10:  MOVWF  x9E
3C12:  MOVLW  BE
3C14:  MOVWF  x9D
3C16:  MOVLW  50
3C18:  MOVWF  FF6
3C1A:  MOVLW  0B
3C1C:  MOVWF  FF7
3C1E:  MOVLW  03
3C20:  MOVLB  2
3C22:  MOVWF  x2E
3C24:  MOVLB  0
3C26:  CALL   2DEA
3C2A:  MOVFF  B7,22E
3C2E:  MOVLW  1B
3C30:  MOVLB  2
3C32:  MOVWF  x2F
3C34:  MOVLB  0
3C36:  CALL   2F62
3C3A:  MOVLW  0D
3C3C:  MOVLB  2
3C3E:  MOVWF  x37
3C40:  MOVLB  0
3C42:  CALL   2DC8
....................             COM1_send_str(buf); 
3C46:  MOVLW  01
3C48:  MOVLB  2
3C4A:  MOVWF  x67
3C4C:  MOVLW  BE
3C4E:  MOVWF  x66
3C50:  MOVLB  0
3C52:  CALL   2044
....................             } 
....................           else 
3C56:  BRA    3D54
3C58:  MOVLB  1
....................             { 
....................             val = get_int(); 
3C5A:  MOVLB  0
3C5C:  CALL   2968
3C60:  MOVFF  02,207
3C64:  MOVFF  01,206
....................             if (val < 2) 
3C68:  MOVLB  2
3C6A:  MOVF   x07,F
3C6C:  BNZ   3CE0
3C6E:  MOVF   x06,W
3C70:  SUBLW  01
3C72:  BNC   3CE0
....................               { 
.................... 	          if(setup.rc == 1) 
3C74:  MOVLB  0
3C76:  DECFSZ xF8,W
3C78:  BRA    3C98
3C7A:  MOVF   xF9,F
3C7C:  BNZ   3C98
.................... 	            { 
.................... 	            if(val == 0) 
3C7E:  MOVLB  2
3C80:  MOVF   x06,F
3C82:  BNZ   3C92
3C84:  MOVF   x07,F
3C86:  BNZ   3C92
.................... 	            { 
.................... 	            setup.rp =1; 
3C88:  MOVLB  0
3C8A:  CLRF   xFB
3C8C:  MOVLW  01
3C8E:  MOVWF  xFA
.................... 	            } 
.................... 	          else 
3C90:  BRA    3C98
....................  
.................... 	          setup.rp = 0; 
3C92:  MOVLB  0
3C94:  CLRF   xFB
3C96:  CLRF   xFA
.................... 	          } 
.................... 	          if(val == 1) 
3C98:  MOVLB  2
3C9A:  DECFSZ x06,W
3C9C:  BRA    3CC0
3C9E:  MOVF   x07,F
3CA0:  BNZ   3CC0
.................... 	          { 
....................               rp_command = setup.rp = 0; 
3CA2:  MOVLB  0
3CA4:  CLRF   xFB
3CA6:  CLRF   xFA
3CA8:  MOVFF  FA,19A
....................               delay_ms(50); 
3CAC:  MOVLW  32
3CAE:  MOVLB  2
3CB0:  MOVWF  x3D
3CB2:  MOVLB  0
3CB4:  CALL   0DBA
....................               update_all(); 
3CB8:  CALL   1B20
....................               } 
....................               else 
3CBC:  BRA    3CDC
3CBE:  MOVLB  2
....................                { 
....................               rp_command = setup.rp = 1; 
3CC0:  MOVLB  0
3CC2:  CLRF   xFB
3CC4:  MOVLW  01
3CC6:  MOVWF  xFA
3CC8:  MOVFF  FA,19A
....................               delay_ms(50); 
3CCC:  MOVLW  32
3CCE:  MOVLB  2
3CD0:  MOVWF  x3D
3CD2:  MOVLB  0
3CD4:  CALL   0DBA
....................               update_all(); 
3CD8:  CALL   1B20
....................               } 
....................               } 
....................             else 
3CDC:  BRA    3D54
3CDE:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3CE0:  MOVLW  02
3CE2:  MOVWF  FEA
3CE4:  MOVLW  0F
3CE6:  MOVWF  FE9
3CE8:  MOVLW  09
3CEA:  MOVWF  01
3CEC:  CLRF   FF7
3CEE:  MOVLW  00
3CF0:  MOVLB  0
3CF2:  CALL   0894
3CF6:  TBLRD*-
3CF8:  TBLRD*+
3CFA:  MOVFF  FF5,FEE
3CFE:  DECFSZ 01,F
3D00:  BRA    3CF8
3D02:  MOVLW  02
3D04:  MOVLB  2
3D06:  MOVWF  x67
3D08:  MOVLW  0F
3D0A:  MOVWF  x66
3D0C:  MOVLB  0
3D0E:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
3D12:  MOVLW  01
3D14:  MOVLB  1
3D16:  MOVWF  x9E
3D18:  MOVLW  72
3D1A:  MOVWF  x9D
3D1C:  MOVLW  58
3D1E:  MOVWF  FF6
3D20:  MOVLW  0B
3D22:  MOVWF  FF7
3D24:  MOVLW  07
3D26:  MOVLB  2
3D28:  MOVWF  x2E
3D2A:  MOVLB  0
3D2C:  CALL   2DEA
3D30:  MOVFF  19A,22E
3D34:  MOVLW  1B
3D36:  MOVLB  2
3D38:  MOVWF  x2F
3D3A:  MOVLB  0
3D3C:  CALL   2F62
3D40:  MOVLW  0D
3D42:  MOVLB  2
3D44:  MOVWF  x37
3D46:  MOVLB  0
3D48:  CALL   2DC8
....................               ret = 0; 
3D4C:  MOVLB  1
3D4E:  CLRF   xBC
....................               break; 
3D50:  BRA    4212
3D52:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
3D54:  MOVLW  01
3D56:  MOVLB  1
3D58:  MOVWF  xBC
....................           break; 
3D5A:  BRA    4212
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
3D5C:  MOVLB  1
3D5E:  MOVF   xE6,F
3D60:  BZ    3DAE
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
3D62:  MOVLW  01
3D64:  MOVWF  x9E
3D66:  MOVLW  BE
3D68:  MOVWF  x9D
3D6A:  MOVLW  64
3D6C:  MOVWF  FF6
3D6E:  MOVLW  0B
3D70:  MOVWF  FF7
3D72:  MOVLW  03
3D74:  MOVLB  2
3D76:  MOVWF  x2E
3D78:  MOVLB  0
3D7A:  CALL   2DEA
3D7E:  MOVFF  19B,22E
3D82:  MOVLW  1B
3D84:  MOVLB  2
3D86:  MOVWF  x2F
3D88:  MOVLB  0
3D8A:  CALL   2F62
3D8E:  MOVLW  0D
3D90:  MOVLB  2
3D92:  MOVWF  x37
3D94:  MOVLB  0
3D96:  CALL   2DC8
....................             COM1_send_str(buf); 
3D9A:  MOVLW  01
3D9C:  MOVLB  2
3D9E:  MOVWF  x67
3DA0:  MOVLW  BE
3DA2:  MOVWF  x66
3DA4:  MOVLB  0
3DA6:  CALL   2044
....................             } 
....................           else 
3DAA:  BRA    3F10
3DAC:  MOVLB  1
....................             { 
....................             val = get_int(); 
3DAE:  MOVLB  0
3DB0:  CALL   2968
3DB4:  MOVFF  02,207
3DB8:  MOVFF  01,206
....................             if (val == 0) 
3DBC:  MOVLB  2
3DBE:  MOVF   x06,F
3DC0:  BNZ   3E2A
3DC2:  MOVF   x07,F
3DC4:  BNZ   3E2A
....................               { 
.................... 			  if(setup.cot || setup.rc) 
3DC6:  MOVLB  0
3DC8:  MOVF   xF6,W
3DCA:  IORWF  xF7,W
3DCC:  BNZ   3DD4
3DCE:  MOVF   xF8,W
3DD0:  IORWF  xF9,W
3DD2:  BZ    3DFA
.................... 				{ 
....................                 pwr_command = 0; 
3DD4:  MOVLB  1
3DD6:  CLRF   x9B
....................                 setup.pwr = pwr_command; 
3DD8:  MOVLB  0
3DDA:  CLRF   xAF
3DDC:  MOVFF  19B,AE
....................                 delay_ms(60); 
3DE0:  MOVLW  3C
3DE2:  MOVLB  2
3DE4:  MOVWF  x3D
3DE6:  MOVLB  0
3DE8:  CALL   0DBA
.................... 			 	update_all(); 
3DEC:  CALL   1B20
.................... 			 	ret = 1; 
3DF0:  MOVLW  01
3DF2:  MOVLB  1
3DF4:  MOVWF  xBC
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
3DF6:  BRA    3E26
3DF8:  MOVLB  0
3DFA:  MOVF   xF6,F
3DFC:  BNZ   3E02
3DFE:  MOVF   xF7,F
3E00:  BZ    3E08
3E02:  MOVF   xF8,W
3E04:  IORWF  xF9,W
3E06:  BZ    3E24
.................... 				  { 
....................                   pwr_command = 0; 
3E08:  MOVLB  1
3E0A:  CLRF   x9B
....................                 setup.pwr = pwr_command; 
3E0C:  MOVLB  0
3E0E:  CLRF   xAF
3E10:  MOVFF  19B,AE
....................                 delay_ms(60); 
3E14:  MOVLW  3C
3E16:  MOVLB  2
3E18:  MOVWF  x3D
3E1A:  MOVLB  0
3E1C:  CALL   0DBA
.................... 			 	update_all(); 
3E20:  CALL   1B20
3E24:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
3E26:  BRA    3F0E
3E28:  MOVLB  2
.................... 				{ 
.................... 				if (val == 1) 
3E2A:  DECFSZ x06,W
3E2C:  BRA    3E9C
3E2E:  MOVF   x07,F
3E30:  BNZ   3E9C
.................... 				  { 
.................... 				  if(setup.cot) 
3E32:  MOVLB  0
3E34:  MOVF   xF6,W
3E36:  IORWF  xF7,W
3E38:  BZ    3E66
.................... 				   { 
.................... 				   pwr_command = 1; 
3E3A:  MOVLW  01
3E3C:  MOVLB  1
3E3E:  MOVWF  x9B
.................... 				   setup.pwr = pwr_command; 
3E40:  MOVLB  0
3E42:  CLRF   xAF
3E44:  MOVFF  19B,AE
.................... 				   power_output(); 
3E48:  CALL   1B8A
....................                    delay_ms(50); 
3E4C:  MOVLW  32
3E4E:  MOVLB  2
3E50:  MOVWF  x3D
3E52:  MOVLB  0
3E54:  CALL   0DBA
.................... 				   ret = 1; 
3E58:  MOVLW  01
3E5A:  MOVLB  1
3E5C:  MOVWF  xBC
....................                    update_all(); 
3E5E:  MOVLB  0
3E60:  CALL   1B20
.................... 				   } 
.................... 					else if(setup.cot == 0) 
3E64:  BRA    3E98
3E66:  MOVF   xF6,F
3E68:  BNZ   3E98
3E6A:  MOVF   xF7,F
3E6C:  BNZ   3E98
.................... 				  { 
....................                   pwr_command = 1; 
3E6E:  MOVLW  01
3E70:  MOVLB  1
3E72:  MOVWF  x9B
....................                   setup.pwr = pwr_command; 
3E74:  MOVLB  0
3E76:  CLRF   xAF
3E78:  MOVFF  19B,AE
....................                   power_output(); 
3E7C:  CALL   1B8A
.................... 				  delay_ms(50); 
3E80:  MOVLW  32
3E82:  MOVLB  2
3E84:  MOVWF  x3D
3E86:  MOVLB  0
3E88:  CALL   0DBA
.................... 				  ret = 1; 
3E8C:  MOVLW  01
3E8E:  MOVLB  1
3E90:  MOVWF  xBC
....................                   update_all(); 
3E92:  MOVLB  0
3E94:  CALL   1B20
....................                   } 
.................... 				} 
....................             else 
3E98:  BRA    3F10
3E9A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3E9C:  MOVLW  02
3E9E:  MOVWF  FEA
3EA0:  MOVLW  0F
3EA2:  MOVWF  FE9
3EA4:  MOVLW  09
3EA6:  MOVWF  01
3EA8:  CLRF   FF7
3EAA:  MOVLW  00
3EAC:  MOVLB  0
3EAE:  CALL   0894
3EB2:  TBLRD*-
3EB4:  TBLRD*+
3EB6:  MOVFF  FF5,FEE
3EBA:  DECFSZ 01,F
3EBC:  BRA    3EB4
3EBE:  MOVLW  02
3EC0:  MOVLB  2
3EC2:  MOVWF  x67
3EC4:  MOVLW  0F
3EC6:  MOVWF  x66
3EC8:  MOVLB  0
3ECA:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
3ECE:  MOVLW  01
3ED0:  MOVLB  1
3ED2:  MOVWF  x9E
3ED4:  MOVLW  72
3ED6:  MOVWF  x9D
3ED8:  MOVLW  6C
3EDA:  MOVWF  FF6
3EDC:  MOVLW  0B
3EDE:  MOVWF  FF7
3EE0:  MOVLW  07
3EE2:  MOVLB  2
3EE4:  MOVWF  x2E
3EE6:  MOVLB  0
3EE8:  CALL   2DEA
3EEC:  MOVFF  19B,22E
3EF0:  MOVLW  1B
3EF2:  MOVLB  2
3EF4:  MOVWF  x2F
3EF6:  MOVLB  0
3EF8:  CALL   2F62
3EFC:  MOVLW  0D
3EFE:  MOVLB  2
3F00:  MOVWF  x37
3F02:  MOVLB  0
3F04:  CALL   2DC8
....................               ret = 0; 
3F08:  MOVLB  1
3F0A:  CLRF   xBC
....................               break; 
3F0C:  BRA    4212
3F0E:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
3F10:  MOVLW  01
3F12:  MOVLB  1
3F14:  MOVWF  xBC
....................           break; 
3F16:  BRA    4212
....................  
....................          case 'C': 
....................          	if (query) 
3F18:  MOVLB  1
3F1A:  MOVF   xE6,F
3F1C:  BZ    3F6A
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
3F1E:  MOVLW  01
3F20:  MOVWF  x9E
3F22:  MOVLW  BE
3F24:  MOVWF  x9D
3F26:  MOVLW  78
3F28:  MOVWF  FF6
3F2A:  MOVLW  0B
3F2C:  MOVWF  FF7
3F2E:  MOVLW  03
3F30:  MOVLB  2
3F32:  MOVWF  x2E
3F34:  MOVLB  0
3F36:  CALL   2DEA
3F3A:  MOVLW  10
3F3C:  MOVWF  FE9
3F3E:  MOVFF  F9,22F
3F42:  MOVFF  F8,22E
3F46:  CALL   2E12
3F4A:  MOVLW  0D
3F4C:  MOVLB  2
3F4E:  MOVWF  x37
3F50:  MOVLB  0
3F52:  CALL   2DC8
....................             COM1_send_str(buf); 
3F56:  MOVLW  01
3F58:  MOVLB  2
3F5A:  MOVWF  x67
3F5C:  MOVLW  BE
3F5E:  MOVWF  x66
3F60:  MOVLB  0
3F62:  CALL   2044
....................             } 
....................           else 
3F66:  BRA    3FFA
3F68:  MOVLB  1
....................             { 
....................           val = get_int(); 
3F6A:  MOVLB  0
3F6C:  CALL   2968
3F70:  MOVFF  02,207
3F74:  MOVFF  01,206
....................           if(val < 2) 
3F78:  MOVLB  2
3F7A:  MOVF   x07,F
3F7C:  BNZ   3FC8
3F7E:  MOVF   x06,W
3F80:  SUBLW  01
3F82:  BNC   3FC8
....................           	{ 
.................... 	          	if(val == 0) 
3F84:  MOVF   x06,F
3F86:  BNZ   3FA4
3F88:  MOVF   x07,F
3F8A:  BNZ   3FA4
.................... 	          	{ 
.................... 	              setup.rc = 0; 
3F8C:  MOVLB  0
3F8E:  CLRF   xF9
3F90:  CLRF   xF8
.................... 	              delay_ms(50); 
3F92:  MOVLW  32
3F94:  MOVLB  2
3F96:  MOVWF  x3D
3F98:  MOVLB  0
3F9A:  CALL   0DBA
.................... 	              update_all(); 
3F9E:  CALL   1B20
3FA2:  MOVLB  2
.................... 	            } 
.................... 	            if(val == 1) 
3FA4:  DECFSZ x06,W
3FA6:  BRA    3FC6
3FA8:  MOVF   x07,F
3FAA:  BNZ   3FC6
.................... 	              { 
.................... 	              setup.rc = 1; 
3FAC:  MOVLB  0
3FAE:  CLRF   xF9
3FB0:  MOVLW  01
3FB2:  MOVWF  xF8
.................... 	              delay_ms(50); 
3FB4:  MOVLW  32
3FB6:  MOVLB  2
3FB8:  MOVWF  x3D
3FBA:  MOVLB  0
3FBC:  CALL   0DBA
.................... 	              update_all(); 
3FC0:  CALL   1B20
3FC4:  MOVLB  2
.................... 	              } 
....................            } 
....................           else 
3FC6:  BRA    3FFC
....................             COM1_send_str("\r\nFAULT\r\n"); 
3FC8:  MOVLW  02
3FCA:  MOVWF  FEA
3FCC:  MOVLW  0F
3FCE:  MOVWF  FE9
3FD0:  MOVLW  0A
3FD2:  MOVWF  01
3FD4:  CLRF   FF7
3FD6:  MOVLW  00
3FD8:  MOVLB  0
3FDA:  CALL   087A
3FDE:  TBLRD*-
3FE0:  TBLRD*+
3FE2:  MOVFF  FF5,FEE
3FE6:  DECFSZ 01,F
3FE8:  BRA    3FE0
3FEA:  MOVLW  02
3FEC:  MOVLB  2
3FEE:  MOVWF  x67
3FF0:  MOVLW  0F
3FF2:  MOVWF  x66
3FF4:  MOVLB  0
3FF6:  CALL   2044
3FFA:  MOVLB  2
....................             } 
....................           break; 
3FFC:  MOVLB  1
3FFE:  BRA    4212
....................  
....................           case 'B': 
....................             if (query) 
4000:  MOVLB  1
4002:  MOVF   xE6,F
4004:  BZ    4052
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
4006:  MOVLW  01
4008:  MOVWF  x9E
400A:  MOVLW  BE
400C:  MOVWF  x9D
400E:  MOVLW  80
4010:  MOVWF  FF6
4012:  MOVLW  0B
4014:  MOVWF  FF7
4016:  MOVLW  03
4018:  MOVLB  2
401A:  MOVWF  x2E
401C:  MOVLB  0
401E:  CALL   2DEA
4022:  MOVLW  10
4024:  MOVWF  FE9
4026:  MOVFF  F7,22F
402A:  MOVFF  F6,22E
402E:  CALL   2E12
4032:  MOVLW  0D
4034:  MOVLB  2
4036:  MOVWF  x37
4038:  MOVLB  0
403A:  CALL   2DC8
....................             COM1_send_str(buf); 
403E:  MOVLW  01
4040:  MOVLB  2
4042:  MOVWF  x67
4044:  MOVLW  BE
4046:  MOVWF  x66
4048:  MOVLB  0
404A:  CALL   2044
....................             } 
....................           else 
404E:  BRA    4100
4050:  MOVLB  1
....................             { 
....................           val = get_int(); 
4052:  MOVLB  0
4054:  CALL   2968
4058:  MOVFF  02,207
405C:  MOVFF  01,206
....................           if(val < 2) 
4060:  MOVLB  2
4062:  MOVF   x07,F
4064:  BNZ   40CE
4066:  MOVF   x06,W
4068:  SUBLW  01
406A:  BNC   40CE
....................           	{ 
.................... 	          if(val) 
406C:  MOVF   x06,W
406E:  IORWF  x07,W
4070:  BZ    40B4
.................... 	          	{ 
....................               setup.cot = val; 
4072:  MOVFF  207,F7
4076:  MOVFF  206,F6
....................               if(pwr_command == 0) 
407A:  MOVLB  1
407C:  MOVF   x9B,F
407E:  BNZ   409C
....................               { 
....................               pwr_command == 1; 
4080:  DECFSZ x9B,W
4082:  BRA    4086
4084:  BRA    4088
4086:  MOVLW  00
....................               delay_ms(50); 
4088:  MOVLW  32
408A:  MOVLB  2
408C:  MOVWF  x3D
408E:  MOVLB  0
4090:  CALL   0DBA
....................               update_all(); 
4094:  CALL   1B20
....................               } 
....................               else 
4098:  BRA    40A2
409A:  MOVLB  1
....................               	pwr_command == 0; 
409C:  MOVF   x9B,F
409E:  BZ    40A2
40A0:  MOVLW  00
....................                delay_ms(50); 
40A2:  MOVLW  32
40A4:  MOVLB  2
40A6:  MOVWF  x3D
40A8:  MOVLB  0
40AA:  CALL   0DBA
....................               update_all(); 
40AE:  CALL   1B20
40B2:  MOVLB  2
....................             } 
....................             setup.cot = val; 
40B4:  MOVFF  207,F7
40B8:  MOVFF  206,F6
....................               delay_ms(70); 
40BC:  MOVLW  46
40BE:  MOVWF  x3D
40C0:  MOVLB  0
40C2:  CALL   0DBA
....................               update_all(); 
40C6:  CALL   1B20
....................            } 
....................           else 
40CA:  BRA    4100
40CC:  MOVLB  2
....................             COM1_send_str("\r\nFAULT\r\n"); 
40CE:  MOVLW  02
40D0:  MOVWF  FEA
40D2:  MOVLW  0F
40D4:  MOVWF  FE9
40D6:  MOVLW  0A
40D8:  MOVWF  01
40DA:  CLRF   FF7
40DC:  MOVLW  00
40DE:  MOVLB  0
40E0:  CALL   087A
40E4:  TBLRD*-
40E6:  TBLRD*+
40E8:  MOVFF  FF5,FEE
40EC:  DECFSZ 01,F
40EE:  BRA    40E6
40F0:  MOVLW  02
40F2:  MOVLB  2
40F4:  MOVWF  x67
40F6:  MOVLW  0F
40F8:  MOVWF  x66
40FA:  MOVLB  0
40FC:  CALL   2044
....................             } 
....................           break; 
4100:  MOVLB  1
4102:  BRA    4212
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
4104:  MOVLB  1
4106:  MOVF   xE6,F
4108:  BZ    4156
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
410A:  MOVLW  01
410C:  MOVWF  x9E
410E:  MOVLW  BE
4110:  MOVWF  x9D
4112:  MOVLW  88
4114:  MOVWF  FF6
4116:  MOVLW  0B
4118:  MOVWF  FF7
411A:  MOVLW  03
411C:  MOVLB  2
411E:  MOVWF  x2E
4120:  MOVLB  0
4122:  CALL   2DEA
4126:  MOVFF  B6,22E
412A:  MOVLW  1B
412C:  MOVLB  2
412E:  MOVWF  x2F
4130:  MOVLB  0
4132:  CALL   2F62
4136:  MOVLW  0D
4138:  MOVLB  2
413A:  MOVWF  x37
413C:  MOVLB  0
413E:  CALL   2DC8
....................             COM1_send_str(buf); 
4142:  MOVLW  01
4144:  MOVLB  2
4146:  MOVWF  x67
4148:  MOVLW  BE
414A:  MOVWF  x66
414C:  MOVLB  0
414E:  CALL   2044
....................             } 
....................           else 
4152:  BRA    41F6
4154:  MOVLB  1
....................             { 
....................             val = get_int(); 
4156:  MOVLB  0
4158:  CALL   2968
415C:  MOVFF  02,207
4160:  MOVFF  01,206
....................             if (val < 2) 
4164:  MOVLB  2
4166:  MOVF   x07,F
4168:  BNZ   4184
416A:  MOVF   x06,W
416C:  SUBLW  01
416E:  BNC   4184
....................               { 
....................               setup.randomizer = val; 
4170:  MOVFF  206,B6
....................               FPGA_set_reg0(); 
4174:  MOVLB  0
4176:  CALL   15D2
....................               ret = 1; 
417A:  MOVLW  01
417C:  MOVLB  1
417E:  MOVWF  xBC
....................               } 
....................             else 
4180:  BRA    41F6
4182:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4184:  MOVLW  02
4186:  MOVWF  FEA
4188:  MOVLW  0F
418A:  MOVWF  FE9
418C:  MOVLW  09
418E:  MOVWF  01
4190:  CLRF   FF7
4192:  MOVLW  00
4194:  MOVLB  0
4196:  CALL   0894
419A:  TBLRD*-
419C:  TBLRD*+
419E:  MOVFF  FF5,FEE
41A2:  DECFSZ 01,F
41A4:  BRA    419C
41A6:  MOVLW  02
41A8:  MOVLB  2
41AA:  MOVWF  x67
41AC:  MOVLW  0F
41AE:  MOVWF  x66
41B0:  MOVLB  0
41B2:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
41B6:  MOVLW  01
41B8:  MOVLB  1
41BA:  MOVWF  x9E
41BC:  MOVLW  72
41BE:  MOVWF  x9D
41C0:  MOVLW  90
41C2:  MOVWF  FF6
41C4:  MOVLW  0B
41C6:  MOVWF  FF7
41C8:  MOVLW  07
41CA:  MOVLB  2
41CC:  MOVWF  x2E
41CE:  MOVLB  0
41D0:  CALL   2DEA
41D4:  MOVFF  B6,22E
41D8:  MOVLW  1B
41DA:  MOVLB  2
41DC:  MOVWF  x2F
41DE:  MOVLB  0
41E0:  CALL   2F62
41E4:  MOVLW  0D
41E6:  MOVLB  2
41E8:  MOVWF  x37
41EA:  MOVLB  0
41EC:  CALL   2DC8
....................               ret = 0; 
41F0:  MOVLB  1
41F2:  CLRF   xBC
....................               break; 
41F4:  BRA    4212
....................               } 
....................             } 
....................           ret = 1; 
41F6:  MOVLW  01
41F8:  MOVLB  1
41FA:  MOVWF  xBC
....................           break; 
41FC:  BRA    4212
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
41FE:  CALL   0E56
....................           update_all(); 
4202:  CALL   1B20
....................           ret = 1; 
4206:  MOVLW  01
4208:  MOVLB  1
420A:  MOVWF  xBC
....................           break; 
420C:  BRA    4212
....................         case 'E':   // reset 
....................           reset_cpu(); 
420E:  RESET
....................           break; 
4210:  MOVLB  1
....................         } 
....................       break; 
4212:  MOVLB  0
4214:  GOTO   52DC
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
4218:  MOVLB  1
421A:  MOVF   x25,F
421C:  BNZ   4226
421E:  MOVLB  0
4220:  GOTO   52DC
4224:  MOVLB  1
....................       if (c2 == 'A') 
4226:  MOVF   xE8,W
4228:  SUBLW  41
422A:  BNZ   4230
....................         { 
....................         //xxxx 
....................         ret = 1; 
422C:  MOVLW  01
422E:  MOVWF  xBC
....................         } 
....................       break; 
4230:  MOVLB  0
4232:  GOTO   52DC
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
4236:  MOVLB  1
4238:  MOVF   x25,F
423A:  BNZ   4244
423C:  MOVLB  0
423E:  GOTO   52DC
4242:  MOVLB  1
....................       switch (c2) 
....................         { 
4244:  MOVF   xE8,W
4246:  XORLW  50
4248:  MOVLB  0
424A:  BZ    4252
424C:  XORLW  06
424E:  BZ    425C
4250:  BRA    4270
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
4252:  MOVLW  01
4254:  MOVLB  1
4256:  MOVWF  xBC
....................           break; 
4258:  MOVLB  0
425A:  BRA    4270
....................         case 'V': 
....................           allow_write = 2975; 
425C:  MOVLW  0B
425E:  MOVWF  xFE
4260:  MOVLW  9F
4262:  MOVWF  xFD
....................           write_setup(); 
4264:  CALL   304E
....................           ret = 1; 
4268:  MOVLW  01
426A:  MOVLB  1
426C:  MOVWF  xBC
....................           break; 
426E:  MOVLB  0
....................         } 
....................       break; 
4270:  GOTO   52DC
....................        
....................  
....................     case 'U': // VERSION 3.3 UT US 
....................       if (!ttccp_login) break; 
4274:  MOVLB  1
4276:  MOVF   x25,F
4278:  BNZ   4282
427A:  MOVLB  0
427C:  GOTO   52DC
4280:  MOVLB  1
....................       switch (c2) 
....................         { 
4282:  MOVF   xE8,W
4284:  XORLW  54
4286:  MOVLB  0
4288:  BZ    4292
428A:  XORLW  07
428C:  BTFSC  FD8.2
428E:  BRA    438E
4290:  BRA    447A
....................         case 'T':  
....................           if (query) 
4292:  MOVLB  1
4294:  MOVF   xE6,F
4296:  BZ    42E4
....................             { 
....................             sprintf(buf, "UT %u\r", setup.UART_Time); 
4298:  MOVLW  01
429A:  MOVWF  x9E
429C:  MOVLW  BE
429E:  MOVWF  x9D
42A0:  MOVLW  9C
42A2:  MOVWF  FF6
42A4:  MOVLW  0B
42A6:  MOVWF  FF7
42A8:  MOVLW  03
42AA:  MOVLB  2
42AC:  MOVWF  x2E
42AE:  MOVLB  0
42B0:  CALL   2DEA
42B4:  MOVFF  FC,22E
42B8:  MOVLW  1B
42BA:  MOVLB  2
42BC:  MOVWF  x2F
42BE:  MOVLB  0
42C0:  CALL   2F62
42C4:  MOVLW  0D
42C6:  MOVLB  2
42C8:  MOVWF  x37
42CA:  MOVLB  0
42CC:  CALL   2DC8
....................             COM1_send_str(buf); 
42D0:  MOVLW  01
42D2:  MOVLB  2
42D4:  MOVWF  x67
42D6:  MOVLW  BE
42D8:  MOVWF  x66
42DA:  MOVLB  0
42DC:  CALL   2044
....................             } 
.................... 	            else 
42E0:  BRA    4382
42E2:  MOVLB  1
.................... 	            { 
.................... 	            val = get_int(); 
42E4:  MOVLB  0
42E6:  CALL   2968
42EA:  MOVFF  02,207
42EE:  MOVFF  01,206
.................... 	            if (val < 240 && val >1) 
42F2:  MOVLB  2
42F4:  MOVF   x07,F
42F6:  BNZ   430E
42F8:  MOVF   x06,W
42FA:  SUBLW  EF
42FC:  BNC   430E
42FE:  MOVF   x07,F
4300:  BNZ   4308
4302:  MOVF   x06,W
4304:  SUBLW  01
4306:  BC    430E
.................... 	              { 
.................... 	              setup.UART_Time = val;	               
4308:  MOVFF  206,FC
.................... 	              } 
.................... 	            else 
430C:  BRA    4384
.................... 	              { 
.................... 				  			COM1_send_str("\r\nFAIL\r\n"); 
430E:  MOVLW  02
4310:  MOVWF  FEA
4312:  MOVLW  0F
4314:  MOVWF  FE9
4316:  MOVLW  09
4318:  MOVWF  01
431A:  CLRF   FF7
431C:  MOVLW  00
431E:  MOVLB  0
4320:  CALL   0894
4324:  TBLRD*-
4326:  TBLRD*+
4328:  MOVFF  FF5,FEE
432C:  DECFSZ 01,F
432E:  BRA    4326
4330:  MOVLW  02
4332:  MOVLB  2
4334:  MOVWF  x67
4336:  MOVLW  0F
4338:  MOVWF  x66
433A:  MOVLB  0
433C:  CALL   2044
.................... 	              sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
4340:  MOVLW  01
4342:  MOVLB  1
4344:  MOVWF  x9E
4346:  MOVLW  72
4348:  MOVWF  x9D
434A:  MOVLW  A4
434C:  MOVWF  FF6
434E:  MOVLW  0B
4350:  MOVWF  FF7
4352:  MOVLW  07
4354:  MOVLB  2
4356:  MOVWF  x2E
4358:  MOVLB  0
435A:  CALL   2DEA
435E:  MOVFF  FC,22E
4362:  MOVLW  1B
4364:  MOVLB  2
4366:  MOVWF  x2F
4368:  MOVLB  0
436A:  CALL   2F62
436E:  MOVLW  0D
4370:  MOVLB  2
4372:  MOVWF  x37
4374:  MOVLB  0
4376:  CALL   2DC8
.................... 	              ret = 0; 
437A:  MOVLB  1
437C:  CLRF   xBC
.................... 	              break; 
437E:  MOVLB  0
4380:  BRA    447A
4382:  MOVLB  2
.................... 	              } 
.................... 	            } 
.................... 	            ret = 1; 
4384:  MOVLW  01
4386:  MOVLB  1
4388:  MOVWF  xBC
....................          		  break;  
438A:  MOVLB  0
438C:  BRA    447A
....................                      
....................         case 'S': 
....................            { 
....................           if (query) 
438E:  MOVLB  1
4390:  MOVF   xE6,F
4392:  BZ    43E0
....................             { 
....................             sprintf(buf, "US %u\r", UART_Status); 
4394:  MOVLW  01
4396:  MOVWF  x9E
4398:  MOVLW  BE
439A:  MOVWF  x9D
439C:  MOVLW  B0
439E:  MOVWF  FF6
43A0:  MOVLW  0B
43A2:  MOVWF  FF7
43A4:  MOVLW  03
43A6:  MOVLB  2
43A8:  MOVWF  x2E
43AA:  MOVLB  0
43AC:  CALL   2DEA
43B0:  MOVFF  126,22E
43B4:  MOVLW  1B
43B6:  MOVLB  2
43B8:  MOVWF  x2F
43BA:  MOVLB  0
43BC:  CALL   2F62
43C0:  MOVLW  0D
43C2:  MOVLB  2
43C4:  MOVWF  x37
43C6:  MOVLB  0
43C8:  CALL   2DC8
....................             COM1_send_str(buf); 
43CC:  MOVLW  01
43CE:  MOVLB  2
43D0:  MOVWF  x67
43D2:  MOVLW  BE
43D4:  MOVWF  x66
43D6:  MOVLB  0
43D8:  CALL   2044
....................             } 
....................           else 
43DC:  BRA    4474
43DE:  MOVLB  1
....................             { 
....................             val = get_int(); 
43E0:  MOVLB  0
43E2:  CALL   2968
43E6:  MOVFF  02,207
43EA:  MOVFF  01,206
....................             if (val < 2) 
43EE:  MOVLB  2
43F0:  MOVF   x07,F
43F2:  BNZ   4400
43F4:  MOVF   x06,W
43F6:  SUBLW  01
43F8:  BNC   4400
....................               { 
....................               UART_Status = val; 
43FA:  MOVFF  206,126
....................               } 
....................             else 
43FE:  BRA    4476
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
4400:  MOVLW  02
4402:  MOVWF  FEA
4404:  MOVLW  0F
4406:  MOVWF  FE9
4408:  MOVLW  09
440A:  MOVWF  01
440C:  CLRF   FF7
440E:  MOVLW  00
4410:  MOVLB  0
4412:  CALL   0894
4416:  TBLRD*-
4418:  TBLRD*+
441A:  MOVFF  FF5,FEE
441E:  DECFSZ 01,F
4420:  BRA    4418
4422:  MOVLW  02
4424:  MOVLB  2
4426:  MOVWF  x67
4428:  MOVLW  0F
442A:  MOVWF  x66
442C:  MOVLB  0
442E:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR US %u\r", UART_Status); 
4432:  MOVLW  01
4434:  MOVLB  1
4436:  MOVWF  x9E
4438:  MOVLW  72
443A:  MOVWF  x9D
443C:  MOVLW  B8
443E:  MOVWF  FF6
4440:  MOVLW  0B
4442:  MOVWF  FF7
4444:  MOVLW  07
4446:  MOVLB  2
4448:  MOVWF  x2E
444A:  MOVLB  0
444C:  CALL   2DEA
4450:  MOVFF  126,22E
4454:  MOVLW  1B
4456:  MOVLB  2
4458:  MOVWF  x2F
445A:  MOVLB  0
445C:  CALL   2F62
4460:  MOVLW  0D
4462:  MOVLB  2
4464:  MOVWF  x37
4466:  MOVLB  0
4468:  CALL   2DC8
....................               ret = 0; 
446C:  MOVLB  1
446E:  CLRF   xBC
....................               break; 
4470:  MOVLB  0
4472:  BRA    447A
4474:  MOVLB  2
....................               } 
....................             } 
....................         break; 
4476:  MOVLB  0
4478:  BRA    447A
....................         } 
....................         break; 
....................         } 
....................       break; 
447A:  GOTO   52DC
....................        
....................  
....................     case 'I': 
....................       if (!ttccp_login) break; 
447E:  MOVLB  1
4480:  MOVF   x25,F
4482:  BNZ   448C
4484:  MOVLB  0
4486:  GOTO   52DC
448A:  MOVLB  1
....................       switch (c2) 
....................         { 
448C:  MOVF   xE8,W
448E:  XORLW  44
4490:  MOVLB  0
4492:  BZ    449C
4494:  XORLW  07
4496:  BTFSC  FD8.2
4498:  BRA    4594
449A:  BRA    45F4
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
449C:  MOVLB  1
449E:  MOVF   xE6,F
44A0:  BZ    44EE
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
44A2:  MOVLW  01
44A4:  MOVWF  x9E
44A6:  MOVLW  BE
44A8:  MOVWF  x9D
44AA:  MOVLW  C4
44AC:  MOVWF  FF6
44AE:  MOVLW  0B
44B0:  MOVWF  FF7
44B2:  MOVLW  03
44B4:  MOVLB  2
44B6:  MOVWF  x2E
44B8:  MOVLB  0
44BA:  CALL   2DEA
44BE:  MOVFF  B5,22E
44C2:  MOVLW  1B
44C4:  MOVLB  2
44C6:  MOVWF  x2F
44C8:  MOVLB  0
44CA:  CALL   2F62
44CE:  MOVLW  0D
44D0:  MOVLB  2
44D2:  MOVWF  x37
44D4:  MOVLB  0
44D6:  CALL   2DC8
....................             COM1_send_str(buf); 
44DA:  MOVLW  01
44DC:  MOVLB  2
44DE:  MOVWF  x67
44E0:  MOVLW  BE
44E2:  MOVWF  x66
44E4:  MOVLB  0
44E6:  CALL   2044
....................             } 
....................           else 
44EA:  BRA    458A
44EC:  MOVLB  1
....................             { 
....................             val = get_int(); 
44EE:  MOVLB  0
44F0:  CALL   2968
44F4:  MOVFF  02,207
44F8:  MOVFF  01,206
....................             if (val < 4) 
44FC:  MOVLB  2
44FE:  MOVF   x07,F
4500:  BNZ   4516
4502:  MOVF   x06,W
4504:  SUBLW  03
4506:  BNC   4516
....................               { 
....................               setup.internal_pattern = val; 
4508:  MOVFF  206,B5
....................               FPGA_set_reg6(); 
450C:  MOVLB  0
450E:  CALL   162E
....................               } 
....................             else 
4512:  BRA    458A
4514:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4516:  MOVLW  02
4518:  MOVWF  FEA
451A:  MOVLW  0F
451C:  MOVWF  FE9
451E:  MOVLW  09
4520:  MOVWF  01
4522:  CLRF   FF7
4524:  MOVLW  00
4526:  MOVLB  0
4528:  CALL   0894
452C:  TBLRD*-
452E:  TBLRD*+
4530:  MOVFF  FF5,FEE
4534:  DECFSZ 01,F
4536:  BRA    452E
4538:  MOVLW  02
453A:  MOVLB  2
453C:  MOVWF  x67
453E:  MOVLW  0F
4540:  MOVWF  x66
4542:  MOVLB  0
4544:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
4548:  MOVLW  01
454A:  MOVLB  1
454C:  MOVWF  x9E
454E:  MOVLW  72
4550:  MOVWF  x9D
4552:  MOVLW  CC
4554:  MOVWF  FF6
4556:  MOVLW  0B
4558:  MOVWF  FF7
455A:  MOVLW  07
455C:  MOVLB  2
455E:  MOVWF  x2E
4560:  MOVLB  0
4562:  CALL   2DEA
4566:  MOVFF  B5,22E
456A:  MOVLW  1B
456C:  MOVLB  2
456E:  MOVWF  x2F
4570:  MOVLB  0
4572:  CALL   2F62
4576:  MOVLW  0D
4578:  MOVLB  2
457A:  MOVWF  x37
457C:  MOVLB  0
457E:  CALL   2DC8
....................               ret = 0; 
4582:  MOVLB  1
4584:  CLRF   xBC
....................               break; 
4586:  MOVLB  0
4588:  BRA    45F4
....................               } 
....................             } 
....................           ret = 1; 
458A:  MOVLW  01
458C:  MOVLB  1
458E:  MOVWF  xBC
....................           break; 
4590:  MOVLB  0
4592:  BRA    45F4
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
4594:  MOVLB  1
4596:  MOVF   xE6,F
4598:  BZ    45E6
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
459A:  MOVLW  01
459C:  MOVWF  x9E
459E:  MOVLW  BE
45A0:  MOVWF  x9D
45A2:  MOVLW  D8
45A4:  MOVWF  FF6
45A6:  MOVLW  0B
45A8:  MOVWF  FF7
45AA:  MOVLW  03
45AC:  MOVLB  2
45AE:  MOVWF  x2E
45B0:  MOVLB  0
45B2:  CALL   2DEA
45B6:  MOVLW  10
45B8:  MOVWF  FE9
45BA:  MOVFF  AD,22F
45BE:  MOVFF  AC,22E
45C2:  CALL   2E12
45C6:  MOVLW  0D
45C8:  MOVLB  2
45CA:  MOVWF  x37
45CC:  MOVLB  0
45CE:  CALL   2DC8
....................             COM1_send_str(buf); 
45D2:  MOVLW  01
45D4:  MOVLB  2
45D6:  MOVWF  x67
45D8:  MOVLW  BE
45DA:  MOVWF  x66
45DC:  MOVLB  0
45DE:  CALL   2044
....................             } 
....................           else 
45E2:  BRA    45EC
45E4:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
45E6:  MOVLB  0
45E8:  GOTO   3076
....................             } 
....................           ret = 1; 
45EC:  MOVLW  01
45EE:  MOVLB  1
45F0:  MOVWF  xBC
....................           break; 
45F2:  MOVLB  0
....................         } 
....................       break; 
45F4:  GOTO   52DC
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
45F8:  MOVLB  1
45FA:  MOVF   x25,F
45FC:  BNZ   4606
45FE:  MOVLB  0
4600:  GOTO   52DC
4604:  MOVLB  1
....................       if (c2 == 'E') 
4606:  MOVF   xE8,W
4608:  SUBLW  45
460A:  BNZ   460E
....................         { 
....................         goto get_temp; 
460C:  BRA    4B82
....................         } 
....................       break; 
460E:  MOVLB  0
4610:  GOTO   52DC
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
4614:  MOVLB  1
4616:  MOVF   x25,F
4618:  BNZ   4622
461A:  MOVLB  0
461C:  GOTO   52DC
4620:  MOVLB  1
....................       switch (c2) 
....................         { 
4622:  MOVF   xE8,W
4624:  XORLW  45
4626:  MOVLB  0
4628:  BZ    4644
462A:  XORLW  09
462C:  BTFSC  FD8.2
462E:  BRA    4726
4630:  XORLW  1C
4632:  BTFSC  FD8.2
4634:  BRA    4772
4636:  XORLW  1D
4638:  BTFSC  FD8.2
463A:  BRA    47E8
463C:  XORLW  0E
463E:  BTFSC  FD8.2
4640:  BRA    485E
4642:  BRA    48D8
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
4644:  MOVLB  1
4646:  MOVF   xE8,W
4648:  SUBLW  45
464A:  BNZ   46F0
.................... 		{ 
....................           sprintf(buf, "VE %s ID=%02lu DT=%02lu%02u\r", VERSION, setup.unit_ID, setup.year, setup.week); 
464C:  MOVLW  01
464E:  MOVWF  x9E
4650:  MOVLW  BE
4652:  MOVWF  x9D
4654:  MOVLW  E0
4656:  MOVWF  FF6
4658:  MOVLW  0B
465A:  MOVWF  FF7
465C:  MOVLW  03
465E:  MOVLB  2
4660:  MOVWF  x2E
4662:  MOVLB  0
4664:  CALL   2DEA
4668:  MOVLW  BE
466A:  MOVWF  FF6
466C:  MOVLW  08
466E:  MOVWF  FF7
4670:  GOTO   313E
4674:  MOVLW  E5
4676:  MOVWF  FF6
4678:  MOVLW  0B
467A:  MOVWF  FF7
467C:  MOVLW  04
467E:  MOVLB  2
4680:  MOVWF  x2E
4682:  MOVLB  0
4684:  CALL   2DEA
4688:  MOVLW  0B
468A:  MOVWF  FE9
468C:  MOVFF  F3,22F
4690:  MOVFF  F2,22E
4694:  CALL   2E12
4698:  MOVLW  EE
469A:  MOVWF  FF6
469C:  MOVLW  0B
469E:  MOVWF  FF7
46A0:  MOVLW  04
46A2:  MOVLB  2
46A4:  MOVWF  x2E
46A6:  MOVLB  0
46A8:  CALL   2DEA
46AC:  MOVLW  0B
46AE:  MOVWF  FE9
46B0:  MOVFF  F0,22F
46B4:  MOVFF  EF,22E
46B8:  CALL   2E12
46BC:  MOVFF  F1,22E
46C0:  MOVLW  01
46C2:  MOVLB  2
46C4:  MOVWF  x2F
46C6:  MOVLB  0
46C8:  CALL   2F62
46CC:  MOVLW  0D
46CE:  MOVLB  2
46D0:  MOVWF  x37
46D2:  MOVLB  0
46D4:  CALL   2DC8
....................           COM1_send_str(buf); 
46D8:  MOVLW  01
46DA:  MOVLB  2
46DC:  MOVWF  x67
46DE:  MOVLW  BE
46E0:  MOVWF  x66
46E2:  MOVLB  0
46E4:  CALL   2044
....................           ret = 1; 
46E8:  MOVLW  01
46EA:  MOVLB  1
46EC:  MOVWF  xBC
.................... 		} 
.................... 		else 
46EE:  BRA    4722
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
46F0:  MOVLW  02
46F2:  MOVWF  FEA
46F4:  MOVLW  0F
46F6:  MOVWF  FE9
46F8:  MOVLW  09
46FA:  MOVWF  01
46FC:  CLRF   FF7
46FE:  MOVLW  00
4700:  MOVLB  0
4702:  CALL   0894
4706:  TBLRD*-
4708:  TBLRD*+
470A:  MOVFF  FF5,FEE
470E:  DECFSZ 01,F
4710:  BRA    4708
4712:  MOVLW  02
4714:  MOVLB  2
4716:  MOVWF  x67
4718:  MOVLW  0F
471A:  MOVWF  x66
471C:  MOVLB  0
471E:  CALL   2044
....................           break; 
4722:  MOVLB  0
4724:  BRA    48D8
....................  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
4726:  MOVLB  1
4728:  MOVF   xE8,W
472A:  SUBLW  4C
472C:  BNZ   473C
.................... 		{ 
....................  
....................           set_low_power_level(); 
472E:  MOVLB  0
4730:  GOTO   3160
....................           ret = 1; 
4734:  MOVLW  01
4736:  MOVLB  1
4738:  MOVWF  xBC
.................... 		} 
.................... 		else 
473A:  BRA    476E
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
473C:  MOVLW  02
473E:  MOVWF  FEA
4740:  MOVLW  0F
4742:  MOVWF  FE9
4744:  MOVLW  09
4746:  MOVWF  01
4748:  CLRF   FF7
474A:  MOVLW  00
474C:  MOVLB  0
474E:  CALL   0894
4752:  TBLRD*-
4754:  TBLRD*+
4756:  MOVFF  FF5,FEE
475A:  DECFSZ 01,F
475C:  BRA    4754
475E:  MOVLW  02
4760:  MOVLB  2
4762:  MOVWF  x67
4764:  MOVLW  0F
4766:  MOVWF  x66
4768:  MOVLB  0
476A:  CALL   2044
....................           break; 
476E:  MOVLB  0
4770:  BRA    48D8
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
4772:  MOVLB  1
4774:  MOVF   xE6,F
4776:  BZ    47D8
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4778:  MOVLW  14
477A:  MOVLB  0
477C:  ADDWF  xBC,W
477E:  MOVLB  2
4780:  MOVWF  x28
4782:  MOVLW  00
4784:  MOVLB  0
4786:  ADDWFC xBD,W
4788:  MOVLB  2
478A:  MOVWF  x29
478C:  MOVLW  01
478E:  MOVLB  1
4790:  MOVWF  x9E
4792:  MOVLW  BE
4794:  MOVWF  x9D
4796:  MOVLW  FE
4798:  MOVWF  FF6
479A:  MOVLW  0B
479C:  MOVWF  FF7
479E:  MOVLW  03
47A0:  MOVLB  2
47A2:  MOVWF  x2E
47A4:  MOVLB  0
47A6:  CALL   2DEA
47AA:  MOVLW  10
47AC:  MOVWF  FE9
47AE:  MOVFF  229,22F
47B2:  MOVFF  228,22E
47B6:  CALL   2E12
47BA:  MOVLW  0D
47BC:  MOVLB  2
47BE:  MOVWF  x37
47C0:  MOVLB  0
47C2:  CALL   2DC8
....................             COM1_send_str(buf); 
47C6:  MOVLW  01
47C8:  MOVLB  2
47CA:  MOVWF  x67
47CC:  MOVLW  BE
47CE:  MOVWF  x66
47D0:  MOVLB  0
47D2:  CALL   2044
....................             } 
....................           else 
47D6:  BRA    47DE
....................             set_power_level(); 
47D8:  MOVLB  0
47DA:  GOTO   31D0
....................             ret = 1; 
47DE:  MOVLW  01
47E0:  MOVLB  1
47E2:  MOVWF  xBC
....................           break; 
47E4:  MOVLB  0
47E6:  BRA    48D8
....................  
....................         case 'M': // manual power level 
....................           if (query) 
47E8:  MOVLB  1
47EA:  MOVF   xE6,F
47EC:  BZ    483A
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
47EE:  MOVLW  01
47F0:  MOVWF  x9E
47F2:  MOVLW  BE
47F4:  MOVWF  x9D
47F6:  MOVLW  06
47F8:  MOVWF  FF6
47FA:  MOVLW  0C
47FC:  MOVWF  FF7
47FE:  MOVLW  03
4800:  MOVLB  2
4802:  MOVWF  x2E
4804:  MOVLB  0
4806:  CALL   2DEA
480A:  MOVLW  10
480C:  MOVWF  FE9
480E:  MOVFF  25,22F
4812:  MOVFF  24,22E
4816:  CALL   2E12
481A:  MOVLW  0D
481C:  MOVLB  2
481E:  MOVWF  x37
4820:  MOVLB  0
4822:  CALL   2DC8
....................             COM1_send_str(buf); 
4826:  MOVLW  01
4828:  MOVLB  2
482A:  MOVWF  x67
482C:  MOVLW  BE
482E:  MOVWF  x66
4830:  MOVLB  0
4832:  CALL   2044
....................             } 
....................           else 
4836:  BRA    485C
4838:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
483A:  MOVLB  0
483C:  CALL   2968
4840:  MOVFF  02,25
4844:  MOVFF  01,24
....................             set_AD5312(DAC_NEG_VOLT, val); 
4848:  MOVLW  01
484A:  MOVLB  2
484C:  MOVWF  x2C
484E:  MOVFF  207,22E
4852:  MOVFF  206,22D
4856:  MOVLB  0
4858:  CALL   0E88
....................             } 
....................           break; 
485C:  BRA    48D8
....................         case 'C': // manual power level 
....................           if (query) 
485E:  MOVLB  1
4860:  MOVF   xE6,F
4862:  BZ    48B0
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
4864:  MOVLW  01
4866:  MOVWF  x9E
4868:  MOVLW  BE
486A:  MOVWF  x9D
486C:  MOVLW  0E
486E:  MOVWF  FF6
4870:  MOVLW  0C
4872:  MOVWF  FF7
4874:  MOVLW  03
4876:  MOVLB  2
4878:  MOVWF  x2E
487A:  MOVLB  0
487C:  CALL   2DEA
4880:  MOVLW  10
4882:  MOVWF  FE9
4884:  MOVFF  27,22F
4888:  MOVFF  26,22E
488C:  CALL   2E12
4890:  MOVLW  0D
4892:  MOVLB  2
4894:  MOVWF  x37
4896:  MOVLB  0
4898:  CALL   2DC8
....................             COM1_send_str(buf); 
489C:  MOVLW  01
489E:  MOVLB  2
48A0:  MOVWF  x67
48A2:  MOVLW  BE
48A4:  MOVWF  x66
48A6:  MOVLB  0
48A8:  CALL   2044
....................             } 
....................           else 
48AC:  BRA    48D8
48AE:  MOVLB  1
....................             { 
....................             val = get_int(); 
48B0:  MOVLB  0
48B2:  CALL   2968
48B6:  MOVFF  02,207
48BA:  MOVFF  01,206
....................             manual_pos = val; 
48BE:  MOVFF  207,27
48C2:  MOVFF  206,26
....................             set_AD5312(DAC_POS_VOLT, val); 
48C6:  MOVLB  2
48C8:  CLRF   x2C
48CA:  MOVFF  207,22E
48CE:  MOVFF  206,22D
48D2:  MOVLB  0
48D4:  CALL   0E88
....................             } 
....................           break; 
.................... 		} 
....................       break; 
48D8:  GOTO   52DC
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
48DC:  MOVLB  1
48DE:  MOVF   x25,F
48E0:  BNZ   48EA
48E2:  MOVLB  0
48E4:  GOTO   52DC
48E8:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
48EA:  MOVF   xE8,W
48EC:  SUBLW  53
48EE:  BTFSS  FD8.2
48F0:  BRA    49E8
....................         { 
....................           if (query) 
48F2:  MOVF   xE6,F
48F4:  BZ    4942
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
48F6:  MOVLW  01
48F8:  MOVWF  x9E
48FA:  MOVLW  BE
48FC:  MOVWF  x9D
48FE:  MOVLW  16
4900:  MOVWF  FF6
4902:  MOVLW  0C
4904:  MOVWF  FF7
4906:  MOVLW  03
4908:  MOVLB  2
490A:  MOVWF  x2E
490C:  MOVLB  0
490E:  CALL   2DEA
4912:  MOVFF  B3,22E
4916:  MOVLW  1B
4918:  MOVLB  2
491A:  MOVWF  x2F
491C:  MOVLB  0
491E:  CALL   2F62
4922:  MOVLW  0D
4924:  MOVLB  2
4926:  MOVWF  x37
4928:  MOVLB  0
492A:  CALL   2DC8
....................             COM1_send_str(buf); 
492E:  MOVLW  01
4930:  MOVLB  2
4932:  MOVWF  x67
4934:  MOVLW  BE
4936:  MOVWF  x66
4938:  MOVLB  0
493A:  CALL   2044
....................             } 
....................           else 
493E:  BRA    49E0
4940:  MOVLB  1
....................             { 
....................             val = get_int(); 
4942:  MOVLB  0
4944:  CALL   2968
4948:  MOVFF  02,207
494C:  MOVFF  01,206
....................             if (val < 2) 
4950:  MOVLB  2
4952:  MOVF   x07,F
4954:  BNZ   496A
4956:  MOVF   x06,W
4958:  SUBLW  01
495A:  BNC   496A
....................               { 
....................               setup.clock_source = val; 
495C:  MOVFF  206,B3
....................               FPGA_set_reg6(); 
4960:  MOVLB  0
4962:  CALL   162E
....................               } 
....................             else 
4966:  BRA    49E0
4968:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
496A:  MOVLW  02
496C:  MOVWF  FEA
496E:  MOVLW  0F
4970:  MOVWF  FE9
4972:  MOVLW  09
4974:  MOVWF  01
4976:  CLRF   FF7
4978:  MOVLW  00
497A:  MOVLB  0
497C:  CALL   0894
4980:  TBLRD*-
4982:  TBLRD*+
4984:  MOVFF  FF5,FEE
4988:  DECFSZ 01,F
498A:  BRA    4982
498C:  MOVLW  02
498E:  MOVLB  2
4990:  MOVWF  x67
4992:  MOVLW  0F
4994:  MOVWF  x66
4996:  MOVLB  0
4998:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
499C:  MOVLW  01
499E:  MOVLB  1
49A0:  MOVWF  x9E
49A2:  MOVLW  72
49A4:  MOVWF  x9D
49A6:  MOVLW  1E
49A8:  MOVWF  FF6
49AA:  MOVLW  0C
49AC:  MOVWF  FF7
49AE:  MOVLW  07
49B0:  MOVLB  2
49B2:  MOVWF  x2E
49B4:  MOVLB  0
49B6:  CALL   2DEA
49BA:  MOVFF  B3,22E
49BE:  MOVLW  1B
49C0:  MOVLB  2
49C2:  MOVWF  x2F
49C4:  MOVLB  0
49C6:  CALL   2F62
49CA:  MOVLW  0D
49CC:  MOVLB  2
49CE:  MOVWF  x37
49D0:  MOVLB  0
49D2:  CALL   2DC8
....................               ret = 0; 
49D6:  MOVLB  1
49D8:  CLRF   xBC
....................               break; 
49DA:  MOVLB  0
49DC:  GOTO   52DC
....................               } 
....................             } 
....................  
....................         ret = 1; 
49E0:  MOVLW  01
49E2:  MOVLB  1
49E4:  MOVWF  xBC
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
49E6:  BRA    4AE4
49E8:  MOVF   xE8,W
49EA:  SUBLW  50
49EC:  BTFSS  FD8.2
49EE:  BRA    4AE4
....................         { 
....................           if (query) 
49F0:  MOVF   xE6,F
49F2:  BZ    4A40
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
49F4:  MOVLW  01
49F6:  MOVWF  x9E
49F8:  MOVLW  BE
49FA:  MOVWF  x9D
49FC:  MOVLW  2A
49FE:  MOVWF  FF6
4A00:  MOVLW  0C
4A02:  MOVWF  FF7
4A04:  MOVLW  03
4A06:  MOVLB  2
4A08:  MOVWF  x2E
4A0A:  MOVLB  0
4A0C:  CALL   2DEA
4A10:  MOVFF  B1,22E
4A14:  MOVLW  1B
4A16:  MOVLB  2
4A18:  MOVWF  x2F
4A1A:  MOVLB  0
4A1C:  CALL   2F62
4A20:  MOVLW  0D
4A22:  MOVLB  2
4A24:  MOVWF  x37
4A26:  MOVLB  0
4A28:  CALL   2DC8
....................             COM1_send_str(buf); 
4A2C:  MOVLW  01
4A2E:  MOVLB  2
4A30:  MOVWF  x67
4A32:  MOVLW  BE
4A34:  MOVWF  x66
4A36:  MOVLB  0
4A38:  CALL   2044
....................             } 
....................           else 
4A3C:  BRA    4ADE
4A3E:  MOVLB  1
....................             { 
....................             val = get_int(); 
4A40:  MOVLB  0
4A42:  CALL   2968
4A46:  MOVFF  02,207
4A4A:  MOVFF  01,206
....................             if (val < 2) 
4A4E:  MOVLB  2
4A50:  MOVF   x07,F
4A52:  BNZ   4A68
4A54:  MOVF   x06,W
4A56:  SUBLW  01
4A58:  BNC   4A68
....................               { 
....................               setup.clock_polarity = val; 
4A5A:  MOVFF  206,B1
....................               FPGA_set_reg0(); 
4A5E:  MOVLB  0
4A60:  CALL   15D2
....................               } 
....................             else 
4A64:  BRA    4ADE
4A66:  MOVLB  2
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4A68:  MOVLW  02
4A6A:  MOVWF  FEA
4A6C:  MOVLW  0F
4A6E:  MOVWF  FE9
4A70:  MOVLW  09
4A72:  MOVWF  01
4A74:  CLRF   FF7
4A76:  MOVLW  00
4A78:  MOVLB  0
4A7A:  CALL   0894
4A7E:  TBLRD*-
4A80:  TBLRD*+
4A82:  MOVFF  FF5,FEE
4A86:  DECFSZ 01,F
4A88:  BRA    4A80
4A8A:  MOVLW  02
4A8C:  MOVLB  2
4A8E:  MOVWF  x67
4A90:  MOVLW  0F
4A92:  MOVWF  x66
4A94:  MOVLB  0
4A96:  CALL   2044
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4A9A:  MOVLW  01
4A9C:  MOVLB  1
4A9E:  MOVWF  x9E
4AA0:  MOVLW  72
4AA2:  MOVWF  x9D
4AA4:  MOVLW  32
4AA6:  MOVWF  FF6
4AA8:  MOVLW  0C
4AAA:  MOVWF  FF7
4AAC:  MOVLW  07
4AAE:  MOVLB  2
4AB0:  MOVWF  x2E
4AB2:  MOVLB  0
4AB4:  CALL   2DEA
4AB8:  MOVFF  B1,22E
4ABC:  MOVLW  1B
4ABE:  MOVLB  2
4AC0:  MOVWF  x2F
4AC2:  MOVLB  0
4AC4:  CALL   2F62
4AC8:  MOVLW  0D
4ACA:  MOVLB  2
4ACC:  MOVWF  x37
4ACE:  MOVLB  0
4AD0:  CALL   2DC8
....................               ret = 0; 
4AD4:  MOVLB  1
4AD6:  CLRF   xBC
....................               break; 
4AD8:  MOVLB  0
4ADA:  GOTO   52DC
....................               } 
....................             } 
....................  
....................         ret = 1; 
4ADE:  MOVLW  01
4AE0:  MOVLB  1
4AE2:  MOVWF  xBC
....................         } 
....................       break; 
4AE4:  MOVLB  0
4AE6:  GOTO   52DC
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
4AEA:  MOVLB  1
4AEC:  MOVF   x25,F
4AEE:  BNZ   4AF8
4AF0:  MOVLB  0
4AF2:  GOTO   52DC
4AF6:  MOVLB  1
....................       switch (c2) 
....................         { 
4AF8:  MOVF   xE8,W
4AFA:  XORLW  50
4AFC:  MOVLB  0
4AFE:  BZ    4B0C
4B00:  XORLW  04
4B02:  BZ    4B80
4B04:  XORLW  06
4B06:  BTFSC  FD8.2
4B08:  BRA    4D72
4B0A:  BRA    4D9A
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
4B0C:  MOVLW  14
4B0E:  MOVWF  01
4B10:  MOVF   FC2,W
4B12:  ANDLW  83
4B14:  IORWF  01,W
4B16:  MOVWF  FC2
....................           delay_us(50); 
4B18:  MOVLW  42
4B1A:  MOVWF  00
4B1C:  DECFSZ 00,F
4B1E:  BRA    4B1C
4B20:  NOP   
....................           val = read_adc(); 
4B22:  BSF    FC2.1
4B24:  BTFSC  FC2.1
4B26:  BRA    4B24
4B28:  MOVFF  FC4,207
4B2C:  MOVLB  2
4B2E:  MOVFF  FC3,206
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
4B32:  MOVLW  01
4B34:  MOVLB  1
4B36:  MOVWF  x9E
4B38:  MOVLW  72
4B3A:  MOVWF  x9D
4B3C:  MOVLW  3E
4B3E:  MOVWF  FF6
4B40:  MOVLW  0C
4B42:  MOVWF  FF7
4B44:  MOVLW  04
4B46:  MOVLB  2
4B48:  MOVWF  x2E
4B4A:  MOVLB  0
4B4C:  CALL   2DEA
4B50:  MOVLW  10
4B52:  MOVWF  FE9
4B54:  MOVFF  207,22F
4B58:  MOVFF  206,22E
4B5C:  CALL   2E12
4B60:  MOVLW  0D
4B62:  MOVLB  2
4B64:  MOVWF  x37
4B66:  MOVLB  0
4B68:  CALL   2DC8
4B6C:  MOVLW  0A
4B6E:  MOVLB  2
4B70:  MOVWF  x37
4B72:  MOVLB  0
4B74:  CALL   2DC8
....................           ret = 0; 
4B78:  MOVLB  1
4B7A:  CLRF   xBC
....................           break; 
4B7C:  MOVLB  0
4B7E:  BRA    4D9A
4B80:  MOVLB  1
....................         case 'T': 
.................... get_temp: 
....................           set_adc_channel(A2D_TEMP); // read temperature 
4B82:  MOVLW  18
4B84:  MOVWF  01
4B86:  MOVF   FC2,W
4B88:  ANDLW  83
4B8A:  IORWF  01,W
4B8C:  MOVWF  FC2
....................           delay_us(50); 
4B8E:  MOVLW  42
4B90:  MOVWF  00
4B92:  DECFSZ 00,F
4B94:  BRA    4B92
4B96:  NOP   
....................           val = read_adc(); 
4B98:  BSF    FC2.1
4B9A:  BTFSC  FC2.1
4B9C:  BRA    4B9A
4B9E:  MOVFF  FC4,207
4BA2:  MOVLB  2
4BA4:  MOVFF  FC3,206
....................           temp = (float)val / 1024.0 * 3.3; 
4BA8:  MOVFF  207,229
4BAC:  MOVFF  206,228
4BB0:  MOVLB  0
4BB2:  GOTO   3242
4BB6:  MOVFF  00,228
4BBA:  MOVFF  01,229
4BBE:  MOVFF  02,22A
4BC2:  MOVFF  03,22B
4BC6:  MOVFF  03,250
4BCA:  MOVFF  02,24F
4BCE:  MOVFF  01,24E
4BD2:  MOVFF  00,24D
4BD6:  MOVLB  2
4BD8:  CLRF   x54
4BDA:  CLRF   x53
4BDC:  CLRF   x52
4BDE:  MOVLW  89
4BE0:  MOVWF  x51
4BE2:  MOVLB  0
4BE4:  CALL   169E
4BE8:  MOVFF  00,228
4BEC:  MOVFF  01,229
4BF0:  MOVFF  02,22A
4BF4:  MOVFF  03,22B
4BF8:  MOVFF  03,250
4BFC:  MOVFF  02,24F
4C00:  MOVFF  01,24E
4C04:  MOVFF  00,24D
4C08:  MOVLW  33
4C0A:  MOVLB  2
4C0C:  MOVWF  x54
4C0E:  MOVWF  x53
4C10:  MOVLW  53
4C12:  MOVWF  x52
4C14:  MOVLW  80
4C16:  MOVWF  x51
4C18:  MOVLB  0
4C1A:  CALL   17FC
4C1E:  MOVFF  03,205
4C22:  MOVFF  02,204
4C26:  MOVFF  01,203
4C2A:  MOVFF  00,202
....................           temp -= 0.75; 
4C2E:  BSF    FD8.1
4C30:  MOVFF  205,22B
4C34:  MOVFF  204,22A
4C38:  MOVFF  203,229
4C3C:  MOVFF  202,228
4C40:  MOVLB  2
4C42:  CLRF   x2F
4C44:  CLRF   x2E
4C46:  MOVLW  40
4C48:  MOVWF  x2D
4C4A:  MOVLW  7E
4C4C:  MOVWF  x2C
4C4E:  MOVLB  0
4C50:  CALL   22B6
4C54:  MOVFF  03,205
4C58:  MOVFF  02,204
4C5C:  MOVFF  01,203
4C60:  MOVFF  00,202
....................           temp *= 100; 
4C64:  MOVFF  205,250
4C68:  MOVFF  204,24F
4C6C:  MOVFF  203,24E
4C70:  MOVFF  202,24D
4C74:  MOVLB  2
4C76:  CLRF   x54
4C78:  CLRF   x53
4C7A:  MOVLW  48
4C7C:  MOVWF  x52
4C7E:  MOVLW  85
4C80:  MOVWF  x51
4C82:  MOVLB  0
4C84:  CALL   17FC
4C88:  MOVFF  03,205
4C8C:  MOVFF  02,204
4C90:  MOVFF  01,203
4C94:  MOVFF  00,202
....................           temp += 25.0; 
4C98:  BCF    FD8.1
4C9A:  MOVFF  205,22B
4C9E:  MOVFF  204,22A
4CA2:  MOVFF  203,229
4CA6:  MOVFF  202,228
4CAA:  MOVLB  2
4CAC:  CLRF   x2F
4CAE:  CLRF   x2E
4CB0:  MOVLW  48
4CB2:  MOVWF  x2D
4CB4:  MOVLW  83
4CB6:  MOVWF  x2C
4CB8:  MOVLB  0
4CBA:  CALL   22B6
4CBE:  MOVFF  03,205
4CC2:  MOVFF  02,204
4CC6:  MOVFF  01,203
4CCA:  MOVFF  00,202
....................           if(setup.pwr) 
4CCE:  MOVF   xAE,W
4CD0:  IORWF  xAF,W
4CD2:  BZ    4D2E
....................             { 
....................             sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", temp); 
4CD4:  MOVLW  01
4CD6:  MOVLB  1
4CD8:  MOVWF  x9E
4CDA:  MOVLW  72
4CDC:  MOVWF  x9D
4CDE:  MOVLW  48
4CE0:  MOVWF  FF6
4CE2:  MOVLW  0C
4CE4:  MOVWF  FF7
4CE6:  MOVLW  06
4CE8:  MOVLB  2
4CEA:  MOVWF  x2E
4CEC:  MOVLB  0
4CEE:  CALL   2DEA
4CF2:  MOVLW  05
4CF4:  MOVWF  FE9
4CF6:  MOVFF  205,22B
4CFA:  MOVFF  204,22A
4CFE:  MOVFF  203,229
4D02:  MOVFF  202,228
4D06:  MOVLW  02
4D08:  MOVLB  2
4D0A:  MOVWF  x2C
4D0C:  MOVLB  0
4D0E:  GOTO   327A
4D12:  MOVLW  53
4D14:  MOVWF  FF6
4D16:  MOVLW  0C
4D18:  MOVWF  FF7
4D1A:  MOVLW  08
4D1C:  MOVLB  2
4D1E:  MOVWF  x2E
4D20:  MOVLB  0
4D22:  CALL   2DEA
....................             ret = 0; 
4D26:  MOVLB  1
4D28:  CLRF   xBC
....................             } 
....................             else 
4D2A:  BRA    4D6E
4D2C:  MOVLB  0
....................             { 
....................             temp = 0; 
4D2E:  MOVLB  2
4D30:  CLRF   x05
4D32:  CLRF   x04
4D34:  CLRF   x03
4D36:  CLRF   x02
....................             COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
4D38:  MOVLW  02
4D3A:  MOVWF  FEA
4D3C:  MOVLW  0F
4D3E:  MOVWF  FE9
4D40:  MOVLW  15
4D42:  MOVWF  01
4D44:  CLRF   FF7
4D46:  MOVLW  00
4D48:  MOVLB  0
4D4A:  CALL   08CE
4D4E:  TBLRD*-
4D50:  TBLRD*+
4D52:  MOVFF  FF5,FEE
4D56:  DECFSZ 01,F
4D58:  BRA    4D50
4D5A:  MOVLW  02
4D5C:  MOVLB  2
4D5E:  MOVWF  x67
4D60:  MOVLW  0F
4D62:  MOVWF  x66
4D64:  MOVLB  0
4D66:  CALL   2044
....................             ret = 0; 
4D6A:  MOVLB  1
4D6C:  CLRF   xBC
....................              
....................             } 
....................           break; 
4D6E:  MOVLB  0
4D70:  BRA    4D9A
....................  
....................         case 'R': 
....................                 set_adc_channel(A2D_PREV); // select forward power input 
4D72:  MOVLW  10
4D74:  MOVWF  01
4D76:  MOVF   FC2,W
4D78:  ANDLW  83
4D7A:  IORWF  01,W
4D7C:  MOVWF  FC2
....................                 delay_us(20); 
4D7E:  MOVLW  1A
4D80:  MOVWF  00
4D82:  DECFSZ 00,F
4D84:  BRA    4D82
4D86:  NOP   
....................                 revp = read_adc(); 
4D88:  BSF    FC2.1
4D8A:  BTFSC  FC2.1
4D8C:  BRA    4D8A
4D8E:  MOVFF  FC4,104
4D92:  MOVLB  1
4D94:  MOVFF  FC3,103
4D98:  MOVLB  0
....................                 } 
....................               break; 
4D9A:  BRA    52DC
....................       break; 
4D9C:  BRA    52DC
....................  
....................       case 'Q': //statusl      if (!ttccp_login) break; 
....................  
....................       COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
4D9E:  MOVLW  02
4DA0:  MOVWF  FEA
4DA2:  MOVLW  0F
4DA4:  MOVWF  FE9
4DA6:  MOVLW  19
4DA8:  MOVWF  01
4DAA:  CLRF   FF7
4DAC:  MOVLW  00
4DAE:  CALL   08F4
4DB2:  TBLRD*-
4DB4:  TBLRD*+
4DB6:  MOVFF  FF5,FEE
4DBA:  DECFSZ 01,F
4DBC:  BRA    4DB4
4DBE:  MOVLW  02
4DC0:  MOVLB  2
4DC2:  MOVWF  x67
4DC4:  MOVLW  0F
4DC6:  MOVWF  x66
4DC8:  MOVLB  0
4DCA:  CALL   2044
....................       COM1_send_str(VERSION); 
4DCE:  MOVLW  02
4DD0:  MOVWF  FEA
4DD2:  MOVLW  0F
4DD4:  MOVWF  FE9
4DD6:  MOVWF  01
4DD8:  CLRF   FF7
4DDA:  MOVLW  00
4DDC:  CALL   08AE
4DE0:  TBLRD*-
4DE2:  TBLRD*+
4DE4:  MOVFF  FF5,FEE
4DE8:  DECFSZ 01,F
4DEA:  BRA    4DE2
4DEC:  MOVLW  02
4DEE:  MOVLB  2
4DF0:  MOVWF  x67
4DF2:  MOVLW  0F
4DF4:  MOVWF  x66
4DF6:  MOVLB  0
4DF8:  CALL   2044
....................       sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................               setup.unit_ID, setup.year, setup.week); 
4DFC:  MOVLW  01
4DFE:  MOVLB  1
4E00:  MOVWF  x9E
4E02:  MOVLW  BE
4E04:  MOVWF  x9D
4E06:  MOVLW  5C
4E08:  MOVWF  FF6
4E0A:  MOVLW  0C
4E0C:  MOVWF  FF7
4E0E:  MOVLW  05
4E10:  MOVLB  2
4E12:  MOVWF  x2E
4E14:  MOVLB  0
4E16:  CALL   2DEA
4E1A:  MOVLW  10
4E1C:  MOVWF  FE9
4E1E:  MOVFF  F3,22F
4E22:  MOVFF  F2,22E
4E26:  CALL   2E12
4E2A:  MOVLW  64
4E2C:  MOVWF  FF6
4E2E:  MOVLW  0C
4E30:  MOVWF  FF7
4E32:  MOVLW  04
4E34:  MOVLB  2
4E36:  MOVWF  x2E
4E38:  MOVLB  0
4E3A:  CALL   2DEA
4E3E:  MOVLW  0B
4E40:  MOVWF  FE9
4E42:  MOVFF  F0,22F
4E46:  MOVFF  EF,22E
4E4A:  CALL   2E12
4E4E:  MOVFF  F1,22E
4E52:  MOVLW  01
4E54:  MOVLB  2
4E56:  MOVWF  x2F
4E58:  MOVLB  0
4E5A:  CALL   2F62
4E5E:  MOVLW  0D
4E60:  MOVLB  2
4E62:  MOVWF  x37
4E64:  MOVLB  0
4E66:  CALL   2DC8
....................       COM1_send_str(buf); 
4E6A:  MOVLW  01
4E6C:  MOVLB  2
4E6E:  MOVWF  x67
4E70:  MOVLW  BE
4E72:  MOVWF  x66
4E74:  MOVLB  0
4E76:  CALL   2044
....................  
....................                 set_adc_channel(A2D_PREV); // select forward power input 
4E7A:  MOVLW  10
4E7C:  MOVWF  01
4E7E:  MOVF   FC2,W
4E80:  ANDLW  83
4E82:  IORWF  01,W
4E84:  MOVWF  FC2
....................                 delay_us(20); 
4E86:  MOVLW  1A
4E88:  MOVWF  00
4E8A:  DECFSZ 00,F
4E8C:  BRA    4E8A
4E8E:  NOP   
....................                 revp = read_adc(); 
4E90:  BSF    FC2.1
4E92:  BTFSC  FC2.1
4E94:  BRA    4E92
4E96:  MOVFF  FC4,104
4E9A:  MOVLB  1
4E9C:  MOVFF  FC3,103
....................  
....................           if (revp <= 580) 
4EA0:  MOVF   x04,W
4EA2:  SUBLW  02
4EA4:  BNC   4ECE
4EA6:  BNZ   4EAE
4EA8:  MOVF   x03,W
4EAA:  SUBLW  44
4EAC:  BNC   4ECE
....................           strcpy(revstat, "GOOD"); 
4EAE:  MOVLW  01
4EB0:  MOVWF  FEA
4EB2:  MOVLW  E9
4EB4:  MOVWF  FE9
4EB6:  MOVLW  00
4EB8:  MOVLB  0
4EBA:  CALL   091E
4EBE:  TBLRD*-
4EC0:  TBLRD*+
4EC2:  MOVF   FF5,W
4EC4:  MOVWF  FEE
4EC6:  IORLW  00
4EC8:  BNZ   4EC0
....................           else 
4ECA:  BRA    4EEA
4ECC:  MOVLB  1
....................           strcpy(revstat, "BAD"); 
4ECE:  MOVLW  01
4ED0:  MOVWF  FEA
4ED2:  MOVLW  E9
4ED4:  MOVWF  FE9
4ED6:  MOVLW  00
4ED8:  MOVLB  0
4EDA:  CALL   0934
4EDE:  TBLRD*-
4EE0:  TBLRD*+
4EE2:  MOVF   FF5,W
4EE4:  MOVWF  FEE
4EE6:  IORLW  00
4EE8:  BNZ   4EE0
....................  
....................           if(setup.rp) 
4EEA:  MOVF   xFA,W
4EEC:  IORWF  xFB,W
4EEE:  BZ    4EF8
....................             rp=0; 
4EF0:  MOVLB  2
4EF2:  CLRF   x09
4EF4:  CLRF   x08
....................             else 
4EF6:  BRA    4F00
....................               rp=1; 
4EF8:  MOVLB  2
4EFA:  CLRF   x09
4EFC:  MOVLW  01
4EFE:  MOVWF  x08
....................  
....................  
....................       sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................               setup.frequency, revstat, setup.power_level+20, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
4F00:  MOVLW  14
4F02:  MOVLB  0
4F04:  ADDWF  xBC,W
4F06:  MOVLB  2
4F08:  MOVWF  x28
4F0A:  MOVLW  00
4F0C:  MOVLB  0
4F0E:  ADDWFC xBD,W
4F10:  MOVLB  2
4F12:  MOVWF  x29
4F14:  MOVFF  AD,22D
4F18:  MOVFF  AC,22C
4F1C:  CLRF   x2F
4F1E:  MOVLW  64
4F20:  MOVWF  x2E
4F22:  MOVLB  0
4F24:  CALL   342A
4F28:  MOVFF  02,22B
4F2C:  MOVFF  01,22A
4F30:  MOVFF  AD,22D
4F34:  MOVFF  AC,22C
4F38:  MOVLB  2
4F3A:  CLRF   x2F
4F3C:  MOVLW  64
4F3E:  MOVWF  x2E
4F40:  MOVLB  0
4F42:  CALL   342A
4F46:  MOVFF  00,22C
4F4A:  MOVFF  03,22D
4F4E:  MOVLW  01
4F50:  MOVLB  1
4F52:  MOVWF  x9E
4F54:  MOVLW  BE
4F56:  MOVWF  x9D
4F58:  MOVLW  74
4F5A:  MOVWF  FF6
4F5C:  MOVLW  0C
4F5E:  MOVWF  FF7
4F60:  MOVLW  08
4F62:  MOVLB  2
4F64:  MOVWF  x2E
4F66:  MOVLB  0
4F68:  CALL   2DEA
4F6C:  MOVLW  10
4F6E:  MOVWF  FE9
4F70:  MOVFF  BB,22F
4F74:  MOVFF  BA,22E
4F78:  CALL   2E12
4F7C:  MOVLW  7F
4F7E:  MOVWF  FF6
4F80:  MOVLW  0C
4F82:  MOVWF  FF7
4F84:  MOVLW  06
4F86:  MOVLB  2
4F88:  MOVWF  x2E
4F8A:  MOVLB  0
4F8C:  CALL   2DEA
4F90:  MOVLW  01
4F92:  MOVWF  FEA
4F94:  MOVLW  E9
4F96:  MOVWF  FE9
4F98:  GOTO   3470
4F9C:  MOVLW  87
4F9E:  MOVWF  FF6
4FA0:  MOVLW  0C
4FA2:  MOVWF  FF7
4FA4:  MOVLW  07
4FA6:  MOVLB  2
4FA8:  MOVWF  x2E
4FAA:  MOVLB  0
4FAC:  CALL   2DEA
4FB0:  MOVLW  10
4FB2:  MOVWF  FE9
4FB4:  MOVFF  229,22F
4FB8:  MOVFF  228,22E
4FBC:  CALL   2E12
4FC0:  MOVLW  91
4FC2:  MOVWF  FF6
4FC4:  MOVLW  0C
4FC6:  MOVWF  FF7
4FC8:  MOVLW  05
4FCA:  MOVLB  2
4FCC:  MOVWF  x2E
4FCE:  MOVLB  0
4FD0:  CALL   2DEA
4FD4:  MOVLW  10
4FD6:  MOVWF  FE9
4FD8:  MOVFF  22B,22F
4FDC:  MOVFF  22A,22E
4FE0:  CALL   2E12
4FE4:  MOVLW  2E
4FE6:  MOVLB  2
4FE8:  MOVWF  x37
4FEA:  MOVLB  0
4FEC:  CALL   2DC8
4FF0:  MOVLW  10
4FF2:  MOVWF  FE9
4FF4:  MOVFF  22D,22F
4FF8:  MOVFF  22C,22E
4FFC:  CALL   2E12
5000:  MOVLW  9D
5002:  MOVWF  FF6
5004:  MOVLW  0C
5006:  MOVWF  FF7
5008:  MOVLW  09
500A:  MOVLB  2
500C:  MOVWF  x2E
500E:  MOVLB  0
5010:  CALL   2DEA
5014:  MOVFF  B0,22E
5018:  MOVLW  1B
501A:  MOVLB  2
501C:  MOVWF  x2F
501E:  MOVLB  0
5020:  CALL   2F62
5024:  MOVLW  A8
5026:  MOVWF  FF6
5028:  MOVLW  0C
502A:  MOVWF  FF7
502C:  MOVLW  05
502E:  MOVLB  2
5030:  MOVWF  x2E
5032:  MOVLB  0
5034:  CALL   2DEA
5038:  MOVFF  B3,22E
503C:  MOVLW  1B
503E:  MOVLB  2
5040:  MOVWF  x2F
5042:  MOVLB  0
5044:  CALL   2F62
5048:  MOVLW  AF
504A:  MOVWF  FF6
504C:  MOVLW  0C
504E:  MOVWF  FF7
5050:  MOVLW  05
5052:  MOVLB  2
5054:  MOVWF  x2E
5056:  MOVLB  0
5058:  CALL   2DEA
505C:  MOVLW  10
505E:  MOVWF  FE9
5060:  MOVFF  AF,22F
5064:  MOVFF  AE,22E
5068:  CALL   2E12
506C:  MOVLW  0D
506E:  MOVLB  2
5070:  MOVWF  x37
5072:  MOVLB  0
5074:  CALL   2DC8
....................       COM1_send_str(buf); 
5078:  MOVLW  01
507A:  MOVLB  2
507C:  MOVWF  x67
507E:  MOVLW  BE
5080:  MOVWF  x66
5082:  MOVLB  0
5084:  CALL   2044
....................  
....................       sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                 setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                         setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                         setup.clock_polarity); 
5088:  MOVLW  14
508A:  ADDWF  xF4,W
508C:  MOVLB  2
508E:  MOVWF  x28
5090:  MOVLW  00
5092:  MOVLB  0
5094:  ADDWFC xF5,W
5096:  MOVLB  2
5098:  MOVWF  x29
509A:  MOVLW  01
509C:  MOVLB  1
509E:  MOVWF  x9E
50A0:  MOVLW  BE
50A2:  MOVWF  x9D
50A4:  MOVLW  BA
50A6:  MOVWF  FF6
50A8:  MOVLW  0C
50AA:  MOVWF  FF7
50AC:  MOVLW  06
50AE:  MOVLB  2
50B0:  MOVWF  x2E
50B2:  MOVLB  0
50B4:  CALL   2DEA
50B8:  MOVFF  B8,22E
50BC:  MOVLW  1B
50BE:  MOVLB  2
50C0:  MOVWF  x2F
50C2:  MOVLB  0
50C4:  CALL   2F62
50C8:  MOVLW  C2
50CA:  MOVWF  FF6
50CC:  MOVLW  0C
50CE:  MOVWF  FF7
50D0:  MOVLW  05
50D2:  MOVLB  2
50D4:  MOVWF  x2E
50D6:  MOVLB  0
50D8:  CALL   2DEA
50DC:  MOVFF  B6,22E
50E0:  MOVLW  1B
50E2:  MOVLB  2
50E4:  MOVWF  x2F
50E6:  MOVLB  0
50E8:  CALL   2F62
50EC:  MOVLW  C9
50EE:  MOVWF  FF6
50F0:  MOVLW  0C
50F2:  MOVWF  FF7
50F4:  MOVLW  05
50F6:  MOVLB  2
50F8:  MOVWF  x2E
50FA:  MOVLB  0
50FC:  CALL   2DEA
5100:  MOVFF  B2,22E
5104:  MOVLW  1B
5106:  MOVLB  2
5108:  MOVWF  x2F
510A:  MOVLB  0
510C:  CALL   2F62
5110:  MOVLW  D0
5112:  MOVWF  FF6
5114:  MOVLW  0C
5116:  MOVWF  FF7
5118:  MOVLW  05
511A:  MOVLB  2
511C:  MOVWF  x2E
511E:  MOVLB  0
5120:  CALL   2DEA
5124:  MOVLW  10
5126:  MOVWF  FE9
5128:  MOVFF  209,22F
512C:  MOVFF  208,22E
5130:  CALL   2E12
5134:  MOVLW  D8
5136:  MOVWF  FF6
5138:  MOVLW  0C
513A:  MOVWF  FF7
513C:  MOVLW  05
513E:  MOVLB  2
5140:  MOVWF  x2E
5142:  MOVLB  0
5144:  CALL   2DEA
5148:  MOVFF  B4,22E
514C:  MOVLW  1B
514E:  MOVLB  2
5150:  MOVWF  x2F
5152:  MOVLB  0
5154:  CALL   2F62
5158:  MOVLW  DF
515A:  MOVWF  FF6
515C:  MOVLW  0C
515E:  MOVWF  FF7
5160:  MOVLW  05
5162:  MOVLB  2
5164:  MOVWF  x2E
5166:  MOVLB  0
5168:  CALL   2DEA
516C:  MOVFF  B5,22E
5170:  MOVLW  1B
5172:  MOVLB  2
5174:  MOVWF  x2F
5176:  MOVLB  0
5178:  CALL   2F62
517C:  MOVLW  E6
517E:  MOVWF  FF6
5180:  MOVLW  0C
5182:  MOVWF  FF7
5184:  MOVLW  05
5186:  MOVLB  2
5188:  MOVWF  x2E
518A:  MOVLB  0
518C:  CALL   2DEA
5190:  MOVLW  10
5192:  MOVWF  FE9
5194:  MOVFF  229,22F
5198:  MOVFF  228,22E
519C:  CALL   2E12
51A0:  MOVLW  EE
51A2:  MOVWF  FF6
51A4:  MOVLW  0C
51A6:  MOVWF  FF7
51A8:  MOVLW  05
51AA:  MOVLB  2
51AC:  MOVWF  x2E
51AE:  MOVLB  0
51B0:  CALL   2DEA
51B4:  MOVLW  10
51B6:  MOVWF  FE9
51B8:  MOVFF  F7,22F
51BC:  MOVFF  F6,22E
51C0:  CALL   2E12
51C4:  MOVLW  F6
51C6:  MOVWF  FF6
51C8:  MOVLW  0C
51CA:  MOVWF  FF7
51CC:  MOVLW  05
51CE:  MOVLB  2
51D0:  MOVWF  x2E
51D2:  MOVLB  0
51D4:  CALL   2DEA
51D8:  MOVLW  10
51DA:  MOVWF  FE9
51DC:  MOVFF  F9,22F
51E0:  MOVFF  F8,22E
51E4:  CALL   2E12
51E8:  MOVLW  FE
51EA:  MOVWF  FF6
51EC:  MOVLW  0C
51EE:  MOVWF  FF7
51F0:  MOVLW  05
51F2:  MOVLB  2
51F4:  MOVWF  x2E
51F6:  MOVLB  0
51F8:  CALL   2DEA
51FC:  MOVFF  B1,22E
5200:  MOVLW  1B
5202:  MOVLB  2
5204:  MOVWF  x2F
5206:  MOVLB  0
5208:  CALL   2F62
520C:  MOVLW  0D
520E:  MOVLB  2
5210:  MOVWF  x37
5212:  MOVLB  0
5214:  CALL   2DC8
....................                                         COM1_send_str(buf); 
5218:  MOVLW  01
521A:  MOVLB  2
521C:  MOVWF  x67
521E:  MOVLW  BE
5220:  MOVWF  x66
5222:  MOVLB  0
5224:  CALL   2044
....................                                          
....................       sprintf(buf, "\r\n\nUT=%u, US=%u\r" setup.UART_Time, UART_Status); // VERSION 3.3 17.1.2016 
5228:  MOVLW  01
522A:  MOVLB  1
522C:  MOVWF  x9E
522E:  MOVLW  BE
5230:  MOVWF  x9D
5232:  MOVLW  08
5234:  MOVWF  FF6
5236:  MOVLW  0D
5238:  MOVWF  FF7
523A:  MOVLW  06
523C:  MOVLB  2
523E:  MOVWF  x2E
5240:  MOVLB  0
5242:  CALL   2DEA
5246:  MOVFF  FC,22E
524A:  MOVLW  1B
524C:  MOVLB  2
524E:  MOVWF  x2F
5250:  MOVLB  0
5252:  CALL   2F62
5256:  MOVLW  10
5258:  MOVWF  FF6
525A:  MOVLW  0D
525C:  MOVWF  FF7
525E:  MOVLW  05
5260:  MOVLB  2
5262:  MOVWF  x2E
5264:  MOVLB  0
5266:  CALL   2DEA
526A:  MOVFF  126,22E
526E:  MOVLW  1B
5270:  MOVLB  2
5272:  MOVWF  x2F
5274:  MOVLB  0
5276:  CALL   2F62
527A:  MOVLW  0D
527C:  MOVLB  2
527E:  MOVWF  x37
5280:  MOVLB  0
5282:  CALL   2DC8
....................       COM1_send_str(buf); 
5286:  MOVLW  01
5288:  MOVLB  2
528A:  MOVWF  x67
528C:  MOVLW  BE
528E:  MOVWF  x66
5290:  MOVLB  0
5292:  CALL   2044
....................  
....................       goto get_temp; 
5296:  MOVLB  1
5298:  BRA    4B82
....................       break; 
529A:  MOVLB  0
529C:  BRA    52DC
....................       default: 
....................       	{ 
....................          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
529E:  MOVLB  1
52A0:  MOVF   x25,F
52A2:  BNZ   52AA
52A4:  MOVLB  0
52A6:  BRA    52DC
52A8:  MOVLB  1
....................          COM1_send_str("\r\nFAIL\r\n"); 
52AA:  MOVLW  02
52AC:  MOVWF  FEA
52AE:  MOVLW  0F
52B0:  MOVWF  FE9
52B2:  MOVLW  09
52B4:  MOVWF  01
52B6:  CLRF   FF7
52B8:  MOVLW  00
52BA:  MOVLB  0
52BC:  CALL   0894
52C0:  TBLRD*-
52C2:  TBLRD*+
52C4:  MOVFF  FF5,FEE
52C8:  DECFSZ 01,F
52CA:  BRA    52C2
52CC:  MOVLW  02
52CE:  MOVLB  2
52D0:  MOVWF  x67
52D2:  MOVLW  0F
52D4:  MOVWF  x66
52D6:  MOVLB  0
52D8:  CALL   2044
52DC:  MOVLB  2
....................          
....................         } 
....................     } 
.................... aaa: 
....................   return; 
....................   } 
52DE:  MOVLB  0
52E0:  GOTO   53D8 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
531E:  MOVF   58,W
5320:  XORLW  00
5322:  BZ    5330
5324:  XORLW  02
5326:  BZ    535E
5328:  XORLW  01
532A:  BTFSC  FD8.2
532C:  BRA    547A
532E:  BRA    547A
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
5330:  CLRF   59
....................       comm_state = COMM_WAIT_CR; 
5332:  MOVLW  02
5334:  MOVWF  58
....................       comm_timeout = 0; 
5336:  CLRF   xAB
5338:  CLRF   xAA
....................       if (ttccp_login) 
533A:  MOVLB  1
533C:  MOVF   x25,F
533E:  BZ    535A
....................       COM1_send_str("\r>"); 
5340:  MOVLW  0D
5342:  MOVWF  xB6
5344:  MOVLW  3E
5346:  MOVWF  xB7
5348:  CLRF   xB8
534A:  MOVLW  01
534C:  MOVLB  2
534E:  MOVWF  x67
5350:  MOVLW  B6
5352:  MOVWF  x66
5354:  MOVLB  0
5356:  CALL   2044
....................       break; 
535A:  MOVLB  0
535C:  BRA    547A
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
535E:  MOVF   35,F
5360:  BTFSC  FD8.2
5362:  BRA    544E
....................         { 
....................         comm_timeout = 0; 
5364:  CLRF   xAB
5366:  CLRF   xAA
....................         chr = COM1_get_chr(); 
5368:  CALL   2862
536C:  MOVLB  1
536E:  CLRF   xB3
5370:  MOVFF  01,1B2
....................         comm_buf[comm_ridx++] = chr; 
5374:  MOVF   59,W
5376:  INCF   59,F
5378:  CLRF   03
537A:  ADDLW  5A
537C:  MOVWF  FE9
537E:  MOVLW  00
5380:  ADDWFC 03,W
5382:  MOVWF  FEA
5384:  MOVFF  1B2,FEF
....................         if (comm_ridx > 70) 
5388:  MOVF   59,W
538A:  SUBLW  46
538C:  BC    5396
....................           { 
....................           comm_state = 0; 
538E:  CLRF   58
....................           break; 
5390:  MOVLB  0
5392:  BRA    547A
5394:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
5396:  MOVF   xB2,W
5398:  SUBLW  0D
539A:  BNZ   53A0
539C:  MOVF   xB3,F
539E:  BZ    53AA
53A0:  MOVF   xB2,W
53A2:  SUBLW  3B
53A4:  BNZ   5450
53A6:  MOVF   xB3,F
53A8:  BNZ   5450
....................           { 
....................           if (chr == ';') 
53AA:  MOVF   xB2,W
53AC:  SUBLW  3B
53AE:  BNZ   53CC
53B0:  MOVF   xB3,F
53B2:  BNZ   53CC
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
53B4:  MOVLW  01
53B6:  SUBWF  59,W
53B8:  CLRF   03
53BA:  ADDLW  5A
53BC:  MOVWF  FE9
53BE:  MOVLW  00
53C0:  ADDWFC 03,W
53C2:  MOVWF  FEA
53C4:  MOVLW  0D
53C6:  MOVWF  FEF
....................             comm_ridx = 0; 
53C8:  CLRF   59
....................             } 
....................           else 
53CA:  BRA    53D2
....................             COM1_init(); 
53CC:  MOVLB  0
53CE:  CALL   0D40
....................           process_ttccp_commands(); 
53D2:  MOVLB  0
53D4:  GOTO   3496
....................           if (debug_mode) 
53D8:  MOVLB  1
53DA:  MOVF   x3D,F
53DC:  BZ    53E8
....................           	if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
53DE:  MOVF   x25,F
53E0:  BNZ   53E8
53E2:  MOVLB  0
53E4:  BRA    547A
53E6:  MOVLB  1
....................             COM1_send_str("\r\nOK\n"); 
53E8:  MOVLW  0D
53EA:  MOVWF  xB6
53EC:  MOVLW  0A
53EE:  MOVWF  xB7
53F0:  MOVLW  4F
53F2:  MOVWF  xB8
53F4:  MOVLW  4B
53F6:  MOVWF  xB9
53F8:  MOVLW  0A
53FA:  MOVWF  xBA
53FC:  CLRF   xBB
53FE:  MOVLW  01
5400:  MOVLB  2
5402:  MOVWF  x67
5404:  MOVLW  B6
5406:  MOVWF  x66
5408:  MOVLB  0
540A:  CALL   2044
....................           if (ret == 1) 
540E:  MOVLB  1
5410:  DECFSZ xB4,W
5412:  BRA    543E
5414:  MOVF   xB5,F
5416:  BNZ   543E
....................             { 
.................... 	          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5418:  MOVF   x25,F
541A:  BNZ   5422
541C:  MOVLB  0
541E:  BRA    547A
5420:  MOVLB  1
....................             COM1_send_str("\n\r"); 
5422:  MOVLW  0A
5424:  MOVWF  xB6
5426:  MOVLW  0D
5428:  MOVWF  xB7
542A:  CLRF   xB8
542C:  MOVLW  01
542E:  MOVLB  2
5430:  MOVWF  x67
5432:  MOVLW  B6
5434:  MOVWF  x66
5436:  MOVLB  0
5438:  CALL   2044
....................             } 
....................           else 
543C:  BRA    544E
....................             COM1_send_str(ttccp_error_message); 
543E:  MOVLW  01
5440:  MOVLB  2
5442:  MOVWF  x67
5444:  MOVLW  72
5446:  MOVWF  x66
5448:  MOVLB  0
544A:  CALL   2044
544E:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
5450:  MOVF   58,W
5452:  SUBLW  01
5454:  BC    5476
....................         if (TMR_100MS_COMM_TO) 
5456:  BTFSS  2E.1
5458:  BRA    5476
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
545A:  BCF    2E.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
545C:  MOVLB  0
545E:  INCF   xAA,F
5460:  BTFSC  FD8.2
5462:  INCF   xAB,F
5464:  MOVF   xAB,W
5466:  SUBLW  26
5468:  BC    5476
546A:  XORLW  FF
546C:  BNZ   5474
546E:  MOVF   xAA,W
5470:  SUBLW  10
5472:  BC    5476
....................             comm_state = 0; 
5474:  CLRF   58
....................           } 
....................       break; 
5476:  MOVLB  0
5478:  BRA    547A
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
547A:  GOTO   658A (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
63E6:  MOVF   58,W
63E8:  ADDLW  FC
63EA:  BTFSC  FD8.0
63EC:  BRA    652E
63EE:  ADDLW  04
63F0:  GOTO   6532
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
63F4:  CLRF   59
....................       comm_state++; 
63F6:  INCF   58,F
....................       break; 
63F8:  BRA    652E
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
63FA:  MOVF   35,F
63FC:  BZ    6428
....................         if ((chr = COM1_get_chr()) == '$') 
63FE:  CALL   2862
6402:  MOVLB  1
6404:  CLRF   xB3
6406:  MOVFF  01,1B2
640A:  MOVF   xB2,W
640C:  SUBLW  24
640E:  BNZ   641E
6410:  MOVF   xB3,F
6412:  BNZ   641E
....................           { 
....................           comm_state++; 
6414:  INCF   58,F
....................           comm_timeout = 0; 
6416:  MOVLB  0
6418:  CLRF   xAB
641A:  CLRF   xAA
....................           } 
....................         else 
641C:  BRA    6428
....................           inc_dec(chr); 
641E:  MOVFF  1B2,1C9
6422:  MOVLB  0
6424:  GOTO   5506
....................       break; 
6428:  BRA    652E
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
642A:  MOVF   35,F
642C:  BTFSC  FD8.2
642E:  BRA    6502
....................         { 
....................         comm_timeout = 0; 
6430:  CLRF   xAB
6432:  CLRF   xAA
....................         chr = COM1_get_chr(); 
6434:  CALL   2862
6438:  MOVLB  1
643A:  CLRF   xB3
643C:  MOVFF  01,1B2
....................         comm_buf[comm_ridx++] = chr; 
6440:  MOVF   59,W
6442:  INCF   59,F
6444:  CLRF   03
6446:  ADDLW  5A
6448:  MOVWF  FE9
644A:  MOVLW  00
644C:  ADDWFC 03,W
644E:  MOVWF  FEA
6450:  MOVFF  1B2,FEF
....................         if (comm_ridx > 70) 
6454:  MOVF   59,W
6456:  SUBLW  46
6458:  BC    6462
....................           { 
....................           comm_state = 0; 
645A:  CLRF   58
....................           break; 
645C:  MOVLB  0
645E:  BRA    652E
6460:  MOVLB  1
....................           } 
....................         if (chr == 13) 
6462:  MOVF   xB2,W
6464:  SUBLW  0D
6466:  BNZ   64C4
6468:  MOVF   xB3,F
646A:  BNZ   64C4
....................           { 
....................           ret = process_dollar_commands(); 
646C:  MOVLB  0
646E:  BRA    5D08
6470:  MOVLB  1
6472:  CLRF   xB5
6474:  MOVFF  01,1B4
....................           if (ret == 1) 
6478:  DECFSZ xB4,W
647A:  BRA    6480
647C:  MOVF   xB5,F
647E:  BNZ   6480
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
6480:  INCFSZ xB4,W
6482:  BRA    6488
6484:  MOVF   xB5,F
6486:  BZ    64BA
....................             COM1_send_str("\r\nOK\r\n*"); 
6488:  MOVLW  01
648A:  MOVWF  FEA
648C:  MOVLW  B6
648E:  MOVWF  FE9
6490:  MOVLW  08
6492:  MOVWF  01
6494:  CLRF   FF7
6496:  MOVLW  00
6498:  MOVLB  0
649A:  CALL   0948
649E:  TBLRD*-
64A0:  TBLRD*+
64A2:  MOVFF  FF5,FEE
64A6:  DECFSZ 01,F
64A8:  BRA    64A0
64AA:  MOVLW  01
64AC:  MOVLB  2
64AE:  MOVWF  x67
64B0:  MOVLW  B6
64B2:  MOVWF  x66
64B4:  MOVLB  0
64B6:  CALL   2044
....................           COM1_init(); 
64BA:  MOVLB  0
64BC:  CALL   0D40
....................           } 
....................         else if (chr == 27) 
64C0:  BRA    6502
64C2:  MOVLB  1
64C4:  MOVF   xB2,W
64C6:  SUBLW  1B
64C8:  BNZ   6504
64CA:  MOVF   xB3,F
64CC:  BNZ   6504
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
64CE:  MOVLW  01
64D0:  MOVWF  FEA
64D2:  MOVLW  BE
64D4:  MOVWF  FE9
64D6:  MOVLW  0B
64D8:  MOVWF  01
64DA:  CLRF   FF7
64DC:  MOVLW  00
64DE:  MOVLB  0
64E0:  CALL   0960
64E4:  TBLRD*-
64E6:  TBLRD*+
64E8:  MOVFF  FF5,FEE
64EC:  DECFSZ 01,F
64EE:  BRA    64E6
64F0:  MOVLW  01
64F2:  MOVLB  2
64F4:  MOVWF  x67
64F6:  MOVLW  BE
64F8:  MOVWF  x66
64FA:  MOVLB  0
64FC:  CALL   2044
....................           comm_state = 0; 
6500:  CLRF   58
6502:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
6504:  MOVF   58,W
6506:  SUBLW  01
6508:  BC    652A
....................         if (TMR_100MS_COMM_TO) 
650A:  BTFSS  2E.1
650C:  BRA    652A
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
650E:  BCF    2E.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
6510:  MOVLB  0
6512:  INCF   xAA,F
6514:  BTFSC  FD8.2
6516:  INCF   xAB,F
6518:  MOVF   xAB,W
651A:  SUBLW  26
651C:  BC    652A
651E:  XORLW  FF
6520:  BNZ   6528
6522:  MOVF   xAA,W
6524:  SUBLW  10
6526:  BC    652A
....................             comm_state = 0; 
6528:  CLRF   58
....................           } 
....................       break; 
652A:  MOVLB  0
652C:  BRA    652E
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
652E:  GOTO   658A (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
6554:  BTFSS  FAB.1
6556:  BRA    6568
....................     { 
....................     OERR = 0; 
6558:  BCF    FAB.1
....................     CREN = 0; 
655A:  BCF    FAB.4
....................     delay_us(5); 
655C:  MOVLW  06
655E:  MOVWF  00
6560:  DECFSZ 00,F
6562:  BRA    6560
6564:  NOP   
....................     CREN = 1; 
6566:  BSF    FAB.4
....................     } 
....................   if (FERR) 
6568:  BTFSS  FAB.2
656A:  BRA    6576
....................     { 
....................     FERR = 0; 
656C:  BCF    FAB.2
....................     chr = RCREG1; 
656E:  MOVLB  1
6570:  CLRF   xB1
6572:  MOVFF  FAE,1B0
....................     } 
....................   if (ttccp) 
6576:  MOVLB  1
6578:  MOVF   x3C,F
657A:  BZ    6586
....................     ttccp_handler(); 
657C:  MOVLB  0
657E:  GOTO   531E
....................   else 
6582:  MOVLB  0
6584:  BRA    658A
....................     dollar_handler(); 
6586:  MOVLB  0
6588:  BRA    63E6
....................   } 
658A:  GOTO   6774 (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
1564:  BCF    F8A.2
....................   delay_us(10); 
1566:  MOVLW  0C
1568:  MOVWF  00
156A:  DECFSZ 00,F
156C:  BRA    156A
156E:  BRA    1570
1570:  NOP   
....................   while (length--) 
....................     { 
1572:  MOVLB  2
1574:  MOVF   x3D,W
1576:  DECF   x3D,F
1578:  XORLW  00
157A:  BZ    15C0
....................     xbyte = *data++; 
157C:  MOVFF  23F,03
1580:  MOVF   x3E,W
1582:  INCF   x3E,F
1584:  BTFSC  FD8.2
1586:  INCF   x3F,F
1588:  MOVWF  FE9
158A:  MOVFF  03,FEA
158E:  MOVFF  FEF,240
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
1592:  CLRF   x41
1594:  MOVF   x41,W
1596:  SUBLW  07
1598:  BNC   15BE
....................       { 
....................       if (xbyte & 0x80) 
159A:  BTFSS  x40.7
159C:  BRA    15A2
....................         output_high(D2A_MOSI); 
159E:  BSF    F8C.4
....................       else 
15A0:  BRA    15A4
....................         output_low(D2A_MOSI); 
15A2:  BCF    F8C.4
....................       delay_us(1); 
15A4:  BRA    15A6
15A6:  BRA    15A8
....................       output_high(D2A_SCLK); 
15A8:  BSF    F8C.0
....................       delay_us(1); 
15AA:  BRA    15AC
15AC:  BRA    15AE
....................       output_low(D2A_SCLK); 
15AE:  BCF    F8C.0
....................       delay_us(1); 
15B0:  BRA    15B2
15B2:  BRA    15B4
....................       } 
15B4:  MOVF   x41,W
15B6:  INCF   x41,F
15B8:  BCF    FD8.0
15BA:  RLCF   x40,F
15BC:  BRA    1594
....................     } 
15BE:  BRA    1574
....................   delay_us(10); 
15C0:  MOVLW  0C
15C2:  MOVWF  00
15C4:  DECFSZ 00,F
15C6:  BRA    15C4
15C8:  BRA    15CA
15CA:  NOP   
....................   output_high(CSN); 
15CC:  BSF    F8A.2
....................   } 
15CE:  MOVLB  0
15D0:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5BFC:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5BFE:  MOVLB  2
5C00:  CLRF   x04
5C02:  MOVF   x04,W
5C04:  SUBLW  07
5C06:  BNC   5C3E
....................     { 
....................     if (addr & 0x80) 
5C08:  BTFSS  x00.7
5C0A:  BRA    5C10
....................       output_high(D2A_MOSI); 
5C0C:  BSF    F8C.4
....................     else 
5C0E:  BRA    5C12
....................       output_low(D2A_MOSI); 
5C10:  BCF    F8C.4
....................     delay_us(5); 
5C12:  MOVLW  06
5C14:  MOVWF  00
5C16:  DECFSZ 00,F
5C18:  BRA    5C16
5C1A:  NOP   
....................     output_high(D2A_SCLK); 
5C1C:  BSF    F8C.0
....................     delay_us(5); 
5C1E:  MOVLW  06
5C20:  MOVWF  00
5C22:  DECFSZ 00,F
5C24:  BRA    5C22
5C26:  NOP   
....................     output_low(D2A_SCLK); 
5C28:  BCF    F8C.0
....................     delay_us(5); 
5C2A:  MOVLW  06
5C2C:  MOVWF  00
5C2E:  DECFSZ 00,F
5C30:  BRA    5C2E
5C32:  NOP   
....................     } 
5C34:  MOVF   x04,W
5C36:  INCF   x04,F
5C38:  BCF    FD8.0
5C3A:  RLCF   x00,F
5C3C:  BRA    5C02
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5C3E:  CLRF   x03
5C40:  CLRF   x04
5C42:  MOVF   x04,W
5C44:  SUBLW  07
5C46:  BNC   5C8C
....................     { 
....................     xbyte <<= 1; 
5C48:  BCF    FD8.0
5C4A:  RLCF   x03,F
....................     delay_us(5); 
5C4C:  MOVLW  06
5C4E:  MOVWF  00
5C50:  DECFSZ 00,F
5C52:  BRA    5C50
5C54:  NOP   
....................     output_high(D2A_SCLK); 
5C56:  BSF    F8C.0
....................     delay_us(3); 
5C58:  MOVLW  03
5C5A:  MOVWF  00
5C5C:  DECFSZ 00,F
5C5E:  BRA    5C5C
5C60:  BRA    5C62
....................     if (input(D2A_MISO)) 
5C62:  BTFSS  F83.1
5C64:  BRA    5C72
....................       { 
....................       xbyte |= 1; 
5C66:  BSF    x03.0
....................       delay_us(2); 
5C68:  MOVLW  02
5C6A:  MOVWF  00
5C6C:  DECFSZ 00,F
5C6E:  BRA    5C6C
5C70:  NOP   
....................       } 
....................     delay_us(2); 
5C72:  MOVLW  02
5C74:  MOVWF  00
5C76:  DECFSZ 00,F
5C78:  BRA    5C76
5C7A:  NOP   
....................     output_low(D2A_SCLK); 
5C7C:  BCF    F8C.0
....................     delay_us(3); 
5C7E:  MOVLW  03
5C80:  MOVWF  00
5C82:  DECFSZ 00,F
5C84:  BRA    5C82
5C86:  BRA    5C88
....................     } 
5C88:  INCF   x04,F
5C8A:  BRA    5C42
....................   *data = xbyte; 
5C8C:  MOVFF  201,FE9
5C90:  MOVFF  202,FEA
5C94:  MOVFF  203,FEF
....................   output_high(CSN); 
5C98:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
5C9A:  BCF    F8C.0
....................   return xbyte; 
5C9C:  MOVFF  203,01
....................   } 
5CA0:  MOVLB  0
5CA2:  GOTO   60E0 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1934:  MOVFF  244,250
1938:  MOVFF  243,24F
193C:  MOVFF  242,24E
1940:  MOVFF  241,24D
1944:  BRA    1664
1946:  MOVFF  03,248
194A:  MOVFF  02,247
194E:  MOVFF  01,246
1952:  MOVFF  00,245
....................   temp = bitspersec / 240000000.0; 
1956:  MOVFF  248,250
195A:  MOVFF  247,24F
195E:  MOVFF  246,24E
1962:  MOVFF  245,24D
1966:  MOVLW  C0
1968:  MOVLB  2
196A:  MOVWF  x54
196C:  MOVLW  E1
196E:  MOVWF  x53
1970:  MOVLW  64
1972:  MOVWF  x52
1974:  MOVLW  9A
1976:  MOVWF  x51
1978:  MOVLB  0
197A:  RCALL  169E
197C:  MOVFF  03,24C
1980:  MOVFF  02,24B
1984:  MOVFF  01,24A
1988:  MOVFF  00,249
....................   temp *= 65536.0; 
198C:  MOVFF  24C,250
1990:  MOVFF  24B,24F
1994:  MOVFF  24A,24E
1998:  MOVFF  249,24D
199C:  MOVLB  2
199E:  CLRF   x54
19A0:  CLRF   x53
19A2:  CLRF   x52
19A4:  MOVLW  8F
19A6:  MOVWF  x51
19A8:  MOVLB  0
19AA:  RCALL  17FC
19AC:  MOVFF  03,24C
19B0:  MOVFF  02,24B
19B4:  MOVFF  01,24A
19B8:  MOVFF  00,249
....................   temp *= 65536.0; 
19BC:  MOVFF  24C,250
19C0:  MOVFF  24B,24F
19C4:  MOVFF  24A,24E
19C8:  MOVFF  249,24D
19CC:  MOVLB  2
19CE:  CLRF   x54
19D0:  CLRF   x53
19D2:  CLRF   x52
19D4:  MOVLW  8F
19D6:  MOVWF  x51
19D8:  MOVLB  0
19DA:  RCALL  17FC
19DC:  MOVFF  03,24C
19E0:  MOVFF  02,24B
19E4:  MOVFF  01,24A
19E8:  MOVFF  00,249
....................   return (ULONG)temp - 1; 
19EC:  MOVFF  24C,250
19F0:  MOVFF  24B,24F
19F4:  MOVFF  24A,24E
19F8:  MOVFF  249,24D
19FC:  RCALL  18F2
19FE:  MOVFF  03,250
1A02:  MOVFF  02,24F
1A06:  MOVFF  01,24E
1A0A:  MOVFF  00,24D
1A0E:  MOVLW  01
1A10:  MOVLB  2
1A12:  SUBWF  00,W
1A14:  MOVWF  00
1A16:  MOVLW  00
1A18:  SUBWFB 01,W
1A1A:  MOVWF  01
1A1C:  MOVLW  00
1A1E:  SUBWFB 02,W
1A20:  MOVWF  02
1A22:  MOVLW  00
1A24:  SUBWFB 03,W
1A26:  MOVWF  03
....................   } 
1A28:  MOVLB  0
1A2A:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
54E8:  MOVFF  1CC,1CE
....................   buf[1] = value; 
54EC:  MOVFF  1CD,1CF
....................   send_FPGA_command(2, buf); 
54F0:  MOVLW  02
54F2:  MOVLB  2
54F4:  MOVWF  x3D
54F6:  MOVLW  01
54F8:  MOVWF  x3F
54FA:  MOVLW  CE
54FC:  MOVWF  x3E
54FE:  MOVLB  0
5500:  CALL   1564
....................   } 
5504:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
5B6C:  MOVLB  2
5B6E:  CLRF   x12
5B70:  CLRF   x11
5B72:  MOVFF  203,210
5B76:  MOVFF  202,20F
5B7A:  MOVFF  212,245
5B7E:  MOVFF  211,244
5B82:  MOVFF  203,243
5B86:  MOVFF  202,242
5B8A:  CLRF   x49
5B8C:  CLRF   x48
5B8E:  MOVLW  27
5B90:  MOVWF  x47
5B92:  MOVLW  10
5B94:  MOVWF  x46
5B96:  MOVLB  0
5B98:  CALL   10BC
5B9C:  MOVFF  03,212
5BA0:  MOVFF  02,211
5BA4:  MOVFF  01,210
5BA8:  MOVFF  00,20F
5BAC:  MOVFF  03,244
5BB0:  MOVFF  02,243
5BB4:  MOVFF  01,242
5BB8:  MOVFF  00,241
5BBC:  CALL   1934
5BC0:  MOVFF  03,20E
5BC4:  MOVFF  02,20D
5BC8:  MOVFF  01,20C
5BCC:  MOVFF  00,20B
....................   buf[0] = 2; 
5BD0:  MOVLW  02
5BD2:  MOVLB  2
5BD4:  MOVWF  x04
....................   buf[1] = make8(bitf, 0); 
5BD6:  MOVFF  20B,205
....................   buf[2] = make8(bitf, 1); 
5BDA:  MOVFF  20C,206
....................   buf[3] = make8(bitf, 2); 
5BDE:  MOVFF  20D,207
....................   buf[4] = make8(bitf, 3); 
5BE2:  MOVFF  20E,208
....................   send_FPGA_command(5, buf); 
5BE6:  MOVLW  05
5BE8:  MOVWF  x3D
5BEA:  MOVLW  02
5BEC:  MOVWF  x3F
5BEE:  MOVLW  04
5BF0:  MOVWF  x3E
5BF2:  MOVLB  0
5BF4:  CALL   1564
....................   } 
5BF8:  GOTO   609A (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 0; 
*
15D2:  MOVLB  2
15D4:  CLRF   x30
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
15D6:  MOVLB  0
15D8:  SWAPF  xB1,W
15DA:  MOVWF  00
15DC:  MOVLW  F0
15DE:  ANDWF  00,F
15E0:  MOVF   00,W
15E2:  IORWF  xB0,W
15E4:  MOVLB  2
15E6:  MOVWF  x39
15E8:  MOVLB  0
15EA:  SWAPF  xB2,W
15EC:  MOVWF  00
15EE:  RLCF   00,F
15F0:  MOVLW  E0
15F2:  ANDWF  00,F
15F4:  MOVF   00,W
15F6:  MOVLB  2
15F8:  IORWF  x39,F
15FA:  MOVLB  0
15FC:  SWAPF  xB6,W
15FE:  MOVWF  00
1600:  RLCF   00,F
1602:  RLCF   00,F
1604:  MOVLW  C0
1606:  ANDWF  00,F
1608:  MOVF   00,W
160A:  MOVLB  2
160C:  IORWF  x39,F
160E:  CLRF   00
1610:  MOVLB  0
1612:  BTFSC  xB8.0
1614:  BSF    00.7
1616:  MOVF   00,W
1618:  MOVLB  2
161A:  IORWF  x39,W
161C:  MOVWF  x31
....................   send_FPGA_command(2, buf); 
161E:  MOVLW  02
1620:  MOVWF  x3D
1622:  MOVWF  x3F
1624:  MOVLW  30
1626:  MOVWF  x3E
1628:  MOVLB  0
162A:  RCALL  1564
....................   } 
162C:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 6; 
162E:  MOVLW  06
1630:  MOVLB  2
1632:  MOVWF  x30
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
1634:  BCF    FD8.0
1636:  MOVLB  0
1638:  RLCF   xB4,W
163A:  IORWF  xB3,W
163C:  MOVLB  2
163E:  MOVWF  x39
1640:  MOVLB  0
1642:  RLCF   xB5,W
1644:  MOVWF  00
1646:  RLCF   00,F
1648:  MOVLW  FC
164A:  ANDWF  00,F
164C:  MOVF   00,W
164E:  MOVLB  2
1650:  IORWF  x39,W
1652:  MOVWF  x31
....................   send_FPGA_command(2, buf); 
1654:  MOVLW  02
1656:  MOVWF  x3D
1658:  MOVWF  x3F
165A:  MOVLW  30
165C:  MOVWF  x3E
165E:  MOVLB  0
1660:  RCALL  1564
....................   } 
1662:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1A2C:  MOVLB  2
1A2E:  CLRF   x40
1A30:  CLRF   x3F
1A32:  MOVFF  AD,23E
1A36:  MOVFF  AC,23D
1A3A:  MOVFF  240,245
1A3E:  MOVFF  23F,244
1A42:  MOVFF  AD,243
1A46:  MOVFF  AC,242
1A4A:  CLRF   x49
1A4C:  CLRF   x48
1A4E:  MOVLW  27
1A50:  MOVWF  x47
1A52:  MOVLW  10
1A54:  MOVWF  x46
1A56:  MOVLB  0
1A58:  CALL   10BC
1A5C:  MOVFF  03,240
1A60:  MOVFF  02,23F
1A64:  MOVFF  01,23E
1A68:  MOVFF  00,23D
1A6C:  MOVFF  03,244
1A70:  MOVFF  02,243
1A74:  MOVFF  01,242
1A78:  MOVFF  00,241
1A7C:  RCALL  1934
1A7E:  MOVFF  03,23C
1A82:  MOVFF  02,23B
1A86:  MOVFF  01,23A
1A8A:  MOVFF  00,239
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1A8E:  MOVLW  02
1A90:  MOVLB  2
1A92:  MOVWF  x30
1A94:  MOVFF  239,231
....................   send_FPGA_command(2, buf); delay_ms(10); 
1A98:  MOVLW  02
1A9A:  MOVWF  x3D
1A9C:  MOVWF  x3F
1A9E:  MOVLW  30
1AA0:  MOVWF  x3E
1AA2:  MOVLB  0
1AA4:  RCALL  1564
1AA6:  MOVLW  0A
1AA8:  MOVLB  2
1AAA:  MOVWF  x3D
1AAC:  MOVLB  0
1AAE:  CALL   0DBA
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1AB2:  MOVLW  03
1AB4:  MOVLB  2
1AB6:  MOVWF  x30
1AB8:  MOVFF  23A,231
....................   send_FPGA_command(2, buf); delay_ms(10); 
1ABC:  MOVLW  02
1ABE:  MOVWF  x3D
1AC0:  MOVWF  x3F
1AC2:  MOVLW  30
1AC4:  MOVWF  x3E
1AC6:  MOVLB  0
1AC8:  RCALL  1564
1ACA:  MOVLW  0A
1ACC:  MOVLB  2
1ACE:  MOVWF  x3D
1AD0:  MOVLB  0
1AD2:  CALL   0DBA
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1AD6:  MOVLW  04
1AD8:  MOVLB  2
1ADA:  MOVWF  x30
1ADC:  MOVFF  23B,231
....................   send_FPGA_command(2, buf); delay_ms(10); 
1AE0:  MOVLW  02
1AE2:  MOVWF  x3D
1AE4:  MOVWF  x3F
1AE6:  MOVLW  30
1AE8:  MOVWF  x3E
1AEA:  MOVLB  0
1AEC:  RCALL  1564
1AEE:  MOVLW  0A
1AF0:  MOVLB  2
1AF2:  MOVWF  x3D
1AF4:  MOVLB  0
1AF6:  CALL   0DBA
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1AFA:  MOVLW  05
1AFC:  MOVLB  2
1AFE:  MOVWF  x30
1B00:  MOVFF  23C,231
....................   send_FPGA_command(2, buf); delay_ms(10); 
1B04:  MOVLW  02
1B06:  MOVWF  x3D
1B08:  MOVWF  x3F
1B0A:  MOVLW  30
1B0C:  MOVWF  x3E
1B0E:  MOVLB  0
1B10:  RCALL  1564
1B12:  MOVLW  0A
1B14:  MOVLB  2
1B16:  MOVWF  x3D
1B18:  MOVLB  0
1B1A:  CALL   0DBA
....................   } 
1B1E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
2FDE:  MOVLB  2
2FE0:  MOVF   x2D,W
2FE2:  MOVWF  03
2FE4:  MOVF   x2C,W
2FE6:  BTFSC  FD8.2
2FE8:  DECF   x2D,F
2FEA:  DECF   x2C,F
2FEC:  IORWF  03,W
2FEE:  BZ    3048
2FF0:  MOVF   x29,W
2FF2:  MOVWF  03
2FF4:  MOVF   x28,W
2FF6:  INCF   x28,F
2FF8:  BTFSC  FD8.2
2FFA:  INCF   x29,F
2FFC:  MOVWF  x2E
2FFE:  MOVFF  03,22F
3002:  MOVF   x2B,W
3004:  MOVWF  03
3006:  MOVF   x2A,W
3008:  INCF   x2A,F
300A:  BTFSC  FD8.2
300C:  INCF   x2B,F
300E:  MOVWF  FE9
3010:  MOVFF  03,FEA
3014:  MOVFF  FEF,230
3018:  MOVF   FF2,W
301A:  MOVWF  00
301C:  BCF    FF2.7
301E:  MOVFF  22E,FA9
3022:  MOVFF  230,FA8
3026:  BCF    FA6.6
3028:  BCF    FA6.7
302A:  BSF    FA6.2
302C:  MOVLB  F
302E:  MOVLW  55
3030:  MOVWF  FA7
3032:  MOVLW  AA
3034:  MOVWF  FA7
3036:  BSF    FA6.1
3038:  BTFSC  FA6.1
303A:  BRA    3038
303C:  BCF    FA6.2
303E:  MOVF   00,W
3040:  IORWF  FF2,F
3042:  MOVLB  0
3044:  BRA    2FDE
3046:  MOVLB  2
....................   } 
3048:  MOVLB  0
304A:  GOTO   3070 (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0DE4:  MOVLB  2
0DE6:  MOVF   x2D,W
0DE8:  MOVWF  03
0DEA:  MOVF   x2C,W
0DEC:  BTFSC  FD8.2
0DEE:  DECF   x2D,F
0DF0:  DECF   x2C,F
0DF2:  IORWF  03,W
0DF4:  BZ    0E34
0DF6:  MOVF   x2B,W
0DF8:  MOVWF  03
0DFA:  MOVF   x2A,W
0DFC:  INCF   x2A,F
0DFE:  BTFSC  FD8.2
0E00:  INCF   x2B,F
0E02:  MOVWF  FE9
0E04:  MOVFF  03,FEA
0E08:  MOVF   x29,W
0E0A:  MOVWF  03
0E0C:  MOVF   x28,W
0E0E:  INCF   x28,F
0E10:  BTFSC  FD8.2
0E12:  INCF   x29,F
0E14:  MOVWF  x30
0E16:  MOVFF  03,231
0E1A:  MOVFF  FF2,232
0E1E:  BCF    FF2.7
0E20:  MOVFF  230,FA9
0E24:  BCF    FA6.6
0E26:  BCF    FA6.7
0E28:  BSF    FA6.0
0E2A:  MOVF   FA8,W
0E2C:  BTFSC  x32.7
0E2E:  BSF    FF2.7
0E30:  MOVWF  FEF
0E32:  BRA    0DE6
....................   } 
0E34:  MOVLB  0
0E36:  GOTO   0E6C (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
304E:  MOVF   xFD,W
3050:  SUBLW  9F
3052:  BNZ   3070
3054:  MOVF   xFE,W
3056:  SUBLW  0B
3058:  BNZ   3070
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
305A:  MOVLB  2
305C:  CLRF   x29
305E:  CLRF   x28
3060:  CLRF   x2B
3062:  MOVLW  AC
3064:  MOVWF  x2A
3066:  CLRF   x2D
3068:  MOVLW  51
306A:  MOVWF  x2C
306C:  MOVLB  0
306E:  BRA    2FDE
....................   allow_write = 0; 
3070:  CLRF   xFE
3072:  CLRF   xFD
....................   } 
3074:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0E56:  MOVLB  2
0E58:  CLRF   x29
0E5A:  CLRF   x28
0E5C:  CLRF   x2B
0E5E:  MOVLW  AC
0E60:  MOVWF  x2A
0E62:  CLRF   x2D
0E64:  MOVLW  51
0E66:  MOVWF  x2C
0E68:  MOVLB  0
0E6A:  BRA    0DE4
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0E6C:  INCFSZ xB3,W
0E6E:  BRA    0E72
0E70:  BRA    0E76
0E72:  INCFSZ xB4,W
0E74:  BRA    0E86
....................     memset(&setup, 0, sizeof(setup)); 
0E76:  CLRF   FEA
0E78:  MOVLW  AC
0E7A:  MOVWF  FE9
0E7C:  CLRF   00
0E7E:  CLRF   02
0E80:  MOVLW  51
0E82:  MOVWF  01
0E84:  BRA    0E3A
....................   } 
0E86:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
*
1B8A:  INCFSZ 26,W
1B8C:  BRA    1B94
1B8E:  INCFSZ 27,W
1B90:  BRA    1B94
1B92:  BRA    1BD6
....................     { 
....................     if (TMR_100MS_POWER) 
1B94:  BTFSS  2E.3
1B96:  BRA    1BD4
....................       { 
....................       TMR_100MS_POWER = 0; 
1B98:  BCF    2E.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1B9A:  MOVLB  2
1B9C:  CLRF   x2C
1B9E:  MOVFF  27,22E
1BA2:  MOVFF  26,22D
1BA6:  MOVLB  0
1BA8:  CALL   0E88
....................       set_adc_channel(A2D_POWER); // select forward power input 
1BAC:  MOVLW  14
1BAE:  MOVWF  01
1BB0:  MOVF   FC2,W
1BB2:  ANDLW  83
1BB4:  IORWF  01,W
1BB6:  MOVWF  FC2
....................       delay_us(20); 
1BB8:  MOVLW  1A
1BBA:  MOVWF  00
1BBC:  DECFSZ 00,F
1BBE:  BRA    1BBC
1BC0:  NOP   
....................       power = read_adc(); 
1BC2:  BSF    FC2.1
1BC4:  BTFSC  FC2.1
1BC6:  BRA    1BC4
1BC8:  MOVFF  FC4,229
1BCC:  MOVLB  2
1BCE:  MOVFF  FC3,228
1BD2:  MOVLB  0
....................       } 
....................     return; 
1BD4:  BRA    1F94
....................     } 
....................      
....................      if (input(STANDBY) && setup.cot ==0) 
1BD6:  BTFSS  F83.7
1BD8:  BRA    1C52
1BDA:  MOVF   xF6,F
1BDC:  BNZ   1C52
1BDE:  MOVF   xF7,F
1BE0:  BNZ   1C52
....................     { 
....................     if (setup.pwr == 1) 
1BE2:  DECFSZ xAE,W
1BE4:  BRA    1C42
1BE6:  MOVF   xAF,F
1BE8:  BNZ   1C42
....................       { 
....................       output_high(POWER_EN); 
1BEA:  BSF    F8C.6
....................       a++; 
1BEC:  INCF   xFF,F
1BEE:  BTFSS  FD8.2
1BF0:  BRA    1BF8
1BF2:  MOVLB  1
1BF4:  INCF   x00,F
1BF6:  MOVLB  0
....................        if(a==1) 
1BF8:  DECFSZ xFF,W
1BFA:  BRA    1C18
1BFC:  MOVLB  1
1BFE:  MOVF   x00,F
1C00:  BTFSC  FD8.2
1C02:  BRA    1C08
1C04:  MOVLB  0
1C06:  BRA    1C18
.................... 	{ 
.................... 	output_high(POWER_EN); 
1C08:  BSF    F8C.6
.................... 	delay_ms(50); 
1C0A:  MOVLW  32
1C0C:  MOVLB  2
1C0E:  MOVWF  x3D
1C10:  MOVLB  0
1C12:  CALL   0DBA
.................... 	update_all(); 
1C16:  RCALL  1B20
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1C18:  MOVLB  1
1C1A:  MOVF   x00,W
1C1C:  SUBLW  E9
1C1E:  BC    1C3E
1C20:  XORLW  FF
1C22:  BNZ   1C34
1C24:  MOVLB  0
1C26:  MOVF   xFF,W
1C28:  SUBLW  60
1C2A:  BTFSS  FD8.0
1C2C:  BRA    1C32
1C2E:  MOVLB  1
1C30:  BRA    1C3E
1C32:  MOVLB  1
....................       { 
....................       a=2; 
1C34:  CLRF   x00
1C36:  MOVLW  02
1C38:  MOVLB  0
1C3A:  MOVWF  xFF
1C3C:  MOVLB  1
....................       } 
....................       }   
....................     else 
1C3E:  BRA    1C4E
1C40:  MOVLB  0
....................     	{ 
....................       	output_low(POWER_EN); 
1C42:  BCF    F8C.6
....................      	a=0; 
1C44:  MOVLB  1
1C46:  CLRF   x00
1C48:  MOVLB  0
1C4A:  CLRF   xFF
1C4C:  MOVLB  1
....................     	} 	 
....................     } 
....................     else if(!input(STANDBY) && setup.cot ==0) 
1C4E:  BRA    1CC6
1C50:  MOVLB  0
1C52:  BTFSC  F83.7
1C54:  BRA    1CC4
1C56:  MOVF   xF6,F
1C58:  BNZ   1CC4
1C5A:  MOVF   xF7,F
1C5C:  BNZ   1CC4
....................       { 
....................        if(setup.pwr == 1) 
1C5E:  DECFSZ xAE,W
1C60:  BRA    1C72
1C62:  MOVF   xAF,F
1C64:  BNZ   1C72
....................        	{ 
....................          output_low(POWER_EN);  
1C66:  BCF    F8C.6
....................          a=0; 
1C68:  MOVLB  1
1C6A:  CLRF   x00
1C6C:  MOVLB  0
1C6E:  CLRF   xFF
....................         } 
....................        else 
1C70:  BRA    1C80
....................        { 
....................          output_high(POWER_EN); 
1C72:  BSF    F8C.6
....................           a++; 
1C74:  INCF   xFF,F
1C76:  BTFSS  FD8.2
1C78:  BRA    1C80
1C7A:  MOVLB  1
1C7C:  INCF   x00,F
1C7E:  MOVLB  0
....................        }    
....................        if(a==1) 
1C80:  DECFSZ xFF,W
1C82:  BRA    1CA0
1C84:  MOVLB  1
1C86:  MOVF   x00,F
1C88:  BTFSC  FD8.2
1C8A:  BRA    1C90
1C8C:  MOVLB  0
1C8E:  BRA    1CA0
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1C90:  BSF    F8C.6
.................... 	delay_ms(50); 
1C92:  MOVLW  32
1C94:  MOVLB  2
1C96:  MOVWF  x3D
1C98:  MOVLB  0
1C9A:  CALL   0DBA
.................... 	update_all(); 
1C9E:  RCALL  1B20
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1CA0:  MOVLB  1
1CA2:  MOVF   x00,W
1CA4:  SUBLW  E9
1CA6:  BC    1CC6
1CA8:  XORLW  FF
1CAA:  BNZ   1CBC
1CAC:  MOVLB  0
1CAE:  MOVF   xFF,W
1CB0:  SUBLW  60
1CB2:  BTFSS  FD8.0
1CB4:  BRA    1CBA
1CB6:  MOVLB  1
1CB8:  BRA    1CC6
1CBA:  MOVLB  1
....................       { 
....................       a=2; 
1CBC:  CLRF   x00
1CBE:  MOVLW  02
1CC0:  MOVLB  0
1CC2:  MOVWF  xFF
1CC4:  MOVLB  1
....................       } 
....................       BREAK; 
....................       }  
....................       {  
.................... } 
....................  
....................  
.................... if (!input(STANDBY) && setup.cot ==1) 
1CC6:  BTFSC  F83.7
1CC8:  BRA    1D48
1CCA:  MOVLB  0
1CCC:  DECFSZ xF6,W
1CCE:  BRA    1CD2
1CD0:  BRA    1CD6
1CD2:  MOVLB  1
1CD4:  BRA    1D48
1CD6:  MOVF   xF7,F
1CD8:  BTFSC  FD8.2
1CDA:  BRA    1CE0
1CDC:  MOVLB  1
1CDE:  BRA    1D48
....................     { 
....................     if (setup.pwr == 1) 
1CE0:  DECFSZ xAE,W
1CE2:  BRA    1D24
1CE4:  MOVF   xAF,F
1CE6:  BNZ   1D24
....................       { 
....................       output_high(POWER_EN); 
1CE8:  BSF    F8C.6
....................       b++; 
1CEA:  MOVLB  1
1CEC:  INCF   x01,F
1CEE:  BTFSC  FD8.2
1CF0:  INCF   x02,F
....................        if(b==1) 
1CF2:  DECFSZ x01,W
1CF4:  BRA    1D0C
1CF6:  MOVF   x02,F
1CF8:  BNZ   1D0C
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1CFA:  BSF    F8C.6
.................... 	delay_ms(60); 
1CFC:  MOVLW  3C
1CFE:  MOVLB  2
1D00:  MOVWF  x3D
1D02:  MOVLB  0
1D04:  CALL   0DBA
.................... 	update_all(); 
1D08:  RCALL  1B20
1D0A:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(b>60000) 
1D0C:  MOVF   x02,W
1D0E:  SUBLW  E9
1D10:  BC    1D22
1D12:  XORLW  FF
1D14:  BNZ   1D1C
1D16:  MOVF   x01,W
1D18:  SUBLW  60
1D1A:  BC    1D22
....................       { 
....................       b=2; 
1D1C:  CLRF   x02
1D1E:  MOVLW  02
1D20:  MOVWF  x01
1D22:  MOVLB  0
....................       } 
....................       }   
....................     if(setup.pwr == 0) 
1D24:  MOVF   xAE,F
1D26:  BNZ   1D44
1D28:  MOVF   xAF,F
1D2A:  BNZ   1D44
....................     	{ 
....................       	output_low(POWER_EN); 
1D2C:  BCF    F8C.6
....................      	set_AD5312(DAC_POS_VOLT, 0); 
1D2E:  MOVLB  2
1D30:  CLRF   x2C
1D32:  CLRF   x2E
1D34:  CLRF   x2D
1D36:  MOVLB  0
1D38:  CALL   0E88
....................      	b=0; 
1D3C:  MOVLB  1
1D3E:  CLRF   x02
1D40:  CLRF   x01
1D42:  MOVLB  0
....................      	} 	 
....................     } 
....................     else if(input(STANDBY) && setup.cot ==1) 
1D44:  BRA    1DEA
1D46:  MOVLB  1
1D48:  BTFSS  F83.7
1D4A:  BRA    1DE8
1D4C:  MOVLB  0
1D4E:  DECFSZ xF6,W
1D50:  BRA    1D54
1D52:  BRA    1D58
1D54:  MOVLB  1
1D56:  BRA    1DE8
1D58:  MOVF   xF7,F
1D5A:  BTFSC  FD8.2
1D5C:  BRA    1D62
1D5E:  MOVLB  1
1D60:  BRA    1DE8
....................       { 
....................        if(setup.pwr == 1) 
1D62:  DECFSZ xAE,W
1D64:  BRA    1D82
1D66:  MOVF   xAF,F
1D68:  BNZ   1D82
....................        	{ 
....................          output_low(POWER_EN);  
1D6A:  BCF    F8C.6
....................          set_AD5312(DAC_POS_VOLT, 0); 
1D6C:  MOVLB  2
1D6E:  CLRF   x2C
1D70:  CLRF   x2E
1D72:  CLRF   x2D
1D74:  MOVLB  0
1D76:  CALL   0E88
....................          b=0; 
1D7A:  MOVLB  1
1D7C:  CLRF   x02
1D7E:  CLRF   x01
1D80:  MOVLB  0
....................         } 
....................        if(setup.pwr == 0) 
1D82:  MOVF   xAE,F
1D84:  BNZ   1DAC
1D86:  MOVF   xAF,F
1D88:  BNZ   1DAC
....................        { 
.................... 	       if(b==1) 
1D8A:  MOVLB  1
1D8C:  DECFSZ x01,W
1D8E:  BRA    1DAC
1D90:  MOVF   x02,F
1D92:  BNZ   1DAC
.................... 	       { 
....................  
....................          output_high(POWER_EN); 
1D94:  BSF    F8C.6
....................          	delay_ms(60); 
1D96:  MOVLW  3C
1D98:  MOVLB  2
1D9A:  MOVWF  x3D
1D9C:  MOVLB  0
1D9E:  CALL   0DBA
.................... 			update_all(); 
1DA2:  RCALL  1B20
....................           b++; 
1DA4:  MOVLB  1
1DA6:  INCF   x01,F
1DA8:  BTFSC  FD8.2
1DAA:  INCF   x02,F
....................         }   
....................        }    
....................        if(b==1) 
1DAC:  MOVLB  1
1DAE:  DECFSZ x01,W
1DB0:  BRA    1DC8
1DB2:  MOVF   x02,F
1DB4:  BNZ   1DC8
.................... 	{ 
.................... 	output_high(POWER_EN); 
1DB6:  BSF    F8C.6
.................... 	delay_ms(50); 
1DB8:  MOVLW  32
1DBA:  MOVLB  2
1DBC:  MOVWF  x3D
1DBE:  MOVLB  0
1DC0:  CALL   0DBA
.................... 	update_all(); 
1DC4:  RCALL  1B20
1DC6:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1DC8:  MOVF   x00,W
1DCA:  SUBLW  E9
1DCC:  BC    1DE8
1DCE:  XORLW  FF
1DD0:  BNZ   1DE2
1DD2:  MOVLB  0
1DD4:  MOVF   xFF,W
1DD6:  SUBLW  60
1DD8:  BTFSS  FD8.0
1DDA:  BRA    1DE0
1DDC:  MOVLB  1
1DDE:  BRA    1DE8
1DE0:  MOVLB  1
....................       { 
....................       b=2; 
1DE2:  CLRF   x02
1DE4:  MOVLW  02
1DE6:  MOVWF  x01
1DE8:  MOVLB  0
....................       } 
....................        
....................       }  
....................       break; 
....................       {  
....................     } 
....................      
....................      if (setup.frequency < FREQ_LOW_THRESH) 
1DEA:  MOVF   xBB,W
1DEC:  SUBLW  58
1DEE:  BNC   1E0E
1DF0:  BNZ   1DF8
1DF2:  MOVF   xBA,W
1DF4:  SUBLW  29
1DF6:  BNC   1E0E
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1DF8:  MOVLW  01
1DFA:  MOVLB  2
1DFC:  MOVWF  x2C
1DFE:  MOVFF  C0,22E
1E02:  MOVFF  BF,22D
1E06:  MOVLB  0
1E08:  CALL   0E88
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1E0C:  BRA    1E46
1E0E:  MOVF   xBB,W
1E10:  SUBLW  5A
1E12:  BNC   1E32
1E14:  BNZ   1E1C
1E16:  MOVF   xBA,W
1E18:  SUBLW  F9
1E1A:  BNC   1E32
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1E1C:  MOVLW  01
1E1E:  MOVLB  2
1E20:  MOVWF  x2C
1E22:  MOVFF  C2,22E
1E26:  MOVFF  C1,22D
1E2A:  MOVLB  0
1E2C:  CALL   0E88
....................   else 
1E30:  BRA    1E46
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1E32:  MOVLW  01
1E34:  MOVLB  2
1E36:  MOVWF  x2C
1E38:  MOVFF  C4,22E
1E3C:  MOVFF  C3,22D
1E40:  MOVLB  0
1E42:  CALL   0E88
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input 
1E46:  MOVLW  14
1E48:  MOVWF  01
1E4A:  MOVF   FC2,W
1E4C:  ANDLW  83
1E4E:  IORWF  01,W
1E50:  MOVWF  FC2
....................   delay_us(20); 
1E52:  MOVLW  1A
1E54:  MOVWF  00
1E56:  DECFSZ 00,F
1E58:  BRA    1E56
1E5A:  NOP   
....................   power = read_adc(); 
1E5C:  BSF    FC2.1
1E5E:  BTFSC  FC2.1
1E60:  BRA    1E5E
1E62:  MOVFF  FC4,229
1E66:  MOVLB  2
1E68:  MOVFF  FC3,228
....................   
....................      
.................... if(setup.rc == 1) 
1E6C:  MOVLB  0
1E6E:  DECFSZ xF8,W
1E70:  BRA    1EC0
1E72:  MOVF   xF9,F
1E74:  BNZ   1EC0
.................... {      
.................... 	 if (input(HILO) && setup.rp == 1) 
1E76:  BTFSS  F83.2
1E78:  BRA    1E8C
1E7A:  DECFSZ xFA,W
1E7C:  BRA    1E8C
1E7E:  MOVF   xFB,F
1E80:  BNZ   1E8C
.................... 	 { 
....................     level = power_level;  //SV 
1E82:  MOVFF  1D,22B
1E86:  MOVFF  1C,22A
....................      }   
....................   else if (input(HILO) && setup.rp == 0) 
1E8A:  BRA    1EC0
1E8C:  BTFSS  F83.2
1E8E:  BRA    1EA2
1E90:  MOVF   xFA,F
1E92:  BNZ   1EA2
1E94:  MOVF   xFB,F
1E96:  BNZ   1EA2
....................     { 
....................     level = low_power_level; //VL 
1E98:  MOVFF  1B,22B
1E9C:  MOVFF  1A,22A
....................     } 
....................     else if(!input(HILO) && setup.rp == 0) 
1EA0:  BRA    1EC0
1EA2:  BTFSC  F83.2
1EA4:  BRA    1EB8
1EA6:  MOVF   xFA,F
1EA8:  BNZ   1EB8
1EAA:  MOVF   xFB,F
1EAC:  BNZ   1EB8
....................     { 
....................     level = power_level;  //SV 
1EAE:  MOVFF  1D,22B
1EB2:  MOVFF  1C,22A
....................     } 
....................   else 
1EB6:  BRA    1EC0
....................   { 
....................     level = low_power_level;  // VL 
1EB8:  MOVFF  1B,22B
1EBC:  MOVFF  1A,22A
....................   }   
.................... } 
.................... 	 
.................... 	if(setup.rc == 0) 
1EC0:  MOVF   xF8,F
1EC2:  BNZ   1F12
1EC4:  MOVF   xF9,F
1EC6:  BNZ   1F12
.................... 	{ 
.................... 	  if (input(HILO) && setup.rp == 0) 
1EC8:  BTFSS  F83.2
1ECA:  BRA    1EDE
1ECC:  MOVF   xFA,F
1ECE:  BNZ   1EDE
1ED0:  MOVF   xFB,F
1ED2:  BNZ   1EDE
.................... 	    { 
....................     level = power_level;  //SV  
1ED4:  MOVFF  1D,22B
1ED8:  MOVFF  1C,22A
....................         }    
....................   else if (!input(HILO) && setup.rp == 1) 
1EDC:  BRA    1F12
1EDE:  BTFSC  F83.2
1EE0:  BRA    1EF4
1EE2:  DECFSZ xFA,W
1EE4:  BRA    1EF4
1EE6:  MOVF   xFB,F
1EE8:  BNZ   1EF4
....................     { 
....................     level = power_level; 
1EEA:  MOVFF  1D,22B
1EEE:  MOVFF  1C,22A
....................     } 
....................     else if(input(HILO) && setup.rp == 1) 
1EF2:  BRA    1F12
1EF4:  BTFSS  F83.2
1EF6:  BRA    1F0A
1EF8:  DECFSZ xFA,W
1EFA:  BRA    1F0A
1EFC:  MOVF   xFB,F
1EFE:  BNZ   1F0A
....................     { 
....................     level = low_power_level; 
1F00:  MOVFF  1B,22B
1F04:  MOVFF  1A,22A
....................     } 
....................   else 
1F08:  BRA    1F12
....................     level = low_power_level; // VL 
1F0A:  MOVFF  1B,22B
1F0E:  MOVFF  1A,22A
.................... } 
....................  
....................  
....................  
....................      
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
1F12:  MOVLW  06
1F14:  MOVLB  2
1F16:  ADDWF  x2A,W
1F18:  MOVWF  01
1F1A:  MOVLW  00
1F1C:  ADDWFC x2B,W
1F1E:  MOVWF  03
1F20:  MOVF   03,W
1F22:  SUBWF  x29,W
1F24:  BNC   1F2E
1F26:  BNZ   1F4C
1F28:  MOVF   x28,W
1F2A:  SUBWF  01,W
1F2C:  BNC   1F4C
1F2E:  MOVLW  06
1F30:  SUBWF  x2A,W
1F32:  MOVWF  00
1F34:  MOVLW  00
1F36:  SUBWFB x2B,W
1F38:  MOVWF  03
1F3A:  MOVFF  00,01
1F3E:  MOVF   x29,W
1F40:  SUBWF  03,W
1F42:  BNC   1F96
1F44:  BNZ   1F4C
1F46:  MOVF   01,W
1F48:  SUBWF  x28,W
1F4A:  BC    1F96
....................     { 
....................     if (power < level) 
1F4C:  MOVF   x29,W
1F4E:  SUBWF  x2B,W
1F50:  BNC   1F6E
1F52:  BNZ   1F5A
1F54:  MOVF   x2A,W
1F56:  SUBWF  x28,W
1F58:  BC    1F6E
....................       { 
....................       if (power_control >= 150) 
1F5A:  MOVF   1F,F
1F5C:  BNZ   1F64
1F5E:  MOVF   1E,W
1F60:  SUBLW  95
1F62:  BC    1F6C
....................         power_control -= DEADBAND / 2; 
1F64:  MOVLW  03
1F66:  SUBWF  1E,F
1F68:  MOVLW  00
1F6A:  SUBWFB 1F,F
....................       } 
....................     else if (power_control <= 1010) 
1F6C:  BRA    1F84
1F6E:  MOVF   1F,W
1F70:  SUBLW  03
1F72:  BNC   1F84
1F74:  BNZ   1F7C
1F76:  MOVF   1E,W
1F78:  SUBLW  F2
1F7A:  BNC   1F84
....................       { 
....................       power_control += DEADBAND / 2; 
1F7C:  MOVLW  03
1F7E:  ADDWF  1E,F
1F80:  MOVLW  00
1F82:  ADDWFC 1F,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
1F84:  CLRF   x2C
1F86:  MOVFF  1F,22E
1F8A:  MOVFF  1E,22D
1F8E:  MOVLB  0
1F90:  CALL   0E88
1F94:  MOVLB  2
....................     }	 
....................  
....................  
....................   } 
1F96:  MOVLB  0
1F98:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0D1A:  CLRF   F89
....................   output_b(0); 
0D1C:  CLRF   F8A
....................   output_c(0); 
0D1E:  CLRF   F8B
....................   output_d(0); 
0D20:  CLRF   F8C
....................   output_e(0); 
0D22:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0D24:  MOVLW  E1
0D26:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0D28:  MOVLW  C1
0D2A:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0D2C:  MOVLW  F1
0D2E:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0D30:  MOVLW  8E
0D32:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0D34:  BSF    F96.0
0D36:  BSF    F96.1
0D38:  BCF    F96.2
0D3A:  BSF    F96.3
....................   } 
0D3C:  GOTO   0D80 (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0D56:  MOVLW  48
0D58:  IORLW  05
0D5A:  MOVWF  FBA
0D5C:  MOVLW  63
0D5E:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0D60:  CLRF   FB4
0D62:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0D64:  MOVLW  00
0D66:  IORLW  05
0D68:  MOVLB  F
0D6A:  MOVWF  x51
0D6C:  MOVLW  63
0D6E:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0D70:  CLRF   x4D
0D72:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0D74:  MOVLW  00
0D76:  MOVWF  x4A
0D78:  MOVLW  00
0D7A:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0D7C:  MOVLB  0
0D7E:  BRA    0D1A
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0D80:  MOVF   FC1,W
0D82:  ANDLW  F0
0D84:  MOVWF  FC1
0D86:  MOVLW  21
0D88:  MOVLB  F
0D8A:  MOVWF  x38
0D8C:  MOVLW  03
0D8E:  MOVWF  x3C
0D90:  MOVLW  00
0D92:  MOVWF  x39
0D94:  MOVWF  x3A
0D96:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0D98:  MOVF   FC0,W
0D9A:  ANDLW  C0
0D9C:  IORLW  25
0D9E:  MOVWF  FC0
0DA0:  BSF    FC0.7
0DA2:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0DA4:  CLRF   F77
0DA6:  MOVLW  04
0DA8:  MOVWF  F78
0DAA:  MOVWF  F79
....................  
....................   COM1_init(); 
0DAC:  MOVLB  0
0DAE:  RCALL  0D40
....................   enable_interrupts(INT_TIMER2); 
0DB0:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0DB2:  MOVLW  C0
0DB4:  IORWF  FF2,F
....................   } 
0DB6:  GOTO   6618 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1B20:  MOVFF  BB,22D
1B24:  MOVFF  BA,22C
....................   delay_ms(5); 
1B28:  MOVLW  05
1B2A:  MOVLB  2
1B2C:  MOVWF  x3D
1B2E:  MOVLB  0
1B30:  CALL   0DBA
....................   PLL_compute_freq_parameters(freq); 
1B34:  MOVFF  22D,231
1B38:  MOVFF  22C,230
1B3C:  CALL   11AC
....................   delay_ms(5); 
1B40:  MOVLW  05
1B42:  MOVLB  2
1B44:  MOVWF  x3D
1B46:  MOVLB  0
1B48:  CALL   0DBA
....................   PLL_update(); 
1B4C:  RCALL  147C
....................   delay_ms(5); 
1B4E:  MOVLW  05
1B50:  MOVLB  2
1B52:  MOVWF  x3D
1B54:  MOVLB  0
1B56:  CALL   0DBA
....................   FPGA_set_reg0(); 
1B5A:  RCALL  15D2
....................   delay_ms(5); 
1B5C:  MOVLW  05
1B5E:  MOVLB  2
1B60:  MOVWF  x3D
1B62:  MOVLB  0
1B64:  CALL   0DBA
....................   FPGA_set_reg6(); 
1B68:  RCALL  162E
....................   delay_ms(5); 
1B6A:  MOVLW  05
1B6C:  MOVLB  2
1B6E:  MOVWF  x3D
1B70:  MOVLB  0
1B72:  CALL   0DBA
....................   FPGA_set_bitrate(); 
1B76:  RCALL  1A2C
....................   bitr = setup.bitrate; 
1B78:  MOVFF  AD,22F
1B7C:  MOVFF  AC,22E
....................   power_control = 1000; 
1B80:  MOVLW  03
1B82:  MOVWF  1F
1B84:  MOVLW  E8
1B86:  MOVWF  1E
....................   } 
1B88:  RETURN 0
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
658E:  CLRF   FF8
6590:  BCF    FD0.7
6592:  BSF    07.7
6594:  CLRF   FEA
6596:  CLRF   FE9
6598:  MOVLW  70
659A:  MOVWF  FD3
659C:  BCF    F9B.6
659E:  BCF    F9B.7
65A0:  BCF    FB8.3
65A2:  MOVLW  19
65A4:  MOVWF  FAF
65A6:  MOVLW  A6
65A8:  MOVWF  FAC
65AA:  MOVLW  90
65AC:  MOVWF  FAB
65AE:  SETF   25
65B0:  SETF   24
65B2:  SETF   27
65B4:  SETF   26
65B6:  CLRF   31
65B8:  CLRF   32
65BA:  CLRF   33
65BC:  CLRF   34
65BE:  CLRF   xFE
65C0:  CLRF   xFD
65C2:  MOVLB  1
65C4:  CLRF   x00
65C6:  MOVLW  02
65C8:  MOVLB  0
65CA:  MOVWF  xFF
65CC:  MOVLB  1
65CE:  CLRF   x02
65D0:  MOVWF  x01
65D2:  CLRF   x0A
65D4:  CLRF   x09
65D6:  CLRF   x25
65D8:  CLRF   x26
65DA:  MOVLW  01
65DC:  MOVWF  x3C
65DE:  CLRF   x3D
65E0:  MOVFF  FA,19A
65E4:  MOVFF  AE,19B
65E8:  CLRF   x9E
65EA:  CLRF   x9D
65EC:  MOVF   FC1,W
65EE:  ANDLW  F0
65F0:  MOVWF  FC1
65F2:  MOVLW  00
65F4:  MOVLB  F
65F6:  MOVWF  x38
65F8:  MOVWF  x3C
65FA:  MOVWF  x39
65FC:  MOVWF  x3A
65FE:  MOVWF  x3B
6600:  MOVLB  1
6602:  CLRF   x88
6604:  CLRF   F77
6606:  CLRF   F78
6608:  CLRF   F79
660A:  MOVLW  03
660C:  MOVWF  xA0
660E:  MOVLW  E8
6610:  MOVWF  x9F
....................   int16 vouta = 1000; 
....................   init_system();  
6612:  MOVLB  0
6614:  GOTO   0D56
....................   output_high(D2A_CSB); 
6618:  BSF    F8A.1
....................   delay_ms(100); 
661A:  MOVLW  64
661C:  MOVLB  2
661E:  MOVWF  x3D
6620:  MOVLB  0
6622:  CALL   0DBA
....................   read_setup(); 
6626:  CALL   0E56
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
662A:  MOVF   xFC,F
662C:  BNZ   6632
.................... 	setup.UART_Time = 10; 
662E:  MOVLW  0A
6630:  MOVWF  xFC
....................  
....................   power_level = setup.power_in[setup.power_level]; 
6632:  BCF    FD8.0
6634:  RLCF   xBC,W
6636:  MOVWF  02
6638:  RLCF   xBD,W
663A:  MOVWF  03
663C:  MOVF   02,W
663E:  ADDLW  C5
6640:  MOVWF  FE9
6642:  MOVLW  00
6644:  ADDWFC 03,W
6646:  MOVWF  FEA
6648:  MOVFF  FEC,03
664C:  MOVF   FED,F
664E:  MOVFF  FEF,1C
6652:  MOVFF  03,1D
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6656:  BCF    FD8.0
6658:  RLCF   xF4,W
665A:  MOVWF  02
665C:  RLCF   xF5,W
665E:  MOVWF  03
6660:  MOVF   02,W
6662:  ADDLW  C5
6664:  MOVWF  FE9
6666:  MOVLW  00
6668:  ADDWFC 03,W
666A:  MOVWF  FEA
666C:  MOVFF  FEC,03
6670:  MOVF   FED,F
6672:  MOVFF  FEF,1A
6676:  MOVFF  03,1B
....................   power_control = 1000; 
667A:  MOVLW  03
667C:  MOVWF  1F
667E:  MOVLW  E8
6680:  MOVWF  1E
....................   power_output(); 
6682:  CALL   1B8A
....................    
....................  
....................   PLL_initialize(); 
6686:  GOTO   1F9A
....................   delay_ms(50); 
668A:  MOVLW  32
668C:  MOVLB  2
668E:  MOVWF  x3D
6690:  MOVLB  0
6692:  CALL   0DBA
....................   update_all(); 
6696:  CALL   1B20
....................  
....................   output_high(D2A_RESET); 
669A:  BSF    F8A.3
....................   delay_ms(50); 
669C:  MOVLW  32
669E:  MOVLB  2
66A0:  MOVWF  x3D
66A2:  MOVLB  0
66A4:  CALL   0DBA
....................   output_low(D2A_RESET); 
66A8:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
66AA:  MOVLW  0D
66AC:  MOVLB  1
66AE:  MOVWF  xA1
66B0:  MOVLW  0A
66B2:  MOVWF  xA2
66B4:  CLRF   xA3
66B6:  MOVLW  01
66B8:  MOVLB  2
66BA:  MOVWF  x67
66BC:  MOVLW  A1
66BE:  MOVWF  x66
66C0:  MOVLB  0
66C2:  CALL   2044
....................   COM1_send_str(VERSION); 
66C6:  MOVLW  01
66C8:  MOVWF  FEA
66CA:  MOVLW  A1
66CC:  MOVWF  FE9
66CE:  MOVLW  0F
66D0:  MOVWF  01
66D2:  CLRF   FF7
66D4:  MOVLW  00
66D6:  CALL   08AE
66DA:  TBLRD*-
66DC:  TBLRD*+
66DE:  MOVFF  FF5,FEE
66E2:  DECFSZ 01,F
66E4:  BRA    66DC
66E6:  MOVLW  01
66E8:  MOVLB  2
66EA:  MOVWF  x67
66EC:  MOVLW  A1
66EE:  MOVWF  x66
66F0:  MOVLB  0
66F2:  CALL   2044
....................   COM1_send_str("\r\n"); 
66F6:  MOVLW  0D
66F8:  MOVLB  1
66FA:  MOVWF  xA1
66FC:  MOVLW  0A
66FE:  MOVWF  xA2
6700:  CLRF   xA3
6702:  MOVLW  01
6704:  MOVLB  2
6706:  MOVWF  x67
6708:  MOVLW  A1
670A:  MOVWF  x66
670C:  MOVLB  0
670E:  CALL   2044
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
6712:  MOVLB  2
6714:  CLRF   x2C
6716:  MOVFF  1A0,22E
671A:  MOVFF  19F,22D
671E:  MOVLB  0
6720:  CALL   0E88
....................  
....................  
....................   delay_ms(500); 
6724:  MOVLW  02
6726:  MOVLB  1
6728:  MOVWF  xB0
672A:  MOVLW  FA
672C:  MOVLB  2
672E:  MOVWF  x3D
6730:  MOVLB  0
6732:  CALL   0DBA
6736:  MOVLB  1
6738:  DECFSZ xB0,F
673A:  BRA    672A
....................   output_high(POWER_EN); 
673C:  BSF    F8C.6
....................  
.................... update_all(); 
673E:  MOVLB  0
6740:  CALL   1B20
....................  
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6744:  CLRWDT
....................     if (TMR_100mS_BLINK) 
6746:  BTFSS  2E.0
6748:  BRA    6752
....................       { 
....................       TMR_100mS_BLINK = 0; 
674A:  BCF    2E.0
....................       output_toggle(LED1); 
674C:  BTG    F8A.4
....................       delay_us(1); 
674E:  BRA    6750
6750:  BRA    6752
....................       } 
....................     if (StartStatusFlag == 1) 
6752:  DECFSZ 34,W
6754:  BRA    6774
....................     	{         
.................... 				if (UART_Status == 1) 
6756:  MOVLB  1
6758:  DECFSZ x26,W
675A:  BRA    6768
.................... 		      { 
.................... 		      //StartStatusFlag = 0; 
.................... 		      if (!ttccp_login) 
675C:  MOVF   x25,F
675E:  BNZ   6768
.................... 		        { 
.................... 		        prepare_binary_status(); 
6760:  MOVLB  0
6762:  GOTO   2778
6766:  MOVLB  1
.................... 		        } 
.................... 		      }  
.................... 		      if (ttccp_login || (UART_Status == 0))    
6768:  MOVF   x25,F
676A:  BNZ   6770
676C:  MOVF   x26,F
676E:  BNZ   6776
.................... 		   			comm_handler(); 
6770:  MOVLB  0
6772:  BRA    6554
6774:  MOVLB  1
....................     } 
....................      
.................... 		power_output(); 
6776:  MOVLB  0
6778:  CALL   1B8A
....................    } 
677C:  BRA    6744
....................   } 
....................  
....................  
....................  
677E:  SLEEP 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
