CCS PCH C Compiler, Version 4.137, 5799               21-מרץ-16 14:34

               Filename: D:\nati\projects\1410TX\BA1410TX-V3.2 New Update Status Block\Sixteenth\BA1410TX.lst

               ROM used: 26492 bytes (81%)
                         Largest free fragment is 6272
               RAM used: 425 (28%) at main() level
                         627 (41%) worst case
               Stack:    10 worst case (8 in main + 2 for interrupts)

*
0000:  GOTO   6552
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   0998
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   0A2A
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0A30
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   0A36
0084:  BTFSS  F9D.4
0086:  GOTO   0090
008A:  BTFSC  F9E.4
008C:  GOTO   0A84
0090:  BTFSS  F7D.0
0092:  GOTO   009C
0096:  BTFSC  F7E.0
0098:  GOTO   097C
009C:  MOVFF  0E,00
00A0:  MOVFF  0F,01
00A4:  MOVFF  10,02
00A8:  MOVFF  11,03
00AC:  MOVFF  0C,FE9
00B0:  MOVFF  07,FEA
00B4:  BSF    07.7
00B6:  MOVFF  08,FE1
00BA:  MOVFF  09,FE2
00BE:  MOVFF  0A,FD9
00C2:  MOVFF  0B,FDA
00C6:  MOVFF  12,FF3
00CA:  MOVFF  13,FF4
00CE:  MOVFF  14,FFA
00D2:  MOVFF  15,FF5
00D6:  MOVFF  16,FF6
00DA:  MOVFF  17,FF7
00DE:  MOVF   04,W
00E0:  MOVFF  06,FE0
00E4:  MOVFF  05,FD8
00E8:  RETFIE 0
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0A64:  MOVLW  04
0A66:  MOVLB  2
0A68:  SUBWF  x70,F
0A6A:  BNC   0A80
0A6C:  MOVLW  02
0A6E:  MOVWF  FEA
0A70:  MOVLW  70
0A72:  MOVWF  FE9
0A74:  MOVF   FEF,W
0A76:  BZ    0A80
0A78:  BRA    0A7C
0A7A:  NOP   
0A7C:  DECFSZ FEF,F
0A7E:  BRA    0A7A
0A80:  MOVLB  0
0A82:  RETURN 0
*
0DD6:  MOVLW  02
0DD8:  MOVWF  FEA
0DDA:  MOVLW  3F
0DDC:  MOVWF  FE9
0DDE:  MOVF   FEF,W
0DE0:  BZ    0DFE
0DE2:  MOVLW  05
0DE4:  MOVWF  01
0DE6:  CLRF   00
0DE8:  DECFSZ 00,F
0DEA:  BRA    0DE8
0DEC:  DECFSZ 01,F
0DEE:  BRA    0DE6
0DF0:  MOVLW  2E
0DF2:  MOVWF  00
0DF4:  DECFSZ 00,F
0DF6:  BRA    0DF4
0DF8:  BRA    0DFA
0DFA:  DECFSZ FEF,F
0DFC:  BRA    0DE2
0DFE:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION " BA1410TX V3.3" 
.................... // VERSION 3.3 Custmmer chenge Add Status Block 21.3.2016 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UCHAR  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
....................  
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
.................... 	  	 UINT  cot; 
.................... 	  	 UINT  rc; 
.................... 	  	 UINT  rp; 
.................... 	  	 UCHAR UART_Time; // VERSION 3.3 UT 
.................... 	  	 UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
.................... 	  	 byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
.................... 	  	 byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
.................... 	      
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT a=2, b=2; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[24]; 
....................  
.................... UCHAR ttccp_login = 0; 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len); 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0EA4:  BCF    F89.2
....................  
....................   if (channel) 
0EA6:  MOVLB  2
0EA8:  MOVF   x2E,F
0EAA:  BZ    0EB0
....................     output_high(DA2_DAT);    // send to VOUTB 
0EAC:  BSF    F89.4
....................   else 
0EAE:  BRA    0EB2
....................     output_low(DA2_DAT);    // send to VOUTA 
0EB0:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0EB2:  BSF    F89.3
....................   delay_cycles(15); 
0EB4:  MOVLW  04
0EB6:  MOVWF  00
0EB8:  DECFSZ 00,F
0EBA:  BRA    0EB8
0EBC:  BRA    0EBE
....................   output_low(DA2_CLK); 
0EBE:  BCF    F89.3
....................   delay_cycles(15); 
0EC0:  MOVLW  04
0EC2:  MOVWF  00
0EC4:  DECFSZ 00,F
0EC6:  BRA    0EC4
0EC8:  BRA    0ECA
....................  
....................   output_low(DA2_DAT); 
0ECA:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0ECC:  BSF    F89.3
....................   delay_cycles(15); 
0ECE:  MOVLW  04
0ED0:  MOVWF  00
0ED2:  DECFSZ 00,F
0ED4:  BRA    0ED2
0ED6:  BRA    0ED8
....................   output_low(DA2_CLK); 
0ED8:  BCF    F89.3
....................   delay_cycles(15); 
0EDA:  MOVLW  04
0EDC:  MOVWF  00
0EDE:  DECFSZ 00,F
0EE0:  BRA    0EDE
0EE2:  BRA    0EE4
....................  
....................   output_high(DA2_CLK); 
0EE4:  BSF    F89.3
....................   delay_cycles(15); 
0EE6:  MOVLW  04
0EE8:  MOVWF  00
0EEA:  DECFSZ 00,F
0EEC:  BRA    0EEA
0EEE:  BRA    0EF0
....................   output_low(DA2_CLK); 
0EF0:  BCF    F89.3
....................   delay_cycles(15); 
0EF2:  MOVLW  04
0EF4:  MOVWF  00
0EF6:  DECFSZ 00,F
0EF8:  BRA    0EF6
0EFA:  BRA    0EFC
....................  
....................   output_high(DA2_CLK); 
0EFC:  BSF    F89.3
....................   delay_cycles(15); 
0EFE:  MOVLW  04
0F00:  MOVWF  00
0F02:  DECFSZ 00,F
0F04:  BRA    0F02
0F06:  BRA    0F08
....................   output_low(DA2_CLK); 
0F08:  BCF    F89.3
....................   delay_cycles(15); 
0F0A:  MOVLW  04
0F0C:  MOVWF  00
0F0E:  DECFSZ 00,F
0F10:  BRA    0F0E
0F12:  BRA    0F14
....................  
....................  
....................   output_high(DA2_CLK); 
0F14:  BSF    F89.3
....................   if (level & 0x0200) 
0F16:  ANDLW  00
0F18:  MOVWF  00
0F1A:  MOVF   x30,W
0F1C:  ANDLW  02
0F1E:  MOVWF  03
0F20:  MOVF   00,W
0F22:  IORWF  03,W
0F24:  BZ    0F2A
....................     output_high(DA2_DAT); 
0F26:  BSF    F89.4
....................   else 
0F28:  BRA    0F2C
....................     output_low(DA2_DAT); 
0F2A:  BCF    F89.4
....................   delay_cycles(15); 
0F2C:  MOVLW  04
0F2E:  MOVWF  00
0F30:  DECFSZ 00,F
0F32:  BRA    0F30
0F34:  BRA    0F36
....................   output_low(DA2_CLK); 
0F36:  BCF    F89.3
....................   delay_cycles(15); 
0F38:  MOVLW  04
0F3A:  MOVWF  00
0F3C:  DECFSZ 00,F
0F3E:  BRA    0F3C
0F40:  BRA    0F42
....................  
....................   output_high(DA2_CLK); 
0F42:  BSF    F89.3
....................   if (level & 0x0100) 
0F44:  ANDLW  00
0F46:  MOVWF  00
0F48:  MOVF   x30,W
0F4A:  ANDLW  01
0F4C:  MOVWF  03
0F4E:  MOVF   00,W
0F50:  IORWF  03,W
0F52:  BZ    0F58
....................     output_high(DA2_DAT); 
0F54:  BSF    F89.4
....................   else 
0F56:  BRA    0F5A
....................     output_low(DA2_DAT); 
0F58:  BCF    F89.4
....................   output_low(DA2_CLK); 
0F5A:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0F5C:  BSF    F89.3
....................   if (level & 0x0080) 
0F5E:  MOVF   x2F,W
0F60:  ANDLW  80
0F62:  MOVWF  00
0F64:  CLRF   03
0F66:  MOVF   00,W
0F68:  IORWF  03,W
0F6A:  BZ    0F70
....................     output_high(DA2_DAT); 
0F6C:  BSF    F89.4
....................   else 
0F6E:  BRA    0F72
....................     output_low(DA2_DAT); 
0F70:  BCF    F89.4
....................   delay_cycles(15); 
0F72:  MOVLW  04
0F74:  MOVWF  00
0F76:  DECFSZ 00,F
0F78:  BRA    0F76
0F7A:  BRA    0F7C
....................   output_low(DA2_CLK); 
0F7C:  BCF    F89.3
....................   delay_cycles(15); 
0F7E:  MOVLW  04
0F80:  MOVWF  00
0F82:  DECFSZ 00,F
0F84:  BRA    0F82
0F86:  BRA    0F88
....................  
....................   output_high(DA2_CLK); 
0F88:  BSF    F89.3
....................   if (level & 0x0040) 
0F8A:  MOVF   x2F,W
0F8C:  ANDLW  40
0F8E:  MOVWF  00
0F90:  CLRF   03
0F92:  MOVF   00,W
0F94:  IORWF  03,W
0F96:  BZ    0F9C
....................     output_high(DA2_DAT); 
0F98:  BSF    F89.4
....................   else 
0F9A:  BRA    0F9E
....................     output_low(DA2_DAT); 
0F9C:  BCF    F89.4
....................   delay_cycles(15); 
0F9E:  MOVLW  04
0FA0:  MOVWF  00
0FA2:  DECFSZ 00,F
0FA4:  BRA    0FA2
0FA6:  BRA    0FA8
....................   output_low(DA2_CLK); 
0FA8:  BCF    F89.3
....................   delay_cycles(15); 
0FAA:  MOVLW  04
0FAC:  MOVWF  00
0FAE:  DECFSZ 00,F
0FB0:  BRA    0FAE
0FB2:  BRA    0FB4
....................  
....................   output_high(DA2_CLK); 
0FB4:  BSF    F89.3
....................   if (level & 0x0020) 
0FB6:  MOVF   x2F,W
0FB8:  ANDLW  20
0FBA:  MOVWF  00
0FBC:  CLRF   03
0FBE:  MOVF   00,W
0FC0:  IORWF  03,W
0FC2:  BZ    0FC8
....................     output_high(DA2_DAT); 
0FC4:  BSF    F89.4
....................   else 
0FC6:  BRA    0FCA
....................     output_low(DA2_DAT); 
0FC8:  BCF    F89.4
....................   output_low(DA2_CLK); 
0FCA:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
0FCC:  BSF    F89.3
....................   if (level & 0x0010) 
0FCE:  MOVF   x2F,W
0FD0:  ANDLW  10
0FD2:  MOVWF  00
0FD4:  CLRF   03
0FD6:  MOVF   00,W
0FD8:  IORWF  03,W
0FDA:  BZ    0FE0
....................     output_high(DA2_DAT); 
0FDC:  BSF    F89.4
....................   else 
0FDE:  BRA    0FE2
....................     output_low(DA2_DAT); 
0FE0:  BCF    F89.4
....................   delay_cycles(15); 
0FE2:  MOVLW  04
0FE4:  MOVWF  00
0FE6:  DECFSZ 00,F
0FE8:  BRA    0FE6
0FEA:  BRA    0FEC
....................   output_low(DA2_CLK); 
0FEC:  BCF    F89.3
....................   delay_cycles(15); 
0FEE:  MOVLW  04
0FF0:  MOVWF  00
0FF2:  DECFSZ 00,F
0FF4:  BRA    0FF2
0FF6:  BRA    0FF8
....................  
....................   output_high(DA2_CLK); 
0FF8:  BSF    F89.3
....................   if (level & 0x0008) 
0FFA:  MOVF   x2F,W
0FFC:  ANDLW  08
0FFE:  MOVWF  00
1000:  CLRF   03
1002:  MOVF   00,W
1004:  IORWF  03,W
1006:  BZ    100C
....................     output_high(DA2_DAT); 
1008:  BSF    F89.4
....................   else 
100A:  BRA    100E
....................     output_low(DA2_DAT); 
100C:  BCF    F89.4
....................   output_low(DA2_CLK); 
100E:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1010:  BSF    F89.3
....................   if (level & 0x0004) 
1012:  MOVF   x2F,W
1014:  ANDLW  04
1016:  MOVWF  00
1018:  CLRF   03
101A:  MOVF   00,W
101C:  IORWF  03,W
101E:  BZ    1024
....................     output_high(DA2_DAT); 
1020:  BSF    F89.4
....................   else 
1022:  BRA    1026
....................     output_low(DA2_DAT); 
1024:  BCF    F89.4
....................   delay_cycles(15); 
1026:  MOVLW  04
1028:  MOVWF  00
102A:  DECFSZ 00,F
102C:  BRA    102A
102E:  BRA    1030
....................   output_low(DA2_CLK); 
1030:  BCF    F89.3
....................   delay_cycles(15); 
1032:  MOVLW  04
1034:  MOVWF  00
1036:  DECFSZ 00,F
1038:  BRA    1036
103A:  BRA    103C
....................  
....................   output_high(DA2_CLK); 
103C:  BSF    F89.3
....................   if (level & 0x0002) 
103E:  MOVF   x2F,W
1040:  ANDLW  02
1042:  MOVWF  00
1044:  CLRF   03
1046:  MOVF   00,W
1048:  IORWF  03,W
104A:  BZ    1050
....................     output_high(DA2_DAT); 
104C:  BSF    F89.4
....................   else 
104E:  BRA    1052
....................     output_low(DA2_DAT); 
1050:  BCF    F89.4
....................   output_low(DA2_CLK); 
1052:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1054:  BSF    F89.3
....................   if (level & 0x0001) 
1056:  MOVF   x2F,W
1058:  ANDLW  01
105A:  MOVWF  00
105C:  CLRF   03
105E:  MOVF   00,W
1060:  IORWF  03,W
1062:  BZ    1068
....................     output_high(DA2_DAT); 
1064:  BSF    F89.4
....................   else 
1066:  BRA    106A
....................     output_low(DA2_DAT); 
1068:  BCF    F89.4
....................   delay_cycles(15); 
106A:  MOVLW  04
106C:  MOVWF  00
106E:  DECFSZ 00,F
1070:  BRA    106E
1072:  BRA    1074
....................   output_low(DA2_CLK); 
1074:  BCF    F89.3
....................   delay_cycles(15); 
1076:  MOVLW  04
1078:  MOVWF  00
107A:  DECFSZ 00,F
107C:  BRA    107A
107E:  BRA    1080
....................  
....................  
....................   output_high(DA2_CLK); 
1080:  BSF    F89.3
....................   delay_cycles(15); 
1082:  MOVLW  04
1084:  MOVWF  00
1086:  DECFSZ 00,F
1088:  BRA    1086
108A:  BRA    108C
....................   output_low(DA2_CLK); 
108C:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
108E:  BSF    F89.3
....................   delay_cycles(15); 
1090:  MOVLW  04
1092:  MOVWF  00
1094:  DECFSZ 00,F
1096:  BRA    1094
1098:  BRA    109A
....................   delay_cycles(15); 
109A:  MOVLW  04
109C:  MOVWF  00
109E:  DECFSZ 00,F
10A0:  BRA    109E
10A2:  BRA    10A4
....................   output_low(DA2_CLK); 
10A4:  BCF    F89.3
....................   delay_cycles(15); 
10A6:  MOVLW  04
10A8:  MOVWF  00
10AA:  DECFSZ 00,F
10AC:  BRA    10AA
10AE:  BRA    10B0
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
10B0:  BSF    F89.2
....................   delay_cycles(15); 
10B2:  MOVLW  04
10B4:  MOVWF  00
10B6:  DECFSZ 00,F
10B8:  BRA    10B6
10BA:  BRA    10BC
....................   output_low(DA2_LAT); 
10BC:  BCF    F89.1
....................   delay_cycles(15); 
10BE:  MOVLW  04
10C0:  MOVWF  00
10C2:  DECFSZ 00,F
10C4:  BRA    10C2
10C6:  BRA    10C8
....................   output_high(DA2_LAT); 
10C8:  BSF    F89.1
....................   delay_cycles(15); 
10CA:  MOVLW  04
10CC:  MOVWF  00
10CE:  DECFSZ 00,F
10D0:  BRA    10CE
10D2:  BRA    10D4
....................   } 
10D4:  MOVLB  0
10D6:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5C6A:  BCF    F8A.1
....................   addr |= 0x80; 
5C6C:  MOVLB  2
5C6E:  BSF    x02.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5C70:  CLRF   x04
5C72:  MOVF   x04,W
5C74:  SUBLW  07
5C76:  BNC   5C9E
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5C78:  MOVF   x02,W
5C7A:  ANDLW  80
5C7C:  BNZ   5C82
5C7E:  BCF    F8C.4
5C80:  BRA    5C84
5C82:  BSF    F8C.4
....................     delay_us(1); 
5C84:  BRA    5C86
5C86:  BRA    5C88
....................     output_high(D2A_SCLK); 
5C88:  BSF    F8C.0
....................     delay_us(1); 
5C8A:  BRA    5C8C
5C8C:  BRA    5C8E
....................     output_low(D2A_SCLK); 
5C8E:  BCF    F8C.0
....................     delay_us(1); 
5C90:  BRA    5C92
5C92:  BRA    5C94
....................     } 
5C94:  MOVF   x04,W
5C96:  INCF   x04,F
5C98:  BCF    FD8.0
5C9A:  RLCF   x02,F
5C9C:  BRA    5C72
....................   for (ix = 0; ix < 8; ix++) 
5C9E:  CLRF   x04
5CA0:  MOVF   x04,W
5CA2:  SUBLW  07
5CA4:  BNC   5CC0
....................     { 
....................     output_high(D2A_SCLK); 
5CA6:  BSF    F8C.0
....................     delay_us(1); 
5CA8:  BRA    5CAA
5CAA:  BRA    5CAC
....................     output_low(D2A_SCLK); 
5CAC:  BCF    F8C.0
....................     delay_us(1); 
5CAE:  BRA    5CB0
5CB0:  BRA    5CB2
....................     dout <<= 1; 
5CB2:  BCF    FD8.0
5CB4:  RLCF   x03,F
....................     if (input(D2A_MISO)) 
5CB6:  BTFSS  F83.1
5CB8:  BRA    5CBC
....................       dout |= 1; 
5CBA:  BSF    x03.0
....................     } 
5CBC:  INCF   x04,F
5CBE:  BRA    5CA0
....................   output_high(D2A_CSB); 
5CC0:  BSF    F8A.1
....................   return dout; 
5CC2:  MOVFF  203,01
....................   } 
5CC6:  MOVLB  0
5CC8:  GOTO   6112 (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
5442:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
5444:  MOVLB  2
5446:  CLRF   x05
5448:  MOVF   x05,W
544A:  SUBLW  07
544C:  BNC   5474
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
544E:  MOVF   x02,W
5450:  ANDLW  80
5452:  BNZ   5458
5454:  BCF    F8C.4
5456:  BRA    545A
5458:  BSF    F8C.4
....................     delay_us(1); 
545A:  BRA    545C
545C:  BRA    545E
....................     output_high(D2A_SCLK); 
545E:  BSF    F8C.0
....................     delay_us(1); 
5460:  BRA    5462
5462:  BRA    5464
....................     output_low(D2A_SCLK); 
5464:  BCF    F8C.0
....................     delay_us(1); 
5466:  BRA    5468
5468:  BRA    546A
....................     } 
546A:  MOVF   x05,W
546C:  INCF   x05,F
546E:  BCF    FD8.0
5470:  RLCF   x02,F
5472:  BRA    5448
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
5474:  CLRF   x05
5476:  MOVF   x05,W
5478:  SUBLW  07
547A:  BNC   54A2
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
547C:  MOVF   x03,W
547E:  ANDLW  80
5480:  BNZ   5486
5482:  BCF    F8C.4
5484:  BRA    5488
5486:  BSF    F8C.4
....................     delay_us(1); 
5488:  BRA    548A
548A:  BRA    548C
....................     output_high(D2A_SCLK); 
548C:  BSF    F8C.0
....................     delay_us(1); 
548E:  BRA    5490
5490:  BRA    5492
....................     output_low(D2A_SCLK); 
5492:  BCF    F8C.0
....................     delay_us(1); 
5494:  BRA    5496
5496:  BRA    5498
....................     } 
5498:  MOVF   x05,W
549A:  INCF   x05,F
549C:  BCF    FD8.0
549E:  RLCF   x03,F
54A0:  BRA    5476
....................   output_high(D2A_CSB); 
54A2:  BSF    F8A.1
....................   return dout; 
54A4:  MOVFF  204,01
....................   } 
54A8:  MOVLB  0
54AA:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
13F4:  MOVLW  08
13F6:  MOVLB  2
13F8:  MOVWF  x3C
13FA:  MOVF   x3C,F
13FC:  BZ    143A
....................     { 
....................     if (data & 0X80) 
13FE:  BTFSS  x3B.7
1400:  BRA    1406
....................       output_high(PLL_DAT); 
1402:  BSF    F8B.3
....................     else 
1404:  BRA    1408
....................       output_low(PLL_DAT); 
1406:  BCF    F8B.3
....................     delay_us(10); 
1408:  MOVLW  0C
140A:  MOVWF  00
140C:  DECFSZ 00,F
140E:  BRA    140C
1410:  BRA    1412
1412:  NOP   
....................     output_high(PLL_CLK); 
1414:  BSF    F8B.2
....................     delay_us(10); 
1416:  MOVLW  0C
1418:  MOVWF  00
141A:  DECFSZ 00,F
141C:  BRA    141A
141E:  BRA    1420
1420:  NOP   
....................     output_low(PLL_CLK); 
1422:  BCF    F8B.2
....................  
....................     delay_us(25); 
1424:  MOVLW  20
1426:  MOVWF  00
1428:  DECFSZ 00,F
142A:  BRA    1428
142C:  BRA    142E
142E:  NOP   
....................     } 
1430:  MOVF   x3C,W
1432:  DECF   x3C,F
1434:  BCF    FD8.0
1436:  RLCF   x3B,F
1438:  BRA    13FA
....................   output_low(PLL_DAT); 
143A:  BCF    F8B.3
....................   output_low(PLL_CLK); 
143C:  BCF    F8B.2
....................   } 
143E:  MOVLB  0
1440:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
1442:  CLRWDT
....................   disable_interrupts(GLOBAL); 
1444:  BCF    FF2.6
1446:  BCF    FF2.7
1448:  BTFSC  FF2.7
144A:  BRA    1446
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
144C:  MOVFF  239,23A
1450:  MOVFF  239,23B
1454:  RCALL  13F4
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
1456:  MOVFF  238,23A
145A:  MOVFF  238,23B
145E:  RCALL  13F4
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1460:  MOVFF  237,23A
1464:  MOVFF  237,23B
1468:  RCALL  13F4
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
146A:  MOVFF  236,23A
146E:  MOVFF  236,23B
1472:  RCALL  13F4
....................   delay_us(40); 
1474:  MOVLW  34
1476:  MOVWF  00
1478:  DECFSZ 00,F
147A:  BRA    1478
147C:  BRA    147E
147E:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1480:  BSF    F8B.1
....................   delay_us(5); 
1482:  MOVLW  06
1484:  MOVWF  00
1486:  DECFSZ 00,F
1488:  BRA    1486
148A:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
148C:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
148E:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
1490:  MOVLW  C0
1492:  IORWF  FF2,F
....................   restart_wdt(); 
1494:  CLRWDT
....................   } 
1496:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
1F58:  MOVLB  1
1F5A:  CLRF   xB7
1F5C:  MOVLW  05
1F5E:  MOVWF  xB6
1F60:  MOVF   xB7,W
1F62:  SUBLW  05
1F64:  BNC   1FD2
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
1F66:  MOVF   xB6,W
1F68:  MULLW  04
1F6A:  MOVF   FF3,W
1F6C:  CLRF   03
1F6E:  MOVLB  0
1F70:  CALL   00EA
1F74:  TBLRD*+
1F76:  MOVFF  FF5,01
1F7A:  TBLRD*+
1F7C:  MOVFF  FF5,02
1F80:  TBLRD*+
1F82:  MOVFF  FF5,03
1F86:  MOVFF  03,1B5
1F8A:  MOVFF  02,1B4
1F8E:  MOVFF  01,1B3
1F92:  MOVFF  FE8,1B2
....................     prog |= (ULONG)idx; 
1F96:  MOVFF  1B6,00
1F9A:  CLRF   01
1F9C:  CLRF   02
1F9E:  CLRF   03
1FA0:  MOVF   00,W
1FA2:  MOVLB  1
1FA4:  IORWF  xB2,F
1FA6:  MOVF   01,W
1FA8:  IORWF  xB3,F
1FAA:  MOVF   02,W
1FAC:  IORWF  xB4,F
1FAE:  MOVF   03,W
1FB0:  IORWF  xB5,F
....................     PLL_send_word(prog); 
1FB2:  MOVFF  1B5,239
1FB6:  MOVFF  1B4,238
1FBA:  MOVFF  1B3,237
1FBE:  MOVFF  1B2,236
1FC2:  MOVLB  0
1FC4:  CALL   1442
....................     } 
1FC8:  MOVLB  1
1FCA:  MOVF   xB7,W
1FCC:  INCF   xB7,F
1FCE:  DECF   xB6,F
1FD0:  BRA    1F60
....................   delay_ms(250); 
1FD2:  MOVLW  FA
1FD4:  MOVLB  2
1FD6:  MOVWF  x3F
1FD8:  MOVLB  0
1FDA:  CALL   0DD6
....................   PLL_send_word(prog); 
1FDE:  MOVFF  1B5,239
1FE2:  MOVFF  1B4,238
1FE6:  MOVFF  1B3,237
1FEA:  MOVFF  1B2,236
1FEE:  CALL   1442
....................   delay_ms(250); 
1FF2:  MOVLW  FA
1FF4:  MOVLB  2
1FF6:  MOVWF  x3F
1FF8:  MOVLB  0
1FFA:  CALL   0DD6
....................   } 
1FFE:  GOTO   6650 (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
11C8:  MOVLB  2
11CA:  CLRF   x3F
11CC:  CLRF   x3E
11CE:  CLRF   x3D
11D0:  MOVLW  02
11D2:  MOVWF  x3C
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
11D4:  CLRWDT
....................   D = Frequest; 
11D6:  CLRF   x3B
11D8:  CLRF   x3A
11DA:  MOVFF  233,239
11DE:  MOVFF  232,238
....................   PLL_RFdiv = 0x0095003CL; 
11E2:  MOVLB  1
11E4:  CLRF   x3C
11E6:  MOVLW  95
11E8:  MOVWF  x3B
11EA:  CLRF   x3A
11EC:  MOVLW  3C
11EE:  MOVWF  x39
....................   if (Frequest >= 22000) 
11F0:  MOVLB  2
11F2:  MOVF   x33,W
11F4:  SUBLW  54
11F6:  BC    121C
11F8:  XORLW  FF
11FA:  BNZ   1202
11FC:  MOVF   x32,W
11FE:  SUBLW  EF
1200:  BC    121C
....................     { 
....................     RFdiv = 1; 
1202:  CLRF   x3F
1204:  CLRF   x3E
1206:  CLRF   x3D
1208:  MOVLW  01
120A:  MOVWF  x3C
....................     PLL_RFdiv = 0x0085003CL; 
120C:  MOVLB  1
120E:  CLRF   x3C
1210:  MOVLW  85
1212:  MOVWF  x3B
1214:  CLRF   x3A
1216:  MOVLW  3C
1218:  MOVWF  x39
121A:  MOVLB  2
....................     }   
....................   restart_wdt(); 
121C:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
121E:  MOVFF  23B,247
1222:  MOVFF  23A,246
1226:  MOVFF  239,245
122A:  MOVFF  238,244
122E:  MOVFF  23F,24B
1232:  MOVFF  23E,24A
1236:  MOVFF  23D,249
123A:  MOVFF  23C,248
123E:  MOVLB  0
1240:  RCALL  10D8
1242:  MOVFF  03,243
1246:  MOVFF  02,242
124A:  MOVFF  01,241
124E:  MOVFF  00,240
1252:  MOVFF  03,247
1256:  MOVFF  02,246
125A:  MOVFF  01,245
125E:  MOVFF  00,244
1262:  MOVLB  2
1264:  CLRF   x4B
1266:  CLRF   x4A
1268:  CLRF   x49
126A:  MOVLW  64
126C:  MOVWF  x48
126E:  MOVLB  0
1270:  RCALL  10D8
1272:  MOVFF  03,23B
1276:  MOVFF  02,23A
127A:  MOVFF  01,239
127E:  MOVFF  00,238
....................   restart_wdt(); 
1282:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
1284:  BCF    FD8.1
1286:  MOVFF  23B,24B
128A:  MOVFF  23A,24A
128E:  MOVFF  239,249
1292:  MOVFF  238,248
1296:  MOVLB  2
1298:  CLRF   x4F
129A:  CLRF   x4E
129C:  MOVLW  27
129E:  MOVWF  x4D
12A0:  MOVLW  10
12A2:  MOVWF  x4C
12A4:  MOVLB  0
12A6:  RCALL  1134
12A8:  MOVFF  03,12C
12AC:  MOVFF  02,12B
12B0:  MOVFF  01,12A
12B4:  MOVFF  00,129
....................   restart_wdt(); 
12B8:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
12BA:  MOVFF  12C,247
12BE:  MOVFF  12B,246
12C2:  MOVFF  12A,245
12C6:  MOVFF  129,244
12CA:  MOVLB  2
12CC:  CLRF   x4B
12CE:  CLRF   x4A
12D0:  MOVLW  27
12D2:  MOVWF  x49
12D4:  MOVLW  10
12D6:  MOVWF  x48
12D8:  MOVLB  0
12DA:  RCALL  10D8
12DC:  MOVF   00,W
12DE:  MOVLB  2
12E0:  SUBWF  x38,W
12E2:  MOVWF  x40
12E4:  MOVF   01,W
12E6:  SUBWFB x39,W
12E8:  MOVWF  x41
12EA:  MOVF   02,W
12EC:  SUBWFB x3A,W
12EE:  MOVWF  x42
12F0:  MOVF   03,W
12F2:  SUBWFB x3B,W
12F4:  MOVWF  x43
12F6:  CLRF   x47
12F8:  CLRF   x46
12FA:  CLRF   x45
12FC:  MOVLW  64
12FE:  MOVWF  x44
1300:  MOVFF  23F,24B
1304:  MOVFF  23E,24A
1308:  MOVFF  23D,249
130C:  MOVFF  23C,248
1310:  MOVLB  0
1312:  RCALL  10D8
1314:  MOVFF  03,247
1318:  MOVFF  02,246
131C:  MOVFF  01,245
1320:  MOVFF  00,244
1324:  BCF    FD8.1
1326:  MOVFF  243,24B
132A:  MOVFF  242,24A
132E:  MOVFF  241,249
1332:  MOVFF  240,248
1336:  MOVFF  03,24F
133A:  MOVFF  02,24E
133E:  MOVFF  01,24D
1342:  MOVFF  00,24C
1346:  RCALL  1134
1348:  MOVFF  03,130
134C:  MOVFF  02,12F
1350:  MOVFF  01,12E
1354:  MOVFF  00,12D
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
1358:  BCF    FD8.1
135A:  MOVLB  2
135C:  CLRF   x4B
135E:  CLRF   x4A
1360:  CLRF   x49
1362:  MOVLW  64
1364:  MOVWF  x48
1366:  MOVFF  23F,24F
136A:  MOVFF  23E,24E
136E:  MOVFF  23D,24D
1372:  MOVFF  23C,24C
1376:  MOVLB  0
1378:  RCALL  1134
137A:  MOVFF  03,243
137E:  MOVFF  02,242
1382:  MOVFF  01,241
1386:  MOVFF  00,240
138A:  MOVLB  2
138C:  RLCF   00,W
138E:  MOVWF  00
1390:  RLCF   01,W
1392:  MOVWF  01
1394:  RLCF   02,W
1396:  MOVWF  02
1398:  RLCF   03,W
139A:  MOVWF  03
139C:  RLCF   00,F
139E:  RLCF   01,F
13A0:  RLCF   02,F
13A2:  RLCF   03,F
13A4:  RLCF   00,F
13A6:  RLCF   01,F
13A8:  RLCF   02,F
13AA:  RLCF   03,F
13AC:  MOVLW  F8
13AE:  ANDWF  00,F
13B0:  MOVLW  08
13B2:  ADDWF  03,W
13B4:  MOVWF  x43
13B6:  MOVLW  01
13B8:  ADDWF  00,W
13BA:  MOVLB  1
13BC:  MOVWF  x31
13BE:  MOVLW  00
13C0:  MOVLB  2
13C2:  ADDWFC 01,W
13C4:  MOVLB  1
13C6:  MOVWF  x32
13C8:  MOVLW  00
13CA:  MOVLB  2
13CC:  ADDWFC 02,W
13CE:  MOVLB  1
13D0:  MOVWF  x33
13D2:  MOVLW  00
13D4:  MOVLB  2
13D6:  ADDWFC x43,W
13D8:  MOVLB  1
13DA:  MOVWF  x34
....................   restart_wdt(); 
13DC:  CLRWDT
....................   Fvco++; 
13DE:  MOVLW  01
13E0:  MOVLB  2
13E2:  ADDWF  x34,F
13E4:  BTFSC  FD8.0
13E6:  INCF   x35,F
13E8:  BTFSC  FD8.2
13EA:  INCF   x36,F
13EC:  BTFSC  FD8.2
13EE:  INCF   x37,F
....................   } 
13F0:  MOVLB  0
13F2:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
1498:  MOVLB  2
149A:  CLRF   x37
149C:  MOVLB  1
149E:  RLCF   x29,W
14A0:  MOVLB  2
14A2:  MOVWF  x38
14A4:  MOVLB  1
14A6:  RLCF   x2A,W
14A8:  MOVLB  2
14AA:  MOVWF  x39
14AC:  MOVLB  1
14AE:  RLCF   x2B,W
14B0:  MOVLB  2
14B2:  MOVWF  x3A
14B4:  RLCF   x38,F
14B6:  RLCF   x39,F
14B8:  RLCF   x3A,F
14BA:  RLCF   x38,F
14BC:  RLCF   x39,F
14BE:  RLCF   x3A,F
14C0:  RLCF   x38,F
14C2:  RLCF   x39,F
14C4:  RLCF   x3A,F
14C6:  RLCF   x38,F
14C8:  RLCF   x39,F
14CA:  RLCF   x3A,F
14CC:  RLCF   x38,F
14CE:  RLCF   x39,F
14D0:  RLCF   x3A,F
14D2:  RLCF   x38,F
14D4:  RLCF   x39,F
14D6:  RLCF   x3A,F
14D8:  MOVLW  80
14DA:  ANDWF  x38,F
14DC:  MOVLB  1
14DE:  RLCF   x2D,W
14E0:  MOVWF  00
14E2:  RLCF   x2E,W
14E4:  MOVWF  01
14E6:  RLCF   x2F,W
14E8:  MOVWF  02
14EA:  RLCF   x30,W
14EC:  MOVWF  03
14EE:  RLCF   00,F
14F0:  RLCF   01,F
14F2:  RLCF   02,F
14F4:  RLCF   03,F
14F6:  RLCF   00,F
14F8:  RLCF   01,F
14FA:  RLCF   02,F
14FC:  RLCF   03,F
14FE:  MOVLW  F8
1500:  ANDWF  00,F
1502:  MOVF   00,W
1504:  MOVLB  2
1506:  ADDWF  x37,W
1508:  MOVWF  x32
150A:  MOVF   01,W
150C:  ADDWFC x38,W
150E:  MOVWF  x33
1510:  MOVF   02,W
1512:  ADDWFC x39,W
1514:  MOVWF  x34
1516:  MOVF   03,W
1518:  ADDWFC x3A,W
151A:  MOVWF  x35
....................   PLL_frequency = prog; 
151C:  MOVFF  235,138
1520:  MOVFF  234,137
1524:  MOVFF  233,136
1528:  MOVFF  232,135
....................   restart_wdt(); 
152C:  CLRWDT
....................   PLL_send_word(prog); 
152E:  MOVFF  235,239
1532:  MOVFF  234,238
1536:  MOVFF  233,237
153A:  MOVFF  232,236
153E:  MOVLB  0
1540:  RCALL  1442
....................   delay_us(20); 
1542:  MOVLW  1A
1544:  MOVWF  00
1546:  DECFSZ 00,F
1548:  BRA    1546
154A:  NOP   
....................   restart_wdt(); 
154C:  CLRWDT
....................   PLL_send_word(PLL_mod); 
154E:  MOVFF  134,239
1552:  MOVFF  133,238
1556:  MOVFF  132,237
155A:  MOVFF  131,236
155E:  RCALL  1442
....................   delay_us(20); 
1560:  MOVLW  1A
1562:  MOVWF  00
1564:  DECFSZ 00,F
1566:  BRA    1564
1568:  NOP   
....................   restart_wdt(); 
156A:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
156C:  MOVFF  13C,239
1570:  MOVFF  13B,238
1574:  MOVFF  13A,237
1578:  MOVFF  139,236
157C:  RCALL  1442
....................    
....................   } 
157E:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
097C:  BCF    F7E.0
097E:  GOTO   009C
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
*
0998:  SETF   26
....................   TMR_1mS_Count++; 
099A:  INCF   27,F
....................    if (++TMR_SendStatus >= 98 && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
099C:  INCF   2F,F
099E:  MOVF   2F,W
09A0:  SUBLW  61
09A2:  BC    09E6
09A4:  DECFSZ 32,W
09A6:  BRA    09E6
09A8:  DECFSZ xFB,W
09AA:  BRA    09E6
09AC:  MOVLB  1
09AE:  DECFSZ x08,W
09B0:  BRA    09B6
09B2:  MOVF   x09,F
09B4:  BZ    09CA
09B6:  MOVF   x08,F
09B8:  BTFSC  FD8.2
09BA:  BRA    09C0
09BC:  MOVLB  0
09BE:  BRA    09E6
09C0:  MOVF   x09,F
09C2:  BTFSC  FD8.2
09C4:  BRA    09CA
09C6:  MOVLB  0
09C8:  BRA    09E6
....................     { 
....................     TMR_SendStatus = 0; 
09CA:  CLRF   2F
....................     SendStatusFlag = 1; 
09CC:  MOVLW  01
09CE:  MOVWF  30
....................     TX_Counter++; //VERSION 3.3 21.3.2016 cunt the number of time block is sent 
09D0:  INCF   x0C,F
09D2:  BTFSC  FD8.2
09D4:  INCF   x0D,F
....................     //if (StartStatusFlag == 1 && setup.UART_Status == 1) 
....................     if (!ttccp_login) 
09D6:  MOVF   x28,F
09D8:  BNZ   09E8
....................       { 
....................       	COM1_send_block(24); 
09DA:  MOVLB  2
09DC:  CLRF   x70
09DE:  MOVLW  18
09E0:  MOVWF  x6F
09E2:  MOVLB  0
09E4:  BRA    0982
09E6:  MOVLB  1
....................       } 
....................     } 
....................   if (++TMR_1mS_Cnt >= 10) 
09E8:  INCF   28,F
09EA:  MOVF   28,W
09EC:  SUBLW  09
09EE:  BC    0A22
....................     { 
....................     TMR_1mS_Cnt = 0; 
09F0:  CLRF   28
....................     ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
09F2:  INCF   2F,F
....................     TMR_10mS_Count++; 
09F4:  INCF   29,F
....................     TMR_10mS_Flags = 0xFF; 
09F6:  SETF   2A
....................     if (++TMR_10mS_Cnt >= 10) 
09F8:  INCF   2B,F
09FA:  MOVF   2B,W
09FC:  SUBLW  09
09FE:  BC    0A22
....................       { 
....................       TMR_10mS_Cnt = 0; 
0A00:  CLRF   2B
....................       TMR_100mS_Flags = 0xFF; 
0A02:  SETF   2C
....................       if (++TMR_100mS_Cnt >= 10) 
0A04:  INCF   2D,F
0A06:  MOVF   2D,W
0A08:  SUBLW  09
0A0A:  BC    0A22
....................         { 
....................         TMR_100mS_Cnt = 0; 
0A0C:  CLRF   2D
....................         TMR_1sec_Flags = 0xFF; 
0A0E:  SETF   2E
....................         if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
0A10:  INCF   31,F
0A12:  MOVLB  0
0A14:  MOVF   xFA,W
0A16:  SUBWF  31,W
0A18:  BNC   0A20
....................    				 { 
....................    					 TMR_StartStatus = 0; 
0A1A:  CLRF   31
....................     				 StartStatusFlag = 1; 
0A1C:  MOVLW  01
0A1E:  MOVWF  32
0A20:  MOVLB  1
.................... 			     } 
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0A22:  BCF    F9E.1
0A24:  MOVLB  0
0A26:  GOTO   009C
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
0A2A:  BCF    FF2.1
0A2C:  GOTO   009C
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0A30:  BCF    FF0.0
0A32:  GOTO   009C
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0A36:  MOVFF  FAE,26F
....................   COM1_rbuf[COM1_rxi] = x; 
0A3A:  CLRF   03
0A3C:  MOVF   34,W
0A3E:  ADDLW  36
0A40:  MOVWF  FE9
0A42:  MOVLW  00
0A44:  ADDWFC 03,W
0A46:  MOVWF  FEA
0A48:  MOVFF  26F,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0A4C:  INCF   34,F
0A4E:  MOVF   34,W
0A50:  SUBLW  1F
0A52:  BC    0A56
....................     COM1_rxi = 0; 
0A54:  CLRF   34
....................   if (COM1_rcnt < COM1_RX_LEN) 
0A56:  MOVF   33,W
0A58:  SUBLW  1F
0A5A:  BNC   0A5E
....................     COM1_rcnt++; 
0A5C:  INCF   33,F
....................   } 
....................    
0A5E:  BCF    F9E.5
0A60:  GOTO   009C
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
....................   { 
.................... 	  output_high(RS485_EN); 
*
0A84:  BSF    F8C.5
.................... 	  status_tx_index = 0; 
0A86:  MOVLB  1
0A88:  CLRF   x0F
0A8A:  CLRF   x0E
.................... 	  while (tx_block_len--) 
.................... 	  { 
0A8C:  MOVFF  10B,03
0A90:  MOVF   x0A,W
0A92:  BTFSC  FD8.2
0A94:  DECF   x0B,F
0A96:  DECF   x0A,F
0A98:  IORWF  03,W
0A9A:  BZ    0AD6
.................... 		  output_high(RS485_EN); 
0A9C:  BSF    F8C.5
.................... 		 	TXREG1 = status_buffer[status_tx_index++]; 
0A9E:  MOVFF  10F,03
0AA2:  MOVF   x0E,W
0AA4:  INCF   x0E,F
0AA6:  BTFSC  FD8.2
0AA8:  INCF   x0F,F
0AAA:  MOVLB  2
0AAC:  MOVWF  x6F
0AAE:  MOVLW  10
0AB0:  ADDWF  x6F,W
0AB2:  MOVWF  FE9
0AB4:  MOVLW  01
0AB6:  ADDWFC 03,W
0AB8:  MOVWF  FEA
0ABA:  MOVFF  FEF,FAD
.................... 		 	delay_us(500);  
0ABE:  MOVLW  02
0AC0:  MOVWF  x6F
0AC2:  MOVLW  F9
0AC4:  MOVWF  x70
0AC6:  MOVLB  0
0AC8:  RCALL  0A64
0ACA:  MOVLB  2
0ACC:  DECFSZ x6F,F
0ACE:  BRA    0AC2
.................... 		 	output_low(RS485_EN); 
0AD0:  BCF    F8C.5
.................... 		} 
0AD2:  MOVLB  1
0AD4:  BRA    0A8C
.................... 		 
.................... 		disable_interrupts(int_TBE);     
0AD6:  BCF    F9D.4
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0AD8:  BCF    F9E.4
0ADA:  MOVLB  0
0ADC:  GOTO   009C
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
281E:  CLRF   03
2820:  MOVF   35,W
2822:  ADDLW  36
2824:  MOVWF  FE9
2826:  MOVLW  00
2828:  ADDWFC 03,W
282A:  MOVWF  FEA
282C:  MOVFF  FEF,1CB
2830:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
2832:  INCF   35,F
2834:  MOVF   35,W
2836:  SUBLW  1F
2838:  BC    283C
....................     COM1_rxo = 0; 
283A:  CLRF   35
....................   if (COM1_rcnt) 
283C:  MOVF   33,F
283E:  BZ    2842
....................     COM1_rcnt--; 
2840:  DECF   33,F
....................   return x; 
2842:  MOVFF  1CB,01
....................   } 
2846:  MOVLB  0
2848:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
2002:  BCF    F9D.5
....................   output_high(RS485_EN); 
2004:  BSF    F8C.5
....................   delay_us(100); 
2006:  MOVLW  84
2008:  MOVWF  00
200A:  DECFSZ 00,F
200C:  BRA    200A
200E:  BRA    2010
2010:  NOP   
....................   pos = 0; 
2012:  MOVLB  2
2014:  CLRF   x6B
....................   while (*str) 
....................     { 
2016:  MOVFF  269,03
201A:  MOVFF  268,FE9
201E:  MOVFF  269,FEA
2022:  MOVF   FEF,F
2024:  BZ    20B2
....................     x = *str++; 
2026:  MOVFF  269,03
202A:  MOVF   x68,W
202C:  INCF   x68,F
202E:  BTFSC  FD8.2
2030:  INCF   x69,F
2032:  MOVWF  FE9
2034:  MOVFF  03,FEA
2038:  MOVFF  FEF,26A
....................     if (x != '\t') 
203C:  MOVF   x6A,W
203E:  SUBLW  09
2040:  BZ    206E
....................       { 
....................       TXREG1 = x; 
2042:  MOVFF  26A,FAD
....................       pos++; 
2046:  INCF   x6B,F
....................       delay_us(300);  
2048:  MOVLW  02
204A:  MOVWF  x6D
204C:  CLRF   19
204E:  BTFSC  FF2.7
2050:  BSF    19.7
2052:  BCF    FF2.7
2054:  MOVLW  95
2056:  MOVWF  x70
2058:  MOVLB  0
205A:  CALL   0A64
205E:  BTFSC  19.7
2060:  BSF    FF2.7
2062:  MOVLB  2
2064:  DECFSZ x6D,F
2066:  BRA    204C
....................       x = RCREG1; 
2068:  MOVFF  FAE,26A
....................       } 
....................     else 
206C:  BRA    20B0
....................       { 
....................       tab_stop = 32; 
206E:  MOVLW  20
2070:  MOVWF  x6C
....................       if (pos >= tab_stop) 
2072:  MOVF   x6C,W
2074:  SUBWF  x6B,W
2076:  BNC   207E
....................         tab_stop = pos + 2; 
2078:  MOVLW  02
207A:  ADDWF  x6B,W
207C:  MOVWF  x6C
....................       while (pos < tab_stop) 
....................         { 
207E:  MOVF   x6C,W
2080:  SUBWF  x6B,W
2082:  BC    20B0
....................         TXREG1 = ' '; 
2084:  MOVLW  20
2086:  MOVWF  FAD
....................         pos++; 
2088:  INCF   x6B,F
....................         delay_us(300); 
208A:  MOVLW  02
208C:  MOVWF  x6D
208E:  CLRF   19
2090:  BTFSC  FF2.7
2092:  BSF    19.7
2094:  BCF    FF2.7
2096:  MOVLW  95
2098:  MOVWF  x70
209A:  MOVLB  0
209C:  CALL   0A64
20A0:  BTFSC  19.7
20A2:  BSF    FF2.7
20A4:  MOVLB  2
20A6:  DECFSZ x6D,F
20A8:  BRA    208E
....................         x = RCREG1; 
20AA:  MOVFF  FAE,26A
....................         } 
20AE:  BRA    207E
....................       } 
....................     } 
20B0:  BRA    2016
....................   delay_us(100); 
20B2:  MOVLW  84
20B4:  MOVWF  00
20B6:  DECFSZ 00,F
20B8:  BRA    20B6
20BA:  BRA    20BC
20BC:  NOP   
....................   output_low(RS485_EN); 
20BE:  BCF    F8C.5
....................   x = RCREG1; 
20C0:  MOVFF  FAE,26A
....................   enable_interrupts(int_RDA); 
20C4:  BSF    F9D.5
....................   } 
20C6:  MOVLB  0
20C8:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
....................   { 
....................   UCHAR pos;//, tab_stop; 
....................   pos = 0; 
*
0982:  MOVLB  2
0984:  CLRF   x71
....................   tx_block_len = len ; 
0986:  MOVFF  270,10B
098A:  MOVFF  26F,10A
....................   //status_tx_index = 0; 
....................    
....................   //TXREG1 = status_buffer[0]; 
....................   clear_interrupt(int_TBE); 
098E:  BCF    F9E.4
....................   enable_interrupts(int_TBE); 
0990:  BSF    F9D.4
....................   //TXREG1 = status_buffer[0]; 
....................   //output_high(RS485_EN);  
....................   } 
0992:  MOVLB  0
0994:  GOTO   09E6 (RETURN)
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0D5C:  MOVLB  1
0D5E:  CLRF   x74
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0D60:  CLRF   33
0D62:  MOVFF  33,35
0D66:  MOVFF  35,34
....................   comm_state = COMM_INIT; 
0D6A:  CLRF   56
....................   enable_interrupts(int_RDA); 
0D6C:  BSF    F9D.5
....................   } 
0D6E:  MOVLB  0
0D70:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
2868:  MOVLB  1
286A:  MOVF   x3D,W
286C:  INCF   x3D,F
286E:  CLRF   03
2870:  ADDLW  58
2872:  MOVWF  FE9
2874:  MOVLW  00
2876:  ADDWFC 03,W
2878:  MOVWF  FEA
287A:  CLRF   03
287C:  MOVFF  FEF,01
2880:  MOVFF  03,02
....................   } 
2884:  MOVLB  0
2886:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
284A:  CLRF   03
284C:  MOVLB  1
284E:  MOVF   x3D,W
2850:  ADDLW  58
2852:  MOVWF  FE9
2854:  MOVLW  00
2856:  ADDWFC 03,W
2858:  MOVWF  FEA
285A:  CLRF   03
285C:  MOVFF  FEF,01
2860:  MOVFF  03,02
....................   } 
2864:  MOVLB  0
2866:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
2888:  CLRF   03
288A:  MOVLB  1
288C:  MOVF   x3D,W
288E:  ADDLW  58
2890:  MOVWF  FE9
2892:  MOVLW  00
2894:  ADDWFC 03,W
2896:  MOVWF  FEA
2898:  MOVF   FEF,F
289A:  BZ    28CC
289C:  CLRF   03
289E:  MOVF   x3D,W
28A0:  ADDLW  58
28A2:  MOVWF  FE9
28A4:  MOVLW  00
28A6:  ADDWFC 03,W
28A8:  MOVWF  FEA
28AA:  MOVF   FEF,W
28AC:  SUBLW  2C
28AE:  BZ    28C4
28B0:  CLRF   03
28B2:  MOVF   x3D,W
28B4:  ADDLW  58
28B6:  MOVWF  FE9
28B8:  MOVLW  00
28BA:  ADDWFC 03,W
28BC:  MOVWF  FEA
28BE:  MOVF   FEF,W
28C0:  SUBLW  20
28C2:  BNZ   28CC
28C4:  INCF   x3D,F
28C6:  MOVLB  0
28C8:  BRA    2888
28CA:  MOVLB  1
....................   } 
28CC:  MOVLB  0
28CE:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
2924:  MOVLB  2
2926:  CLRF   x35
2928:  MOVLW  01
292A:  MOVWF  x34
....................   SINT num, sign = 1; 
....................   skip_spc(); 
292C:  MOVLB  0
292E:  RCALL  2888
....................   if (comm_buf[comm_ptr]) 
2930:  CLRF   03
2932:  MOVLB  1
2934:  MOVF   x3D,W
2936:  ADDLW  58
2938:  MOVWF  FE9
293A:  MOVLW  00
293C:  ADDWFC 03,W
293E:  MOVWF  FEA
2940:  MOVF   FEF,F
2942:  BZ    29CC
....................     { 
....................     num = 0; 
2944:  MOVLB  2
2946:  CLRF   x33
2948:  CLRF   x32
....................     if (peek_char() == '-') 
294A:  MOVLB  0
294C:  RCALL  284A
294E:  MOVFF  02,237
2952:  MOVFF  01,236
2956:  MOVLB  2
2958:  MOVF   01,W
295A:  SUBLW  2D
295C:  BNZ   296C
295E:  MOVF   x37,F
2960:  BNZ   296C
....................       { 
....................       sign = -1; 
2962:  SETF   x35
2964:  SETF   x34
....................       get_char(); 
2966:  MOVLB  0
2968:  RCALL  2868
296A:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
296C:  CLRF   03
296E:  MOVLB  1
2970:  MOVF   x3D,W
2972:  ADDLW  58
2974:  MOVWF  FE9
2976:  MOVLW  00
2978:  ADDWFC 03,W
297A:  MOVWF  FEA
297C:  MOVFF  FEF,236
2980:  MOVLB  2
2982:  MOVF   x36,W
2984:  SUBLW  2F
2986:  BC    29CC
2988:  MOVF   x36,W
298A:  SUBLW  39
298C:  BNC   29CC
298E:  MOVFF  233,237
2992:  MOVFF  232,236
2996:  CLRF   x39
2998:  MOVLW  0A
299A:  MOVWF  x38
299C:  MOVLB  0
299E:  RCALL  28D0
29A0:  MOVFF  02,237
29A4:  MOVFF  01,236
29A8:  MOVLB  1
29AA:  MOVF   x3D,W
29AC:  INCF   x3D,F
29AE:  CLRF   03
29B0:  ADDLW  58
29B2:  MOVWF  FE9
29B4:  MOVLW  00
29B6:  ADDWFC 03,W
29B8:  MOVWF  FEA
29BA:  MOVLW  30
29BC:  SUBWF  FEF,W
29BE:  MOVLB  2
29C0:  ADDWF  01,W
29C2:  MOVWF  x32
29C4:  MOVLW  00
29C6:  ADDWFC 02,W
29C8:  MOVWF  x33
29CA:  BRA    296C
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
29CC:  MOVFF  233,237
29D0:  MOVFF  232,236
29D4:  MOVFF  235,239
29D8:  MOVFF  234,238
29DC:  MOVLB  0
29DE:  RCALL  28D0
29E0:  MOVFF  02,03
29E4:  MOVFF  02,02
....................   } 
29E8:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
5A74:  CALL   2888
....................   if (comm_buf[comm_ptr]) 
5A78:  CLRF   03
5A7A:  MOVLB  1
5A7C:  MOVF   x3D,W
5A7E:  ADDLW  58
5A80:  MOVWF  FE9
5A82:  MOVLW  00
5A84:  ADDWFC 03,W
5A86:  MOVWF  FEA
5A88:  MOVF   FEF,F
5A8A:  BZ    5B1A
....................     { 
....................     num = 0; 
5A8C:  MOVLB  2
5A8E:  CLRF   x05
5A90:  CLRF   x04
5A92:  CLRF   x03
5A94:  CLRF   x02
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5A96:  CLRF   03
5A98:  MOVLB  1
5A9A:  MOVF   x3D,W
5A9C:  ADDLW  58
5A9E:  MOVWF  FE9
5AA0:  MOVLW  00
5AA2:  ADDWFC 03,W
5AA4:  MOVWF  FEA
5AA6:  MOVFF  FEF,206
5AAA:  MOVLB  2
5AAC:  MOVF   x06,W
5AAE:  SUBLW  2F
5AB0:  BC    5B18
5AB2:  MOVF   x06,W
5AB4:  SUBLW  39
5AB6:  BNC   5B18
5AB8:  MOVFF  205,247
5ABC:  MOVFF  204,246
5AC0:  MOVFF  203,245
5AC4:  MOVFF  202,244
5AC8:  CLRF   x4B
5ACA:  CLRF   x4A
5ACC:  CLRF   x49
5ACE:  MOVLW  0A
5AD0:  MOVWF  x48
5AD2:  MOVLB  0
5AD4:  CALL   10D8
5AD8:  MOVFF  03,209
5ADC:  MOVFF  02,208
5AE0:  MOVFF  01,207
5AE4:  MOVFF  00,206
5AE8:  MOVLB  1
5AEA:  MOVF   x3D,W
5AEC:  INCF   x3D,F
5AEE:  CLRF   03
5AF0:  ADDLW  58
5AF2:  MOVWF  FE9
5AF4:  MOVLW  00
5AF6:  ADDWFC 03,W
5AF8:  MOVWF  FEA
5AFA:  MOVLW  30
5AFC:  SUBWF  FEF,W
5AFE:  MOVLB  2
5B00:  ADDWF  00,W
5B02:  MOVWF  x02
5B04:  MOVLW  00
5B06:  ADDWFC 01,W
5B08:  MOVWF  x03
5B0A:  MOVLW  00
5B0C:  ADDWFC 02,W
5B0E:  MOVWF  x04
5B10:  MOVLW  00
5B12:  ADDWFC x09,W
5B14:  MOVWF  x05
5B16:  BRA    5A96
5B18:  MOVLB  1
....................     } 
.................... //  skip_spc(); 
....................   return num; 
5B1A:  MOVFF  202,00
5B1E:  MOVFF  203,01
5B22:  MOVFF  204,02
5B26:  MOVFF  205,03
....................   } 
5B2A:  MOVLB  0
5B2C:  GOTO   603C (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
597C:  CALL   2888
....................   if (peek_char()) 
5980:  CALL   284A
5984:  MOVF   01,W
5986:  IORWF  02,W
5988:  BTFSC  FD8.2
598A:  BRA    5A62
....................     { 
....................     num = 0; 
598C:  MOVLB  2
598E:  CLRF   x05
5990:  CLRF   x04
5992:  CLRF   x03
5994:  CLRF   x02
....................     while (isxdigit(peek_char())) 
....................       { 
5996:  MOVLB  0
5998:  CALL   284A
599C:  MOVFF  02,208
59A0:  MOVFF  01,207
59A4:  MOVLB  2
59A6:  MOVF   x08,F
59A8:  BNZ   59B0
59AA:  MOVF   x07,W
59AC:  SUBLW  2F
59AE:  BC    59BA
59B0:  MOVF   x08,F
59B2:  BNZ   59BA
59B4:  MOVF   x07,W
59B6:  SUBLW  39
59B8:  BC    59E2
59BA:  MOVF   x08,F
59BC:  BNZ   59C4
59BE:  MOVF   x07,W
59C0:  SUBLW  40
59C2:  BC    59CE
59C4:  MOVF   x08,F
59C6:  BNZ   59CE
59C8:  MOVF   x07,W
59CA:  SUBLW  46
59CC:  BC    59E2
59CE:  MOVF   x08,F
59D0:  BNZ   59D8
59D2:  MOVF   x07,W
59D4:  SUBLW  60
59D6:  BC    5A60
59D8:  MOVF   x08,F
59DA:  BNZ   5A60
59DC:  MOVF   x07,W
59DE:  SUBLW  66
59E0:  BNC   5A60
....................       chr = get_char(); 
59E2:  MOVLB  0
59E4:  CALL   2868
59E8:  MOVFF  01,206
....................       chr = toupper(chr); 
59EC:  MOVLB  2
59EE:  MOVF   x06,W
59F0:  SUBLW  60
59F2:  BC    5A00
59F4:  MOVF   x06,W
59F6:  SUBLW  7A
59F8:  BNC   5A00
59FA:  MOVF   x06,W
59FC:  ANDLW  DF
59FE:  BRA    5A02
5A00:  MOVF   x06,W
5A02:  MOVWF  x06
....................       if (chr <= '9') 
5A04:  MOVF   x06,W
5A06:  SUBLW  39
5A08:  BNC   5A10
....................         chr -= '0'; 
5A0A:  MOVLW  30
5A0C:  SUBWF  x06,F
....................       else 
5A0E:  BRA    5A14
....................         chr = chr - ('A' - 10); 
5A10:  MOVLW  37
5A12:  SUBWF  x06,F
....................       num = num * 16 + (ULONG)chr; 
5A14:  RLCF   x02,W
5A16:  MOVWF  x07
5A18:  RLCF   x03,W
5A1A:  MOVWF  x08
5A1C:  RLCF   x04,W
5A1E:  MOVWF  x09
5A20:  RLCF   x05,W
5A22:  MOVWF  x0A
5A24:  RLCF   x07,F
5A26:  RLCF   x08,F
5A28:  RLCF   x09,F
5A2A:  RLCF   x0A,F
5A2C:  RLCF   x07,F
5A2E:  RLCF   x08,F
5A30:  RLCF   x09,F
5A32:  RLCF   x0A,F
5A34:  RLCF   x07,F
5A36:  RLCF   x08,F
5A38:  RLCF   x09,F
5A3A:  RLCF   x0A,F
5A3C:  MOVLW  F0
5A3E:  ANDWF  x07,F
5A40:  CLRF   01
5A42:  CLRF   02
5A44:  CLRF   03
5A46:  MOVF   x06,W
5A48:  ADDWF  x07,W
5A4A:  MOVWF  x02
5A4C:  MOVF   01,W
5A4E:  ADDWFC x08,W
5A50:  MOVWF  x03
5A52:  MOVF   02,W
5A54:  ADDWFC x09,W
5A56:  MOVWF  x04
5A58:  MOVF   03,W
5A5A:  ADDWFC x0A,W
5A5C:  MOVWF  x05
....................       } 
5A5E:  BRA    5996
5A60:  MOVLB  0
....................     } 
....................   return num; 
5A62:  MOVFF  202,00
5A66:  MOVFF  203,01
5A6A:  MOVFF  204,02
5A6E:  MOVFF  205,03
....................   } 
5A72:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
2E8A:  RCALL  2924
2E8C:  MOVFF  02,22D
2E90:  MOVFF  01,22C
2E94:  MOVFF  02,237
2E98:  MOVFF  01,236
2E9C:  MOVLB  2
2E9E:  CLRF   x39
2EA0:  MOVLW  0A
2EA2:  MOVWF  x38
2EA4:  MOVLB  0
2EA6:  RCALL  28D0
2EA8:  MOVFF  02,22B
2EAC:  MOVLB  2
2EAE:  MOVFF  01,22A
....................   if (peek_char() == '.') 
2EB2:  MOVLB  0
2EB4:  RCALL  284A
2EB6:  MOVFF  02,22D
2EBA:  MOVFF  01,22C
2EBE:  MOVLB  2
2EC0:  MOVF   01,W
2EC2:  SUBLW  2E
2EC4:  BNZ   2EE6
2EC6:  MOVF   x2D,F
2EC8:  BNZ   2EE6
....................     { 
....................     get_char(); // skip '.' 
2ECA:  MOVLB  0
2ECC:  RCALL  2868
....................     freq += get_char() - '0'; 
2ECE:  RCALL  2868
2ED0:  MOVLW  30
2ED2:  MOVLB  2
2ED4:  SUBWF  01,W
2ED6:  MOVWF  00
2ED8:  MOVLW  00
2EDA:  SUBWFB 02,W
2EDC:  MOVWF  03
2EDE:  MOVF   00,W
2EE0:  ADDWF  x2A,F
2EE2:  MOVF   03,W
2EE4:  ADDWFC x2B,F
....................     } 
....................   return freq; 
2EE6:  MOVFF  22A,01
2EEA:  MOVFF  22B,02
....................   } 
2EEE:  MOVLB  0
2EF0:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
54CA:  MOVLB  1
54CC:  MOVF   xCB,W
54CE:  XORLW  69
54D0:  MOVLB  0
54D2:  BZ    5506
54D4:  XORLW  20
54D6:  BZ    5536
54D8:  XORLW  2D
54DA:  BZ    5566
54DC:  XORLW  20
54DE:  BZ    559A
54E0:  XORLW  6F
54E2:  BTFSC  FD8.2
54E4:  BRA    55CE
54E6:  XORLW  16
54E8:  BTFSC  FD8.2
54EA:  BRA    561E
54EC:  XORLW  10
54EE:  BTFSC  FD8.2
54F0:  BRA    566E
54F2:  XORLW  72
54F4:  BTFSC  FD8.2
54F6:  BRA    56C2
54F8:  XORLW  61
54FA:  BTFSC  FD8.2
54FC:  BRA    5716
54FE:  XORLW  02
5500:  BTFSC  FD8.2
5502:  BRA    572E
5504:  BRA    5742
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
5506:  MOVLB  1
5508:  INCF   x6B,F
550A:  BNZ   5518
....................         if (++D2A_image[12] > 3) 
550C:  INCF   x6C,F
550E:  MOVF   x6C,W
5510:  SUBLW  03
5512:  BC    5518
....................           { 
....................           D2A_image[11] = 0; 
5514:  CLRF   x6B
....................           D2A_image[12] = 0; 
5516:  CLRF   x6C
....................           } 
....................       write_D2A(11, D2A_image[11]); 
5518:  MOVLW  0B
551A:  MOVLB  2
551C:  MOVWF  x02
551E:  MOVFF  16B,203
5522:  MOVLB  0
5524:  RCALL  5442
....................       write_D2A(12, D2A_image[12]); 
5526:  MOVLW  0C
5528:  MOVLB  2
552A:  MOVWF  x02
552C:  MOVFF  16C,203
5530:  MOVLB  0
5532:  RCALL  5442
....................       break; 
5534:  BRA    5742
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
5536:  MOVLB  1
5538:  INCF   x6F,F
553A:  BNZ   5548
....................         if (++D2A_image[16] > 3) 
553C:  INCF   x70,F
553E:  MOVF   x70,W
5540:  SUBLW  03
5542:  BC    5548
....................           { 
....................           D2A_image[15] = 0; 
5544:  CLRF   x6F
....................           D2A_image[16] = 0; 
5546:  CLRF   x70
....................           } 
....................       write_D2A(15, D2A_image[15]); 
5548:  MOVLW  0F
554A:  MOVLB  2
554C:  MOVWF  x02
554E:  MOVFF  16F,203
5552:  MOVLB  0
5554:  RCALL  5442
....................       write_D2A(16, D2A_image[16]); 
5556:  MOVLW  10
5558:  MOVLB  2
555A:  MOVWF  x02
555C:  MOVFF  170,203
5560:  MOVLB  0
5562:  RCALL  5442
....................       break; 
5564:  BRA    5742
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
5566:  MOVLB  1
5568:  DECF   x6B,F
556A:  INCFSZ x6B,W
556C:  BRA    557C
....................         if (--D2A_image[12] > 3) 
556E:  DECF   x6C,F
5570:  MOVF   x6C,W
5572:  SUBLW  03
5574:  BC    557C
....................           { 
....................           D2A_image[11] = 255; 
5576:  SETF   x6B
....................           D2A_image[12] = 3; 
5578:  MOVLW  03
557A:  MOVWF  x6C
....................           } 
....................       write_D2A(11, D2A_image[11]); 
557C:  MOVLW  0B
557E:  MOVLB  2
5580:  MOVWF  x02
5582:  MOVFF  16B,203
5586:  MOVLB  0
5588:  RCALL  5442
....................       write_D2A(12, D2A_image[12]); 
558A:  MOVLW  0C
558C:  MOVLB  2
558E:  MOVWF  x02
5590:  MOVFF  16C,203
5594:  MOVLB  0
5596:  RCALL  5442
....................       break; 
5598:  BRA    5742
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
559A:  MOVLB  1
559C:  DECF   x6F,F
559E:  INCFSZ x6F,W
55A0:  BRA    55B0
....................         if (--D2A_image[16] > 3) 
55A2:  DECF   x70,F
55A4:  MOVF   x70,W
55A6:  SUBLW  03
55A8:  BC    55B0
....................           { 
....................           D2A_image[15] = 255; 
55AA:  SETF   x6F
....................           D2A_image[16] = 3; 
55AC:  MOVLW  03
55AE:  MOVWF  x70
....................           } 
....................       write_D2A(15, D2A_image[15]); 
55B0:  MOVLW  0F
55B2:  MOVLB  2
55B4:  MOVWF  x02
55B6:  MOVFF  16F,203
55BA:  MOVLB  0
55BC:  RCALL  5442
....................       write_D2A(16, D2A_image[16]); 
55BE:  MOVLW  10
55C0:  MOVLB  2
55C2:  MOVWF  x02
55C4:  MOVFF  170,203
55C8:  MOVLB  0
55CA:  RCALL  5442
....................       break; 
55CC:  BRA    5742
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
55CE:  MOVLB  1
55D0:  MOVFF  16D,1CC
55D4:  MOVF   x6E,W
55D6:  ANDLW  03
55D8:  MOVWF  xCD
....................       if (++incdec > 0x3FF) 
55DA:  INCF   xCC,F
55DC:  BTFSC  FD8.2
55DE:  INCF   xCD,F
55E0:  MOVF   xCD,W
55E2:  SUBLW  03
55E4:  BC    55EA
....................         incdec = 0; 
55E6:  CLRF   xCD
55E8:  CLRF   xCC
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
55EA:  MOVF   x6E,W
55EC:  ANDLW  C0
55EE:  MOVWF  xCE
55F0:  MOVLW  00
55F2:  IORWF  xCC,F
55F4:  MOVF   xCE,W
55F6:  IORWF  xCD,F
....................       D2A_image[13] = make8(incdec, 0); 
55F8:  MOVFF  1CC,16D
....................       D2A_image[14] = make8(incdec, 1); 
55FC:  MOVFF  1CD,16E
....................       write_D2A(11, D2A_image[13]); 
5600:  MOVLW  0B
5602:  MOVLB  2
5604:  MOVWF  x02
5606:  MOVFF  16D,203
560A:  MOVLB  0
560C:  RCALL  5442
....................       write_D2A(12, D2A_image[14]); 
560E:  MOVLW  0C
5610:  MOVLB  2
5612:  MOVWF  x02
5614:  MOVFF  16E,203
5618:  MOVLB  0
561A:  RCALL  5442
....................       break; 
561C:  BRA    5742
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
561E:  MOVLB  1
5620:  MOVFF  171,1CC
5624:  MOVF   x72,W
5626:  ANDLW  03
5628:  MOVWF  xCD
....................       if (++incdec > 0x3FF) 
562A:  INCF   xCC,F
562C:  BTFSC  FD8.2
562E:  INCF   xCD,F
5630:  MOVF   xCD,W
5632:  SUBLW  03
5634:  BC    563A
....................         incdec = 0; 
5636:  CLRF   xCD
5638:  CLRF   xCC
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
563A:  MOVF   x72,W
563C:  ANDLW  C0
563E:  MOVWF  xCE
5640:  MOVLW  00
5642:  IORWF  xCC,F
5644:  MOVF   xCE,W
5646:  IORWF  xCD,F
....................       D2A_image[17] = make8(incdec, 0); 
5648:  MOVFF  1CC,171
....................       D2A_image[18] = make8(incdec, 1); 
564C:  MOVFF  1CD,172
....................       write_D2A(11, D2A_image[17]); 
5650:  MOVLW  0B
5652:  MOVLB  2
5654:  MOVWF  x02
5656:  MOVFF  171,203
565A:  MOVLB  0
565C:  RCALL  5442
....................       write_D2A(12, D2A_image[18]); 
565E:  MOVLW  0C
5660:  MOVLB  2
5662:  MOVWF  x02
5664:  MOVFF  172,203
5668:  MOVLB  0
566A:  RCALL  5442
....................       break; 
566C:  BRA    5742
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
566E:  MOVLB  1
5670:  MOVFF  16D,1CC
5674:  MOVF   x6E,W
5676:  ANDLW  03
5678:  MOVWF  xCD
....................       if (--incdec > 0x3FF) 
567A:  MOVF   xCC,W
567C:  BTFSC  FD8.2
567E:  DECF   xCD,F
5680:  DECF   xCC,F
5682:  MOVF   xCD,W
5684:  SUBLW  03
5686:  BC    568E
....................         incdec = 0x3FF; 
5688:  MOVLW  03
568A:  MOVWF  xCD
568C:  SETF   xCC
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
568E:  MOVF   x6E,W
5690:  ANDLW  C0
5692:  MOVWF  xCE
5694:  MOVLW  00
5696:  IORWF  xCC,F
5698:  MOVF   xCE,W
569A:  IORWF  xCD,F
....................       D2A_image[13] = make8(incdec, 0); 
569C:  MOVFF  1CC,16D
....................       D2A_image[14] = make8(incdec, 1); 
56A0:  MOVFF  1CD,16E
....................       write_D2A(11, D2A_image[13]); 
56A4:  MOVLW  0B
56A6:  MOVLB  2
56A8:  MOVWF  x02
56AA:  MOVFF  16D,203
56AE:  MOVLB  0
56B0:  RCALL  5442
....................       write_D2A(12, D2A_image[14]); 
56B2:  MOVLW  0C
56B4:  MOVLB  2
56B6:  MOVWF  x02
56B8:  MOVFF  16E,203
56BC:  MOVLB  0
56BE:  RCALL  5442
....................       break; 
56C0:  BRA    5742
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
56C2:  MOVLB  1
56C4:  MOVFF  171,1CC
56C8:  MOVF   x72,W
56CA:  ANDLW  03
56CC:  MOVWF  xCD
....................       if (--incdec > 0x3FF) 
56CE:  MOVF   xCC,W
56D0:  BTFSC  FD8.2
56D2:  DECF   xCD,F
56D4:  DECF   xCC,F
56D6:  MOVF   xCD,W
56D8:  SUBLW  03
56DA:  BC    56E2
....................         incdec = 0x3FF; 
56DC:  MOVLW  03
56DE:  MOVWF  xCD
56E0:  SETF   xCC
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
56E2:  MOVF   x72,W
56E4:  ANDLW  C0
56E6:  MOVWF  xCE
56E8:  MOVLW  00
56EA:  IORWF  xCC,F
56EC:  MOVF   xCE,W
56EE:  IORWF  xCD,F
....................       D2A_image[17] = make8(incdec, 0); 
56F0:  MOVFF  1CC,171
....................       D2A_image[18] = make8(incdec, 1); 
56F4:  MOVFF  1CD,172
....................       write_D2A(11, D2A_image[17]); 
56F8:  MOVLW  0B
56FA:  MOVLB  2
56FC:  MOVWF  x02
56FE:  MOVFF  171,203
5702:  MOVLB  0
5704:  RCALL  5442
....................       write_D2A(12, D2A_image[18]); 
5706:  MOVLW  0C
5708:  MOVLB  2
570A:  MOVWF  x02
570C:  MOVFF  172,203
5710:  MOVLB  0
5712:  RCALL  5442
....................       break; 
5714:  BRA    5742
....................     case '>': 
....................       if (setup.phase_offset < 255) 
5716:  INCFSZ xBC,W
5718:  BRA    571C
571A:  BRA    571E
....................         setup.phase_offset++; 
571C:  INCF   xBC,F
....................       update_FPGA(1, setup.phase_offset); 
571E:  MOVLW  01
5720:  MOVLB  1
5722:  MOVWF  xCE
5724:  MOVFF  BC,1CF
5728:  MOVLB  0
572A:  RCALL  54AC
....................       break; 
572C:  BRA    5742
....................     case '<': 
....................       if (setup.phase_offset) 
572E:  MOVF   xBC,F
5730:  BZ    5734
....................         setup.phase_offset--; 
5732:  DECF   xBC,F
....................       update_FPGA(1, setup.phase_offset); 
5734:  MOVLW  01
5736:  MOVLB  1
5738:  MOVWF  xCE
573A:  MOVFF  BC,1CF
573E:  MOVLB  0
5740:  RCALL  54AC
....................       break; 
....................     } 
....................   } 
5742:  GOTO   63EC (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
5746:  MOVLW  0D
5748:  MOVLB  2
574A:  MOVWF  x02
574C:  MOVLW  0A
574E:  MOVWF  x03
5750:  CLRF   x04
5752:  MOVLW  02
5754:  MOVWF  x69
5756:  MOVWF  x68
5758:  MOVLB  0
575A:  CALL   2002
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
575E:  MOVLW  02
5760:  MOVWF  FEA
5762:  MOVWF  FE9
5764:  MOVLW  3D
5766:  MOVWF  01
5768:  CLRF   FF7
576A:  MOVLW  00
576C:  CALL   0112
5770:  TBLRD*-
5772:  TBLRD*+
5774:  MOVFF  FF5,FEE
5778:  DECFSZ 01,F
577A:  BRA    5772
577C:  MOVLW  02
577E:  MOVLB  2
5780:  MOVWF  x69
5782:  MOVWF  x68
5784:  MOVLB  0
5786:  CALL   2002
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
578A:  MOVLW  02
578C:  MOVWF  FEA
578E:  MOVWF  FE9
5790:  MOVLW  2E
5792:  MOVWF  01
5794:  CLRF   FF7
5796:  MOVLW  00
5798:  CALL   0160
579C:  TBLRD*-
579E:  TBLRD*+
57A0:  MOVFF  FF5,FEE
57A4:  DECFSZ 01,F
57A6:  BRA    579E
57A8:  MOVLW  02
57AA:  MOVLB  2
57AC:  MOVWF  x69
57AE:  MOVWF  x68
57B0:  MOVLB  0
57B2:  CALL   2002
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
57B6:  MOVLW  02
57B8:  MOVWF  FEA
57BA:  MOVWF  FE9
57BC:  MOVLW  42
57BE:  MOVWF  01
57C0:  CLRF   FF7
57C2:  MOVLW  00
57C4:  CALL   019E
57C8:  TBLRD*-
57CA:  TBLRD*+
57CC:  MOVFF  FF5,FEE
57D0:  DECFSZ 01,F
57D2:  BRA    57CA
57D4:  MOVLW  02
57D6:  MOVLB  2
57D8:  MOVWF  x69
57DA:  MOVWF  x68
57DC:  MOVLB  0
57DE:  CALL   2002
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
57E2:  MOVLW  02
57E4:  MOVWF  FEA
57E6:  MOVWF  FE9
57E8:  MOVLW  23
57EA:  MOVWF  01
57EC:  CLRF   FF7
57EE:  MOVLW  00
57F0:  CALL   01F0
57F4:  TBLRD*-
57F6:  TBLRD*+
57F8:  MOVFF  FF5,FEE
57FC:  DECFSZ 01,F
57FE:  BRA    57F6
5800:  MOVLW  02
5802:  MOVLB  2
5804:  MOVWF  x69
5806:  MOVWF  x68
5808:  MOVLB  0
580A:  CALL   2002
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
580E:  MOVLW  02
5810:  MOVWF  FEA
5812:  MOVWF  FE9
5814:  MOVLW  2D
5816:  MOVWF  01
5818:  CLRF   FF7
581A:  MOVLW  00
581C:  CALL   0224
5820:  TBLRD*-
5822:  TBLRD*+
5824:  MOVFF  FF5,FEE
5828:  DECFSZ 01,F
582A:  BRA    5822
582C:  MOVLW  02
582E:  MOVLB  2
5830:  MOVWF  x69
5832:  MOVWF  x68
5834:  MOVLB  0
5836:  CALL   2002
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
583A:  MOVLW  02
583C:  MOVWF  FEA
583E:  MOVWF  FE9
5840:  MOVLW  2E
5842:  MOVWF  01
5844:  CLRF   FF7
5846:  MOVLW  00
5848:  CALL   0262
584C:  TBLRD*-
584E:  TBLRD*+
5850:  MOVFF  FF5,FEE
5854:  DECFSZ 01,F
5856:  BRA    584E
5858:  MOVLW  02
585A:  MOVLB  2
585C:  MOVWF  x69
585E:  MOVWF  x68
5860:  MOVLB  0
5862:  CALL   2002
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5866:  MOVLW  02
5868:  MOVWF  FEA
586A:  MOVWF  FE9
586C:  MOVLW  36
586E:  MOVWF  01
5870:  CLRF   FF7
5872:  MOVLW  00
5874:  CALL   02A0
5878:  TBLRD*-
587A:  TBLRD*+
587C:  MOVFF  FF5,FEE
5880:  DECFSZ 01,F
5882:  BRA    587A
5884:  MOVLW  02
5886:  MOVLB  2
5888:  MOVWF  x69
588A:  MOVWF  x68
588C:  MOVLB  0
588E:  CALL   2002
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
5892:  MOVLW  02
5894:  MOVWF  FEA
5896:  MOVWF  FE9
5898:  MOVLW  16
589A:  MOVWF  01
589C:  CLRF   FF7
589E:  MOVLW  00
58A0:  CALL   02E6
58A4:  TBLRD*-
58A6:  TBLRD*+
58A8:  MOVFF  FF5,FEE
58AC:  DECFSZ 01,F
58AE:  BRA    58A6
58B0:  MOVLW  02
58B2:  MOVLB  2
58B4:  MOVWF  x69
58B6:  MOVWF  x68
58B8:  MOVLB  0
58BA:  CALL   2002
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
58BE:  MOVLW  02
58C0:  MOVWF  FEA
58C2:  MOVWF  FE9
58C4:  MOVLW  3C
58C6:  MOVWF  01
58C8:  CLRF   FF7
58CA:  MOVLW  00
58CC:  CALL   030C
58D0:  TBLRD*-
58D2:  TBLRD*+
58D4:  MOVFF  FF5,FEE
58D8:  DECFSZ 01,F
58DA:  BRA    58D2
58DC:  MOVLW  02
58DE:  MOVLB  2
58E0:  MOVWF  x69
58E2:  MOVWF  x68
58E4:  MOVLB  0
58E6:  CALL   2002
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
58EA:  MOVLW  02
58EC:  MOVWF  FEA
58EE:  MOVWF  FE9
58F0:  MOVLW  3D
58F2:  MOVWF  01
58F4:  CLRF   FF7
58F6:  MOVLW  00
58F8:  CALL   0358
58FC:  TBLRD*-
58FE:  TBLRD*+
5900:  MOVFF  FF5,FEE
5904:  DECFSZ 01,F
5906:  BRA    58FE
5908:  MOVLW  02
590A:  MOVLB  2
590C:  MOVWF  x69
590E:  MOVWF  x68
5910:  MOVLB  0
5912:  CALL   2002
....................   COM1_send_str("\r\n"); 
5916:  MOVLW  0D
5918:  MOVLB  2
591A:  MOVWF  x02
591C:  MOVLW  0A
591E:  MOVWF  x03
5920:  CLRF   x04
5922:  MOVLW  02
5924:  MOVWF  x69
5926:  MOVWF  x68
5928:  MOVLB  0
592A:  CALL   2002
....................   } 
592E:  GOTO   5D56 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
....................   { 
....................   //COM1_send_str("\r\nFAIL\r\n"); 
....................   } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT read_temperature(void)// VERSION 3.3 17.1.2016 
....................   { 
....................   float temp; 
....................   SINT t, val; 
....................   set_adc_channel(A2D_TEMP); // read temperature 
*
2532:  MOVLW  18
2534:  MOVWF  01
2536:  MOVF   FC2,W
2538:  ANDLW  83
253A:  IORWF  01,W
253C:  MOVWF  FC2
....................   delay_us(50); 
253E:  MOVLW  42
2540:  MOVWF  00
2542:  DECFSZ 00,F
2544:  BRA    2542
2546:  NOP   
....................   val = read_adc(); 
2548:  BSF    FC2.1
254A:  BTFSC  FC2.1
254C:  BRA    254A
254E:  MOVFF  FC4,1BF
2552:  MOVLB  1
2554:  MOVFF  FC3,1BE
....................   temp = (float)val / 1024.0 * 3.3; 
2558:  MOVFF  1BF,1C1
255C:  MOVFF  1BE,1C0
2560:  MOVLB  0
2562:  BRA    222A
2564:  MOVFF  00,1C0
2568:  MOVFF  01,1C1
256C:  MOVFF  02,1C2
2570:  MOVFF  03,1C3
2574:  MOVFF  03,252
2578:  MOVFF  02,251
257C:  MOVFF  01,250
2580:  MOVFF  00,24F
2584:  MOVLB  2
2586:  CLRF   x56
2588:  CLRF   x55
258A:  CLRF   x54
258C:  MOVLW  89
258E:  MOVWF  x53
2590:  MOVLB  0
2592:  CALL   16BA
2596:  MOVFF  00,1C0
259A:  MOVFF  01,1C1
259E:  MOVFF  02,1C2
25A2:  MOVFF  03,1C3
25A6:  MOVFF  03,252
25AA:  MOVFF  02,251
25AE:  MOVFF  01,250
25B2:  MOVFF  00,24F
25B6:  MOVLW  33
25B8:  MOVLB  2
25BA:  MOVWF  x56
25BC:  MOVWF  x55
25BE:  MOVLW  53
25C0:  MOVWF  x54
25C2:  MOVLW  80
25C4:  MOVWF  x53
25C6:  MOVLB  0
25C8:  CALL   1818
25CC:  MOVFF  03,1BB
25D0:  MOVFF  02,1BA
25D4:  MOVFF  01,1B9
25D8:  MOVFF  00,1B8
....................   temp -= 0.75; 
25DC:  BSF    FD8.1
25DE:  MOVFF  1BB,22D
25E2:  MOVFF  1BA,22C
25E6:  MOVFF  1B9,22B
25EA:  MOVFF  1B8,22A
25EE:  MOVLB  2
25F0:  CLRF   x31
25F2:  CLRF   x30
25F4:  MOVLW  40
25F6:  MOVWF  x2F
25F8:  MOVLW  7E
25FA:  MOVWF  x2E
25FC:  MOVLB  0
25FE:  RCALL  227C
2600:  MOVFF  03,1BB
2604:  MOVFF  02,1BA
2608:  MOVFF  01,1B9
260C:  MOVFF  00,1B8
....................   temp *= 100; 
2610:  MOVFF  1BB,252
2614:  MOVFF  1BA,251
2618:  MOVFF  1B9,250
261C:  MOVFF  1B8,24F
2620:  MOVLB  2
2622:  CLRF   x56
2624:  CLRF   x55
2626:  MOVLW  48
2628:  MOVWF  x54
262A:  MOVLW  85
262C:  MOVWF  x53
262E:  MOVLB  0
2630:  CALL   1818
2634:  MOVFF  03,1BB
2638:  MOVFF  02,1BA
263C:  MOVFF  01,1B9
2640:  MOVFF  00,1B8
....................   temp += 25.0; 
2644:  BCF    FD8.1
2646:  MOVFF  1BB,22D
264A:  MOVFF  1BA,22C
264E:  MOVFF  1B9,22B
2652:  MOVFF  1B8,22A
2656:  MOVLB  2
2658:  CLRF   x31
265A:  CLRF   x30
265C:  MOVLW  48
265E:  MOVWF  x2F
2660:  MOVLW  83
2662:  MOVWF  x2E
2664:  MOVLB  0
2666:  RCALL  227C
2668:  MOVFF  03,1BB
266C:  MOVFF  02,1BA
2670:  MOVFF  01,1B9
2674:  MOVFF  00,1B8
....................   t = (SINT)(temp*100); 
2678:  MOVFF  1BB,252
267C:  MOVFF  1BA,251
2680:  MOVFF  1B9,250
2684:  MOVFF  1B8,24F
2688:  MOVLB  2
268A:  CLRF   x56
268C:  CLRF   x55
268E:  MOVLW  48
2690:  MOVWF  x54
2692:  MOVLW  85
2694:  MOVWF  x53
2696:  MOVLB  0
2698:  CALL   1818
269C:  MOVFF  03,1C3
26A0:  MOVFF  02,1C2
26A4:  MOVFF  01,1C1
26A8:  MOVFF  00,1C0
26AC:  BRA    24F4
26AE:  MOVFF  02,1BD
26B2:  MOVFF  01,1BC
....................   return t; 
26B6:  MOVLB  1
26B8:  MOVFF  1BC,01
26BC:  MOVFF  1BD,02
....................   } 
26C0:  MOVLB  0
26C2:  GOTO   2754 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
....................   { 
*
20CA:  MOVLB  1
20CC:  CLRF   xB8
....................  // float temp; 
....................   byte t = 0; 
....................   t = (0 * 1); 
20CE:  CLRF   xB8
....................   t = (t + (0 * 10)); 
....................   t = t + ( (bit)setup.SOQPSK <<         2); 
20D0:  MOVLW  00
20D2:  MOVLB  0
20D4:  BTFSC  xB6.0
20D6:  MOVLW  01
20D8:  MOVWF  00
20DA:  RLCF   00,F
20DC:  RLCF   00,F
20DE:  MOVLW  FC
20E0:  ANDWF  00,F
20E2:  MOVF   00,W
20E4:  MOVLB  1
20E6:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.clock_polarity << 3); 
20E8:  MOVLW  00
20EA:  MOVLB  0
20EC:  BTFSC  xAF.0
20EE:  MOVLW  01
20F0:  MOVWF  00
20F2:  RLCF   00,F
20F4:  RLCF   00,F
20F6:  RLCF   00,F
20F8:  MOVLW  F8
20FA:  ANDWF  00,F
20FC:  MOVF   00,W
20FE:  MOVLB  1
2100:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.clock_source <<   4); 
2102:  MOVLW  00
2104:  MOVLB  0
2106:  BTFSC  xB1.0
2108:  MOVLW  01
210A:  MOVWF  00
210C:  SWAPF  00,F
210E:  MOVLW  F0
2110:  ANDWF  00,F
2112:  MOVF   00,W
2114:  MOVLB  1
2116:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.randomizer <<     5); 
2118:  MOVLW  00
211A:  MOVLB  0
211C:  BTFSC  xB4.0
211E:  MOVLW  01
2120:  MOVWF  00
2122:  SWAPF  00,F
2124:  RLCF   00,F
2126:  MOVLW  E0
2128:  ANDWF  00,F
212A:  MOVF   00,W
212C:  MOVLB  1
212E:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.data_polarity <<  6); 
2130:  MOVLW  00
2132:  MOVLB  0
2134:  BTFSC  xB0.0
2136:  MOVLW  01
2138:  MOVWF  00
213A:  SWAPF  00,F
213C:  RLCF   00,F
213E:  RLCF   00,F
2140:  MOVLW  C0
2142:  ANDWF  00,F
2144:  MOVF   00,W
2146:  MOVLB  1
2148:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.data_source <<    7); 
214A:  MOVLW  00
214C:  MOVLB  0
214E:  BTFSC  xB2.0
2150:  MOVLW  01
2152:  MOVWF  00
2154:  RRCF   00,W
2156:  CLRF   00
2158:  BTFSC  FD8.0
215A:  BSF    00.7
215C:  MOVF   00,W
215E:  MOVLB  1
2160:  ADDWF  xB8,F
....................    
....................   //  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................   return t; 
2162:  CLRF   03
2164:  MOVFF  1B8,01
2168:  MOVFF  03,02
....................   } 
216C:  MOVLB  0
216E:  GOTO   2748 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
....................   { 
....................  // float temp; 
....................   if (revp <= 580) 
2172:  MOVLB  1
2174:  MOVF   x05,W
2176:  SUBLW  02
2178:  BNC   2186
217A:  BNZ   2182
217C:  MOVF   x04,W
217E:  SUBLW  44
2180:  BNC   2186
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
2182:  BCF    x9E.0
....................       else 
2184:  BRA    2188
....................         revp_status = 1;//Q strcpy(revstat, "BAD"); 
2186:  BSF    x9E.0
....................  
....................   byte t = 0; 
2188:  CLRF   xB8
....................   t = (0 * 1); 
218A:  CLRF   xB8
....................   t = (t + (0 * 10)); 
....................   t = t + ( (bit)revp_status <<         2); 
218C:  MOVLW  00
218E:  BTFSC  x9E.0
2190:  MOVLW  01
2192:  MOVWF  00
2194:  RLCF   00,F
2196:  RLCF   00,F
2198:  MOVLW  FC
219A:  ANDWF  00,F
219C:  MOVF   00,W
219E:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.UART_Status << 3); 
21A0:  MOVLW  00
21A2:  MOVLB  0
21A4:  BTFSC  xFB.0
21A6:  MOVLW  01
21A8:  MOVWF  00
21AA:  RLCF   00,F
21AC:  RLCF   00,F
21AE:  RLCF   00,F
21B0:  MOVLW  F8
21B2:  ANDWF  00,F
21B4:  MOVF   00,W
21B6:  MOVLB  1
21B8:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.rp <<   4); 
21BA:  MOVLW  00
21BC:  MOVLB  0
21BE:  BTFSC  xF8.0
21C0:  MOVLW  01
21C2:  MOVWF  00
21C4:  SWAPF  00,F
21C6:  MOVLW  F0
21C8:  ANDWF  00,F
21CA:  MOVF   00,W
21CC:  MOVLB  1
21CE:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.pwr <<     5);//RF 
21D0:  MOVLW  00
21D2:  MOVLB  0
21D4:  BTFSC  xAC.0
21D6:  MOVLW  01
21D8:  MOVWF  00
21DA:  SWAPF  00,F
21DC:  RLCF   00,F
21DE:  MOVLW  E0
21E0:  ANDWF  00,F
21E2:  MOVF   00,W
21E4:  MOVLB  1
21E6:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.rc <<  6); 
21E8:  MOVLW  00
21EA:  MOVLB  0
21EC:  BTFSC  xF6.0
21EE:  MOVLW  01
21F0:  MOVWF  00
21F2:  SWAPF  00,F
21F4:  RLCF   00,F
21F6:  RLCF   00,F
21F8:  MOVLW  C0
21FA:  ANDWF  00,F
21FC:  MOVF   00,W
21FE:  MOVLB  1
2200:  ADDWF  xB8,F
....................   t = t + ( (bit)setup.cot <<    7); //RB 
2202:  MOVLW  00
2204:  MOVLB  0
2206:  BTFSC  xF4.0
2208:  MOVLW  01
220A:  MOVWF  00
220C:  RRCF   00,W
220E:  CLRF   00
2210:  BTFSC  FD8.0
2212:  BSF    00.7
2214:  MOVF   00,W
2216:  MOVLB  1
2218:  ADDWF  xB8,F
....................    
....................   
....................   return t; 
221A:  CLRF   03
221C:  MOVFF  1B8,01
2220:  MOVFF  03,02
....................   } 
2224:  MOVLB  0
2226:  GOTO   274E (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
318E:  CALL   2924
3192:  MOVFF  02,22B
3196:  MOVFF  01,22A
....................   setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
319A:  MOVFF  22A,FD
....................   if (idx <= 40 && idx >= 20) 
319E:  MOVLB  2
31A0:  MOVF   x2B,F
31A2:  BNZ   31F6
31A4:  MOVF   x2A,W
31A6:  SUBLW  28
31A8:  BNC   31F6
31AA:  MOVF   x2B,F
31AC:  BNZ   31B4
31AE:  MOVF   x2A,W
31B0:  SUBLW  13
31B2:  BC    31F6
....................     { 
....................     setup.power_level = idx - 20; 
31B4:  MOVLW  14
31B6:  SUBWF  x2A,W
31B8:  MOVLB  0
31BA:  MOVWF  xBA
31BC:  MOVLW  00
31BE:  MOVLB  2
31C0:  SUBWFB x2B,W
31C2:  MOVLB  0
31C4:  MOVWF  xBB
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
31C6:  BCF    FD8.0
31C8:  RLCF   xBA,W
31CA:  MOVWF  02
31CC:  RLCF   xBB,W
31CE:  MOVWF  03
31D0:  MOVF   02,W
31D2:  ADDLW  C3
31D4:  MOVWF  FE9
31D6:  MOVLW  00
31D8:  ADDWFC 03,W
31DA:  MOVWF  FEA
31DC:  MOVFF  FEC,03
31E0:  MOVF   FED,F
31E2:  MOVFF  FEF,1C
31E6:  MOVFF  03,1D
....................     return 1; 
31EA:  MOVLW  01
31EC:  MOVWF  01
31EE:  MOVLW  00
31F0:  MOVWF  02
31F2:  BRA    31FC
31F4:  MOVLB  2
....................     } 
....................   return 0; 
31F6:  MOVLW  00
31F8:  MOVWF  01
31FA:  MOVWF  02
31FC:  MOVLB  0
....................   } 
31FE:  GOTO   47A0 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
311C:  RCALL  2924
311E:  MOVFF  02,22B
3122:  MOVFF  01,22A
....................   setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
3126:  MOVFF  22A,FC
....................   if (idx <= 40 && idx >= 20) 
312A:  MOVLB  2
312C:  MOVF   x2B,F
312E:  BNZ   3182
3130:  MOVF   x2A,W
3132:  SUBLW  28
3134:  BNC   3182
3136:  MOVF   x2B,F
3138:  BNZ   3140
313A:  MOVF   x2A,W
313C:  SUBLW  13
313E:  BC    3182
....................     { 
....................     setup.power_low_level = idx - 20; 
3140:  MOVLW  14
3142:  SUBWF  x2A,W
3144:  MOVLB  0
3146:  MOVWF  xF2
3148:  MOVLW  00
314A:  MOVLB  2
314C:  SUBWFB x2B,W
314E:  MOVLB  0
3150:  MOVWF  xF3
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
3152:  BCF    FD8.0
3154:  RLCF   xF2,W
3156:  MOVWF  02
3158:  RLCF   xF3,W
315A:  MOVWF  03
315C:  MOVF   02,W
315E:  ADDLW  C3
3160:  MOVWF  FE9
3162:  MOVLW  00
3164:  ADDWFC 03,W
3166:  MOVWF  FEA
3168:  MOVFF  FEC,03
316C:  MOVF   FED,F
316E:  MOVFF  FEF,1A
3172:  MOVFF  03,1B
....................     return 1; 
3176:  MOVLW  01
3178:  MOVWF  01
317A:  MOVLW  00
317C:  MOVWF  02
317E:  BRA    3188
3180:  MOVLB  2
....................     } 
....................   return 0; 
3182:  MOVLW  00
3184:  MOVWF  01
3186:  MOVWF  02
3188:  MOVLB  0
....................   } 
318A:  GOTO   46F6 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... The message structure is defined below. 
....................  
.................... Byte# Description Remarks 
.................... 1 Header  Constant - 47 Hex 
.................... 2 Temperature Send 2's complement 
.................... 3 Power level 
.................... 4 Current 
.................... 5 PLL lock 
.................... 6 Checksum  Checksum of all preceding bytes 
....................  
.................... Table 1 - Status Packet structure 
....................  
.................... The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
....................   { 
*
273E:  MOVLB  1
2740:  CLRF   xB3
2742:  CLRF   xB2
....................   UINT chksum = 0, idx; 
....................   byte BitsStatus1,BitsStatus2; 
....................   BitsStatus1 = Bits_status1(); 
2744:  MOVLB  0
2746:  BRA    20CA
2748:  MOVFF  01,1B6
....................   BitsStatus2 = Bits_status2(); 
274C:  BRA    2172
274E:  MOVFF  01,1B7
....................   
....................   current_temperature = read_temperature(); 
2752:  BRA    2532
2754:  MOVFF  02,107
2758:  MOVFF  01,106
....................   //measured_current = read_current(); 
....................   //power_level_stat = current_power; 
....................   status_buffer[0] = 0xFB; // Synchronization Byte 1 
275C:  MOVLW  FB
275E:  MOVLB  1
2760:  MOVWF  x10
....................   status_buffer[1] = 0x60; // Synchronization Byte 2 
2762:  MOVLW  60
2764:  MOVWF  x11
....................   status_buffer[2] = TX_Counter; // The counter increments by one each time an update is sent 0 to 255 
2766:  MOVFF  10C,112
....................   status_buffer[3] = setup.frequency / 256; // MSB TX frequency  
276A:  MOVFF  B9,113
....................   status_buffer[4] = setup.frequency % 256; // LSB TX frequency  
276E:  MOVFF  B8,114
2772:  MOVLB  1
....................   status_buffer[5] = setup.mode; // State of modulation state 
2774:  MOVFF  AE,115
....................   status_buffer[6] = BitsStatus1; //0x00; // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
2778:  MOVFF  1B6,116
....................   status_buffer[7] = current_temperature / 256; //MSB TX Temperature  
277C:  MOVFF  107,1B9
2780:  MOVFF  106,1B8
2784:  MOVLW  01
2786:  MOVWF  xBB
2788:  CLRF   xBA
278A:  MOVLB  0
278C:  RCALL  26C6
278E:  MOVFF  01,117
2792:  MOVLB  1
....................   status_buffer[8] = current_temperature % 256; //LSB TX Temperature  
2794:  MOVFF  107,1B9
2798:  MOVFF  106,1B8
279C:  MOVLW  01
279E:  MOVWF  xBB
27A0:  CLRF   xBA
27A2:  MOVLB  0
27A4:  RCALL  26C6
27A6:  MOVFF  00,118
27AA:  MOVLB  1
....................   status_buffer[9] = setup.bitrate / 256; //MSB Bit rate state ,  
27AC:  MOVFF  AB,119
....................   status_buffer[10] = setup.bitrate % 256; //LSB Bit rate state  
27B0:  MOVFF  AA,11A
27B4:  MOVLB  1
....................   status_buffer[11] = setup.power_level + 20; // TX power in dBm 
27B6:  MOVLW  14
27B8:  MOVLB  0
27BA:  ADDWF  xBA,W
27BC:  MOVLB  1
27BE:  MOVWF  x1B
....................   status_buffer[12] = setup.internal_pattern; //Data type while using internal data 
27C0:  MOVFF  B3,11C
....................   status_buffer[13] = BitsStatus2; // Bits status of: Reverse Power N/A 
27C4:  MOVFF  1B7,11D
....................   status_buffer[14] = setup.bitlow_power_level ;// TX low power in dBm (VL) 
27C8:  MOVFF  FC,11E
....................   status_buffer[15] = setup.bitpower_level ;// TX low power in dBm (VP) 
27CC:  MOVFF  FD,11F
....................   status_buffer[16] = 0xAA;//revp; N/A FOR Now // need to be clilired Revers power 
27D0:  MOVLW  AA
27D2:  MOVWF  x20
....................   status_buffer[17] = 0xAA;//N/A FOR Now((VERSION(12)*10) + VERSION(14));// TX VERSION 
27D4:  MOVWF  x21
....................   status_buffer[18] = setup.unit_ID / 256;//MSB TX Serial number 
27D6:  MOVFF  F1,122
....................   status_buffer[19] = setup.unit_ID % 256;//LSB TX Serial number 
27DA:  MOVFF  F0,123
27DE:  MOVLB  1
....................   status_buffer[20] = 0xAA;// Spare 
27E0:  MOVLW  AA
27E2:  MOVWF  x24
....................   status_buffer[21] = 0xAA;// Spare 
27E4:  MOVWF  x25
....................    
....................   for (idx = 0; idx < 23; idx++) 
27E6:  CLRF   xB5
27E8:  CLRF   xB4
27EA:  MOVF   xB5,F
27EC:  BNZ   2810
27EE:  MOVF   xB4,W
27F0:  SUBLW  16
27F2:  BNC   2810
....................     { 
....................     chksum += status_buffer[idx]; 
27F4:  MOVLW  10
27F6:  ADDWF  xB4,W
27F8:  MOVWF  FE9
27FA:  MOVLW  01
27FC:  ADDWFC xB5,W
27FE:  MOVWF  FEA
2800:  MOVF   FEF,W
2802:  ADDWF  xB2,F
2804:  MOVLW  00
2806:  ADDWFC xB3,F
....................     } 
2808:  INCF   xB4,F
280A:  BTFSC  FD8.2
280C:  INCF   xB5,F
280E:  BRA    27EA
....................   status_buffer[22] =(chksum ) / 256;//& 255 
2810:  MOVFF  1B3,126
....................   status_buffer[23] =(chksum ) % 256;//& 255 
2814:  MOVFF  1B2,127
....................   } 
2818:  MOVLB  0
281A:  GOTO   6752 (RETURN)
.................... /* 
....................   for (idx = 0; idx < 5; idx++) 
....................     { 
....................     chksum += status_buffer[idx]; 
....................     } 
....................   status_buffer[5] =chksum & 255; 
....................   } 
....................  */  
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
5CCC:  MOVLW  02
5CCE:  MOVLB  1
5CD0:  MOVWF  xCB
....................   comm_ptr = 0; 
5CD2:  CLRF   x3D
....................   switch (toupper(get_char())) 
....................     { 
5CD4:  MOVLB  0
5CD6:  CALL   2868
5CDA:  MOVFF  02,203
5CDE:  MOVFF  01,202
5CE2:  MOVLB  2
5CE4:  MOVF   x03,F
5CE6:  BNZ   5CEE
5CE8:  MOVF   x02,W
5CEA:  SUBLW  60
5CEC:  BC    5CFE
5CEE:  MOVF   x03,F
5CF0:  BNZ   5CFE
5CF2:  MOVF   x02,W
5CF4:  SUBLW  7A
5CF6:  BNC   5CFE
5CF8:  MOVF   x02,W
5CFA:  ANDLW  DF
5CFC:  BRA    5D00
5CFE:  MOVF   x02,W
5D00:  XORLW  48
5D02:  MOVLB  0
5D04:  BZ    5D54
5D06:  XORLW  09
5D08:  BZ    5D5C
5D0A:  XORLW  02
5D0C:  BTFSC  FD8.2
5D0E:  BRA    5E30
5D10:  XORLW  07
5D12:  BTFSC  FD8.2
5D14:  BRA    5F0E
5D16:  XORLW  0B
5D18:  BTFSC  FD8.2
5D1A:  BRA    5F8C
5D1C:  XORLW  1D
5D1E:  BTFSC  FD8.2
5D20:  BRA    5FCA
5D22:  XORLW  10
5D24:  BTFSC  FD8.2
5D26:  BRA    600A
5D28:  XORLW  05
5D2A:  BTFSC  FD8.2
5D2C:  BRA    6062
5D2E:  XORLW  01
5D30:  BTFSC  FD8.2
5D32:  BRA    617E
5D34:  XORLW  15
5D36:  BTFSC  FD8.2
5D38:  BRA    620C
5D3A:  XORLW  07
5D3C:  BTFSC  FD8.2
5D3E:  BRA    62AE
5D40:  XORLW  65
5D42:  BTFSC  FD8.2
5D44:  BRA    6376
5D46:  XORLW  03
5D48:  BTFSC  FD8.2
5D4A:  BRA    6384
5D4C:  XORLW  01
5D4E:  BTFSC  FD8.2
5D50:  BRA    638E
5D52:  BRA    639C
....................     case 'H': 
....................       list_help1(); 
5D54:  BRA    5746
....................       return 0; 
5D56:  MOVLW  00
5D58:  MOVWF  01
5D5A:  BRA    63A6
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
5D5C:  CALL   2868
5D60:  MOVFF  02,203
5D64:  MOVFF  01,202
5D68:  MOVLB  2
5D6A:  MOVF   x03,F
5D6C:  BNZ   5D74
5D6E:  MOVF   x02,W
5D70:  SUBLW  60
5D72:  BC    5D84
5D74:  MOVF   x03,F
5D76:  BNZ   5D84
5D78:  MOVF   x02,W
5D7A:  SUBLW  7A
5D7C:  BNC   5D84
5D7E:  MOVF   x02,W
5D80:  ANDLW  DF
5D82:  BRA    5D86
5D84:  MOVF   x02,W
5D86:  XORLW  54
5D88:  MOVLB  0
5D8A:  BZ    5D92
5D8C:  XORLW  1D
5D8E:  BZ    5D9C
5D90:  BRA    5E2E
....................         case 'T': 
....................           idx = get_int(); 
5D92:  CALL   2924
5D96:  MOVFF  01,1CC
....................  
....................           // write to attenuator 
....................           break; 
5D9A:  BRA    5E2E
....................         case 'I': 
....................           idx = get_int(); 
5D9C:  CALL   2924
5DA0:  MOVFF  01,1CC
....................           if (idx && idx < 4) 
5DA4:  MOVLB  1
5DA6:  MOVF   xCC,F
5DA8:  BZ    5E2C
5DAA:  MOVF   xCC,W
5DAC:  SUBLW  03
5DAE:  BNC   5E2C
....................             { 
....................             set_adc_channel(idx-1); 
5DB0:  MOVLW  01
5DB2:  SUBWF  xCC,W
5DB4:  MOVLB  2
5DB6:  MOVWF  x02
5DB8:  RLCF   x02,W
5DBA:  MOVWF  00
5DBC:  RLCF   00,F
5DBE:  MOVLW  FC
5DC0:  ANDWF  00,F
5DC2:  MOVF   FC2,W
5DC4:  ANDLW  83
5DC6:  IORWF  00,W
5DC8:  MOVWF  FC2
....................             delay_us(30); 
5DCA:  MOVLW  27
5DCC:  MOVWF  00
5DCE:  DECFSZ 00,F
5DD0:  BRA    5DCE
5DD2:  BRA    5DD4
....................             value = read_adc(); 
5DD4:  BSF    FC2.1
5DD6:  BTFSC  FC2.1
5DD8:  BRA    5DD6
5DDA:  MOVFF  FC3,200
5DDE:  MOVFF  FC4,201
....................             sprintf(buf, "$AR %lu\r", value); 
5DE2:  MOVLW  01
5DE4:  MOVLB  1
5DE6:  MOVWF  xA0
5DE8:  MOVLW  D0
5DEA:  MOVWF  x9F
5DEC:  MOVLW  E0
5DEE:  MOVWF  FF6
5DF0:  MOVLW  0A
5DF2:  MOVWF  FF7
5DF4:  MOVLW  04
5DF6:  MOVLB  2
5DF8:  MOVWF  x30
5DFA:  MOVLB  0
5DFC:  CALL   2DA6
5E00:  MOVLW  10
5E02:  MOVWF  FE9
5E04:  MOVFF  201,231
5E08:  MOVFF  200,230
5E0C:  CALL   2DCE
5E10:  MOVLW  0D
5E12:  MOVLB  2
5E14:  MOVWF  x39
5E16:  MOVLB  0
5E18:  CALL   2D84
....................             COM1_send_str(buf); 
5E1C:  MOVLW  01
5E1E:  MOVLB  2
5E20:  MOVWF  x69
5E22:  MOVLW  D0
5E24:  MOVWF  x68
5E26:  MOVLB  0
5E28:  CALL   2002
....................             } 
....................           break; 
5E2C:  MOVLB  0
....................         } 
....................       break; 
5E2E:  BRA    63A2
....................     case 'C': 
....................       if (chr = toupper(get_char()) == 'F') 
5E30:  CALL   2868
5E34:  MOVFF  02,203
5E38:  MOVFF  01,202
5E3C:  MOVLB  2
5E3E:  MOVF   x03,F
5E40:  BNZ   5E48
5E42:  MOVF   x02,W
5E44:  SUBLW  60
5E46:  BC    5E58
5E48:  MOVF   x03,F
5E4A:  BNZ   5E58
5E4C:  MOVF   x02,W
5E4E:  SUBLW  7A
5E50:  BNC   5E58
5E52:  MOVF   x02,W
5E54:  ANDLW  DF
5E56:  BRA    5E5A
5E58:  MOVF   x02,W
5E5A:  SUBLW  46
5E5C:  BZ    5E62
5E5E:  MOVLW  00
5E60:  BRA    5E64
5E62:  MOVLW  01
5E64:  MOVLB  1
5E66:  MOVWF  xCB
5E68:  MOVF   xCB,F
5E6A:  BZ    5E9E
....................         { 
....................         freq = get_frequency(); 
5E6C:  MOVLB  0
5E6E:  CALL   2E8A
5E72:  MOVLB  1
5E74:  CLRF   xFB
5E76:  CLRF   xFA
5E78:  MOVFF  02,1F9
5E7C:  MOVFF  01,1F8
....................         PLL_compute_freq_parameters(freq); 
5E80:  MOVFF  1F9,203
5E84:  MOVFF  1F8,202
5E88:  MOVFF  1F9,233
5E8C:  MOVFF  1F8,232
5E90:  MOVLB  0
5E92:  CALL   11C8
....................         PLL_update(); 
5E96:  CALL   1498
....................         } 
....................       else if (chr == 'P') 
5E9A:  BRA    5F08
5E9C:  MOVLB  1
5E9E:  MOVF   xCB,W
5EA0:  SUBLW  50
5EA2:  BNZ   5F0A
....................         { 
....................         idx = get_int(); 
5EA4:  MOVLB  0
5EA6:  CALL   2924
5EAA:  MOVFF  01,1CC
....................         if (idx < 2) 
5EAE:  MOVLB  1
5EB0:  MOVF   xCC,W
5EB2:  SUBLW  01
5EB4:  BNC   5F0A
....................           { 
....................           setup.clock_polarity = idx & 1; 
5EB6:  MOVF   xCC,W
5EB8:  ANDLW  01
5EBA:  MOVLB  0
5EBC:  MOVWF  xAF
....................           sprintf(buf, "$CP %u\r", idx); 
5EBE:  MOVLW  01
5EC0:  MOVLB  1
5EC2:  MOVWF  xA0
5EC4:  MOVLW  D0
5EC6:  MOVWF  x9F
5EC8:  MOVLW  EA
5ECA:  MOVWF  FF6
5ECC:  MOVLW  0A
5ECE:  MOVWF  FF7
5ED0:  MOVLW  04
5ED2:  MOVLB  2
5ED4:  MOVWF  x30
5ED6:  MOVLB  0
5ED8:  CALL   2DA6
5EDC:  MOVFF  1CC,230
5EE0:  MOVLW  1B
5EE2:  MOVLB  2
5EE4:  MOVWF  x31
5EE6:  MOVLB  0
5EE8:  CALL   2F1E
5EEC:  MOVLW  0D
5EEE:  MOVLB  2
5EF0:  MOVWF  x39
5EF2:  MOVLB  0
5EF4:  CALL   2D84
....................           COM1_send_str(buf); 
5EF8:  MOVLW  01
5EFA:  MOVLB  2
5EFC:  MOVWF  x69
5EFE:  MOVLW  D0
5F00:  MOVWF  x68
5F02:  MOVLB  0
5F04:  CALL   2002
5F08:  MOVLB  1
....................           } 
....................         } 
....................       break; 
5F0A:  MOVLB  0
5F0C:  BRA    63A2
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
5F0E:  CALL   2868
5F12:  MOVFF  02,203
5F16:  MOVFF  01,202
5F1A:  MOVLB  2
5F1C:  MOVF   x03,F
5F1E:  BNZ   5F26
5F20:  MOVF   x02,W
5F22:  SUBLW  60
5F24:  BC    5F36
5F26:  MOVF   x03,F
5F28:  BNZ   5F36
5F2A:  MOVF   x02,W
5F2C:  SUBLW  7A
5F2E:  BNC   5F36
5F30:  MOVF   x02,W
5F32:  ANDLW  DF
5F34:  BRA    5F38
5F36:  MOVF   x02,W
5F38:  SUBLW  49
5F3A:  BNZ   5F88
....................         { 
....................         idx = input_c(); // change to REAL input ports 
5F3C:  MOVFF  F82,1CC
....................         sprintf(buf, "$DR %02X\r", idx); 
5F40:  MOVLW  01
5F42:  MOVLB  1
5F44:  MOVWF  xA0
5F46:  MOVLW  D0
5F48:  MOVWF  x9F
5F4A:  MOVLW  F2
5F4C:  MOVWF  FF6
5F4E:  MOVLW  0A
5F50:  MOVWF  FF7
5F52:  MOVLW  04
5F54:  MOVLB  2
5F56:  MOVWF  x30
5F58:  MOVLB  0
5F5A:  CALL   2DA6
5F5E:  MOVFF  1CC,202
5F62:  MOVLW  37
5F64:  MOVLB  2
5F66:  MOVWF  x03
5F68:  MOVLB  0
5F6A:  RCALL  5932
5F6C:  MOVLW  0D
5F6E:  MOVLB  2
5F70:  MOVWF  x39
5F72:  MOVLB  0
5F74:  CALL   2D84
....................         COM1_send_str(buf); 
5F78:  MOVLW  01
5F7A:  MOVLB  2
5F7C:  MOVWF  x69
5F7E:  MOVLW  D0
5F80:  MOVWF  x68
5F82:  MOVLB  0
5F84:  CALL   2002
....................         } 
....................       break; 
5F88:  MOVLB  0
5F8A:  BRA    63A2
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
5F8C:  CALL   2868
5F90:  MOVFF  02,203
5F94:  MOVFF  01,202
5F98:  MOVLB  2
5F9A:  MOVF   x03,F
5F9C:  BNZ   5FA4
5F9E:  MOVF   x02,W
5FA0:  SUBLW  60
5FA2:  BC    5FB4
5FA4:  MOVF   x03,F
5FA6:  BNZ   5FB4
5FA8:  MOVF   x02,W
5FAA:  SUBLW  7A
5FAC:  BNC   5FB4
5FAE:  MOVF   x02,W
5FB0:  ANDLW  DF
5FB2:  BRA    5FB6
5FB4:  MOVF   x02,W
5FB6:  SUBLW  54
5FB8:  BNZ   5FC6
....................         { 
....................         value = get_hex(); 
5FBA:  MOVLB  0
5FBC:  RCALL  597C
5FBE:  MOVFF  01,201
5FC2:  MOVFF  00,200
....................         // output bits 
....................         } 
....................       break; 
5FC6:  MOVLB  0
5FC8:  BRA    63A2
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
5FCA:  CALL   2868
5FCE:  MOVFF  02,203
5FD2:  MOVFF  01,202
5FD6:  MOVLB  2
5FD8:  MOVF   x03,F
5FDA:  BNZ   5FE2
5FDC:  MOVF   x02,W
5FDE:  SUBLW  60
5FE0:  BC    5FF2
5FE2:  MOVF   x03,F
5FE4:  BNZ   5FF2
5FE6:  MOVF   x02,W
5FE8:  SUBLW  7A
5FEA:  BNC   5FF2
5FEC:  MOVF   x02,W
5FEE:  ANDLW  DF
5FF0:  BRA    5FF4
5FF2:  MOVF   x02,W
5FF4:  SUBLW  44
5FF6:  BNZ   6006
....................         { 
....................         output_high(D2A_RESET); 
5FF8:  BSF    F8A.3
....................         delay_ms(100); 
5FFA:  MOVLW  64
5FFC:  MOVWF  x3F
5FFE:  MOVLB  0
6000:  CALL   0DD6
....................         output_low(D2A_RESET); 
6004:  BCF    F8A.3
....................         } 
....................       break; 
6006:  MOVLB  0
6008:  BRA    63A2
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
600A:  CALL   2868
600E:  MOVFF  02,203
6012:  MOVFF  01,202
6016:  MOVLB  2
6018:  MOVF   x03,F
601A:  BNZ   6022
601C:  MOVF   x02,W
601E:  SUBLW  60
6020:  BC    6032
6022:  MOVF   x03,F
6024:  BNZ   6032
6026:  MOVF   x02,W
6028:  SUBLW  7A
602A:  BNC   6032
602C:  MOVF   x02,W
602E:  ANDLW  DF
6030:  BRA    6034
6032:  MOVF   x02,W
6034:  SUBLW  52
6036:  BNZ   605E
....................         { 
....................         bitrate = str_to_long(); 
6038:  MOVLB  0
603A:  BRA    5A74
603C:  MOVFF  03,1FF
6040:  MOVFF  02,1FE
6044:  MOVFF  01,1FD
6048:  MOVFF  00,1FC
....................         set_bitrate(bitrate); 
604C:  MOVFF  1FD,203
6050:  MOVFF  1FC,202
6054:  MOVFF  1FD,205
6058:  MOVFF  1FC,204
605C:  BRA    5B30
....................         } 
....................       break; 
605E:  MOVLB  0
6060:  BRA    63A2
....................     case 'G': 
....................       device = get_char(); 
6062:  CALL   2868
6066:  MOVFF  01,1CD
....................       addr = get_hex(); 
606A:  RCALL  597C
606C:  MOVFF  00,1CE
....................       switch (toupper(device)) 
....................         { 
6070:  MOVLB  1
6072:  MOVF   xCD,W
6074:  SUBLW  60
6076:  BC    6084
6078:  MOVF   xCD,W
607A:  SUBLW  7A
607C:  BNC   6084
607E:  MOVF   xCD,W
6080:  ANDLW  DF
6082:  BRA    6086
6084:  MOVF   xCD,W
6086:  XORLW  46
6088:  MOVLB  0
608A:  BZ    6092
608C:  XORLW  02
608E:  BZ    610C
6090:  BRA    617C
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
6092:  MOVFF  1CE,202
6096:  MOVLW  01
6098:  MOVLB  2
609A:  MOVWF  x04
609C:  MOVLW  CF
609E:  MOVWF  x03
60A0:  MOVLB  0
60A2:  BRA    5BC0
60A4:  MOVFF  01,1CB
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
60A8:  MOVLW  01
60AA:  MOVLB  1
60AC:  MOVWF  xA0
60AE:  MOVLW  D0
60B0:  MOVWF  x9F
60B2:  MOVLW  FC
60B4:  MOVWF  FF6
60B6:  MOVLW  0A
60B8:  MOVWF  FF7
60BA:  MOVLW  07
60BC:  MOVLB  2
60BE:  MOVWF  x30
60C0:  MOVLB  0
60C2:  CALL   2DA6
60C6:  MOVFF  1CE,202
60CA:  MOVLW  37
60CC:  MOVLB  2
60CE:  MOVWF  x03
60D0:  MOVLB  0
60D2:  RCALL  5932
60D4:  MOVLW  20
60D6:  MOVLB  2
60D8:  MOVWF  x39
60DA:  MOVLB  0
60DC:  CALL   2D84
60E0:  MOVFF  1CB,202
60E4:  MOVLW  37
60E6:  MOVLB  2
60E8:  MOVWF  x03
60EA:  MOVLB  0
60EC:  RCALL  5932
60EE:  MOVLW  0D
60F0:  MOVLB  2
60F2:  MOVWF  x39
60F4:  MOVLB  0
60F6:  CALL   2D84
....................           COM1_send_str(buf); 
60FA:  MOVLW  01
60FC:  MOVLB  2
60FE:  MOVWF  x69
6100:  MOVLW  D0
6102:  MOVWF  x68
6104:  MOVLB  0
6106:  CALL   2002
....................           break; 
610A:  BRA    617C
....................         case 'D': 
....................           data = read_D2A(addr); 
610C:  MOVFF  1CE,202
6110:  BRA    5C6A
6112:  MOVFF  01,1CF
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
6116:  MOVLW  01
6118:  MOVLB  1
611A:  MOVWF  xA0
611C:  MOVLW  D0
611E:  MOVWF  x9F
6120:  MOVLW  0E
6122:  MOVWF  FF6
6124:  MOVLW  0B
6126:  MOVWF  FF7
6128:  MOVLW  07
612A:  MOVLB  2
612C:  MOVWF  x30
612E:  MOVLB  0
6130:  CALL   2DA6
6134:  MOVFF  1CE,202
6138:  MOVLW  37
613A:  MOVLB  2
613C:  MOVWF  x03
613E:  MOVLB  0
6140:  CALL   5932
6144:  MOVLW  20
6146:  MOVLB  2
6148:  MOVWF  x39
614A:  MOVLB  0
614C:  CALL   2D84
6150:  MOVFF  1CF,202
6154:  MOVLW  37
6156:  MOVLB  2
6158:  MOVWF  x03
615A:  MOVLB  0
615C:  CALL   5932
6160:  MOVLW  0D
6162:  MOVLB  2
6164:  MOVWF  x39
6166:  MOVLB  0
6168:  CALL   2D84
....................           COM1_send_str(buf); 
616C:  MOVLW  01
616E:  MOVLB  2
6170:  MOVWF  x69
6172:  MOVLW  D0
6174:  MOVWF  x68
6176:  MOVLB  0
6178:  CALL   2002
....................           break; 
....................         } 
....................       break; 
617C:  BRA    63A2
....................     case 'F': // fill tables 
....................       skip_spc(); 
617E:  CALL   2888
....................       idx = get_char(); // get table designator 
6182:  CALL   2868
6186:  MOVFF  01,1CC
....................       addr = get_int(); // get table index 
618A:  CALL   2924
618E:  MOVFF  01,1CE
....................       value = get_int(); // get value to put into table 
6192:  CALL   2924
6196:  MOVFF  02,201
619A:  MOVFF  01,200
....................       switch (toupper(idx)) 
....................         { 
619E:  MOVLB  1
61A0:  MOVF   xCC,W
61A2:  SUBLW  60
61A4:  BC    61B2
61A6:  MOVF   xCC,W
61A8:  SUBLW  7A
61AA:  BNC   61B2
61AC:  MOVF   xCC,W
61AE:  ANDLW  DF
61B0:  BRA    61B4
61B2:  MOVF   xCC,W
61B4:  XORLW  4E
61B6:  MOVLB  0
61B8:  BZ    61C0
61BA:  XORLW  1E
61BC:  BZ    61E6
61BE:  BRA    620A
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
61C0:  MOVLB  1
61C2:  MOVF   xCE,W
61C4:  SUBLW  02
61C6:  BNC   61E2
....................             { 
....................             setup.negative_voltage[addr] = value; 
61C8:  BCF    FD8.0
61CA:  RLCF   xCE,W
61CC:  CLRF   03
61CE:  ADDLW  BD
61D0:  MOVWF  FE9
61D2:  MOVLW  00
61D4:  ADDWFC 03,W
61D6:  MOVWF  FEA
61D8:  MOVFF  201,FEC
61DC:  MOVF   FED,F
61DE:  MOVFF  200,FEF
....................             } 
....................           break; 
61E2:  MOVLB  0
61E4:  BRA    620A
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
61E6:  MOVLB  1
61E8:  MOVF   xCE,W
61EA:  SUBLW  14
61EC:  BNC   6208
....................             { 
....................             setup.power_in[addr] = value; 
61EE:  BCF    FD8.0
61F0:  RLCF   xCE,W
61F2:  CLRF   03
61F4:  ADDLW  C3
61F6:  MOVWF  FE9
61F8:  MOVLW  00
61FA:  ADDWFC 03,W
61FC:  MOVWF  FEA
61FE:  MOVFF  201,FEC
6202:  MOVF   FED,F
6204:  MOVFF  200,FEF
....................             } 
....................           break; 
6208:  MOVLB  0
....................         } 
....................       break; 
620A:  BRA    63A2
....................     case 'S': 
....................       device = get_char(); 
620C:  CALL   2868
6210:  MOVFF  01,1CD
....................       addr = get_hex(); 
6214:  CALL   597C
6218:  MOVFF  00,1CE
....................       data = get_hex(); 
621C:  CALL   597C
6220:  MOVFF  00,1CF
....................       switch (toupper(device)) 
....................         { 
6224:  MOVLB  1
6226:  MOVF   xCD,W
6228:  SUBLW  60
622A:  BC    6238
622C:  MOVF   xCD,W
622E:  SUBLW  7A
6230:  BNC   6238
6232:  MOVF   xCD,W
6234:  ANDLW  DF
6236:  BRA    623A
6238:  MOVF   xCD,W
623A:  XORLW  46
623C:  MOVLB  0
623E:  BZ    624A
6240:  XORLW  02
6242:  BZ    627C
6244:  XORLW  12
6246:  BZ    62A0
6248:  BRA    62AC
....................         case 'F': 
....................           buf[0] = addr; 
624A:  MOVFF  1CE,1D0
....................           buf[1] = data; 
624E:  MOVFF  1CF,1D1
....................           FPGA_image[addr] = data; 
6252:  CLRF   03
6254:  MOVLB  1
6256:  MOVF   xCE,W
6258:  ADDLW  40
625A:  MOVWF  FE9
625C:  MOVLW  01
625E:  ADDWFC 03,W
6260:  MOVWF  FEA
6262:  MOVFF  1CF,FEF
....................           send_FPGA_command(2, buf); 
6266:  MOVLW  02
6268:  MOVLB  2
626A:  MOVWF  x3F
626C:  MOVLW  01
626E:  MOVWF  x41
6270:  MOVLW  D0
6272:  MOVWF  x40
6274:  MOVLB  0
6276:  CALL   1580
....................           break; 
627A:  BRA    62AC
....................         case 'D': 
....................           D2A_image[addr] = data; 
627C:  CLRF   03
627E:  MOVLB  1
6280:  MOVF   xCE,W
6282:  ADDLW  60
6284:  MOVWF  FE9
6286:  MOVLW  01
6288:  ADDWFC 03,W
628A:  MOVWF  FEA
628C:  MOVFF  1CF,FEF
....................           write_D2A(addr, data); 
6290:  MOVFF  1CE,202
6294:  MOVFF  1CF,203
6298:  MOVLB  0
629A:  CALL   5442
....................           break; 
629E:  BRA    62AC
....................         case 'V': 
....................           allow_write = 2975; 
62A0:  MOVLW  0B
62A2:  MOVWF  xFF
62A4:  MOVLW  9F
62A6:  MOVWF  xFE
....................           write_setup(); 
62A8:  CALL   300A
....................           break; 
....................         } 
....................       break; 
62AC:  BRA    63A2
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
62AE:  CALL   2868
62B2:  MOVFF  02,203
62B6:  MOVFF  01,202
62BA:  MOVLB  2
62BC:  MOVF   x03,F
62BE:  BNZ   62C6
62C0:  MOVF   x02,W
62C2:  SUBLW  60
62C4:  BC    62D6
62C6:  MOVF   x03,F
62C8:  BNZ   62D6
62CA:  MOVF   x02,W
62CC:  SUBLW  7A
62CE:  BNC   62D6
62D0:  MOVF   x02,W
62D2:  ANDLW  DF
62D4:  BRA    62D8
62D6:  MOVF   x02,W
62D8:  SUBLW  54
62DA:  BNZ   6372
....................         if (toupper(get_char()) == 'C') 
62DC:  MOVLB  0
62DE:  CALL   2868
62E2:  MOVFF  02,203
62E6:  MOVFF  01,202
62EA:  MOVLB  2
62EC:  MOVF   x03,F
62EE:  BNZ   62F6
62F0:  MOVF   x02,W
62F2:  SUBLW  60
62F4:  BC    6306
62F6:  MOVF   x03,F
62F8:  BNZ   6306
62FA:  MOVF   x02,W
62FC:  SUBLW  7A
62FE:  BNC   6306
6300:  MOVF   x02,W
6302:  ANDLW  DF
6304:  BRA    6308
6306:  MOVF   x02,W
6308:  SUBLW  43
630A:  BNZ   6372
....................           if (toupper(get_char()) == 'C') 
630C:  MOVLB  0
630E:  CALL   2868
6312:  MOVFF  02,203
6316:  MOVFF  01,202
631A:  MOVLB  2
631C:  MOVF   x03,F
631E:  BNZ   6326
6320:  MOVF   x02,W
6322:  SUBLW  60
6324:  BC    6336
6326:  MOVF   x03,F
6328:  BNZ   6336
632A:  MOVF   x02,W
632C:  SUBLW  7A
632E:  BNC   6336
6330:  MOVF   x02,W
6332:  ANDLW  DF
6334:  BRA    6338
6336:  MOVF   x02,W
6338:  SUBLW  43
633A:  BNZ   6372
....................             if (toupper(get_char()) == 'P') 
633C:  MOVLB  0
633E:  CALL   2868
6342:  MOVFF  02,203
6346:  MOVFF  01,202
634A:  MOVLB  2
634C:  MOVF   x03,F
634E:  BNZ   6356
6350:  MOVF   x02,W
6352:  SUBLW  60
6354:  BC    6366
6356:  MOVF   x03,F
6358:  BNZ   6366
635A:  MOVF   x02,W
635C:  SUBLW  7A
635E:  BNC   6366
6360:  MOVF   x02,W
6362:  ANDLW  DF
6364:  BRA    6368
6366:  MOVF   x02,W
6368:  SUBLW  50
636A:  BNZ   6372
....................               ttccp = 1; 
636C:  MOVLW  01
636E:  MOVLB  1
6370:  MOVWF  x3E
....................       break; 
6372:  MOVLB  0
6374:  BRA    63A2
....................     case '1': // year 
....................       setup.year = get_int(); 
6376:  CALL   2924
637A:  MOVFF  02,EE
637E:  MOVFF  01,ED
....................       break; 
6382:  BRA    63A2
....................     case '2': // week 
....................       setup.week = get_int(); 
6384:  CALL   2924
6388:  MOVFF  01,EF
....................       break; 
638C:  BRA    63A2
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
638E:  CALL   2924
6392:  MOVFF  02,F1
6396:  MOVFF  01,F0
....................       break; 
639A:  BRA    63A2
....................     default: 
....................       return 0; 
639C:  MOVLW  00
639E:  MOVWF  01
63A0:  BRA    63A6
....................     } 
....................   return 0; 
63A2:  MOVLW  00
63A4:  MOVWF  01
....................   } 
63A6:  GOTO   6434 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
3032:  RCALL  2924
3034:  MOVFF  01,00
3038:  MOVFF  02,01
303C:  CLRF   02
303E:  CLRF   03
3040:  MOVFF  03,22D
3044:  MOVFF  02,22C
3048:  MOVFF  01,22B
304C:  MOVFF  00,22A
....................             get_char(); 
3050:  RCALL  2868
....................             sub = get_int(); 
3052:  RCALL  2924
3054:  MOVFF  01,00
3058:  MOVFF  02,01
305C:  CLRF   02
305E:  CLRF   03
3060:  MOVFF  03,231
3064:  MOVFF  02,230
3068:  MOVFF  01,22F
306C:  MOVFF  00,22E
....................  
....................             if (peek_char() == '.') 
3070:  CALL   284A
3074:  MOVFF  02,233
3078:  MOVFF  01,232
307C:  MOVLB  2
307E:  MOVF   01,W
3080:  SUBLW  2E
3082:  BNZ   30BE
3084:  MOVF   x33,F
3086:  BNZ   30BE
....................               { 
....................               get_char(); 
3088:  MOVLB  0
308A:  CALL   2868
....................               sub = get_int(); 
308E:  RCALL  2924
3090:  MOVFF  01,00
3094:  MOVFF  02,01
3098:  CLRF   02
309A:  CLRF   03
309C:  MOVFF  03,231
30A0:  MOVFF  02,230
30A4:  MOVFF  01,22F
30A8:  MOVFF  00,22E
....................               bitrate += sub; 
30AC:  MOVLB  2
30AE:  MOVF   x2E,W
30B0:  ADDWF  x2A,F
30B2:  MOVF   x2F,W
30B4:  ADDWFC x2B,F
30B6:  MOVF   x30,W
30B8:  ADDWFC x2C,F
30BA:  MOVF   x31,W
30BC:  ADDWFC x2D,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
30BE:  MOVFF  22D,247
30C2:  MOVFF  22C,246
30C6:  MOVFF  22B,245
30CA:  MOVFF  22A,244
30CE:  CLRF   x4B
30D0:  CLRF   x4A
30D2:  CLRF   x49
30D4:  MOVLW  64
30D6:  MOVWF  x48
30D8:  MOVLB  0
30DA:  CALL   10D8
30DE:  MOVLB  2
30E0:  MOVF   x2E,W
30E2:  ADDWF  00,W
30E4:  MOVLB  0
30E6:  MOVWF  xAA
30E8:  MOVLB  2
30EA:  MOVF   x2F,W
30EC:  ADDWFC 01,W
30EE:  MOVLB  0
30F0:  MOVWF  xAB
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
30F2:  CALL   1A48
....................  
....................   } 
30F6:  GOTO   45AE (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n\n"); 
*
29EA:  MOVLW  0D
29EC:  MOVLB  2
29EE:  MOVWF  x2A
29F0:  MOVLW  0A
29F2:  MOVWF  x2B
29F4:  MOVWF  x2C
29F6:  CLRF   x2D
29F8:  MOVLW  02
29FA:  MOVWF  x69
29FC:  MOVLW  2A
29FE:  MOVWF  x68
2A00:  MOVLB  0
2A02:  CALL   2002
....................   COM1_send_str("DS <data soure><cr>  \tSet data sourse (0-1)\r\n"); 
2A06:  MOVLW  02
2A08:  MOVWF  FEA
2A0A:  MOVLW  2A
2A0C:  MOVWF  FE9
2A0E:  MOVLW  2E
2A10:  MOVWF  01
2A12:  CLRF   FF7
2A14:  MOVLW  00
2A16:  CALL   03A6
2A1A:  TBLRD*-
2A1C:  TBLRD*+
2A1E:  MOVFF  FF5,FEE
2A22:  DECFSZ 01,F
2A24:  BRA    2A1C
2A26:  MOVLW  02
2A28:  MOVLB  2
2A2A:  MOVWF  x69
2A2C:  MOVLW  2A
2A2E:  MOVWF  x68
2A30:  MOVLB  0
2A32:  CALL   2002
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2A36:  MOVLW  02
2A38:  MOVWF  FEA
2A3A:  MOVLW  2A
2A3C:  MOVWF  FE9
2A3E:  MOVLW  33
2A40:  MOVWF  01
2A42:  CLRF   FF7
2A44:  MOVLW  00
2A46:  CALL   03E4
2A4A:  TBLRD*-
2A4C:  TBLRD*+
2A4E:  MOVFF  FF5,FEE
2A52:  DECFSZ 01,F
2A54:  BRA    2A4C
2A56:  MOVLW  02
2A58:  MOVLB  2
2A5A:  MOVWF  x69
2A5C:  MOVLW  2A
2A5E:  MOVWF  x68
2A60:  MOVLB  0
2A62:  CALL   2002
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2A66:  MOVLW  02
2A68:  MOVWF  FEA
2A6A:  MOVLW  2A
2A6C:  MOVWF  FE9
2A6E:  MOVLW  31
2A70:  MOVWF  01
2A72:  CLRF   FF7
2A74:  MOVLW  00
2A76:  CALL   0428
2A7A:  TBLRD*-
2A7C:  TBLRD*+
2A7E:  MOVFF  FF5,FEE
2A82:  DECFSZ 01,F
2A84:  BRA    2A7C
2A86:  MOVLW  02
2A88:  MOVLB  2
2A8A:  MOVWF  x69
2A8C:  MOVLW  2A
2A8E:  MOVWF  x68
2A90:  MOVLB  0
2A92:  CALL   2002
....................   COM1_send_str("RP <power higth><cr>  \tSet power higth (0-1)\r\n"); 
2A96:  MOVLW  02
2A98:  MOVWF  FEA
2A9A:  MOVLW  2A
2A9C:  MOVWF  FE9
2A9E:  MOVLW  2F
2AA0:  MOVWF  01
2AA2:  CLRF   FF7
2AA4:  MOVLW  00
2AA6:  CALL   046A
2AAA:  TBLRD*-
2AAC:  TBLRD*+
2AAE:  MOVFF  FF5,FEE
2AB2:  DECFSZ 01,F
2AB4:  BRA    2AAC
2AB6:  MOVLW  02
2AB8:  MOVLB  2
2ABA:  MOVWF  x69
2ABC:  MOVLW  2A
2ABE:  MOVWF  x68
2AC0:  MOVLB  0
2AC2:  CALL   2002
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2AC6:  MOVLW  02
2AC8:  MOVWF  FEA
2ACA:  MOVLW  2A
2ACC:  MOVWF  FE9
2ACE:  MOVLW  31
2AD0:  MOVWF  01
2AD2:  CLRF   FF7
2AD4:  MOVLW  00
2AD6:  CALL   04AA
2ADA:  TBLRD*-
2ADC:  TBLRD*+
2ADE:  MOVFF  FF5,FEE
2AE2:  DECFSZ 01,F
2AE4:  BRA    2ADC
2AE6:  MOVLW  02
2AE8:  MOVLB  2
2AEA:  MOVWF  x69
2AEC:  MOVLW  2A
2AEE:  MOVWF  x68
2AF0:  MOVLB  0
2AF2:  CALL   2002
....................   COM1_send_str("RA <randomizer><cr>  \tset with/without randomizer (0-1)\r\n"); 
2AF6:  MOVLW  02
2AF8:  MOVWF  FEA
2AFA:  MOVLW  2A
2AFC:  MOVWF  FE9
2AFE:  MOVLW  3A
2B00:  MOVWF  01
2B02:  CLRF   FF7
2B04:  MOVLW  00
2B06:  CALL   04EC
2B0A:  TBLRD*-
2B0C:  TBLRD*+
2B0E:  MOVFF  FF5,FEE
2B12:  DECFSZ 01,F
2B14:  BRA    2B0C
2B16:  MOVLW  02
2B18:  MOVLB  2
2B1A:  MOVWF  x69
2B1C:  MOVLW  2A
2B1E:  MOVWF  x68
2B20:  MOVLB  0
2B22:  CALL   2002
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2B26:  MOVLW  02
2B28:  MOVWF  FEA
2B2A:  MOVLW  2A
2B2C:  MOVWF  FE9
2B2E:  MOVLW  35
2B30:  MOVWF  01
2B32:  CLRF   FF7
2B34:  MOVLW  00
2B36:  CALL   0536
2B3A:  TBLRD*-
2B3C:  TBLRD*+
2B3E:  MOVFF  FF5,FEE
2B42:  DECFSZ 01,F
2B44:  BRA    2B3C
2B46:  MOVLW  02
2B48:  MOVLB  2
2B4A:  MOVWF  x69
2B4C:  MOVLW  2A
2B4E:  MOVWF  x68
2B50:  MOVLB  0
2B52:  CALL   2002
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2B56:  MOVLW  02
2B58:  MOVWF  FEA
2B5A:  MOVLW  2A
2B5C:  MOVWF  FE9
2B5E:  MOVLW  21
2B60:  MOVWF  01
2B62:  CLRF   FF7
2B64:  MOVLW  00
2B66:  CALL   057C
2B6A:  TBLRD*-
2B6C:  TBLRD*+
2B6E:  MOVFF  FF5,FEE
2B72:  DECFSZ 01,F
2B74:  BRA    2B6C
2B76:  MOVLW  02
2B78:  MOVLB  2
2B7A:  MOVWF  x69
2B7C:  MOVLW  2A
2B7E:  MOVWF  x68
2B80:  MOVLB  0
2B82:  CALL   2002
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2B86:  MOVLW  02
2B88:  MOVWF  FEA
2B8A:  MOVLW  2A
2B8C:  MOVWF  FE9
2B8E:  MOVLW  32
2B90:  MOVWF  01
2B92:  CLRF   FF7
2B94:  MOVLW  00
2B96:  CALL   05AE
2B9A:  TBLRD*-
2B9C:  TBLRD*+
2B9E:  MOVFF  FF5,FEE
2BA2:  DECFSZ 01,F
2BA4:  BRA    2B9C
2BA6:  MOVLW  02
2BA8:  MOVLB  2
2BAA:  MOVWF  x69
2BAC:  MOVLW  2A
2BAE:  MOVWF  x68
2BB0:  MOVLB  0
2BB2:  CALL   2002
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2BB6:  MOVLW  02
2BB8:  MOVWF  FEA
2BBA:  MOVLW  2A
2BBC:  MOVWF  FE9
2BBE:  MOVLW  39
2BC0:  MOVWF  01
2BC2:  CLRF   FF7
2BC4:  MOVLW  00
2BC6:  CALL   05F0
2BCA:  TBLRD*-
2BCC:  TBLRD*+
2BCE:  MOVFF  FF5,FEE
2BD2:  DECFSZ 01,F
2BD4:  BRA    2BCC
2BD6:  MOVLW  02
2BD8:  MOVLB  2
2BDA:  MOVWF  x69
2BDC:  MOVLW  2A
2BDE:  MOVWF  x68
2BE0:  MOVLB  0
2BE2:  CALL   2002
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2BE6:  MOVLW  02
2BE8:  MOVWF  FEA
2BEA:  MOVLW  2A
2BEC:  MOVWF  FE9
2BEE:  MOVLW  31
2BF0:  MOVWF  01
2BF2:  CLRF   FF7
2BF4:  MOVLW  00
2BF6:  CALL   063A
2BFA:  TBLRD*-
2BFC:  TBLRD*+
2BFE:  MOVFF  FF5,FEE
2C02:  DECFSZ 01,F
2C04:  BRA    2BFC
2C06:  MOVLW  02
2C08:  MOVLB  2
2C0A:  MOVWF  x69
2C0C:  MOVLW  2A
2C0E:  MOVWF  x68
2C10:  MOVLB  0
2C12:  CALL   2002
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2C16:  MOVLW  02
2C18:  MOVWF  FEA
2C1A:  MOVLW  2A
2C1C:  MOVWF  FE9
2C1E:  MOVLW  35
2C20:  MOVWF  01
2C22:  CLRF   FF7
2C24:  MOVLW  00
2C26:  CALL   067C
2C2A:  TBLRD*-
2C2C:  TBLRD*+
2C2E:  MOVFF  FF5,FEE
2C32:  DECFSZ 01,F
2C34:  BRA    2C2C
2C36:  MOVLW  02
2C38:  MOVLB  2
2C3A:  MOVWF  x69
2C3C:  MOVLW  2A
2C3E:  MOVWF  x68
2C40:  MOVLB  0
2C42:  CALL   2002
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2C46:  MOVLW  02
2C48:  MOVWF  FEA
2C4A:  MOVLW  2A
2C4C:  MOVWF  FE9
2C4E:  MOVLW  3B
2C50:  MOVWF  01
2C52:  CLRF   FF7
2C54:  MOVLW  00
2C56:  CALL   06C2
2C5A:  TBLRD*-
2C5C:  TBLRD*+
2C5E:  MOVFF  FF5,FEE
2C62:  DECFSZ 01,F
2C64:  BRA    2C5C
2C66:  MOVLW  02
2C68:  MOVLB  2
2C6A:  MOVWF  x69
2C6C:  MOVLW  2A
2C6E:  MOVWF  x68
2C70:  MOVLB  0
2C72:  CALL   2002
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2C76:  MOVLW  02
2C78:  MOVWF  FEA
2C7A:  MOVLW  2A
2C7C:  MOVWF  FE9
2C7E:  MOVLW  3B
2C80:  MOVWF  01
2C82:  CLRF   FF7
2C84:  MOVLW  00
2C86:  CALL   070E
2C8A:  TBLRD*-
2C8C:  TBLRD*+
2C8E:  MOVFF  FF5,FEE
2C92:  DECFSZ 01,F
2C94:  BRA    2C8C
2C96:  MOVLW  02
2C98:  MOVLB  2
2C9A:  MOVWF  x69
2C9C:  MOVLW  2A
2C9E:  MOVWF  x68
2CA0:  MOVLB  0
2CA2:  CALL   2002
....................   COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2CA6:  MOVLW  02
2CA8:  MOVWF  FEA
2CAA:  MOVLW  2A
2CAC:  MOVWF  FE9
2CAE:  MOVLW  2F
2CB0:  MOVWF  01
2CB2:  CLRF   FF7
2CB4:  MOVLW  00
2CB6:  CALL   075A
2CBA:  TBLRD*-
2CBC:  TBLRD*+
2CBE:  MOVFF  FF5,FEE
2CC2:  DECFSZ 01,F
2CC4:  BRA    2CBC
2CC6:  MOVLW  02
2CC8:  MOVLB  2
2CCA:  MOVWF  x69
2CCC:  MOVLW  2A
2CCE:  MOVWF  x68
2CD0:  MOVLB  0
2CD2:  CALL   2002
....................   COM1_send_str("UT <UART Time><cr>  \tSet the stop time current 15 (0-240)\r\n"); 
2CD6:  MOVLW  02
2CD8:  MOVWF  FEA
2CDA:  MOVLW  2A
2CDC:  MOVWF  FE9
2CDE:  MOVLW  3C
2CE0:  MOVWF  01
2CE2:  CLRF   FF7
2CE4:  MOVLW  00
2CE6:  CALL   079A
2CEA:  TBLRD*-
2CEC:  TBLRD*+
2CEE:  MOVFF  FF5,FEE
2CF2:  DECFSZ 01,F
2CF4:  BRA    2CEC
2CF6:  MOVLW  02
2CF8:  MOVLB  2
2CFA:  MOVWF  x69
2CFC:  MOVLW  2A
2CFE:  MOVWF  x68
2D00:  MOVLB  0
2D02:  CALL   2002
....................   COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n"); 
2D06:  MOVLW  02
2D08:  MOVWF  FEA
2D0A:  MOVLW  2A
2D0C:  MOVWF  FE9
2D0E:  MOVLW  2D
2D10:  MOVWF  01
2D12:  CLRF   FF7
2D14:  MOVLW  00
2D16:  CALL   07E6
2D1A:  TBLRD*-
2D1C:  TBLRD*+
2D1E:  MOVFF  FF5,FEE
2D22:  DECFSZ 01,F
2D24:  BRA    2D1C
2D26:  MOVLW  02
2D28:  MOVLB  2
2D2A:  MOVWF  x69
2D2C:  MOVLW  2A
2D2E:  MOVWF  x68
2D30:  MOVLB  0
2D32:  CALL   2002
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2D36:  MOVLW  02
2D38:  MOVWF  FEA
2D3A:  MOVLW  2A
2D3C:  MOVWF  FE9
2D3E:  MOVLW  25
2D40:  MOVWF  01
2D42:  CLRF   FF7
2D44:  MOVLW  00
2D46:  CALL   0824
2D4A:  TBLRD*-
2D4C:  TBLRD*+
2D4E:  MOVFF  FF5,FEE
2D52:  DECFSZ 01,F
2D54:  BRA    2D4C
2D56:  MOVLW  02
2D58:  MOVLB  2
2D5A:  MOVWF  x69
2D5C:  MOVLW  2A
2D5E:  MOVWF  x68
2D60:  MOVLB  0
2D62:  CALL   2002
....................   COM1_send_str("\r\n"); 
2D66:  MOVLW  0D
2D68:  MOVLB  2
2D6A:  MOVWF  x2A
2D6C:  MOVLW  0A
2D6E:  MOVWF  x2B
2D70:  CLRF   x2C
2D72:  MOVLW  02
2D74:  MOVWF  x69
2D76:  MOVLW  2A
2D78:  MOVWF  x68
2D7A:  MOVLB  0
2D7C:  CALL   2002
....................   } 
2D80:  GOTO   52A0 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
3456:  MOVLB  1
3458:  CLRF   xBE
345A:  CLRF   xE8
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, bitrate, sub; 
....................   float temp; 
....................   UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
....................   chr = 2; 
345C:  MOVLW  02
345E:  MOVWF  xBF
....................   comm_ptr = 0; 
3460:  CLRF   x3D
....................     if (peek_char() == ':') // addressed message? 
3462:  MOVLB  0
3464:  CALL   284A
3468:  MOVFF  02,22B
346C:  MOVFF  01,22A
3470:  MOVLB  2
3472:  MOVF   01,W
3474:  SUBLW  3A
3476:  BNZ   34B6
3478:  MOVF   x2B,F
347A:  BNZ   34B6
....................     { 
....................     get_char(); // skip ':' 
347C:  MOVLB  0
347E:  CALL   2868
....................     addr = get_int(); 
3482:  CALL   2924
3486:  MOVFF  01,1F7
....................     if (get_char() != ':') 
348A:  CALL   2868
348E:  MOVFF  02,22B
3492:  MOVFF  01,22A
3496:  MOVLB  2
3498:  MOVF   01,W
349A:  SUBLW  3A
349C:  BNZ   34A2
349E:  MOVF   x2B,F
34A0:  BNZ   34A2
....................       break; 
....................     if (setup.unit_id != addr) 
34A2:  MOVLB  1
34A4:  MOVF   xF7,W
34A6:  MOVLB  0
34A8:  SUBWF  xF0,W
34AA:  BNZ   34B0
34AC:  MOVF   xF1,F
34AE:  BZ    34B4
....................       goto aaa; 
34B0:  GOTO   52A0
34B4:  MOVLB  2
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
34B6:  MOVLB  0
34B8:  CALL   2868
34BC:  MOVFF  02,22B
34C0:  MOVFF  01,22A
34C4:  MOVLB  2
34C6:  MOVF   x2B,F
34C8:  BNZ   34D0
34CA:  MOVF   x2A,W
34CC:  SUBLW  60
34CE:  BC    34E0
34D0:  MOVF   x2B,F
34D2:  BNZ   34E0
34D4:  MOVF   x2A,W
34D6:  SUBLW  7A
34D8:  BNC   34E0
34DA:  MOVF   x2A,W
34DC:  ANDLW  DF
34DE:  BRA    34E2
34E0:  MOVF   x2A,W
34E2:  MOVLB  1
34E4:  MOVWF  xE9
....................   c2 = toupper(get_char()); 
34E6:  MOVLB  0
34E8:  CALL   2868
34EC:  MOVFF  02,22B
34F0:  MOVFF  01,22A
34F4:  MOVLB  2
34F6:  MOVF   x2B,F
34F8:  BNZ   3500
34FA:  MOVF   x2A,W
34FC:  SUBLW  60
34FE:  BC    3510
3500:  MOVF   x2B,F
3502:  BNZ   3510
3504:  MOVF   x2A,W
3506:  SUBLW  7A
3508:  BNC   3510
350A:  MOVF   x2A,W
350C:  ANDLW  DF
350E:  BRA    3512
3510:  MOVF   x2A,W
3512:  MOVLB  1
3514:  MOVWF  xEA
....................   skip_spc(); 
3516:  MOVLB  0
3518:  CALL   2888
....................  
....................   if (peek_char() == 13) // is this a query? 
351C:  CALL   284A
3520:  MOVFF  02,22B
3524:  MOVFF  01,22A
3528:  MOVLB  2
352A:  MOVF   01,W
352C:  SUBLW  0D
352E:  BNZ   353C
3530:  MOVF   x2B,F
3532:  BNZ   353C
....................     query = 1; // YES 
3534:  MOVLW  01
3536:  MOVLB  1
3538:  MOVWF  xE8
353A:  MOVLB  2
....................   switch (c1) 
....................     { 
353C:  MOVLB  1
353E:  MOVF   xE9,W
3540:  XORLW  4C
3542:  MOVLB  0
3544:  BZ    35B4
3546:  XORLW  68
3548:  BZ    35F8
354A:  XORLW  6C
354C:  BTFSC  FD8.2
354E:  BRA    3656
3550:  XORLW  0E
3552:  BTFSC  FD8.2
3554:  BRA    369E
3556:  XORLW  0B
3558:  BTFSC  FD8.2
355A:  BRA    3796
355C:  XORLW  09
355E:  BTFSC  FD8.2
3560:  BRA    389C
3562:  XORLW  16
3564:  BTFSC  FD8.2
3566:  BRA    3BAA
3568:  XORLW  05
356A:  BTFSC  FD8.2
356C:  GOTO   41DA
3570:  XORLW  04
3572:  BTFSC  FD8.2
3574:  GOTO   41F8
3578:  XORLW  06
357A:  BTFSC  FD8.2
357C:  GOTO   4236
3580:  XORLW  1C
3582:  BTFSC  FD8.2
3584:  GOTO   4440
3588:  XORLW  1D
358A:  BTFSC  FD8.2
358C:  GOTO   45BA
3590:  XORLW  02
3592:  BTFSC  FD8.2
3594:  GOTO   45D6
3598:  XORLW  15
359A:  BTFSC  FD8.2
359C:  GOTO   489E
35A0:  XORLW  04
35A2:  BTFSC  FD8.2
35A4:  GOTO   4AAC
35A8:  XORLW  16
35AA:  BTFSC  FD8.2
35AC:  GOTO   4D60
35B0:  GOTO   5262
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
35B4:  MOVLB  1
35B6:  MOVF   xEA,W
35B8:  XORLW  49
35BA:  MOVLB  0
35BC:  BZ    35C4
35BE:  XORLW  06
35C0:  BZ    35EE
35C2:  BRA    35F4
....................         case 'I':               // login 
....................           val = get_int(); 
35C4:  CALL   2924
35C8:  MOVFF  02,209
35CC:  MOVFF  01,208
....................           if (val == 17592) 
35D0:  MOVLB  2
35D2:  MOVF   x08,W
35D4:  SUBLW  B8
35D6:  BNZ   35E4
35D8:  MOVF   x09,W
35DA:  SUBLW  44
35DC:  BNZ   35E4
....................             ttccp_login = 1; 
35DE:  MOVLW  01
35E0:  MOVLB  1
35E2:  MOVWF  x28
.................... 			debug_mode = 1; 
35E4:  MOVLW  01
35E6:  MOVLB  1
35E8:  MOVWF  x3F
....................           break; 
35EA:  MOVLB  0
35EC:  BRA    35F4
....................         case 'O':              // logout 
....................           ttccp_login = 0; 
35EE:  MOVLB  1
35F0:  CLRF   x28
....................           break; 
35F2:  MOVLB  0
....................         } 
....................       break; 
35F4:  GOTO   52A0
....................     case '$': 
....................       if (!ttccp_login) break; 
35F8:  MOVLB  1
35FA:  MOVF   x28,F
35FC:  BNZ   3606
35FE:  MOVLB  0
3600:  GOTO   52A0
3604:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
3606:  MOVF   xEA,W
3608:  SUBLW  52
360A:  BNZ   3650
....................         { 
....................         val = get_int(); 
360C:  MOVLB  0
360E:  CALL   2924
3612:  MOVFF  02,209
3616:  MOVFF  01,208
....................           if (val != 17591) 
361A:  MOVLB  2
361C:  MOVF   x08,W
361E:  SUBLW  B7
3620:  BNZ   3628
3622:  MOVF   x09,W
3624:  SUBLW  44
3626:  BZ    362C
....................             return; 
3628:  GOTO   52A2
....................         ttccp = 0; 
362C:  MOVLB  1
362E:  CLRF   x3E
....................         COM1_send_str("\r\n\n*"); 
3630:  MOVLW  0D
3632:  MOVLB  2
3634:  MOVWF  x0C
3636:  MOVLW  0A
3638:  MOVWF  x0D
363A:  MOVWF  x0E
363C:  MOVLW  2A
363E:  MOVWF  x0F
3640:  CLRF   x10
3642:  MOVLW  02
3644:  MOVWF  x69
3646:  MOVLW  0C
3648:  MOVWF  x68
364A:  MOVLB  0
364C:  CALL   2002
....................         } 
....................       break; 
3650:  MOVLB  0
3652:  GOTO   52A0
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
3656:  MOVLB  1
3658:  MOVF   x28,F
365A:  BNZ   3664
365C:  MOVLB  0
365E:  GOTO   52A0
3662:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r"); 
3664:  MOVLW  02
3666:  MOVWF  FEA
3668:  MOVLW  11
366A:  MOVWF  FE9
366C:  MOVLW  0F
366E:  MOVWF  01
3670:  CLRF   FF7
3672:  MOVLW  00
3674:  MOVLB  0
3676:  CALL   085A
367A:  TBLRD*-
367C:  TBLRD*+
367E:  MOVFF  FF5,FEE
3682:  DECFSZ 01,F
3684:  BRA    367C
3686:  MOVLW  02
3688:  MOVLB  2
368A:  MOVWF  x69
368C:  MOVLW  11
368E:  MOVWF  x68
3690:  MOVLB  0
3692:  CALL   2002
....................       list_help(); 
3696:  GOTO   29EA
....................     break; 
369A:  GOTO   52A0
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
369E:  MOVLB  1
36A0:  MOVF   x28,F
36A2:  BNZ   36AC
36A4:  MOVLB  0
36A6:  GOTO   52A0
36AA:  MOVLB  1
....................       switch (c2) 
....................         { 
36AC:  MOVF   xEA,W
36AE:  XORLW  52
36B0:  MOVLB  0
36B2:  BZ    36B6
36B4:  BRA    3792
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
36B6:  MOVLB  1
36B8:  MOVF   xEA,W
36BA:  SUBLW  52
36BC:  BNZ   3760
....................             { 
....................             if (query) 
36BE:  MOVF   xE8,F
36C0:  BZ    370E
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
36C2:  MOVLW  01
36C4:  MOVWF  xA0
36C6:  MOVLW  C0
36C8:  MOVWF  x9F
36CA:  MOVLW  20
36CC:  MOVWF  FF6
36CE:  MOVLW  0B
36D0:  MOVWF  FF7
36D2:  MOVLW  03
36D4:  MOVLB  2
36D6:  MOVWF  x30
36D8:  MOVLB  0
36DA:  CALL   2DA6
36DE:  MOVLW  10
36E0:  MOVWF  FE9
36E2:  MOVFF  B9,231
36E6:  MOVFF  B8,230
36EA:  CALL   2DCE
36EE:  MOVLW  0D
36F0:  MOVLB  2
36F2:  MOVWF  x39
36F4:  MOVLB  0
36F6:  CALL   2D84
....................               COM1_send_str(buf); 
36FA:  MOVLW  01
36FC:  MOVLB  2
36FE:  MOVWF  x69
3700:  MOVLW  C0
3702:  MOVWF  x68
3704:  MOVLB  0
3706:  CALL   2002
....................               } 
....................               else 
370A:  BRA    375C
370C:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
370E:  MOVLB  0
3710:  CALL   2E8A
3714:  MOVLB  1
3716:  CLRF   xFB
3718:  CLRF   xFA
371A:  MOVFF  02,1F9
371E:  MOVFF  01,1F8
....................                 setup.frequency = freq; 
3722:  MOVFF  1F9,B9
3726:  MOVFF  1F8,B8
....................                 PLL_compute_freq_parameters(freq); 
372A:  MOVFF  1F9,22B
372E:  MOVFF  1F8,22A
3732:  MOVFF  1F9,233
3736:  MOVFF  1F8,232
373A:  MOVLB  0
373C:  CALL   11C8
....................                 PLL_update(); 
3740:  CALL   1498
.................... 				delay_ms(50); 
3744:  MOVLW  32
3746:  MOVLB  2
3748:  MOVWF  x3F
374A:  MOVLB  0
374C:  CALL   0DD6
.................... 				PLL_update(); 
3750:  CALL   1498
....................                 ret = 1; 
3754:  MOVLW  01
3756:  MOVLB  1
3758:  MOVWF  xBE
375A:  MOVLB  0
....................               } 
....................             } 
....................             else 
375C:  BRA    3792
375E:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
3760:  MOVLW  02
3762:  MOVWF  FEA
3764:  MOVLW  11
3766:  MOVWF  FE9
3768:  MOVLW  0A
376A:  MOVWF  01
376C:  CLRF   FF7
376E:  MOVLW  00
3770:  MOVLB  0
3772:  CALL   087A
3776:  TBLRD*-
3778:  TBLRD*+
377A:  MOVFF  FF5,FEE
377E:  DECFSZ 01,F
3780:  BRA    3778
3782:  MOVLW  02
3784:  MOVLB  2
3786:  MOVWF  x69
3788:  MOVLW  11
378A:  MOVWF  x68
378C:  MOVLB  0
378E:  CALL   2002
....................           break; 
....................         } 
....................       break; 
3792:  GOTO   52A0
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
3796:  MOVLB  1
3798:  MOVF   x28,F
379A:  BNZ   37A4
379C:  MOVLB  0
379E:  GOTO   52A0
37A2:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
37A4:  MOVF   xEA,W
37A6:  SUBLW  4F
37A8:  BNZ   3864
....................           { 
....................             if(query) 
37AA:  MOVF   xE8,F
37AC:  BZ    37F6
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
37AE:  MOVLW  01
37B0:  MOVWF  xA0
37B2:  MOVLW  C0
37B4:  MOVWF  x9F
37B6:  MOVLW  28
37B8:  MOVWF  FF6
37BA:  MOVLW  0B
37BC:  MOVWF  FF7
37BE:  MOVLW  03
37C0:  MOVLB  2
37C2:  MOVWF  x30
37C4:  MOVLB  0
37C6:  CALL   2DA6
37CA:  MOVFF  AE,230
37CE:  MOVLW  1B
37D0:  MOVLB  2
37D2:  MOVWF  x31
37D4:  MOVLB  0
37D6:  CALL   2F1E
37DA:  MOVLW  0D
37DC:  MOVLB  2
37DE:  MOVWF  x39
37E0:  MOVLB  0
37E2:  CALL   2D84
....................             COM1_send_str(buf); 
37E6:  MOVLW  01
37E8:  MOVLB  2
37EA:  MOVWF  x69
37EC:  MOVLW  C0
37EE:  MOVWF  x68
37F0:  MOVLB  0
37F2:  CALL   2002
....................             } 
....................           val = get_int(); 
37F6:  MOVLB  0
37F8:  CALL   2924
37FC:  MOVFF  02,209
3800:  MOVFF  01,208
....................           if (val <= 3) 
3804:  MOVLB  2
3806:  MOVF   x09,F
3808:  BNZ   3824
380A:  MOVF   x08,W
380C:  SUBLW  03
380E:  BNC   3824
....................             { 
....................             setup.mode = val; 
3810:  MOVFF  208,AE
....................             FPGA_set_reg0(); 
3814:  MOVLB  0
3816:  CALL   15EE
....................             ret = 1; 
381A:  MOVLW  01
381C:  MOVLB  1
381E:  MOVWF  xBE
....................             } 
....................           else 
3820:  BRA    3862
3822:  MOVLB  2
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
3824:  MOVLW  02
3826:  MOVWF  FEA
3828:  MOVLW  11
382A:  MOVWF  FE9
382C:  MOVLW  09
382E:  MOVWF  01
3830:  CLRF   FF7
3832:  MOVLW  00
3834:  MOVLB  0
3836:  CALL   0894
383A:  TBLRD*-
383C:  TBLRD*+
383E:  MOVFF  FF5,FEE
3842:  DECFSZ 01,F
3844:  BRA    383C
3846:  MOVLW  02
3848:  MOVLB  2
384A:  MOVWF  x69
384C:  MOVLW  11
384E:  MOVWF  x68
3850:  MOVLB  0
3852:  CALL   2002
....................             ret = 0; 
3856:  MOVLB  1
3858:  CLRF   xBE
....................             break; 
385A:  MOVLB  0
385C:  GOTO   52A0
3860:  MOVLB  1
....................             } 
....................           } 
....................           else 
3862:  BRA    3896
....................               COM1_send_str("\r\nFAIL\r\n"); 
3864:  MOVLW  02
3866:  MOVWF  FEA
3868:  MOVLW  11
386A:  MOVWF  FE9
386C:  MOVLW  09
386E:  MOVWF  01
3870:  CLRF   FF7
3872:  MOVLW  00
3874:  MOVLB  0
3876:  CALL   0894
387A:  TBLRD*-
387C:  TBLRD*+
387E:  MOVFF  FF5,FEE
3882:  DECFSZ 01,F
3884:  BRA    387C
3886:  MOVLW  02
3888:  MOVLB  2
388A:  MOVWF  x69
388C:  MOVLW  11
388E:  MOVWF  x68
3890:  MOVLB  0
3892:  CALL   2002
....................       break; 
3896:  MOVLB  0
3898:  GOTO   52A0
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
389C:  MOVLB  1
389E:  MOVF   x28,F
38A0:  BNZ   38AA
38A2:  MOVLB  0
38A4:  GOTO   52A0
38A8:  MOVLB  1
....................       switch (c2) 
....................         { 
38AA:  MOVF   xEA,W
38AC:  XORLW  53
38AE:  MOVLB  0
38B0:  BZ    38C0
38B2:  XORLW  03
38B4:  BTFSC  FD8.2
38B6:  BRA    39B8
38B8:  XORLW  15
38BA:  BTFSC  FD8.2
38BC:  BRA    3AB0
38BE:  BRA    3BA6
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
38C0:  MOVLB  1
38C2:  MOVF   xE8,F
38C4:  BZ    3912
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
38C6:  MOVLW  01
38C8:  MOVWF  xA0
38CA:  MOVLW  C0
38CC:  MOVWF  x9F
38CE:  MOVLW  30
38D0:  MOVWF  FF6
38D2:  MOVLW  0B
38D4:  MOVWF  FF7
38D6:  MOVLW  03
38D8:  MOVLB  2
38DA:  MOVWF  x30
38DC:  MOVLB  0
38DE:  CALL   2DA6
38E2:  MOVFF  B2,230
38E6:  MOVLW  1B
38E8:  MOVLB  2
38EA:  MOVWF  x31
38EC:  MOVLB  0
38EE:  CALL   2F1E
38F2:  MOVLW  0D
38F4:  MOVLB  2
38F6:  MOVWF  x39
38F8:  MOVLB  0
38FA:  CALL   2D84
....................             COM1_send_str(buf); 
38FE:  MOVLW  01
3900:  MOVLB  2
3902:  MOVWF  x69
3904:  MOVLW  C0
3906:  MOVWF  x68
3908:  MOVLB  0
390A:  CALL   2002
....................             } 
....................           else 
390E:  BRA    39AE
3910:  MOVLB  1
....................             { 
....................             val = get_int(); 
3912:  MOVLB  0
3914:  CALL   2924
3918:  MOVFF  02,209
391C:  MOVFF  01,208
....................             if (val < 2) 
3920:  MOVLB  2
3922:  MOVF   x09,F
3924:  BNZ   393A
3926:  MOVF   x08,W
3928:  SUBLW  01
392A:  BNC   393A
....................               { 
....................               setup.data_source = val; 
392C:  MOVFF  208,B2
....................               FPGA_set_reg6(); 
3930:  MOVLB  0
3932:  CALL   164A
....................               } 
....................             else 
3936:  BRA    39AE
3938:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
393A:  MOVLW  02
393C:  MOVWF  FEA
393E:  MOVLW  11
3940:  MOVWF  FE9
3942:  MOVLW  09
3944:  MOVWF  01
3946:  CLRF   FF7
3948:  MOVLW  00
394A:  MOVLB  0
394C:  CALL   0894
3950:  TBLRD*-
3952:  TBLRD*+
3954:  MOVFF  FF5,FEE
3958:  DECFSZ 01,F
395A:  BRA    3952
395C:  MOVLW  02
395E:  MOVLB  2
3960:  MOVWF  x69
3962:  MOVLW  11
3964:  MOVWF  x68
3966:  MOVLB  0
3968:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
396C:  MOVLW  01
396E:  MOVLB  1
3970:  MOVWF  xA0
3972:  MOVLW  74
3974:  MOVWF  x9F
3976:  MOVLW  38
3978:  MOVWF  FF6
397A:  MOVLW  0B
397C:  MOVWF  FF7
397E:  MOVLW  07
3980:  MOVLB  2
3982:  MOVWF  x30
3984:  MOVLB  0
3986:  CALL   2DA6
398A:  MOVFF  B2,230
398E:  MOVLW  1B
3990:  MOVLB  2
3992:  MOVWF  x31
3994:  MOVLB  0
3996:  CALL   2F1E
399A:  MOVLW  0D
399C:  MOVLB  2
399E:  MOVWF  x39
39A0:  MOVLB  0
39A2:  CALL   2D84
....................               ret = 0; 
39A6:  MOVLB  1
39A8:  CLRF   xBE
....................               break; 
39AA:  MOVLB  0
39AC:  BRA    3BA6
....................               } 
....................             } 
....................           ret = 1; 
39AE:  MOVLW  01
39B0:  MOVLB  1
39B2:  MOVWF  xBE
....................           break; 
39B4:  MOVLB  0
39B6:  BRA    3BA6
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
39B8:  MOVLB  1
39BA:  MOVF   xE8,F
39BC:  BZ    3A0A
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
39BE:  MOVLW  01
39C0:  MOVWF  xA0
39C2:  MOVLW  C0
39C4:  MOVWF  x9F
39C6:  MOVLW  44
39C8:  MOVWF  FF6
39CA:  MOVLW  0B
39CC:  MOVWF  FF7
39CE:  MOVLW  03
39D0:  MOVLB  2
39D2:  MOVWF  x30
39D4:  MOVLB  0
39D6:  CALL   2DA6
39DA:  MOVFF  B0,230
39DE:  MOVLW  1B
39E0:  MOVLB  2
39E2:  MOVWF  x31
39E4:  MOVLB  0
39E6:  CALL   2F1E
39EA:  MOVLW  0D
39EC:  MOVLB  2
39EE:  MOVWF  x39
39F0:  MOVLB  0
39F2:  CALL   2D84
....................             COM1_send_str(buf); 
39F6:  MOVLW  01
39F8:  MOVLB  2
39FA:  MOVWF  x69
39FC:  MOVLW  C0
39FE:  MOVWF  x68
3A00:  MOVLB  0
3A02:  CALL   2002
....................             } 
....................           else 
3A06:  BRA    3AA6
3A08:  MOVLB  1
....................             { 
....................             val = get_int(); 
3A0A:  MOVLB  0
3A0C:  CALL   2924
3A10:  MOVFF  02,209
3A14:  MOVFF  01,208
....................             if (val < 2) 
3A18:  MOVLB  2
3A1A:  MOVF   x09,F
3A1C:  BNZ   3A32
3A1E:  MOVF   x08,W
3A20:  SUBLW  01
3A22:  BNC   3A32
....................               { 
....................               setup.data_polarity = val; 
3A24:  MOVFF  208,B0
....................               FPGA_set_reg0(); 
3A28:  MOVLB  0
3A2A:  CALL   15EE
....................               } 
....................             else 
3A2E:  BRA    3AA6
3A30:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3A32:  MOVLW  02
3A34:  MOVWF  FEA
3A36:  MOVLW  11
3A38:  MOVWF  FE9
3A3A:  MOVLW  09
3A3C:  MOVWF  01
3A3E:  CLRF   FF7
3A40:  MOVLW  00
3A42:  MOVLB  0
3A44:  CALL   0894
3A48:  TBLRD*-
3A4A:  TBLRD*+
3A4C:  MOVFF  FF5,FEE
3A50:  DECFSZ 01,F
3A52:  BRA    3A4A
3A54:  MOVLW  02
3A56:  MOVLB  2
3A58:  MOVWF  x69
3A5A:  MOVLW  11
3A5C:  MOVWF  x68
3A5E:  MOVLB  0
3A60:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3A64:  MOVLW  01
3A66:  MOVLB  1
3A68:  MOVWF  xA0
3A6A:  MOVLW  74
3A6C:  MOVWF  x9F
3A6E:  MOVLW  4C
3A70:  MOVWF  FF6
3A72:  MOVLW  0B
3A74:  MOVWF  FF7
3A76:  MOVLW  07
3A78:  MOVLB  2
3A7A:  MOVWF  x30
3A7C:  MOVLB  0
3A7E:  CALL   2DA6
3A82:  MOVFF  B0,230
3A86:  MOVLW  1B
3A88:  MOVLB  2
3A8A:  MOVWF  x31
3A8C:  MOVLB  0
3A8E:  CALL   2F1E
3A92:  MOVLW  0D
3A94:  MOVLB  2
3A96:  MOVWF  x39
3A98:  MOVLB  0
3A9A:  CALL   2D84
....................               ret = 0; 
3A9E:  MOVLB  1
3AA0:  CLRF   xBE
....................               break; 
3AA2:  MOVLB  0
3AA4:  BRA    3BA6
....................               } 
....................             } 
....................           ret = 1; 
3AA6:  MOVLW  01
3AA8:  MOVLB  1
3AAA:  MOVWF  xBE
....................           break; 
3AAC:  MOVLB  0
3AAE:  BRA    3BA6
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
3AB0:  MOVLB  1
3AB2:  MOVF   xE8,F
3AB4:  BZ    3B02
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
3AB6:  MOVLW  01
3AB8:  MOVWF  xA0
3ABA:  MOVLW  C0
3ABC:  MOVWF  x9F
3ABE:  MOVLW  58
3AC0:  MOVWF  FF6
3AC2:  MOVLW  0B
3AC4:  MOVWF  FF7
3AC6:  MOVLW  03
3AC8:  MOVLB  2
3ACA:  MOVWF  x30
3ACC:  MOVLB  0
3ACE:  CALL   2DA6
3AD2:  MOVFF  B6,230
3AD6:  MOVLW  1B
3AD8:  MOVLB  2
3ADA:  MOVWF  x31
3ADC:  MOVLB  0
3ADE:  CALL   2F1E
3AE2:  MOVLW  0D
3AE4:  MOVLB  2
3AE6:  MOVWF  x39
3AE8:  MOVLB  0
3AEA:  CALL   2D84
....................             COM1_send_str(buf); 
3AEE:  MOVLW  01
3AF0:  MOVLB  2
3AF2:  MOVWF  x69
3AF4:  MOVLW  C0
3AF6:  MOVWF  x68
3AF8:  MOVLB  0
3AFA:  CALL   2002
....................             } 
....................           else 
3AFE:  BRA    3B9E
3B00:  MOVLB  1
....................             { 
....................             val = get_int(); 
3B02:  MOVLB  0
3B04:  CALL   2924
3B08:  MOVFF  02,209
3B0C:  MOVFF  01,208
....................             if (val < 2) 
3B10:  MOVLB  2
3B12:  MOVF   x09,F
3B14:  BNZ   3B2A
3B16:  MOVF   x08,W
3B18:  SUBLW  01
3B1A:  BNC   3B2A
....................               { 
....................               setup.SOQPSK = val; 
3B1C:  MOVFF  208,B6
....................               FPGA_set_reg0(); 
3B20:  MOVLB  0
3B22:  CALL   15EE
....................               } 
....................             else 
3B26:  BRA    3B9E
3B28:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3B2A:  MOVLW  02
3B2C:  MOVWF  FEA
3B2E:  MOVLW  11
3B30:  MOVWF  FE9
3B32:  MOVLW  09
3B34:  MOVWF  01
3B36:  CLRF   FF7
3B38:  MOVLW  00
3B3A:  MOVLB  0
3B3C:  CALL   0894
3B40:  TBLRD*-
3B42:  TBLRD*+
3B44:  MOVFF  FF5,FEE
3B48:  DECFSZ 01,F
3B4A:  BRA    3B42
3B4C:  MOVLW  02
3B4E:  MOVLB  2
3B50:  MOVWF  x69
3B52:  MOVLW  11
3B54:  MOVWF  x68
3B56:  MOVLB  0
3B58:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3B5C:  MOVLW  01
3B5E:  MOVLB  1
3B60:  MOVWF  xA0
3B62:  MOVLW  74
3B64:  MOVWF  x9F
3B66:  MOVLW  60
3B68:  MOVWF  FF6
3B6A:  MOVLW  0B
3B6C:  MOVWF  FF7
3B6E:  MOVLW  07
3B70:  MOVLB  2
3B72:  MOVWF  x30
3B74:  MOVLB  0
3B76:  CALL   2DA6
3B7A:  MOVFF  B6,230
3B7E:  MOVLW  1B
3B80:  MOVLB  2
3B82:  MOVWF  x31
3B84:  MOVLB  0
3B86:  CALL   2F1E
3B8A:  MOVLW  0D
3B8C:  MOVLB  2
3B8E:  MOVWF  x39
3B90:  MOVLB  0
3B92:  CALL   2D84
....................               ret = 0; 
3B96:  MOVLB  1
3B98:  CLRF   xBE
....................               break; 
3B9A:  MOVLB  0
3B9C:  BRA    3BA6
....................               } 
....................             } 
....................           ret = 1; 
3B9E:  MOVLW  01
3BA0:  MOVLB  1
3BA2:  MOVWF  xBE
....................           break; 
3BA4:  MOVLB  0
....................         } 
....................       break; 
3BA6:  GOTO   52A0
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
3BAA:  MOVLB  1
3BAC:  MOVF   x28,F
3BAE:  BNZ   3BB8
3BB0:  MOVLB  0
3BB2:  GOTO   52A0
3BB6:  MOVLB  1
....................       switch (c2) 
....................         { 
3BB8:  MOVLW  41
3BBA:  SUBWF  xEA,W
3BBC:  ADDLW  F0
3BBE:  BTFSC  FD8.0
3BC0:  BRA    41D4
3BC2:  ADDLW  10
3BC4:  MOVLB  0
3BC6:  GOTO   52A8
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
3BCA:  MOVLB  1
3BCC:  MOVF   xE8,F
3BCE:  BZ    3C1C
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
3BD0:  MOVLW  01
3BD2:  MOVWF  xA0
3BD4:  MOVLW  C0
3BD6:  MOVWF  x9F
3BD8:  MOVLW  6C
3BDA:  MOVWF  FF6
3BDC:  MOVLW  0B
3BDE:  MOVWF  FF7
3BE0:  MOVLW  03
3BE2:  MOVLB  2
3BE4:  MOVWF  x30
3BE6:  MOVLB  0
3BE8:  CALL   2DA6
3BEC:  MOVFF  B5,230
3BF0:  MOVLW  1B
3BF2:  MOVLB  2
3BF4:  MOVWF  x31
3BF6:  MOVLB  0
3BF8:  CALL   2F1E
3BFC:  MOVLW  0D
3BFE:  MOVLB  2
3C00:  MOVWF  x39
3C02:  MOVLB  0
3C04:  CALL   2D84
....................             COM1_send_str(buf); 
3C08:  MOVLW  01
3C0A:  MOVLB  2
3C0C:  MOVWF  x69
3C0E:  MOVLW  C0
3C10:  MOVWF  x68
3C12:  MOVLB  0
3C14:  CALL   2002
....................             } 
....................           else 
3C18:  BRA    3D16
3C1A:  MOVLB  1
....................             { 
....................             val = get_int(); 
3C1C:  MOVLB  0
3C1E:  CALL   2924
3C22:  MOVFF  02,209
3C26:  MOVFF  01,208
....................             if (val < 2) 
3C2A:  MOVLB  2
3C2C:  MOVF   x09,F
3C2E:  BNZ   3CA2
3C30:  MOVF   x08,W
3C32:  SUBLW  01
3C34:  BNC   3CA2
....................               { 
.................... 	          if(setup.rc == 1) 
3C36:  MOVLB  0
3C38:  DECFSZ xF6,W
3C3A:  BRA    3C5A
3C3C:  MOVF   xF7,F
3C3E:  BNZ   3C5A
.................... 	            { 
.................... 	            if(val == 0) 
3C40:  MOVLB  2
3C42:  MOVF   x08,F
3C44:  BNZ   3C54
3C46:  MOVF   x09,F
3C48:  BNZ   3C54
.................... 	            { 
.................... 	            setup.rp =1; 
3C4A:  MOVLB  0
3C4C:  CLRF   xF9
3C4E:  MOVLW  01
3C50:  MOVWF  xF8
.................... 	            } 
.................... 	          else 
3C52:  BRA    3C5A
....................  
.................... 	          setup.rp = 0; 
3C54:  MOVLB  0
3C56:  CLRF   xF9
3C58:  CLRF   xF8
.................... 	          } 
.................... 	          if(val == 1) 
3C5A:  MOVLB  2
3C5C:  DECFSZ x08,W
3C5E:  BRA    3C82
3C60:  MOVF   x09,F
3C62:  BNZ   3C82
.................... 	          { 
....................               rp_command = setup.rp = 0; 
3C64:  MOVLB  0
3C66:  CLRF   xF9
3C68:  CLRF   xF8
3C6A:  MOVFF  F8,19C
....................               delay_ms(50); 
3C6E:  MOVLW  32
3C70:  MOVLB  2
3C72:  MOVWF  x3F
3C74:  MOVLB  0
3C76:  CALL   0DD6
....................               update_all(); 
3C7A:  CALL   1B3C
....................               } 
....................               else 
3C7E:  BRA    3C9E
3C80:  MOVLB  2
....................                { 
....................               rp_command = setup.rp = 1; 
3C82:  MOVLB  0
3C84:  CLRF   xF9
3C86:  MOVLW  01
3C88:  MOVWF  xF8
3C8A:  MOVFF  F8,19C
....................               delay_ms(50); 
3C8E:  MOVLW  32
3C90:  MOVLB  2
3C92:  MOVWF  x3F
3C94:  MOVLB  0
3C96:  CALL   0DD6
....................               update_all(); 
3C9A:  CALL   1B3C
....................               } 
....................               } 
....................             else 
3C9E:  BRA    3D16
3CA0:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3CA2:  MOVLW  02
3CA4:  MOVWF  FEA
3CA6:  MOVLW  11
3CA8:  MOVWF  FE9
3CAA:  MOVLW  09
3CAC:  MOVWF  01
3CAE:  CLRF   FF7
3CB0:  MOVLW  00
3CB2:  MOVLB  0
3CB4:  CALL   0894
3CB8:  TBLRD*-
3CBA:  TBLRD*+
3CBC:  MOVFF  FF5,FEE
3CC0:  DECFSZ 01,F
3CC2:  BRA    3CBA
3CC4:  MOVLW  02
3CC6:  MOVLB  2
3CC8:  MOVWF  x69
3CCA:  MOVLW  11
3CCC:  MOVWF  x68
3CCE:  MOVLB  0
3CD0:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
3CD4:  MOVLW  01
3CD6:  MOVLB  1
3CD8:  MOVWF  xA0
3CDA:  MOVLW  74
3CDC:  MOVWF  x9F
3CDE:  MOVLW  74
3CE0:  MOVWF  FF6
3CE2:  MOVLW  0B
3CE4:  MOVWF  FF7
3CE6:  MOVLW  07
3CE8:  MOVLB  2
3CEA:  MOVWF  x30
3CEC:  MOVLB  0
3CEE:  CALL   2DA6
3CF2:  MOVFF  19C,230
3CF6:  MOVLW  1B
3CF8:  MOVLB  2
3CFA:  MOVWF  x31
3CFC:  MOVLB  0
3CFE:  CALL   2F1E
3D02:  MOVLW  0D
3D04:  MOVLB  2
3D06:  MOVWF  x39
3D08:  MOVLB  0
3D0A:  CALL   2D84
....................               ret = 0; 
3D0E:  MOVLB  1
3D10:  CLRF   xBE
....................               break; 
3D12:  BRA    41D4
3D14:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
3D16:  MOVLW  01
3D18:  MOVLB  1
3D1A:  MOVWF  xBE
....................           break; 
3D1C:  BRA    41D4
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
3D1E:  MOVLB  1
3D20:  MOVF   xE8,F
3D22:  BZ    3D70
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
3D24:  MOVLW  01
3D26:  MOVWF  xA0
3D28:  MOVLW  C0
3D2A:  MOVWF  x9F
3D2C:  MOVLW  80
3D2E:  MOVWF  FF6
3D30:  MOVLW  0B
3D32:  MOVWF  FF7
3D34:  MOVLW  03
3D36:  MOVLB  2
3D38:  MOVWF  x30
3D3A:  MOVLB  0
3D3C:  CALL   2DA6
3D40:  MOVFF  19D,230
3D44:  MOVLW  1B
3D46:  MOVLB  2
3D48:  MOVWF  x31
3D4A:  MOVLB  0
3D4C:  CALL   2F1E
3D50:  MOVLW  0D
3D52:  MOVLB  2
3D54:  MOVWF  x39
3D56:  MOVLB  0
3D58:  CALL   2D84
....................             COM1_send_str(buf); 
3D5C:  MOVLW  01
3D5E:  MOVLB  2
3D60:  MOVWF  x69
3D62:  MOVLW  C0
3D64:  MOVWF  x68
3D66:  MOVLB  0
3D68:  CALL   2002
....................             } 
....................           else 
3D6C:  BRA    3ED2
3D6E:  MOVLB  1
....................             { 
....................             val = get_int(); 
3D70:  MOVLB  0
3D72:  CALL   2924
3D76:  MOVFF  02,209
3D7A:  MOVFF  01,208
....................             if (val == 0) 
3D7E:  MOVLB  2
3D80:  MOVF   x08,F
3D82:  BNZ   3DEC
3D84:  MOVF   x09,F
3D86:  BNZ   3DEC
....................               { 
.................... 			  if(setup.cot || setup.rc) 
3D88:  MOVLB  0
3D8A:  MOVF   xF4,W
3D8C:  IORWF  xF5,W
3D8E:  BNZ   3D96
3D90:  MOVF   xF6,W
3D92:  IORWF  xF7,W
3D94:  BZ    3DBC
.................... 				{ 
....................                 pwr_command = 0; 
3D96:  MOVLB  1
3D98:  CLRF   x9D
....................                 setup.pwr = pwr_command; 
3D9A:  MOVLB  0
3D9C:  CLRF   xAD
3D9E:  MOVFF  19D,AC
....................                 delay_ms(60); 
3DA2:  MOVLW  3C
3DA4:  MOVLB  2
3DA6:  MOVWF  x3F
3DA8:  MOVLB  0
3DAA:  CALL   0DD6
.................... 			 	update_all(); 
3DAE:  CALL   1B3C
.................... 			 	ret = 1; 
3DB2:  MOVLW  01
3DB4:  MOVLB  1
3DB6:  MOVWF  xBE
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
3DB8:  BRA    3DE8
3DBA:  MOVLB  0
3DBC:  MOVF   xF4,F
3DBE:  BNZ   3DC4
3DC0:  MOVF   xF5,F
3DC2:  BZ    3DCA
3DC4:  MOVF   xF6,W
3DC6:  IORWF  xF7,W
3DC8:  BZ    3DE6
.................... 				  { 
....................                   pwr_command = 0; 
3DCA:  MOVLB  1
3DCC:  CLRF   x9D
....................                 setup.pwr = pwr_command; 
3DCE:  MOVLB  0
3DD0:  CLRF   xAD
3DD2:  MOVFF  19D,AC
....................                 delay_ms(60); 
3DD6:  MOVLW  3C
3DD8:  MOVLB  2
3DDA:  MOVWF  x3F
3DDC:  MOVLB  0
3DDE:  CALL   0DD6
.................... 			 	update_all(); 
3DE2:  CALL   1B3C
3DE6:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
3DE8:  BRA    3ED0
3DEA:  MOVLB  2
.................... 				{ 
.................... 				if (val == 1) 
3DEC:  DECFSZ x08,W
3DEE:  BRA    3E5E
3DF0:  MOVF   x09,F
3DF2:  BNZ   3E5E
.................... 				  { 
.................... 				  if(setup.cot) 
3DF4:  MOVLB  0
3DF6:  MOVF   xF4,W
3DF8:  IORWF  xF5,W
3DFA:  BZ    3E28
.................... 				   { 
.................... 				   pwr_command = 1; 
3DFC:  MOVLW  01
3DFE:  MOVLB  1
3E00:  MOVWF  x9D
.................... 				   setup.pwr = pwr_command; 
3E02:  MOVLB  0
3E04:  CLRF   xAD
3E06:  MOVFF  19D,AC
.................... 				   power_output(); 
3E0A:  CALL   1BA6
....................                    delay_ms(50); 
3E0E:  MOVLW  32
3E10:  MOVLB  2
3E12:  MOVWF  x3F
3E14:  MOVLB  0
3E16:  CALL   0DD6
.................... 				   ret = 1; 
3E1A:  MOVLW  01
3E1C:  MOVLB  1
3E1E:  MOVWF  xBE
....................                    update_all(); 
3E20:  MOVLB  0
3E22:  CALL   1B3C
.................... 				   } 
.................... 					else if(setup.cot == 0) 
3E26:  BRA    3E5A
3E28:  MOVF   xF4,F
3E2A:  BNZ   3E5A
3E2C:  MOVF   xF5,F
3E2E:  BNZ   3E5A
.................... 				  { 
....................                   pwr_command = 1; 
3E30:  MOVLW  01
3E32:  MOVLB  1
3E34:  MOVWF  x9D
....................                   setup.pwr = pwr_command; 
3E36:  MOVLB  0
3E38:  CLRF   xAD
3E3A:  MOVFF  19D,AC
....................                   power_output(); 
3E3E:  CALL   1BA6
.................... 				  delay_ms(50); 
3E42:  MOVLW  32
3E44:  MOVLB  2
3E46:  MOVWF  x3F
3E48:  MOVLB  0
3E4A:  CALL   0DD6
.................... 				  ret = 1; 
3E4E:  MOVLW  01
3E50:  MOVLB  1
3E52:  MOVWF  xBE
....................                   update_all(); 
3E54:  MOVLB  0
3E56:  CALL   1B3C
....................                   } 
.................... 				} 
....................             else 
3E5A:  BRA    3ED2
3E5C:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3E5E:  MOVLW  02
3E60:  MOVWF  FEA
3E62:  MOVLW  11
3E64:  MOVWF  FE9
3E66:  MOVLW  09
3E68:  MOVWF  01
3E6A:  CLRF   FF7
3E6C:  MOVLW  00
3E6E:  MOVLB  0
3E70:  CALL   0894
3E74:  TBLRD*-
3E76:  TBLRD*+
3E78:  MOVFF  FF5,FEE
3E7C:  DECFSZ 01,F
3E7E:  BRA    3E76
3E80:  MOVLW  02
3E82:  MOVLB  2
3E84:  MOVWF  x69
3E86:  MOVLW  11
3E88:  MOVWF  x68
3E8A:  MOVLB  0
3E8C:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
3E90:  MOVLW  01
3E92:  MOVLB  1
3E94:  MOVWF  xA0
3E96:  MOVLW  74
3E98:  MOVWF  x9F
3E9A:  MOVLW  88
3E9C:  MOVWF  FF6
3E9E:  MOVLW  0B
3EA0:  MOVWF  FF7
3EA2:  MOVLW  07
3EA4:  MOVLB  2
3EA6:  MOVWF  x30
3EA8:  MOVLB  0
3EAA:  CALL   2DA6
3EAE:  MOVFF  19D,230
3EB2:  MOVLW  1B
3EB4:  MOVLB  2
3EB6:  MOVWF  x31
3EB8:  MOVLB  0
3EBA:  CALL   2F1E
3EBE:  MOVLW  0D
3EC0:  MOVLB  2
3EC2:  MOVWF  x39
3EC4:  MOVLB  0
3EC6:  CALL   2D84
....................               ret = 0; 
3ECA:  MOVLB  1
3ECC:  CLRF   xBE
....................               break; 
3ECE:  BRA    41D4
3ED0:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
3ED2:  MOVLW  01
3ED4:  MOVLB  1
3ED6:  MOVWF  xBE
....................           break; 
3ED8:  BRA    41D4
....................  
....................          case 'C': 
....................          	if (query) 
3EDA:  MOVLB  1
3EDC:  MOVF   xE8,F
3EDE:  BZ    3F2C
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
3EE0:  MOVLW  01
3EE2:  MOVWF  xA0
3EE4:  MOVLW  C0
3EE6:  MOVWF  x9F
3EE8:  MOVLW  94
3EEA:  MOVWF  FF6
3EEC:  MOVLW  0B
3EEE:  MOVWF  FF7
3EF0:  MOVLW  03
3EF2:  MOVLB  2
3EF4:  MOVWF  x30
3EF6:  MOVLB  0
3EF8:  CALL   2DA6
3EFC:  MOVLW  10
3EFE:  MOVWF  FE9
3F00:  MOVFF  F7,231
3F04:  MOVFF  F6,230
3F08:  CALL   2DCE
3F0C:  MOVLW  0D
3F0E:  MOVLB  2
3F10:  MOVWF  x39
3F12:  MOVLB  0
3F14:  CALL   2D84
....................             COM1_send_str(buf); 
3F18:  MOVLW  01
3F1A:  MOVLB  2
3F1C:  MOVWF  x69
3F1E:  MOVLW  C0
3F20:  MOVWF  x68
3F22:  MOVLB  0
3F24:  CALL   2002
....................             } 
....................           else 
3F28:  BRA    3FBC
3F2A:  MOVLB  1
....................             { 
....................           val = get_int(); 
3F2C:  MOVLB  0
3F2E:  CALL   2924
3F32:  MOVFF  02,209
3F36:  MOVFF  01,208
....................           if(val < 2) 
3F3A:  MOVLB  2
3F3C:  MOVF   x09,F
3F3E:  BNZ   3F8A
3F40:  MOVF   x08,W
3F42:  SUBLW  01
3F44:  BNC   3F8A
....................           	{ 
.................... 	          	if(val == 0) 
3F46:  MOVF   x08,F
3F48:  BNZ   3F66
3F4A:  MOVF   x09,F
3F4C:  BNZ   3F66
.................... 	          	{ 
.................... 	              setup.rc = 0; 
3F4E:  MOVLB  0
3F50:  CLRF   xF7
3F52:  CLRF   xF6
.................... 	              delay_ms(50); 
3F54:  MOVLW  32
3F56:  MOVLB  2
3F58:  MOVWF  x3F
3F5A:  MOVLB  0
3F5C:  CALL   0DD6
.................... 	              update_all(); 
3F60:  CALL   1B3C
3F64:  MOVLB  2
.................... 	            } 
.................... 	            if(val == 1) 
3F66:  DECFSZ x08,W
3F68:  BRA    3F88
3F6A:  MOVF   x09,F
3F6C:  BNZ   3F88
.................... 	              { 
.................... 	              setup.rc = 1; 
3F6E:  MOVLB  0
3F70:  CLRF   xF7
3F72:  MOVLW  01
3F74:  MOVWF  xF6
.................... 	              delay_ms(50); 
3F76:  MOVLW  32
3F78:  MOVLB  2
3F7A:  MOVWF  x3F
3F7C:  MOVLB  0
3F7E:  CALL   0DD6
.................... 	              update_all(); 
3F82:  CALL   1B3C
3F86:  MOVLB  2
.................... 	              } 
....................            } 
....................           else 
3F88:  BRA    3FBE
....................             COM1_send_str("\r\nFAULT\r\n"); 
3F8A:  MOVLW  02
3F8C:  MOVWF  FEA
3F8E:  MOVLW  11
3F90:  MOVWF  FE9
3F92:  MOVLW  0A
3F94:  MOVWF  01
3F96:  CLRF   FF7
3F98:  MOVLW  00
3F9A:  MOVLB  0
3F9C:  CALL   087A
3FA0:  TBLRD*-
3FA2:  TBLRD*+
3FA4:  MOVFF  FF5,FEE
3FA8:  DECFSZ 01,F
3FAA:  BRA    3FA2
3FAC:  MOVLW  02
3FAE:  MOVLB  2
3FB0:  MOVWF  x69
3FB2:  MOVLW  11
3FB4:  MOVWF  x68
3FB6:  MOVLB  0
3FB8:  CALL   2002
3FBC:  MOVLB  2
....................             } 
....................           break; 
3FBE:  MOVLB  1
3FC0:  BRA    41D4
....................  
....................           case 'B': 
....................             if (query) 
3FC2:  MOVLB  1
3FC4:  MOVF   xE8,F
3FC6:  BZ    4014
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
3FC8:  MOVLW  01
3FCA:  MOVWF  xA0
3FCC:  MOVLW  C0
3FCE:  MOVWF  x9F
3FD0:  MOVLW  9C
3FD2:  MOVWF  FF6
3FD4:  MOVLW  0B
3FD6:  MOVWF  FF7
3FD8:  MOVLW  03
3FDA:  MOVLB  2
3FDC:  MOVWF  x30
3FDE:  MOVLB  0
3FE0:  CALL   2DA6
3FE4:  MOVLW  10
3FE6:  MOVWF  FE9
3FE8:  MOVFF  F5,231
3FEC:  MOVFF  F4,230
3FF0:  CALL   2DCE
3FF4:  MOVLW  0D
3FF6:  MOVLB  2
3FF8:  MOVWF  x39
3FFA:  MOVLB  0
3FFC:  CALL   2D84
....................             COM1_send_str(buf); 
4000:  MOVLW  01
4002:  MOVLB  2
4004:  MOVWF  x69
4006:  MOVLW  C0
4008:  MOVWF  x68
400A:  MOVLB  0
400C:  CALL   2002
....................             } 
....................           else 
4010:  BRA    40C2
4012:  MOVLB  1
....................             { 
....................           val = get_int(); 
4014:  MOVLB  0
4016:  CALL   2924
401A:  MOVFF  02,209
401E:  MOVFF  01,208
....................           if(val < 2) 
4022:  MOVLB  2
4024:  MOVF   x09,F
4026:  BNZ   4090
4028:  MOVF   x08,W
402A:  SUBLW  01
402C:  BNC   4090
....................           	{ 
.................... 	          if(val) 
402E:  MOVF   x08,W
4030:  IORWF  x09,W
4032:  BZ    4076
.................... 	          	{ 
....................               setup.cot = val; 
4034:  MOVFF  209,F5
4038:  MOVFF  208,F4
....................               if(pwr_command == 0) 
403C:  MOVLB  1
403E:  MOVF   x9D,F
4040:  BNZ   405E
....................               { 
....................               pwr_command == 1; 
4042:  DECFSZ x9D,W
4044:  BRA    4048
4046:  BRA    404A
4048:  MOVLW  00
....................               delay_ms(50); 
404A:  MOVLW  32
404C:  MOVLB  2
404E:  MOVWF  x3F
4050:  MOVLB  0
4052:  CALL   0DD6
....................               update_all(); 
4056:  CALL   1B3C
....................               } 
....................               else 
405A:  BRA    4064
405C:  MOVLB  1
....................               	pwr_command == 0; 
405E:  MOVF   x9D,F
4060:  BZ    4064
4062:  MOVLW  00
....................                delay_ms(50); 
4064:  MOVLW  32
4066:  MOVLB  2
4068:  MOVWF  x3F
406A:  MOVLB  0
406C:  CALL   0DD6
....................               update_all(); 
4070:  CALL   1B3C
4074:  MOVLB  2
....................             } 
....................             setup.cot = val; 
4076:  MOVFF  209,F5
407A:  MOVFF  208,F4
....................               delay_ms(70); 
407E:  MOVLW  46
4080:  MOVWF  x3F
4082:  MOVLB  0
4084:  CALL   0DD6
....................               update_all(); 
4088:  CALL   1B3C
....................            } 
....................           else 
408C:  BRA    40C2
408E:  MOVLB  2
....................             COM1_send_str("\r\nFAULT\r\n"); 
4090:  MOVLW  02
4092:  MOVWF  FEA
4094:  MOVLW  11
4096:  MOVWF  FE9
4098:  MOVLW  0A
409A:  MOVWF  01
409C:  CLRF   FF7
409E:  MOVLW  00
40A0:  MOVLB  0
40A2:  CALL   087A
40A6:  TBLRD*-
40A8:  TBLRD*+
40AA:  MOVFF  FF5,FEE
40AE:  DECFSZ 01,F
40B0:  BRA    40A8
40B2:  MOVLW  02
40B4:  MOVLB  2
40B6:  MOVWF  x69
40B8:  MOVLW  11
40BA:  MOVWF  x68
40BC:  MOVLB  0
40BE:  CALL   2002
....................             } 
....................           break; 
40C2:  MOVLB  1
40C4:  BRA    41D4
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
40C6:  MOVLB  1
40C8:  MOVF   xE8,F
40CA:  BZ    4118
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
40CC:  MOVLW  01
40CE:  MOVWF  xA0
40D0:  MOVLW  C0
40D2:  MOVWF  x9F
40D4:  MOVLW  A4
40D6:  MOVWF  FF6
40D8:  MOVLW  0B
40DA:  MOVWF  FF7
40DC:  MOVLW  03
40DE:  MOVLB  2
40E0:  MOVWF  x30
40E2:  MOVLB  0
40E4:  CALL   2DA6
40E8:  MOVFF  B4,230
40EC:  MOVLW  1B
40EE:  MOVLB  2
40F0:  MOVWF  x31
40F2:  MOVLB  0
40F4:  CALL   2F1E
40F8:  MOVLW  0D
40FA:  MOVLB  2
40FC:  MOVWF  x39
40FE:  MOVLB  0
4100:  CALL   2D84
....................             COM1_send_str(buf); 
4104:  MOVLW  01
4106:  MOVLB  2
4108:  MOVWF  x69
410A:  MOVLW  C0
410C:  MOVWF  x68
410E:  MOVLB  0
4110:  CALL   2002
....................             } 
....................           else 
4114:  BRA    41B8
4116:  MOVLB  1
....................             { 
....................             val = get_int(); 
4118:  MOVLB  0
411A:  CALL   2924
411E:  MOVFF  02,209
4122:  MOVFF  01,208
....................             if (val < 2) 
4126:  MOVLB  2
4128:  MOVF   x09,F
412A:  BNZ   4146
412C:  MOVF   x08,W
412E:  SUBLW  01
4130:  BNC   4146
....................               { 
....................               setup.randomizer = val; 
4132:  MOVFF  208,B4
....................               FPGA_set_reg0(); 
4136:  MOVLB  0
4138:  CALL   15EE
....................               ret = 1; 
413C:  MOVLW  01
413E:  MOVLB  1
4140:  MOVWF  xBE
....................               } 
....................             else 
4142:  BRA    41B8
4144:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4146:  MOVLW  02
4148:  MOVWF  FEA
414A:  MOVLW  11
414C:  MOVWF  FE9
414E:  MOVLW  09
4150:  MOVWF  01
4152:  CLRF   FF7
4154:  MOVLW  00
4156:  MOVLB  0
4158:  CALL   0894
415C:  TBLRD*-
415E:  TBLRD*+
4160:  MOVFF  FF5,FEE
4164:  DECFSZ 01,F
4166:  BRA    415E
4168:  MOVLW  02
416A:  MOVLB  2
416C:  MOVWF  x69
416E:  MOVLW  11
4170:  MOVWF  x68
4172:  MOVLB  0
4174:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
4178:  MOVLW  01
417A:  MOVLB  1
417C:  MOVWF  xA0
417E:  MOVLW  74
4180:  MOVWF  x9F
4182:  MOVLW  AC
4184:  MOVWF  FF6
4186:  MOVLW  0B
4188:  MOVWF  FF7
418A:  MOVLW  07
418C:  MOVLB  2
418E:  MOVWF  x30
4190:  MOVLB  0
4192:  CALL   2DA6
4196:  MOVFF  B4,230
419A:  MOVLW  1B
419C:  MOVLB  2
419E:  MOVWF  x31
41A0:  MOVLB  0
41A2:  CALL   2F1E
41A6:  MOVLW  0D
41A8:  MOVLB  2
41AA:  MOVWF  x39
41AC:  MOVLB  0
41AE:  CALL   2D84
....................               ret = 0; 
41B2:  MOVLB  1
41B4:  CLRF   xBE
....................               break; 
41B6:  BRA    41D4
....................               } 
....................             } 
....................           ret = 1; 
41B8:  MOVLW  01
41BA:  MOVLB  1
41BC:  MOVWF  xBE
....................           break; 
41BE:  BRA    41D4
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
41C0:  CALL   0E72
....................           update_all(); 
41C4:  CALL   1B3C
....................           ret = 1; 
41C8:  MOVLW  01
41CA:  MOVLB  1
41CC:  MOVWF  xBE
....................           break; 
41CE:  BRA    41D4
....................         case 'E':   // reset 
....................           reset_cpu(); 
41D0:  RESET
....................           break; 
41D2:  MOVLB  1
....................         } 
....................       break; 
41D4:  MOVLB  0
41D6:  GOTO   52A0
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
41DA:  MOVLB  1
41DC:  MOVF   x28,F
41DE:  BNZ   41E8
41E0:  MOVLB  0
41E2:  GOTO   52A0
41E6:  MOVLB  1
....................       if (c2 == 'A') 
41E8:  MOVF   xEA,W
41EA:  SUBLW  41
41EC:  BNZ   41F2
....................         { 
....................         //xxxx 
....................         ret = 1; 
41EE:  MOVLW  01
41F0:  MOVWF  xBE
....................         } 
....................       break; 
41F2:  MOVLB  0
41F4:  GOTO   52A0
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
41F8:  MOVLB  1
41FA:  MOVF   x28,F
41FC:  BNZ   4206
41FE:  MOVLB  0
4200:  GOTO   52A0
4204:  MOVLB  1
....................       switch (c2) 
....................         { 
4206:  MOVF   xEA,W
4208:  XORLW  50
420A:  MOVLB  0
420C:  BZ    4214
420E:  XORLW  06
4210:  BZ    421E
4212:  BRA    4232
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
4214:  MOVLW  01
4216:  MOVLB  1
4218:  MOVWF  xBE
....................           break; 
421A:  MOVLB  0
421C:  BRA    4232
....................         case 'V': 
....................           allow_write = 2975; 
421E:  MOVLW  0B
4220:  MOVWF  xFF
4222:  MOVLW  9F
4224:  MOVWF  xFE
....................           write_setup(); 
4226:  CALL   300A
....................           ret = 1; 
422A:  MOVLW  01
422C:  MOVLB  1
422E:  MOVWF  xBE
....................           break; 
4230:  MOVLB  0
....................         } 
....................       break; 
4232:  GOTO   52A0
....................        
....................  
....................     case 'U': // VERSION 3.3 UT US 
....................       if (!ttccp_login) break; 
4236:  MOVLB  1
4238:  MOVF   x28,F
423A:  BNZ   4244
423C:  MOVLB  0
423E:  GOTO   52A0
4242:  MOVLB  1
....................       switch (c2) 
....................         { 
4244:  MOVF   xEA,W
4246:  XORLW  54
4248:  MOVLB  0
424A:  BZ    4254
424C:  XORLW  07
424E:  BTFSC  FD8.2
4250:  BRA    4350
4252:  BRA    443C
....................         case 'T':  
....................           if (query) 
4254:  MOVLB  1
4256:  MOVF   xE8,F
4258:  BZ    42A6
....................             { 
....................             sprintf(buf, "UT %u\r", setup.UART_Time); 
425A:  MOVLW  01
425C:  MOVWF  xA0
425E:  MOVLW  C0
4260:  MOVWF  x9F
4262:  MOVLW  B8
4264:  MOVWF  FF6
4266:  MOVLW  0B
4268:  MOVWF  FF7
426A:  MOVLW  03
426C:  MOVLB  2
426E:  MOVWF  x30
4270:  MOVLB  0
4272:  CALL   2DA6
4276:  MOVFF  FA,230
427A:  MOVLW  1B
427C:  MOVLB  2
427E:  MOVWF  x31
4280:  MOVLB  0
4282:  CALL   2F1E
4286:  MOVLW  0D
4288:  MOVLB  2
428A:  MOVWF  x39
428C:  MOVLB  0
428E:  CALL   2D84
....................             COM1_send_str(buf); 
4292:  MOVLW  01
4294:  MOVLB  2
4296:  MOVWF  x69
4298:  MOVLW  C0
429A:  MOVWF  x68
429C:  MOVLB  0
429E:  CALL   2002
....................             } 
.................... 	            else 
42A2:  BRA    4344
42A4:  MOVLB  1
.................... 	            { 
.................... 	            val = get_int(); 
42A6:  MOVLB  0
42A8:  CALL   2924
42AC:  MOVFF  02,209
42B0:  MOVFF  01,208
.................... 	            if (val < 240 && val >1) 
42B4:  MOVLB  2
42B6:  MOVF   x09,F
42B8:  BNZ   42D0
42BA:  MOVF   x08,W
42BC:  SUBLW  EF
42BE:  BNC   42D0
42C0:  MOVF   x09,F
42C2:  BNZ   42CA
42C4:  MOVF   x08,W
42C6:  SUBLW  01
42C8:  BC    42D0
.................... 	              { 
.................... 	              setup.UART_Time = val;	               
42CA:  MOVFF  208,FA
.................... 	              } 
.................... 	            else 
42CE:  BRA    4346
.................... 	              { 
.................... 				  			COM1_send_str("\r\nFAIL\r\n"); 
42D0:  MOVLW  02
42D2:  MOVWF  FEA
42D4:  MOVLW  11
42D6:  MOVWF  FE9
42D8:  MOVLW  09
42DA:  MOVWF  01
42DC:  CLRF   FF7
42DE:  MOVLW  00
42E0:  MOVLB  0
42E2:  CALL   0894
42E6:  TBLRD*-
42E8:  TBLRD*+
42EA:  MOVFF  FF5,FEE
42EE:  DECFSZ 01,F
42F0:  BRA    42E8
42F2:  MOVLW  02
42F4:  MOVLB  2
42F6:  MOVWF  x69
42F8:  MOVLW  11
42FA:  MOVWF  x68
42FC:  MOVLB  0
42FE:  CALL   2002
.................... 	              sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
4302:  MOVLW  01
4304:  MOVLB  1
4306:  MOVWF  xA0
4308:  MOVLW  74
430A:  MOVWF  x9F
430C:  MOVLW  C0
430E:  MOVWF  FF6
4310:  MOVLW  0B
4312:  MOVWF  FF7
4314:  MOVLW  07
4316:  MOVLB  2
4318:  MOVWF  x30
431A:  MOVLB  0
431C:  CALL   2DA6
4320:  MOVFF  FA,230
4324:  MOVLW  1B
4326:  MOVLB  2
4328:  MOVWF  x31
432A:  MOVLB  0
432C:  CALL   2F1E
4330:  MOVLW  0D
4332:  MOVLB  2
4334:  MOVWF  x39
4336:  MOVLB  0
4338:  CALL   2D84
.................... 	              ret = 0; 
433C:  MOVLB  1
433E:  CLRF   xBE
.................... 	              break; 
4340:  MOVLB  0
4342:  BRA    443C
4344:  MOVLB  2
.................... 	              } 
.................... 	            } 
.................... 	            ret = 1; 
4346:  MOVLW  01
4348:  MOVLB  1
434A:  MOVWF  xBE
....................          		  break;  
434C:  MOVLB  0
434E:  BRA    443C
....................                      
....................         case 'S': 
....................            { 
....................           if (query) 
4350:  MOVLB  1
4352:  MOVF   xE8,F
4354:  BZ    43A2
....................             { 
....................             sprintf(buf, "US %u\r",setup.UART_Status); 
4356:  MOVLW  01
4358:  MOVWF  xA0
435A:  MOVLW  C0
435C:  MOVWF  x9F
435E:  MOVLW  CC
4360:  MOVWF  FF6
4362:  MOVLW  0B
4364:  MOVWF  FF7
4366:  MOVLW  03
4368:  MOVLB  2
436A:  MOVWF  x30
436C:  MOVLB  0
436E:  CALL   2DA6
4372:  MOVFF  FB,230
4376:  MOVLW  1B
4378:  MOVLB  2
437A:  MOVWF  x31
437C:  MOVLB  0
437E:  CALL   2F1E
4382:  MOVLW  0D
4384:  MOVLB  2
4386:  MOVWF  x39
4388:  MOVLB  0
438A:  CALL   2D84
....................             COM1_send_str(buf); 
438E:  MOVLW  01
4390:  MOVLB  2
4392:  MOVWF  x69
4394:  MOVLW  C0
4396:  MOVWF  x68
4398:  MOVLB  0
439A:  CALL   2002
....................             } 
....................           else 
439E:  BRA    4436
43A0:  MOVLB  1
....................             { 
....................             val = get_int(); 
43A2:  MOVLB  0
43A4:  CALL   2924
43A8:  MOVFF  02,209
43AC:  MOVFF  01,208
....................             if (val < 2) 
43B0:  MOVLB  2
43B2:  MOVF   x09,F
43B4:  BNZ   43C2
43B6:  MOVF   x08,W
43B8:  SUBLW  01
43BA:  BNC   43C2
....................               { 
....................               setup.UART_Status = val; 
43BC:  MOVFF  208,FB
....................               } 
....................             else 
43C0:  BRA    4438
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
43C2:  MOVLW  02
43C4:  MOVWF  FEA
43C6:  MOVLW  11
43C8:  MOVWF  FE9
43CA:  MOVLW  09
43CC:  MOVWF  01
43CE:  CLRF   FF7
43D0:  MOVLW  00
43D2:  MOVLB  0
43D4:  CALL   0894
43D8:  TBLRD*-
43DA:  TBLRD*+
43DC:  MOVFF  FF5,FEE
43E0:  DECFSZ 01,F
43E2:  BRA    43DA
43E4:  MOVLW  02
43E6:  MOVLB  2
43E8:  MOVWF  x69
43EA:  MOVLW  11
43EC:  MOVWF  x68
43EE:  MOVLB  0
43F0:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
43F4:  MOVLW  01
43F6:  MOVLB  1
43F8:  MOVWF  xA0
43FA:  MOVLW  74
43FC:  MOVWF  x9F
43FE:  MOVLW  D4
4400:  MOVWF  FF6
4402:  MOVLW  0B
4404:  MOVWF  FF7
4406:  MOVLW  07
4408:  MOVLB  2
440A:  MOVWF  x30
440C:  MOVLB  0
440E:  CALL   2DA6
4412:  MOVFF  FB,230
4416:  MOVLW  1B
4418:  MOVLB  2
441A:  MOVWF  x31
441C:  MOVLB  0
441E:  CALL   2F1E
4422:  MOVLW  0D
4424:  MOVLB  2
4426:  MOVWF  x39
4428:  MOVLB  0
442A:  CALL   2D84
....................               ret = 0; 
442E:  MOVLB  1
4430:  CLRF   xBE
....................               break; 
4432:  MOVLB  0
4434:  BRA    443C
4436:  MOVLB  2
....................               } 
....................             } 
....................         break; 
4438:  MOVLB  0
443A:  BRA    443C
....................         } 
....................         break; 
....................         } 
....................       break; 
443C:  GOTO   52A0
....................        
....................  
....................     case 'I': 
....................       if (!ttccp_login) break; 
4440:  MOVLB  1
4442:  MOVF   x28,F
4444:  BNZ   444E
4446:  MOVLB  0
4448:  GOTO   52A0
444C:  MOVLB  1
....................       switch (c2) 
....................         { 
444E:  MOVF   xEA,W
4450:  XORLW  44
4452:  MOVLB  0
4454:  BZ    445E
4456:  XORLW  07
4458:  BTFSC  FD8.2
445A:  BRA    4556
445C:  BRA    45B6
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
445E:  MOVLB  1
4460:  MOVF   xE8,F
4462:  BZ    44B0
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
4464:  MOVLW  01
4466:  MOVWF  xA0
4468:  MOVLW  C0
446A:  MOVWF  x9F
446C:  MOVLW  E0
446E:  MOVWF  FF6
4470:  MOVLW  0B
4472:  MOVWF  FF7
4474:  MOVLW  03
4476:  MOVLB  2
4478:  MOVWF  x30
447A:  MOVLB  0
447C:  CALL   2DA6
4480:  MOVFF  B3,230
4484:  MOVLW  1B
4486:  MOVLB  2
4488:  MOVWF  x31
448A:  MOVLB  0
448C:  CALL   2F1E
4490:  MOVLW  0D
4492:  MOVLB  2
4494:  MOVWF  x39
4496:  MOVLB  0
4498:  CALL   2D84
....................             COM1_send_str(buf); 
449C:  MOVLW  01
449E:  MOVLB  2
44A0:  MOVWF  x69
44A2:  MOVLW  C0
44A4:  MOVWF  x68
44A6:  MOVLB  0
44A8:  CALL   2002
....................             } 
....................           else 
44AC:  BRA    454C
44AE:  MOVLB  1
....................             { 
....................             val = get_int(); 
44B0:  MOVLB  0
44B2:  CALL   2924
44B6:  MOVFF  02,209
44BA:  MOVFF  01,208
....................             if (val < 4) 
44BE:  MOVLB  2
44C0:  MOVF   x09,F
44C2:  BNZ   44D8
44C4:  MOVF   x08,W
44C6:  SUBLW  03
44C8:  BNC   44D8
....................               { 
....................               setup.internal_pattern = val; 
44CA:  MOVFF  208,B3
....................               FPGA_set_reg6(); 
44CE:  MOVLB  0
44D0:  CALL   164A
....................               } 
....................             else 
44D4:  BRA    454C
44D6:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
44D8:  MOVLW  02
44DA:  MOVWF  FEA
44DC:  MOVLW  11
44DE:  MOVWF  FE9
44E0:  MOVLW  09
44E2:  MOVWF  01
44E4:  CLRF   FF7
44E6:  MOVLW  00
44E8:  MOVLB  0
44EA:  CALL   0894
44EE:  TBLRD*-
44F0:  TBLRD*+
44F2:  MOVFF  FF5,FEE
44F6:  DECFSZ 01,F
44F8:  BRA    44F0
44FA:  MOVLW  02
44FC:  MOVLB  2
44FE:  MOVWF  x69
4500:  MOVLW  11
4502:  MOVWF  x68
4504:  MOVLB  0
4506:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
450A:  MOVLW  01
450C:  MOVLB  1
450E:  MOVWF  xA0
4510:  MOVLW  74
4512:  MOVWF  x9F
4514:  MOVLW  E8
4516:  MOVWF  FF6
4518:  MOVLW  0B
451A:  MOVWF  FF7
451C:  MOVLW  07
451E:  MOVLB  2
4520:  MOVWF  x30
4522:  MOVLB  0
4524:  CALL   2DA6
4528:  MOVFF  B3,230
452C:  MOVLW  1B
452E:  MOVLB  2
4530:  MOVWF  x31
4532:  MOVLB  0
4534:  CALL   2F1E
4538:  MOVLW  0D
453A:  MOVLB  2
453C:  MOVWF  x39
453E:  MOVLB  0
4540:  CALL   2D84
....................               ret = 0; 
4544:  MOVLB  1
4546:  CLRF   xBE
....................               break; 
4548:  MOVLB  0
454A:  BRA    45B6
....................               } 
....................             } 
....................           ret = 1; 
454C:  MOVLW  01
454E:  MOVLB  1
4550:  MOVWF  xBE
....................           break; 
4552:  MOVLB  0
4554:  BRA    45B6
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
4556:  MOVLB  1
4558:  MOVF   xE8,F
455A:  BZ    45A8
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
455C:  MOVLW  01
455E:  MOVWF  xA0
4560:  MOVLW  C0
4562:  MOVWF  x9F
4564:  MOVLW  F4
4566:  MOVWF  FF6
4568:  MOVLW  0B
456A:  MOVWF  FF7
456C:  MOVLW  03
456E:  MOVLB  2
4570:  MOVWF  x30
4572:  MOVLB  0
4574:  CALL   2DA6
4578:  MOVLW  10
457A:  MOVWF  FE9
457C:  MOVFF  AB,231
4580:  MOVFF  AA,230
4584:  CALL   2DCE
4588:  MOVLW  0D
458A:  MOVLB  2
458C:  MOVWF  x39
458E:  MOVLB  0
4590:  CALL   2D84
....................             COM1_send_str(buf); 
4594:  MOVLW  01
4596:  MOVLB  2
4598:  MOVWF  x69
459A:  MOVLW  C0
459C:  MOVWF  x68
459E:  MOVLB  0
45A0:  CALL   2002
....................             } 
....................           else 
45A4:  BRA    45AE
45A6:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
45A8:  MOVLB  0
45AA:  GOTO   3032
....................             } 
....................           ret = 1; 
45AE:  MOVLW  01
45B0:  MOVLB  1
45B2:  MOVWF  xBE
....................           break; 
45B4:  MOVLB  0
....................         } 
....................       break; 
45B6:  GOTO   52A0
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
45BA:  MOVLB  1
45BC:  MOVF   x28,F
45BE:  BNZ   45C8
45C0:  MOVLB  0
45C2:  GOTO   52A0
45C6:  MOVLB  1
....................       if (c2 == 'E') 
45C8:  MOVF   xEA,W
45CA:  SUBLW  45
45CC:  BNZ   45D0
....................         { 
....................         goto get_temp; 
45CE:  BRA    4B44
....................         } 
....................       break; 
45D0:  MOVLB  0
45D2:  GOTO   52A0
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
45D6:  MOVLB  1
45D8:  MOVF   x28,F
45DA:  BNZ   45E4
45DC:  MOVLB  0
45DE:  GOTO   52A0
45E2:  MOVLB  1
....................       switch (c2) 
....................         { 
45E4:  MOVF   xEA,W
45E6:  XORLW  45
45E8:  MOVLB  0
45EA:  BZ    4606
45EC:  XORLW  09
45EE:  BTFSC  FD8.2
45F0:  BRA    46E8
45F2:  XORLW  1C
45F4:  BTFSC  FD8.2
45F6:  BRA    4734
45F8:  XORLW  1D
45FA:  BTFSC  FD8.2
45FC:  BRA    47AA
45FE:  XORLW  0E
4600:  BTFSC  FD8.2
4602:  BRA    4820
4604:  BRA    489A
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
4606:  MOVLB  1
4608:  MOVF   xEA,W
460A:  SUBLW  45
460C:  BNZ   46B2
.................... 		{ 
....................           sprintf(buf, "VE %s ID=%02lu DT=%02lu%02u\r", VERSION, setup.unit_ID, setup.year, setup.week); 
460E:  MOVLW  01
4610:  MOVWF  xA0
4612:  MOVLW  C0
4614:  MOVWF  x9F
4616:  MOVLW  FC
4618:  MOVWF  FF6
461A:  MOVLW  0B
461C:  MOVWF  FF7
461E:  MOVLW  03
4620:  MOVLB  2
4622:  MOVWF  x30
4624:  MOVLB  0
4626:  CALL   2DA6
462A:  MOVLW  BE
462C:  MOVWF  FF6
462E:  MOVLW  08
4630:  MOVWF  FF7
4632:  GOTO   30FA
4636:  MOVLW  01
4638:  MOVWF  FF6
463A:  MOVLW  0C
463C:  MOVWF  FF7
463E:  MOVLW  04
4640:  MOVLB  2
4642:  MOVWF  x30
4644:  MOVLB  0
4646:  CALL   2DA6
464A:  MOVLW  0B
464C:  MOVWF  FE9
464E:  MOVFF  F1,231
4652:  MOVFF  F0,230
4656:  CALL   2DCE
465A:  MOVLW  0A
465C:  MOVWF  FF6
465E:  MOVLW  0C
4660:  MOVWF  FF7
4662:  MOVLW  04
4664:  MOVLB  2
4666:  MOVWF  x30
4668:  MOVLB  0
466A:  CALL   2DA6
466E:  MOVLW  0B
4670:  MOVWF  FE9
4672:  MOVFF  EE,231
4676:  MOVFF  ED,230
467A:  CALL   2DCE
467E:  MOVFF  EF,230
4682:  MOVLW  01
4684:  MOVLB  2
4686:  MOVWF  x31
4688:  MOVLB  0
468A:  CALL   2F1E
468E:  MOVLW  0D
4690:  MOVLB  2
4692:  MOVWF  x39
4694:  MOVLB  0
4696:  CALL   2D84
....................           COM1_send_str(buf); 
469A:  MOVLW  01
469C:  MOVLB  2
469E:  MOVWF  x69
46A0:  MOVLW  C0
46A2:  MOVWF  x68
46A4:  MOVLB  0
46A6:  CALL   2002
....................           ret = 1; 
46AA:  MOVLW  01
46AC:  MOVLB  1
46AE:  MOVWF  xBE
.................... 		} 
.................... 		else 
46B0:  BRA    46E4
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
46B2:  MOVLW  02
46B4:  MOVWF  FEA
46B6:  MOVLW  11
46B8:  MOVWF  FE9
46BA:  MOVLW  09
46BC:  MOVWF  01
46BE:  CLRF   FF7
46C0:  MOVLW  00
46C2:  MOVLB  0
46C4:  CALL   0894
46C8:  TBLRD*-
46CA:  TBLRD*+
46CC:  MOVFF  FF5,FEE
46D0:  DECFSZ 01,F
46D2:  BRA    46CA
46D4:  MOVLW  02
46D6:  MOVLB  2
46D8:  MOVWF  x69
46DA:  MOVLW  11
46DC:  MOVWF  x68
46DE:  MOVLB  0
46E0:  CALL   2002
....................           break; 
46E4:  MOVLB  0
46E6:  BRA    489A
....................  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
46E8:  MOVLB  1
46EA:  MOVF   xEA,W
46EC:  SUBLW  4C
46EE:  BNZ   46FE
.................... 		{ 
....................  
....................           set_low_power_level(); 
46F0:  MOVLB  0
46F2:  GOTO   311C
....................           ret = 1; 
46F6:  MOVLW  01
46F8:  MOVLB  1
46FA:  MOVWF  xBE
.................... 		} 
.................... 		else 
46FC:  BRA    4730
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
46FE:  MOVLW  02
4700:  MOVWF  FEA
4702:  MOVLW  11
4704:  MOVWF  FE9
4706:  MOVLW  09
4708:  MOVWF  01
470A:  CLRF   FF7
470C:  MOVLW  00
470E:  MOVLB  0
4710:  CALL   0894
4714:  TBLRD*-
4716:  TBLRD*+
4718:  MOVFF  FF5,FEE
471C:  DECFSZ 01,F
471E:  BRA    4716
4720:  MOVLW  02
4722:  MOVLB  2
4724:  MOVWF  x69
4726:  MOVLW  11
4728:  MOVWF  x68
472A:  MOVLB  0
472C:  CALL   2002
....................           break; 
4730:  MOVLB  0
4732:  BRA    489A
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
4734:  MOVLB  1
4736:  MOVF   xE8,F
4738:  BZ    479A
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
473A:  MOVLW  14
473C:  MOVLB  0
473E:  ADDWF  xBA,W
4740:  MOVLB  2
4742:  MOVWF  x2A
4744:  MOVLW  00
4746:  MOVLB  0
4748:  ADDWFC xBB,W
474A:  MOVLB  2
474C:  MOVWF  x2B
474E:  MOVLW  01
4750:  MOVLB  1
4752:  MOVWF  xA0
4754:  MOVLW  C0
4756:  MOVWF  x9F
4758:  MOVLW  1A
475A:  MOVWF  FF6
475C:  MOVLW  0C
475E:  MOVWF  FF7
4760:  MOVLW  03
4762:  MOVLB  2
4764:  MOVWF  x30
4766:  MOVLB  0
4768:  CALL   2DA6
476C:  MOVLW  10
476E:  MOVWF  FE9
4770:  MOVFF  22B,231
4774:  MOVFF  22A,230
4778:  CALL   2DCE
477C:  MOVLW  0D
477E:  MOVLB  2
4780:  MOVWF  x39
4782:  MOVLB  0
4784:  CALL   2D84
....................             COM1_send_str(buf); 
4788:  MOVLW  01
478A:  MOVLB  2
478C:  MOVWF  x69
478E:  MOVLW  C0
4790:  MOVWF  x68
4792:  MOVLB  0
4794:  CALL   2002
....................             } 
....................           else 
4798:  BRA    47A0
....................             set_power_level(); 
479A:  MOVLB  0
479C:  GOTO   318E
....................             ret = 1; 
47A0:  MOVLW  01
47A2:  MOVLB  1
47A4:  MOVWF  xBE
....................           break; 
47A6:  MOVLB  0
47A8:  BRA    489A
....................  
....................         case 'M': // manual power level 
....................           if (query) 
47AA:  MOVLB  1
47AC:  MOVF   xE8,F
47AE:  BZ    47FC
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
47B0:  MOVLW  01
47B2:  MOVWF  xA0
47B4:  MOVLW  C0
47B6:  MOVWF  x9F
47B8:  MOVLW  22
47BA:  MOVWF  FF6
47BC:  MOVLW  0C
47BE:  MOVWF  FF7
47C0:  MOVLW  03
47C2:  MOVLB  2
47C4:  MOVWF  x30
47C6:  MOVLB  0
47C8:  CALL   2DA6
47CC:  MOVLW  10
47CE:  MOVWF  FE9
47D0:  MOVFF  23,231
47D4:  MOVFF  22,230
47D8:  CALL   2DCE
47DC:  MOVLW  0D
47DE:  MOVLB  2
47E0:  MOVWF  x39
47E2:  MOVLB  0
47E4:  CALL   2D84
....................             COM1_send_str(buf); 
47E8:  MOVLW  01
47EA:  MOVLB  2
47EC:  MOVWF  x69
47EE:  MOVLW  C0
47F0:  MOVWF  x68
47F2:  MOVLB  0
47F4:  CALL   2002
....................             } 
....................           else 
47F8:  BRA    481E
47FA:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
47FC:  MOVLB  0
47FE:  CALL   2924
4802:  MOVFF  02,23
4806:  MOVFF  01,22
....................             set_AD5312(DAC_NEG_VOLT, val); 
480A:  MOVLW  01
480C:  MOVLB  2
480E:  MOVWF  x2E
4810:  MOVFF  209,230
4814:  MOVFF  208,22F
4818:  MOVLB  0
481A:  CALL   0EA4
....................             } 
....................           break; 
481E:  BRA    489A
....................         case 'C': // manual power level 
....................           if (query) 
4820:  MOVLB  1
4822:  MOVF   xE8,F
4824:  BZ    4872
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
4826:  MOVLW  01
4828:  MOVWF  xA0
482A:  MOVLW  C0
482C:  MOVWF  x9F
482E:  MOVLW  2A
4830:  MOVWF  FF6
4832:  MOVLW  0C
4834:  MOVWF  FF7
4836:  MOVLW  03
4838:  MOVLB  2
483A:  MOVWF  x30
483C:  MOVLB  0
483E:  CALL   2DA6
4842:  MOVLW  10
4844:  MOVWF  FE9
4846:  MOVFF  25,231
484A:  MOVFF  24,230
484E:  CALL   2DCE
4852:  MOVLW  0D
4854:  MOVLB  2
4856:  MOVWF  x39
4858:  MOVLB  0
485A:  CALL   2D84
....................             COM1_send_str(buf); 
485E:  MOVLW  01
4860:  MOVLB  2
4862:  MOVWF  x69
4864:  MOVLW  C0
4866:  MOVWF  x68
4868:  MOVLB  0
486A:  CALL   2002
....................             } 
....................           else 
486E:  BRA    489A
4870:  MOVLB  1
....................             { 
....................             val = get_int(); 
4872:  MOVLB  0
4874:  CALL   2924
4878:  MOVFF  02,209
487C:  MOVFF  01,208
....................             manual_pos = val; 
4880:  MOVFF  209,25
4884:  MOVFF  208,24
....................             set_AD5312(DAC_POS_VOLT, val); 
4888:  MOVLB  2
488A:  CLRF   x2E
488C:  MOVFF  209,230
4890:  MOVFF  208,22F
4894:  MOVLB  0
4896:  CALL   0EA4
....................             } 
....................           break; 
.................... 		} 
....................       break; 
489A:  GOTO   52A0
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
489E:  MOVLB  1
48A0:  MOVF   x28,F
48A2:  BNZ   48AC
48A4:  MOVLB  0
48A6:  GOTO   52A0
48AA:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
48AC:  MOVF   xEA,W
48AE:  SUBLW  53
48B0:  BTFSS  FD8.2
48B2:  BRA    49AA
....................         { 
....................           if (query) 
48B4:  MOVF   xE8,F
48B6:  BZ    4904
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
48B8:  MOVLW  01
48BA:  MOVWF  xA0
48BC:  MOVLW  C0
48BE:  MOVWF  x9F
48C0:  MOVLW  32
48C2:  MOVWF  FF6
48C4:  MOVLW  0C
48C6:  MOVWF  FF7
48C8:  MOVLW  03
48CA:  MOVLB  2
48CC:  MOVWF  x30
48CE:  MOVLB  0
48D0:  CALL   2DA6
48D4:  MOVFF  B1,230
48D8:  MOVLW  1B
48DA:  MOVLB  2
48DC:  MOVWF  x31
48DE:  MOVLB  0
48E0:  CALL   2F1E
48E4:  MOVLW  0D
48E6:  MOVLB  2
48E8:  MOVWF  x39
48EA:  MOVLB  0
48EC:  CALL   2D84
....................             COM1_send_str(buf); 
48F0:  MOVLW  01
48F2:  MOVLB  2
48F4:  MOVWF  x69
48F6:  MOVLW  C0
48F8:  MOVWF  x68
48FA:  MOVLB  0
48FC:  CALL   2002
....................             } 
....................           else 
4900:  BRA    49A2
4902:  MOVLB  1
....................             { 
....................             val = get_int(); 
4904:  MOVLB  0
4906:  CALL   2924
490A:  MOVFF  02,209
490E:  MOVFF  01,208
....................             if (val < 2) 
4912:  MOVLB  2
4914:  MOVF   x09,F
4916:  BNZ   492C
4918:  MOVF   x08,W
491A:  SUBLW  01
491C:  BNC   492C
....................               { 
....................               setup.clock_source = val; 
491E:  MOVFF  208,B1
....................               FPGA_set_reg6(); 
4922:  MOVLB  0
4924:  CALL   164A
....................               } 
....................             else 
4928:  BRA    49A2
492A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
492C:  MOVLW  02
492E:  MOVWF  FEA
4930:  MOVLW  11
4932:  MOVWF  FE9
4934:  MOVLW  09
4936:  MOVWF  01
4938:  CLRF   FF7
493A:  MOVLW  00
493C:  MOVLB  0
493E:  CALL   0894
4942:  TBLRD*-
4944:  TBLRD*+
4946:  MOVFF  FF5,FEE
494A:  DECFSZ 01,F
494C:  BRA    4944
494E:  MOVLW  02
4950:  MOVLB  2
4952:  MOVWF  x69
4954:  MOVLW  11
4956:  MOVWF  x68
4958:  MOVLB  0
495A:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
495E:  MOVLW  01
4960:  MOVLB  1
4962:  MOVWF  xA0
4964:  MOVLW  74
4966:  MOVWF  x9F
4968:  MOVLW  3A
496A:  MOVWF  FF6
496C:  MOVLW  0C
496E:  MOVWF  FF7
4970:  MOVLW  07
4972:  MOVLB  2
4974:  MOVWF  x30
4976:  MOVLB  0
4978:  CALL   2DA6
497C:  MOVFF  B1,230
4980:  MOVLW  1B
4982:  MOVLB  2
4984:  MOVWF  x31
4986:  MOVLB  0
4988:  CALL   2F1E
498C:  MOVLW  0D
498E:  MOVLB  2
4990:  MOVWF  x39
4992:  MOVLB  0
4994:  CALL   2D84
....................               ret = 0; 
4998:  MOVLB  1
499A:  CLRF   xBE
....................               break; 
499C:  MOVLB  0
499E:  GOTO   52A0
....................               } 
....................             } 
....................  
....................         ret = 1; 
49A2:  MOVLW  01
49A4:  MOVLB  1
49A6:  MOVWF  xBE
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
49A8:  BRA    4AA6
49AA:  MOVF   xEA,W
49AC:  SUBLW  50
49AE:  BTFSS  FD8.2
49B0:  BRA    4AA6
....................         { 
....................           if (query) 
49B2:  MOVF   xE8,F
49B4:  BZ    4A02
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
49B6:  MOVLW  01
49B8:  MOVWF  xA0
49BA:  MOVLW  C0
49BC:  MOVWF  x9F
49BE:  MOVLW  46
49C0:  MOVWF  FF6
49C2:  MOVLW  0C
49C4:  MOVWF  FF7
49C6:  MOVLW  03
49C8:  MOVLB  2
49CA:  MOVWF  x30
49CC:  MOVLB  0
49CE:  CALL   2DA6
49D2:  MOVFF  AF,230
49D6:  MOVLW  1B
49D8:  MOVLB  2
49DA:  MOVWF  x31
49DC:  MOVLB  0
49DE:  CALL   2F1E
49E2:  MOVLW  0D
49E4:  MOVLB  2
49E6:  MOVWF  x39
49E8:  MOVLB  0
49EA:  CALL   2D84
....................             COM1_send_str(buf); 
49EE:  MOVLW  01
49F0:  MOVLB  2
49F2:  MOVWF  x69
49F4:  MOVLW  C0
49F6:  MOVWF  x68
49F8:  MOVLB  0
49FA:  CALL   2002
....................             } 
....................           else 
49FE:  BRA    4AA0
4A00:  MOVLB  1
....................             { 
....................             val = get_int(); 
4A02:  MOVLB  0
4A04:  CALL   2924
4A08:  MOVFF  02,209
4A0C:  MOVFF  01,208
....................             if (val < 2) 
4A10:  MOVLB  2
4A12:  MOVF   x09,F
4A14:  BNZ   4A2A
4A16:  MOVF   x08,W
4A18:  SUBLW  01
4A1A:  BNC   4A2A
....................               { 
....................               setup.clock_polarity = val; 
4A1C:  MOVFF  208,AF
....................               FPGA_set_reg0(); 
4A20:  MOVLB  0
4A22:  CALL   15EE
....................               } 
....................             else 
4A26:  BRA    4AA0
4A28:  MOVLB  2
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4A2A:  MOVLW  02
4A2C:  MOVWF  FEA
4A2E:  MOVLW  11
4A30:  MOVWF  FE9
4A32:  MOVLW  09
4A34:  MOVWF  01
4A36:  CLRF   FF7
4A38:  MOVLW  00
4A3A:  MOVLB  0
4A3C:  CALL   0894
4A40:  TBLRD*-
4A42:  TBLRD*+
4A44:  MOVFF  FF5,FEE
4A48:  DECFSZ 01,F
4A4A:  BRA    4A42
4A4C:  MOVLW  02
4A4E:  MOVLB  2
4A50:  MOVWF  x69
4A52:  MOVLW  11
4A54:  MOVWF  x68
4A56:  MOVLB  0
4A58:  CALL   2002
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4A5C:  MOVLW  01
4A5E:  MOVLB  1
4A60:  MOVWF  xA0
4A62:  MOVLW  74
4A64:  MOVWF  x9F
4A66:  MOVLW  4E
4A68:  MOVWF  FF6
4A6A:  MOVLW  0C
4A6C:  MOVWF  FF7
4A6E:  MOVLW  07
4A70:  MOVLB  2
4A72:  MOVWF  x30
4A74:  MOVLB  0
4A76:  CALL   2DA6
4A7A:  MOVFF  AF,230
4A7E:  MOVLW  1B
4A80:  MOVLB  2
4A82:  MOVWF  x31
4A84:  MOVLB  0
4A86:  CALL   2F1E
4A8A:  MOVLW  0D
4A8C:  MOVLB  2
4A8E:  MOVWF  x39
4A90:  MOVLB  0
4A92:  CALL   2D84
....................               ret = 0; 
4A96:  MOVLB  1
4A98:  CLRF   xBE
....................               break; 
4A9A:  MOVLB  0
4A9C:  GOTO   52A0
....................               } 
....................             } 
....................  
....................         ret = 1; 
4AA0:  MOVLW  01
4AA2:  MOVLB  1
4AA4:  MOVWF  xBE
....................         } 
....................       break; 
4AA6:  MOVLB  0
4AA8:  GOTO   52A0
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
4AAC:  MOVLB  1
4AAE:  MOVF   x28,F
4AB0:  BNZ   4ABA
4AB2:  MOVLB  0
4AB4:  GOTO   52A0
4AB8:  MOVLB  1
....................       switch (c2) 
....................         { 
4ABA:  MOVF   xEA,W
4ABC:  XORLW  50
4ABE:  MOVLB  0
4AC0:  BZ    4ACE
4AC2:  XORLW  04
4AC4:  BZ    4B42
4AC6:  XORLW  06
4AC8:  BTFSC  FD8.2
4ACA:  BRA    4D34
4ACC:  BRA    4D5C
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
4ACE:  MOVLW  14
4AD0:  MOVWF  01
4AD2:  MOVF   FC2,W
4AD4:  ANDLW  83
4AD6:  IORWF  01,W
4AD8:  MOVWF  FC2
....................           delay_us(50); 
4ADA:  MOVLW  42
4ADC:  MOVWF  00
4ADE:  DECFSZ 00,F
4AE0:  BRA    4ADE
4AE2:  NOP   
....................           val = read_adc(); 
4AE4:  BSF    FC2.1
4AE6:  BTFSC  FC2.1
4AE8:  BRA    4AE6
4AEA:  MOVFF  FC4,209
4AEE:  MOVLB  2
4AF0:  MOVFF  FC3,208
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
4AF4:  MOVLW  01
4AF6:  MOVLB  1
4AF8:  MOVWF  xA0
4AFA:  MOVLW  74
4AFC:  MOVWF  x9F
4AFE:  MOVLW  5A
4B00:  MOVWF  FF6
4B02:  MOVLW  0C
4B04:  MOVWF  FF7
4B06:  MOVLW  04
4B08:  MOVLB  2
4B0A:  MOVWF  x30
4B0C:  MOVLB  0
4B0E:  CALL   2DA6
4B12:  MOVLW  10
4B14:  MOVWF  FE9
4B16:  MOVFF  209,231
4B1A:  MOVFF  208,230
4B1E:  CALL   2DCE
4B22:  MOVLW  0D
4B24:  MOVLB  2
4B26:  MOVWF  x39
4B28:  MOVLB  0
4B2A:  CALL   2D84
4B2E:  MOVLW  0A
4B30:  MOVLB  2
4B32:  MOVWF  x39
4B34:  MOVLB  0
4B36:  CALL   2D84
....................           ret = 0; 
4B3A:  MOVLB  1
4B3C:  CLRF   xBE
....................           break; 
4B3E:  MOVLB  0
4B40:  BRA    4D5C
4B42:  MOVLB  1
....................         case 'T': 
.................... get_temp: 
....................           set_adc_channel(A2D_TEMP); // read temperature 
4B44:  MOVLW  18
4B46:  MOVWF  01
4B48:  MOVF   FC2,W
4B4A:  ANDLW  83
4B4C:  IORWF  01,W
4B4E:  MOVWF  FC2
....................           delay_us(50); 
4B50:  MOVLW  42
4B52:  MOVWF  00
4B54:  DECFSZ 00,F
4B56:  BRA    4B54
4B58:  NOP   
....................           val = read_adc(); 
4B5A:  BSF    FC2.1
4B5C:  BTFSC  FC2.1
4B5E:  BRA    4B5C
4B60:  MOVFF  FC4,209
4B64:  MOVLB  2
4B66:  MOVFF  FC3,208
....................           temp = (float)val / 1024.0 * 3.3; 
4B6A:  MOVFF  209,22B
4B6E:  MOVFF  208,22A
4B72:  MOVLB  0
4B74:  GOTO   3202
4B78:  MOVFF  00,22A
4B7C:  MOVFF  01,22B
4B80:  MOVFF  02,22C
4B84:  MOVFF  03,22D
4B88:  MOVFF  03,252
4B8C:  MOVFF  02,251
4B90:  MOVFF  01,250
4B94:  MOVFF  00,24F
4B98:  MOVLB  2
4B9A:  CLRF   x56
4B9C:  CLRF   x55
4B9E:  CLRF   x54
4BA0:  MOVLW  89
4BA2:  MOVWF  x53
4BA4:  MOVLB  0
4BA6:  CALL   16BA
4BAA:  MOVFF  00,22A
4BAE:  MOVFF  01,22B
4BB2:  MOVFF  02,22C
4BB6:  MOVFF  03,22D
4BBA:  MOVFF  03,252
4BBE:  MOVFF  02,251
4BC2:  MOVFF  01,250
4BC6:  MOVFF  00,24F
4BCA:  MOVLW  33
4BCC:  MOVLB  2
4BCE:  MOVWF  x56
4BD0:  MOVWF  x55
4BD2:  MOVLW  53
4BD4:  MOVWF  x54
4BD6:  MOVLW  80
4BD8:  MOVWF  x53
4BDA:  MOVLB  0
4BDC:  CALL   1818
4BE0:  MOVFF  03,207
4BE4:  MOVFF  02,206
4BE8:  MOVFF  01,205
4BEC:  MOVFF  00,204
....................           temp -= 0.75; 
4BF0:  BSF    FD8.1
4BF2:  MOVFF  207,22D
4BF6:  MOVFF  206,22C
4BFA:  MOVFF  205,22B
4BFE:  MOVFF  204,22A
4C02:  MOVLB  2
4C04:  CLRF   x31
4C06:  CLRF   x30
4C08:  MOVLW  40
4C0A:  MOVWF  x2F
4C0C:  MOVLW  7E
4C0E:  MOVWF  x2E
4C10:  MOVLB  0
4C12:  CALL   227C
4C16:  MOVFF  03,207
4C1A:  MOVFF  02,206
4C1E:  MOVFF  01,205
4C22:  MOVFF  00,204
....................           temp *= 100; 
4C26:  MOVFF  207,252
4C2A:  MOVFF  206,251
4C2E:  MOVFF  205,250
4C32:  MOVFF  204,24F
4C36:  MOVLB  2
4C38:  CLRF   x56
4C3A:  CLRF   x55
4C3C:  MOVLW  48
4C3E:  MOVWF  x54
4C40:  MOVLW  85
4C42:  MOVWF  x53
4C44:  MOVLB  0
4C46:  CALL   1818
4C4A:  MOVFF  03,207
4C4E:  MOVFF  02,206
4C52:  MOVFF  01,205
4C56:  MOVFF  00,204
....................           temp += 25.0; 
4C5A:  BCF    FD8.1
4C5C:  MOVFF  207,22D
4C60:  MOVFF  206,22C
4C64:  MOVFF  205,22B
4C68:  MOVFF  204,22A
4C6C:  MOVLB  2
4C6E:  CLRF   x31
4C70:  CLRF   x30
4C72:  MOVLW  48
4C74:  MOVWF  x2F
4C76:  MOVLW  83
4C78:  MOVWF  x2E
4C7A:  MOVLB  0
4C7C:  CALL   227C
4C80:  MOVFF  03,207
4C84:  MOVFF  02,206
4C88:  MOVFF  01,205
4C8C:  MOVFF  00,204
....................           if(setup.pwr) 
4C90:  MOVF   xAC,W
4C92:  IORWF  xAD,W
4C94:  BZ    4CF0
....................             { 
....................             sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", temp); 
4C96:  MOVLW  01
4C98:  MOVLB  1
4C9A:  MOVWF  xA0
4C9C:  MOVLW  74
4C9E:  MOVWF  x9F
4CA0:  MOVLW  64
4CA2:  MOVWF  FF6
4CA4:  MOVLW  0C
4CA6:  MOVWF  FF7
4CA8:  MOVLW  06
4CAA:  MOVLB  2
4CAC:  MOVWF  x30
4CAE:  MOVLB  0
4CB0:  CALL   2DA6
4CB4:  MOVLW  05
4CB6:  MOVWF  FE9
4CB8:  MOVFF  207,22D
4CBC:  MOVFF  206,22C
4CC0:  MOVFF  205,22B
4CC4:  MOVFF  204,22A
4CC8:  MOVLW  02
4CCA:  MOVLB  2
4CCC:  MOVWF  x2E
4CCE:  MOVLB  0
4CD0:  GOTO   323A
4CD4:  MOVLW  6F
4CD6:  MOVWF  FF6
4CD8:  MOVLW  0C
4CDA:  MOVWF  FF7
4CDC:  MOVLW  08
4CDE:  MOVLB  2
4CE0:  MOVWF  x30
4CE2:  MOVLB  0
4CE4:  CALL   2DA6
....................             ret = 0; 
4CE8:  MOVLB  1
4CEA:  CLRF   xBE
....................             } 
....................             else 
4CEC:  BRA    4D30
4CEE:  MOVLB  0
....................             { 
....................             temp = 0; 
4CF0:  MOVLB  2
4CF2:  CLRF   x07
4CF4:  CLRF   x06
4CF6:  CLRF   x05
4CF8:  CLRF   x04
....................             COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
4CFA:  MOVLW  02
4CFC:  MOVWF  FEA
4CFE:  MOVLW  11
4D00:  MOVWF  FE9
4D02:  MOVLW  15
4D04:  MOVWF  01
4D06:  CLRF   FF7
4D08:  MOVLW  00
4D0A:  MOVLB  0
4D0C:  CALL   08CE
4D10:  TBLRD*-
4D12:  TBLRD*+
4D14:  MOVFF  FF5,FEE
4D18:  DECFSZ 01,F
4D1A:  BRA    4D12
4D1C:  MOVLW  02
4D1E:  MOVLB  2
4D20:  MOVWF  x69
4D22:  MOVLW  11
4D24:  MOVWF  x68
4D26:  MOVLB  0
4D28:  CALL   2002
....................             ret = 0; 
4D2C:  MOVLB  1
4D2E:  CLRF   xBE
....................              
....................             } 
....................           break; 
4D30:  MOVLB  0
4D32:  BRA    4D5C
....................  
....................         case 'R': 
....................                 set_adc_channel(A2D_PREV); // select forward power input 
4D34:  MOVLW  10
4D36:  MOVWF  01
4D38:  MOVF   FC2,W
4D3A:  ANDLW  83
4D3C:  IORWF  01,W
4D3E:  MOVWF  FC2
....................                 delay_us(20); 
4D40:  MOVLW  1A
4D42:  MOVWF  00
4D44:  DECFSZ 00,F
4D46:  BRA    4D44
4D48:  NOP   
....................                 revp = read_adc(); 
4D4A:  BSF    FC2.1
4D4C:  BTFSC  FC2.1
4D4E:  BRA    4D4C
4D50:  MOVFF  FC4,105
4D54:  MOVLB  1
4D56:  MOVFF  FC3,104
4D5A:  MOVLB  0
....................                 } 
....................               break; 
4D5C:  BRA    52A0
....................       break; 
4D5E:  BRA    52A0
....................  
....................       case 'Q': //statusl      if (!ttccp_login) break; 
....................  
....................       COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
4D60:  MOVLW  02
4D62:  MOVWF  FEA
4D64:  MOVLW  11
4D66:  MOVWF  FE9
4D68:  MOVLW  19
4D6A:  MOVWF  01
4D6C:  CLRF   FF7
4D6E:  MOVLW  00
4D70:  CALL   08F4
4D74:  TBLRD*-
4D76:  TBLRD*+
4D78:  MOVFF  FF5,FEE
4D7C:  DECFSZ 01,F
4D7E:  BRA    4D76
4D80:  MOVLW  02
4D82:  MOVLB  2
4D84:  MOVWF  x69
4D86:  MOVLW  11
4D88:  MOVWF  x68
4D8A:  MOVLB  0
4D8C:  CALL   2002
....................       COM1_send_str(VERSION); 
4D90:  MOVLW  02
4D92:  MOVWF  FEA
4D94:  MOVLW  11
4D96:  MOVWF  FE9
4D98:  MOVLW  0F
4D9A:  MOVWF  01
4D9C:  CLRF   FF7
4D9E:  MOVLW  00
4DA0:  CALL   08AE
4DA4:  TBLRD*-
4DA6:  TBLRD*+
4DA8:  MOVFF  FF5,FEE
4DAC:  DECFSZ 01,F
4DAE:  BRA    4DA6
4DB0:  MOVLW  02
4DB2:  MOVLB  2
4DB4:  MOVWF  x69
4DB6:  MOVLW  11
4DB8:  MOVWF  x68
4DBA:  MOVLB  0
4DBC:  CALL   2002
....................       sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................               setup.unit_ID, setup.year, setup.week); 
4DC0:  MOVLW  01
4DC2:  MOVLB  1
4DC4:  MOVWF  xA0
4DC6:  MOVLW  C0
4DC8:  MOVWF  x9F
4DCA:  MOVLW  78
4DCC:  MOVWF  FF6
4DCE:  MOVLW  0C
4DD0:  MOVWF  FF7
4DD2:  MOVLW  05
4DD4:  MOVLB  2
4DD6:  MOVWF  x30
4DD8:  MOVLB  0
4DDA:  CALL   2DA6
4DDE:  MOVLW  10
4DE0:  MOVWF  FE9
4DE2:  MOVFF  F1,231
4DE6:  MOVFF  F0,230
4DEA:  CALL   2DCE
4DEE:  MOVLW  80
4DF0:  MOVWF  FF6
4DF2:  MOVLW  0C
4DF4:  MOVWF  FF7
4DF6:  MOVLW  04
4DF8:  MOVLB  2
4DFA:  MOVWF  x30
4DFC:  MOVLB  0
4DFE:  CALL   2DA6
4E02:  MOVLW  0B
4E04:  MOVWF  FE9
4E06:  MOVFF  EE,231
4E0A:  MOVFF  ED,230
4E0E:  CALL   2DCE
4E12:  MOVFF  EF,230
4E16:  MOVLW  01
4E18:  MOVLB  2
4E1A:  MOVWF  x31
4E1C:  MOVLB  0
4E1E:  CALL   2F1E
4E22:  MOVLW  0D
4E24:  MOVLB  2
4E26:  MOVWF  x39
4E28:  MOVLB  0
4E2A:  CALL   2D84
....................       COM1_send_str(buf); 
4E2E:  MOVLW  01
4E30:  MOVLB  2
4E32:  MOVWF  x69
4E34:  MOVLW  C0
4E36:  MOVWF  x68
4E38:  MOVLB  0
4E3A:  CALL   2002
....................  
....................                 set_adc_channel(A2D_PREV); // select forward power input 
4E3E:  MOVLW  10
4E40:  MOVWF  01
4E42:  MOVF   FC2,W
4E44:  ANDLW  83
4E46:  IORWF  01,W
4E48:  MOVWF  FC2
....................                 delay_us(20); 
4E4A:  MOVLW  1A
4E4C:  MOVWF  00
4E4E:  DECFSZ 00,F
4E50:  BRA    4E4E
4E52:  NOP   
....................                 revp = read_adc(); 
4E54:  BSF    FC2.1
4E56:  BTFSC  FC2.1
4E58:  BRA    4E56
4E5A:  MOVFF  FC4,105
4E5E:  MOVLB  1
4E60:  MOVFF  FC3,104
....................  
....................           if (revp <= 580) 
4E64:  MOVF   x05,W
4E66:  SUBLW  02
4E68:  BNC   4E92
4E6A:  BNZ   4E72
4E6C:  MOVF   x04,W
4E6E:  SUBLW  44
4E70:  BNC   4E92
....................           strcpy(revstat, "GOOD"); 
4E72:  MOVLW  01
4E74:  MOVWF  FEA
4E76:  MOVLW  EB
4E78:  MOVWF  FE9
4E7A:  MOVLW  00
4E7C:  MOVLB  0
4E7E:  CALL   091E
4E82:  TBLRD*-
4E84:  TBLRD*+
4E86:  MOVF   FF5,W
4E88:  MOVWF  FEE
4E8A:  IORLW  00
4E8C:  BNZ   4E84
....................           else 
4E8E:  BRA    4EAE
4E90:  MOVLB  1
....................           strcpy(revstat, "BAD"); 
4E92:  MOVLW  01
4E94:  MOVWF  FEA
4E96:  MOVLW  EB
4E98:  MOVWF  FE9
4E9A:  MOVLW  00
4E9C:  MOVLB  0
4E9E:  CALL   0934
4EA2:  TBLRD*-
4EA4:  TBLRD*+
4EA6:  MOVF   FF5,W
4EA8:  MOVWF  FEE
4EAA:  IORLW  00
4EAC:  BNZ   4EA4
....................  
....................           if(setup.rp) 
4EAE:  MOVF   xF8,W
4EB0:  IORWF  xF9,W
4EB2:  BZ    4EBC
....................             rp=0; 
4EB4:  MOVLB  2
4EB6:  CLRF   x0B
4EB8:  CLRF   x0A
....................             else 
4EBA:  BRA    4EC4
....................               rp=1; 
4EBC:  MOVLB  2
4EBE:  CLRF   x0B
4EC0:  MOVLW  01
4EC2:  MOVWF  x0A
....................  
....................  
....................       sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................               setup.frequency, revstat, setup.power_level+20, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
4EC4:  MOVLW  14
4EC6:  MOVLB  0
4EC8:  ADDWF  xBA,W
4ECA:  MOVLB  2
4ECC:  MOVWF  x2A
4ECE:  MOVLW  00
4ED0:  MOVLB  0
4ED2:  ADDWFC xBB,W
4ED4:  MOVLB  2
4ED6:  MOVWF  x2B
4ED8:  MOVFF  AB,22F
4EDC:  MOVFF  AA,22E
4EE0:  CLRF   x31
4EE2:  MOVLW  64
4EE4:  MOVWF  x30
4EE6:  MOVLB  0
4EE8:  CALL   33EA
4EEC:  MOVFF  02,22D
4EF0:  MOVFF  01,22C
4EF4:  MOVFF  AB,22F
4EF8:  MOVFF  AA,22E
4EFC:  MOVLB  2
4EFE:  CLRF   x31
4F00:  MOVLW  64
4F02:  MOVWF  x30
4F04:  MOVLB  0
4F06:  CALL   33EA
4F0A:  MOVFF  00,22E
4F0E:  MOVFF  03,22F
4F12:  MOVLW  01
4F14:  MOVLB  1
4F16:  MOVWF  xA0
4F18:  MOVLW  C0
4F1A:  MOVWF  x9F
4F1C:  MOVLW  90
4F1E:  MOVWF  FF6
4F20:  MOVLW  0C
4F22:  MOVWF  FF7
4F24:  MOVLW  08
4F26:  MOVLB  2
4F28:  MOVWF  x30
4F2A:  MOVLB  0
4F2C:  CALL   2DA6
4F30:  MOVLW  10
4F32:  MOVWF  FE9
4F34:  MOVFF  B9,231
4F38:  MOVFF  B8,230
4F3C:  CALL   2DCE
4F40:  MOVLW  9B
4F42:  MOVWF  FF6
4F44:  MOVLW  0C
4F46:  MOVWF  FF7
4F48:  MOVLW  06
4F4A:  MOVLB  2
4F4C:  MOVWF  x30
4F4E:  MOVLB  0
4F50:  CALL   2DA6
4F54:  MOVLW  01
4F56:  MOVWF  FEA
4F58:  MOVLW  EB
4F5A:  MOVWF  FE9
4F5C:  GOTO   3430
4F60:  MOVLW  A3
4F62:  MOVWF  FF6
4F64:  MOVLW  0C
4F66:  MOVWF  FF7
4F68:  MOVLW  07
4F6A:  MOVLB  2
4F6C:  MOVWF  x30
4F6E:  MOVLB  0
4F70:  CALL   2DA6
4F74:  MOVLW  10
4F76:  MOVWF  FE9
4F78:  MOVFF  22B,231
4F7C:  MOVFF  22A,230
4F80:  CALL   2DCE
4F84:  MOVLW  AD
4F86:  MOVWF  FF6
4F88:  MOVLW  0C
4F8A:  MOVWF  FF7
4F8C:  MOVLW  05
4F8E:  MOVLB  2
4F90:  MOVWF  x30
4F92:  MOVLB  0
4F94:  CALL   2DA6
4F98:  MOVLW  10
4F9A:  MOVWF  FE9
4F9C:  MOVFF  22D,231
4FA0:  MOVFF  22C,230
4FA4:  CALL   2DCE
4FA8:  MOVLW  2E
4FAA:  MOVLB  2
4FAC:  MOVWF  x39
4FAE:  MOVLB  0
4FB0:  CALL   2D84
4FB4:  MOVLW  10
4FB6:  MOVWF  FE9
4FB8:  MOVFF  22F,231
4FBC:  MOVFF  22E,230
4FC0:  CALL   2DCE
4FC4:  MOVLW  B9
4FC6:  MOVWF  FF6
4FC8:  MOVLW  0C
4FCA:  MOVWF  FF7
4FCC:  MOVLW  09
4FCE:  MOVLB  2
4FD0:  MOVWF  x30
4FD2:  MOVLB  0
4FD4:  CALL   2DA6
4FD8:  MOVFF  AE,230
4FDC:  MOVLW  1B
4FDE:  MOVLB  2
4FE0:  MOVWF  x31
4FE2:  MOVLB  0
4FE4:  CALL   2F1E
4FE8:  MOVLW  C4
4FEA:  MOVWF  FF6
4FEC:  MOVLW  0C
4FEE:  MOVWF  FF7
4FF0:  MOVLW  05
4FF2:  MOVLB  2
4FF4:  MOVWF  x30
4FF6:  MOVLB  0
4FF8:  CALL   2DA6
4FFC:  MOVFF  B1,230
5000:  MOVLW  1B
5002:  MOVLB  2
5004:  MOVWF  x31
5006:  MOVLB  0
5008:  CALL   2F1E
500C:  MOVLW  CB
500E:  MOVWF  FF6
5010:  MOVLW  0C
5012:  MOVWF  FF7
5014:  MOVLW  05
5016:  MOVLB  2
5018:  MOVWF  x30
501A:  MOVLB  0
501C:  CALL   2DA6
5020:  MOVLW  10
5022:  MOVWF  FE9
5024:  MOVFF  AD,231
5028:  MOVFF  AC,230
502C:  CALL   2DCE
5030:  MOVLW  0D
5032:  MOVLB  2
5034:  MOVWF  x39
5036:  MOVLB  0
5038:  CALL   2D84
....................       COM1_send_str(buf); 
503C:  MOVLW  01
503E:  MOVLB  2
5040:  MOVWF  x69
5042:  MOVLW  C0
5044:  MOVWF  x68
5046:  MOVLB  0
5048:  CALL   2002
....................  
....................       sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                 setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                         setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                         setup.clock_polarity); 
504C:  MOVLW  14
504E:  ADDWF  xF2,W
5050:  MOVLB  2
5052:  MOVWF  x2A
5054:  MOVLW  00
5056:  MOVLB  0
5058:  ADDWFC xF3,W
505A:  MOVLB  2
505C:  MOVWF  x2B
505E:  MOVLW  01
5060:  MOVLB  1
5062:  MOVWF  xA0
5064:  MOVLW  C0
5066:  MOVWF  x9F
5068:  MOVLW  D6
506A:  MOVWF  FF6
506C:  MOVLW  0C
506E:  MOVWF  FF7
5070:  MOVLW  06
5072:  MOVLB  2
5074:  MOVWF  x30
5076:  MOVLB  0
5078:  CALL   2DA6
507C:  MOVFF  B6,230
5080:  MOVLW  1B
5082:  MOVLB  2
5084:  MOVWF  x31
5086:  MOVLB  0
5088:  CALL   2F1E
508C:  MOVLW  DE
508E:  MOVWF  FF6
5090:  MOVLW  0C
5092:  MOVWF  FF7
5094:  MOVLW  05
5096:  MOVLB  2
5098:  MOVWF  x30
509A:  MOVLB  0
509C:  CALL   2DA6
50A0:  MOVFF  B4,230
50A4:  MOVLW  1B
50A6:  MOVLB  2
50A8:  MOVWF  x31
50AA:  MOVLB  0
50AC:  CALL   2F1E
50B0:  MOVLW  E5
50B2:  MOVWF  FF6
50B4:  MOVLW  0C
50B6:  MOVWF  FF7
50B8:  MOVLW  05
50BA:  MOVLB  2
50BC:  MOVWF  x30
50BE:  MOVLB  0
50C0:  CALL   2DA6
50C4:  MOVFF  B0,230
50C8:  MOVLW  1B
50CA:  MOVLB  2
50CC:  MOVWF  x31
50CE:  MOVLB  0
50D0:  CALL   2F1E
50D4:  MOVLW  EC
50D6:  MOVWF  FF6
50D8:  MOVLW  0C
50DA:  MOVWF  FF7
50DC:  MOVLW  05
50DE:  MOVLB  2
50E0:  MOVWF  x30
50E2:  MOVLB  0
50E4:  CALL   2DA6
50E8:  MOVLW  10
50EA:  MOVWF  FE9
50EC:  MOVFF  20B,231
50F0:  MOVFF  20A,230
50F4:  CALL   2DCE
50F8:  MOVLW  F4
50FA:  MOVWF  FF6
50FC:  MOVLW  0C
50FE:  MOVWF  FF7
5100:  MOVLW  05
5102:  MOVLB  2
5104:  MOVWF  x30
5106:  MOVLB  0
5108:  CALL   2DA6
510C:  MOVFF  B2,230
5110:  MOVLW  1B
5112:  MOVLB  2
5114:  MOVWF  x31
5116:  MOVLB  0
5118:  CALL   2F1E
511C:  MOVLW  FB
511E:  MOVWF  FF6
5120:  MOVLW  0C
5122:  MOVWF  FF7
5124:  MOVLW  05
5126:  MOVLB  2
5128:  MOVWF  x30
512A:  MOVLB  0
512C:  CALL   2DA6
5130:  MOVFF  B3,230
5134:  MOVLW  1B
5136:  MOVLB  2
5138:  MOVWF  x31
513A:  MOVLB  0
513C:  CALL   2F1E
5140:  MOVLW  02
5142:  MOVWF  FF6
5144:  MOVLW  0D
5146:  MOVWF  FF7
5148:  MOVLW  05
514A:  MOVLB  2
514C:  MOVWF  x30
514E:  MOVLB  0
5150:  CALL   2DA6
5154:  MOVLW  10
5156:  MOVWF  FE9
5158:  MOVFF  22B,231
515C:  MOVFF  22A,230
5160:  CALL   2DCE
5164:  MOVLW  0A
5166:  MOVWF  FF6
5168:  MOVLW  0D
516A:  MOVWF  FF7
516C:  MOVLW  05
516E:  MOVLB  2
5170:  MOVWF  x30
5172:  MOVLB  0
5174:  CALL   2DA6
5178:  MOVLW  10
517A:  MOVWF  FE9
517C:  MOVFF  F5,231
5180:  MOVFF  F4,230
5184:  CALL   2DCE
5188:  MOVLW  12
518A:  MOVWF  FF6
518C:  MOVLW  0D
518E:  MOVWF  FF7
5190:  MOVLW  05
5192:  MOVLB  2
5194:  MOVWF  x30
5196:  MOVLB  0
5198:  CALL   2DA6
519C:  MOVLW  10
519E:  MOVWF  FE9
51A0:  MOVFF  F7,231
51A4:  MOVFF  F6,230
51A8:  CALL   2DCE
51AC:  MOVLW  1A
51AE:  MOVWF  FF6
51B0:  MOVLW  0D
51B2:  MOVWF  FF7
51B4:  MOVLW  05
51B6:  MOVLB  2
51B8:  MOVWF  x30
51BA:  MOVLB  0
51BC:  CALL   2DA6
51C0:  MOVFF  AF,230
51C4:  MOVLW  1B
51C6:  MOVLB  2
51C8:  MOVWF  x31
51CA:  MOVLB  0
51CC:  CALL   2F1E
51D0:  MOVLW  0D
51D2:  MOVLB  2
51D4:  MOVWF  x39
51D6:  MOVLB  0
51D8:  CALL   2D84
....................                                         COM1_send_str(buf); 
51DC:  MOVLW  01
51DE:  MOVLB  2
51E0:  MOVWF  x69
51E2:  MOVLW  C0
51E4:  MOVWF  x68
51E6:  MOVLB  0
51E8:  CALL   2002
....................                                          
....................       sprintf(buf, "\r\n\nUT=%u, US=%u\r" setup.UART_Time, setup.UART_Status); // VERSION 3.3 17.1.2016 
51EC:  MOVLW  01
51EE:  MOVLB  1
51F0:  MOVWF  xA0
51F2:  MOVLW  C0
51F4:  MOVWF  x9F
51F6:  MOVLW  24
51F8:  MOVWF  FF6
51FA:  MOVLW  0D
51FC:  MOVWF  FF7
51FE:  MOVLW  06
5200:  MOVLB  2
5202:  MOVWF  x30
5204:  MOVLB  0
5206:  CALL   2DA6
520A:  MOVFF  FA,230
520E:  MOVLW  1B
5210:  MOVLB  2
5212:  MOVWF  x31
5214:  MOVLB  0
5216:  CALL   2F1E
521A:  MOVLW  2C
521C:  MOVWF  FF6
521E:  MOVLW  0D
5220:  MOVWF  FF7
5222:  MOVLW  05
5224:  MOVLB  2
5226:  MOVWF  x30
5228:  MOVLB  0
522A:  CALL   2DA6
522E:  MOVFF  FB,230
5232:  MOVLW  1B
5234:  MOVLB  2
5236:  MOVWF  x31
5238:  MOVLB  0
523A:  CALL   2F1E
523E:  MOVLW  0D
5240:  MOVLB  2
5242:  MOVWF  x39
5244:  MOVLB  0
5246:  CALL   2D84
....................       COM1_send_str(buf); 
524A:  MOVLW  01
524C:  MOVLB  2
524E:  MOVWF  x69
5250:  MOVLW  C0
5252:  MOVWF  x68
5254:  MOVLB  0
5256:  CALL   2002
....................  
....................       goto get_temp; 
525A:  MOVLB  1
525C:  BRA    4B44
....................       break; 
525E:  MOVLB  0
5260:  BRA    52A0
....................       default: 
....................       	{ 
....................          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5262:  MOVLB  1
5264:  MOVF   x28,F
5266:  BNZ   526E
5268:  MOVLB  0
526A:  BRA    52A0
526C:  MOVLB  1
....................          COM1_send_str("\r\nFAIL\r\n"); 
526E:  MOVLW  02
5270:  MOVWF  FEA
5272:  MOVLW  11
5274:  MOVWF  FE9
5276:  MOVLW  09
5278:  MOVWF  01
527A:  CLRF   FF7
527C:  MOVLW  00
527E:  MOVLB  0
5280:  CALL   0894
5284:  TBLRD*-
5286:  TBLRD*+
5288:  MOVFF  FF5,FEE
528C:  DECFSZ 01,F
528E:  BRA    5286
5290:  MOVLW  02
5292:  MOVLB  2
5294:  MOVWF  x69
5296:  MOVLW  11
5298:  MOVWF  x68
529A:  MOVLB  0
529C:  CALL   2002
52A0:  MOVLB  2
....................          
....................         } 
....................     } 
.................... aaa: 
....................   return; 
....................   } 
52A2:  MOVLB  0
52A4:  GOTO   539C (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
52E2:  MOVF   56,W
52E4:  XORLW  00
52E6:  BZ    52F4
52E8:  XORLW  02
52EA:  BZ    5322
52EC:  XORLW  01
52EE:  BTFSC  FD8.2
52F0:  BRA    543E
52F2:  BRA    543E
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
52F4:  CLRF   57
....................       comm_state = COMM_WAIT_CR; 
52F6:  MOVLW  02
52F8:  MOVWF  56
....................       comm_timeout = 0; 
52FA:  CLRF   xA9
52FC:  CLRF   xA8
....................       if (ttccp_login) 
52FE:  MOVLB  1
5300:  MOVF   x28,F
5302:  BZ    531E
....................       COM1_send_str("\r>"); 
5304:  MOVLW  0D
5306:  MOVWF  xB8
5308:  MOVLW  3E
530A:  MOVWF  xB9
530C:  CLRF   xBA
530E:  MOVLW  01
5310:  MOVLB  2
5312:  MOVWF  x69
5314:  MOVLW  B8
5316:  MOVWF  x68
5318:  MOVLB  0
531A:  CALL   2002
....................       break; 
531E:  MOVLB  0
5320:  BRA    543E
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
5322:  MOVF   33,F
5324:  BTFSC  FD8.2
5326:  BRA    5412
....................         { 
....................         comm_timeout = 0; 
5328:  CLRF   xA9
532A:  CLRF   xA8
....................         chr = COM1_get_chr(); 
532C:  CALL   281E
5330:  MOVLB  1
5332:  CLRF   xB5
5334:  MOVFF  01,1B4
....................         comm_buf[comm_ridx++] = chr; 
5338:  MOVF   57,W
533A:  INCF   57,F
533C:  CLRF   03
533E:  ADDLW  58
5340:  MOVWF  FE9
5342:  MOVLW  00
5344:  ADDWFC 03,W
5346:  MOVWF  FEA
5348:  MOVFF  1B4,FEF
....................         if (comm_ridx > 70) 
534C:  MOVF   57,W
534E:  SUBLW  46
5350:  BC    535A
....................           { 
....................           comm_state = 0; 
5352:  CLRF   56
....................           break; 
5354:  MOVLB  0
5356:  BRA    543E
5358:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
535A:  MOVF   xB4,W
535C:  SUBLW  0D
535E:  BNZ   5364
5360:  MOVF   xB5,F
5362:  BZ    536E
5364:  MOVF   xB4,W
5366:  SUBLW  3B
5368:  BNZ   5414
536A:  MOVF   xB5,F
536C:  BNZ   5414
....................           { 
....................           if (chr == ';') 
536E:  MOVF   xB4,W
5370:  SUBLW  3B
5372:  BNZ   5390
5374:  MOVF   xB5,F
5376:  BNZ   5390
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
5378:  MOVLW  01
537A:  SUBWF  57,W
537C:  CLRF   03
537E:  ADDLW  58
5380:  MOVWF  FE9
5382:  MOVLW  00
5384:  ADDWFC 03,W
5386:  MOVWF  FEA
5388:  MOVLW  0D
538A:  MOVWF  FEF
....................             comm_ridx = 0; 
538C:  CLRF   57
....................             } 
....................           else 
538E:  BRA    5396
....................             COM1_init(); 
5390:  MOVLB  0
5392:  CALL   0D5C
....................           process_ttccp_commands(); 
5396:  MOVLB  0
5398:  GOTO   3456
....................           if (debug_mode) 
539C:  MOVLB  1
539E:  MOVF   x3F,F
53A0:  BZ    53AC
....................           	if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
53A2:  MOVF   x28,F
53A4:  BNZ   53AC
53A6:  MOVLB  0
53A8:  BRA    543E
53AA:  MOVLB  1
....................             COM1_send_str("\r\nOK\n"); 
53AC:  MOVLW  0D
53AE:  MOVWF  xB8
53B0:  MOVLW  0A
53B2:  MOVWF  xB9
53B4:  MOVLW  4F
53B6:  MOVWF  xBA
53B8:  MOVLW  4B
53BA:  MOVWF  xBB
53BC:  MOVLW  0A
53BE:  MOVWF  xBC
53C0:  CLRF   xBD
53C2:  MOVLW  01
53C4:  MOVLB  2
53C6:  MOVWF  x69
53C8:  MOVLW  B8
53CA:  MOVWF  x68
53CC:  MOVLB  0
53CE:  CALL   2002
....................           if (ret == 1) 
53D2:  MOVLB  1
53D4:  DECFSZ xB6,W
53D6:  BRA    5402
53D8:  MOVF   xB7,F
53DA:  BNZ   5402
....................             { 
.................... 	          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
53DC:  MOVF   x28,F
53DE:  BNZ   53E6
53E0:  MOVLB  0
53E2:  BRA    543E
53E4:  MOVLB  1
....................             COM1_send_str("\n\r"); 
53E6:  MOVLW  0A
53E8:  MOVWF  xB8
53EA:  MOVLW  0D
53EC:  MOVWF  xB9
53EE:  CLRF   xBA
53F0:  MOVLW  01
53F2:  MOVLB  2
53F4:  MOVWF  x69
53F6:  MOVLW  B8
53F8:  MOVWF  x68
53FA:  MOVLB  0
53FC:  CALL   2002
....................             } 
....................           else 
5400:  BRA    5412
....................             COM1_send_str(ttccp_error_message); 
5402:  MOVLW  01
5404:  MOVLB  2
5406:  MOVWF  x69
5408:  MOVLW  74
540A:  MOVWF  x68
540C:  MOVLB  0
540E:  CALL   2002
5412:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
5414:  MOVF   56,W
5416:  SUBLW  01
5418:  BC    543A
....................         if (TMR_100MS_COMM_TO) 
541A:  BTFSS  2C.1
541C:  BRA    543A
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
541E:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
5420:  MOVLB  0
5422:  INCF   xA8,F
5424:  BTFSC  FD8.2
5426:  INCF   xA9,F
5428:  MOVF   xA9,W
542A:  SUBLW  26
542C:  BC    543A
542E:  XORLW  FF
5430:  BNZ   5438
5432:  MOVF   xA8,W
5434:  SUBLW  10
5436:  BC    543A
....................             comm_state = 0; 
5438:  CLRF   56
....................           } 
....................       break; 
543A:  MOVLB  0
543C:  BRA    543E
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
543E:  GOTO   654E (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
63AA:  MOVF   56,W
63AC:  ADDLW  FC
63AE:  BTFSC  FD8.0
63B0:  BRA    64F2
63B2:  ADDLW  04
63B4:  GOTO   64F6
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
63B8:  CLRF   57
....................       comm_state++; 
63BA:  INCF   56,F
....................       break; 
63BC:  BRA    64F2
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
63BE:  MOVF   33,F
63C0:  BZ    63EC
....................         if ((chr = COM1_get_chr()) == '$') 
63C2:  CALL   281E
63C6:  MOVLB  1
63C8:  CLRF   xB5
63CA:  MOVFF  01,1B4
63CE:  MOVF   xB4,W
63D0:  SUBLW  24
63D2:  BNZ   63E2
63D4:  MOVF   xB5,F
63D6:  BNZ   63E2
....................           { 
....................           comm_state++; 
63D8:  INCF   56,F
....................           comm_timeout = 0; 
63DA:  MOVLB  0
63DC:  CLRF   xA9
63DE:  CLRF   xA8
....................           } 
....................         else 
63E0:  BRA    63EC
....................           inc_dec(chr); 
63E2:  MOVFF  1B4,1CB
63E6:  MOVLB  0
63E8:  GOTO   54CA
....................       break; 
63EC:  BRA    64F2
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
63EE:  MOVF   33,F
63F0:  BTFSC  FD8.2
63F2:  BRA    64C6
....................         { 
....................         comm_timeout = 0; 
63F4:  CLRF   xA9
63F6:  CLRF   xA8
....................         chr = COM1_get_chr(); 
63F8:  CALL   281E
63FC:  MOVLB  1
63FE:  CLRF   xB5
6400:  MOVFF  01,1B4
....................         comm_buf[comm_ridx++] = chr; 
6404:  MOVF   57,W
6406:  INCF   57,F
6408:  CLRF   03
640A:  ADDLW  58
640C:  MOVWF  FE9
640E:  MOVLW  00
6410:  ADDWFC 03,W
6412:  MOVWF  FEA
6414:  MOVFF  1B4,FEF
....................         if (comm_ridx > 70) 
6418:  MOVF   57,W
641A:  SUBLW  46
641C:  BC    6426
....................           { 
....................           comm_state = 0; 
641E:  CLRF   56
....................           break; 
6420:  MOVLB  0
6422:  BRA    64F2
6424:  MOVLB  1
....................           } 
....................         if (chr == 13) 
6426:  MOVF   xB4,W
6428:  SUBLW  0D
642A:  BNZ   6488
642C:  MOVF   xB5,F
642E:  BNZ   6488
....................           { 
....................           ret = process_dollar_commands(); 
6430:  MOVLB  0
6432:  BRA    5CCC
6434:  MOVLB  1
6436:  CLRF   xB7
6438:  MOVFF  01,1B6
....................           if (ret == 1) 
643C:  DECFSZ xB6,W
643E:  BRA    6444
6440:  MOVF   xB7,F
6442:  BNZ   6444
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
6444:  INCFSZ xB6,W
6446:  BRA    644C
6448:  MOVF   xB7,F
644A:  BZ    647E
....................             COM1_send_str("\r\nOK\r\n*"); 
644C:  MOVLW  01
644E:  MOVWF  FEA
6450:  MOVLW  B8
6452:  MOVWF  FE9
6454:  MOVLW  08
6456:  MOVWF  01
6458:  CLRF   FF7
645A:  MOVLW  00
645C:  MOVLB  0
645E:  CALL   0948
6462:  TBLRD*-
6464:  TBLRD*+
6466:  MOVFF  FF5,FEE
646A:  DECFSZ 01,F
646C:  BRA    6464
646E:  MOVLW  01
6470:  MOVLB  2
6472:  MOVWF  x69
6474:  MOVLW  B8
6476:  MOVWF  x68
6478:  MOVLB  0
647A:  CALL   2002
....................           COM1_init(); 
647E:  MOVLB  0
6480:  CALL   0D5C
....................           } 
....................         else if (chr == 27) 
6484:  BRA    64C6
6486:  MOVLB  1
6488:  MOVF   xB4,W
648A:  SUBLW  1B
648C:  BNZ   64C8
648E:  MOVF   xB5,F
6490:  BNZ   64C8
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
6492:  MOVLW  01
6494:  MOVWF  FEA
6496:  MOVLW  C0
6498:  MOVWF  FE9
649A:  MOVLW  0B
649C:  MOVWF  01
649E:  CLRF   FF7
64A0:  MOVLW  00
64A2:  MOVLB  0
64A4:  CALL   0960
64A8:  TBLRD*-
64AA:  TBLRD*+
64AC:  MOVFF  FF5,FEE
64B0:  DECFSZ 01,F
64B2:  BRA    64AA
64B4:  MOVLW  01
64B6:  MOVLB  2
64B8:  MOVWF  x69
64BA:  MOVLW  C0
64BC:  MOVWF  x68
64BE:  MOVLB  0
64C0:  CALL   2002
....................           comm_state = 0; 
64C4:  CLRF   56
64C6:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
64C8:  MOVF   56,W
64CA:  SUBLW  01
64CC:  BC    64EE
....................         if (TMR_100MS_COMM_TO) 
64CE:  BTFSS  2C.1
64D0:  BRA    64EE
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
64D2:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
64D4:  MOVLB  0
64D6:  INCF   xA8,F
64D8:  BTFSC  FD8.2
64DA:  INCF   xA9,F
64DC:  MOVF   xA9,W
64DE:  SUBLW  26
64E0:  BC    64EE
64E2:  XORLW  FF
64E4:  BNZ   64EC
64E6:  MOVF   xA8,W
64E8:  SUBLW  10
64EA:  BC    64EE
....................             comm_state = 0; 
64EC:  CLRF   56
....................           } 
....................       break; 
64EE:  MOVLB  0
64F0:  BRA    64F2
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
64F2:  GOTO   654E (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
6518:  BTFSS  FAB.1
651A:  BRA    652C
....................     { 
....................     OERR = 0; 
651C:  BCF    FAB.1
....................     CREN = 0; 
651E:  BCF    FAB.4
....................     delay_us(5); 
6520:  MOVLW  06
6522:  MOVWF  00
6524:  DECFSZ 00,F
6526:  BRA    6524
6528:  NOP   
....................     CREN = 1; 
652A:  BSF    FAB.4
....................     } 
....................   if (FERR) 
652C:  BTFSS  FAB.2
652E:  BRA    653A
....................     { 
....................     FERR = 0; 
6530:  BCF    FAB.2
....................     chr = RCREG1; 
6532:  MOVLB  1
6534:  CLRF   xB3
6536:  MOVFF  FAE,1B2
....................     } 
....................   if (ttccp) 
653A:  MOVLB  1
653C:  MOVF   x3E,F
653E:  BZ    654A
....................     ttccp_handler(); 
6540:  MOVLB  0
6542:  GOTO   52E2
....................   else 
6546:  MOVLB  0
6548:  BRA    654E
....................     dollar_handler(); 
654A:  MOVLB  0
654C:  BRA    63AA
....................   } 
654E:  GOTO   676A (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
1580:  BCF    F8A.2
....................   delay_us(10); 
1582:  MOVLW  0C
1584:  MOVWF  00
1586:  DECFSZ 00,F
1588:  BRA    1586
158A:  BRA    158C
158C:  NOP   
....................   while (length--) 
....................     { 
158E:  MOVLB  2
1590:  MOVF   x3F,W
1592:  DECF   x3F,F
1594:  XORLW  00
1596:  BZ    15DC
....................     xbyte = *data++; 
1598:  MOVFF  241,03
159C:  MOVF   x40,W
159E:  INCF   x40,F
15A0:  BTFSC  FD8.2
15A2:  INCF   x41,F
15A4:  MOVWF  FE9
15A6:  MOVFF  03,FEA
15AA:  MOVFF  FEF,242
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
15AE:  CLRF   x43
15B0:  MOVF   x43,W
15B2:  SUBLW  07
15B4:  BNC   15DA
....................       { 
....................       if (xbyte & 0x80) 
15B6:  BTFSS  x42.7
15B8:  BRA    15BE
....................         output_high(D2A_MOSI); 
15BA:  BSF    F8C.4
....................       else 
15BC:  BRA    15C0
....................         output_low(D2A_MOSI); 
15BE:  BCF    F8C.4
....................       delay_us(1); 
15C0:  BRA    15C2
15C2:  BRA    15C4
....................       output_high(D2A_SCLK); 
15C4:  BSF    F8C.0
....................       delay_us(1); 
15C6:  BRA    15C8
15C8:  BRA    15CA
....................       output_low(D2A_SCLK); 
15CA:  BCF    F8C.0
....................       delay_us(1); 
15CC:  BRA    15CE
15CE:  BRA    15D0
....................       } 
15D0:  MOVF   x43,W
15D2:  INCF   x43,F
15D4:  BCF    FD8.0
15D6:  RLCF   x42,F
15D8:  BRA    15B0
....................     } 
15DA:  BRA    1590
....................   delay_us(10); 
15DC:  MOVLW  0C
15DE:  MOVWF  00
15E0:  DECFSZ 00,F
15E2:  BRA    15E0
15E4:  BRA    15E6
15E6:  NOP   
....................   output_high(CSN); 
15E8:  BSF    F8A.2
....................   } 
15EA:  MOVLB  0
15EC:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5BC0:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5BC2:  MOVLB  2
5BC4:  CLRF   x06
5BC6:  MOVF   x06,W
5BC8:  SUBLW  07
5BCA:  BNC   5C02
....................     { 
....................     if (addr & 0x80) 
5BCC:  BTFSS  x02.7
5BCE:  BRA    5BD4
....................       output_high(D2A_MOSI); 
5BD0:  BSF    F8C.4
....................     else 
5BD2:  BRA    5BD6
....................       output_low(D2A_MOSI); 
5BD4:  BCF    F8C.4
....................     delay_us(5); 
5BD6:  MOVLW  06
5BD8:  MOVWF  00
5BDA:  DECFSZ 00,F
5BDC:  BRA    5BDA
5BDE:  NOP   
....................     output_high(D2A_SCLK); 
5BE0:  BSF    F8C.0
....................     delay_us(5); 
5BE2:  MOVLW  06
5BE4:  MOVWF  00
5BE6:  DECFSZ 00,F
5BE8:  BRA    5BE6
5BEA:  NOP   
....................     output_low(D2A_SCLK); 
5BEC:  BCF    F8C.0
....................     delay_us(5); 
5BEE:  MOVLW  06
5BF0:  MOVWF  00
5BF2:  DECFSZ 00,F
5BF4:  BRA    5BF2
5BF6:  NOP   
....................     } 
5BF8:  MOVF   x06,W
5BFA:  INCF   x06,F
5BFC:  BCF    FD8.0
5BFE:  RLCF   x02,F
5C00:  BRA    5BC6
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5C02:  CLRF   x05
5C04:  CLRF   x06
5C06:  MOVF   x06,W
5C08:  SUBLW  07
5C0A:  BNC   5C50
....................     { 
....................     xbyte <<= 1; 
5C0C:  BCF    FD8.0
5C0E:  RLCF   x05,F
....................     delay_us(5); 
5C10:  MOVLW  06
5C12:  MOVWF  00
5C14:  DECFSZ 00,F
5C16:  BRA    5C14
5C18:  NOP   
....................     output_high(D2A_SCLK); 
5C1A:  BSF    F8C.0
....................     delay_us(3); 
5C1C:  MOVLW  03
5C1E:  MOVWF  00
5C20:  DECFSZ 00,F
5C22:  BRA    5C20
5C24:  BRA    5C26
....................     if (input(D2A_MISO)) 
5C26:  BTFSS  F83.1
5C28:  BRA    5C36
....................       { 
....................       xbyte |= 1; 
5C2A:  BSF    x05.0
....................       delay_us(2); 
5C2C:  MOVLW  02
5C2E:  MOVWF  00
5C30:  DECFSZ 00,F
5C32:  BRA    5C30
5C34:  NOP   
....................       } 
....................     delay_us(2); 
5C36:  MOVLW  02
5C38:  MOVWF  00
5C3A:  DECFSZ 00,F
5C3C:  BRA    5C3A
5C3E:  NOP   
....................     output_low(D2A_SCLK); 
5C40:  BCF    F8C.0
....................     delay_us(3); 
5C42:  MOVLW  03
5C44:  MOVWF  00
5C46:  DECFSZ 00,F
5C48:  BRA    5C46
5C4A:  BRA    5C4C
....................     } 
5C4C:  INCF   x06,F
5C4E:  BRA    5C06
....................   *data = xbyte; 
5C50:  MOVFF  203,FE9
5C54:  MOVFF  204,FEA
5C58:  MOVFF  205,FEF
....................   output_high(CSN); 
5C5C:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
5C5E:  BCF    F8C.0
....................   return xbyte; 
5C60:  MOVFF  205,01
....................   } 
5C64:  MOVLB  0
5C66:  GOTO   60A4 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1950:  MOVFF  246,252
1954:  MOVFF  245,251
1958:  MOVFF  244,250
195C:  MOVFF  243,24F
1960:  BRA    1680
1962:  MOVFF  03,24A
1966:  MOVFF  02,249
196A:  MOVFF  01,248
196E:  MOVFF  00,247
....................   temp = bitspersec / 240000000.0; 
1972:  MOVFF  24A,252
1976:  MOVFF  249,251
197A:  MOVFF  248,250
197E:  MOVFF  247,24F
1982:  MOVLW  C0
1984:  MOVLB  2
1986:  MOVWF  x56
1988:  MOVLW  E1
198A:  MOVWF  x55
198C:  MOVLW  64
198E:  MOVWF  x54
1990:  MOVLW  9A
1992:  MOVWF  x53
1994:  MOVLB  0
1996:  RCALL  16BA
1998:  MOVFF  03,24E
199C:  MOVFF  02,24D
19A0:  MOVFF  01,24C
19A4:  MOVFF  00,24B
....................   temp *= 65536.0; 
19A8:  MOVFF  24E,252
19AC:  MOVFF  24D,251
19B0:  MOVFF  24C,250
19B4:  MOVFF  24B,24F
19B8:  MOVLB  2
19BA:  CLRF   x56
19BC:  CLRF   x55
19BE:  CLRF   x54
19C0:  MOVLW  8F
19C2:  MOVWF  x53
19C4:  MOVLB  0
19C6:  RCALL  1818
19C8:  MOVFF  03,24E
19CC:  MOVFF  02,24D
19D0:  MOVFF  01,24C
19D4:  MOVFF  00,24B
....................   temp *= 65536.0; 
19D8:  MOVFF  24E,252
19DC:  MOVFF  24D,251
19E0:  MOVFF  24C,250
19E4:  MOVFF  24B,24F
19E8:  MOVLB  2
19EA:  CLRF   x56
19EC:  CLRF   x55
19EE:  CLRF   x54
19F0:  MOVLW  8F
19F2:  MOVWF  x53
19F4:  MOVLB  0
19F6:  RCALL  1818
19F8:  MOVFF  03,24E
19FC:  MOVFF  02,24D
1A00:  MOVFF  01,24C
1A04:  MOVFF  00,24B
....................   return (ULONG)temp - 1; 
1A08:  MOVFF  24E,252
1A0C:  MOVFF  24D,251
1A10:  MOVFF  24C,250
1A14:  MOVFF  24B,24F
1A18:  RCALL  190E
1A1A:  MOVFF  03,252
1A1E:  MOVFF  02,251
1A22:  MOVFF  01,250
1A26:  MOVFF  00,24F
1A2A:  MOVLW  01
1A2C:  MOVLB  2
1A2E:  SUBWF  00,W
1A30:  MOVWF  00
1A32:  MOVLW  00
1A34:  SUBWFB 01,W
1A36:  MOVWF  01
1A38:  MOVLW  00
1A3A:  SUBWFB 02,W
1A3C:  MOVWF  02
1A3E:  MOVLW  00
1A40:  SUBWFB 03,W
1A42:  MOVWF  03
....................   } 
1A44:  MOVLB  0
1A46:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
54AC:  MOVFF  1CE,1D0
....................   buf[1] = value; 
54B0:  MOVFF  1CF,1D1
....................   send_FPGA_command(2, buf); 
54B4:  MOVLW  02
54B6:  MOVLB  2
54B8:  MOVWF  x3F
54BA:  MOVLW  01
54BC:  MOVWF  x41
54BE:  MOVLW  D0
54C0:  MOVWF  x40
54C2:  MOVLB  0
54C4:  CALL   1580
....................   } 
54C8:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
5B30:  MOVLB  2
5B32:  CLRF   x14
5B34:  CLRF   x13
5B36:  MOVFF  205,212
5B3A:  MOVFF  204,211
5B3E:  MOVFF  214,247
5B42:  MOVFF  213,246
5B46:  MOVFF  205,245
5B4A:  MOVFF  204,244
5B4E:  CLRF   x4B
5B50:  CLRF   x4A
5B52:  MOVLW  27
5B54:  MOVWF  x49
5B56:  MOVLW  10
5B58:  MOVWF  x48
5B5A:  MOVLB  0
5B5C:  CALL   10D8
5B60:  MOVFF  03,214
5B64:  MOVFF  02,213
5B68:  MOVFF  01,212
5B6C:  MOVFF  00,211
5B70:  MOVFF  03,246
5B74:  MOVFF  02,245
5B78:  MOVFF  01,244
5B7C:  MOVFF  00,243
5B80:  CALL   1950
5B84:  MOVFF  03,210
5B88:  MOVFF  02,20F
5B8C:  MOVFF  01,20E
5B90:  MOVFF  00,20D
....................   buf[0] = 2; 
5B94:  MOVLW  02
5B96:  MOVLB  2
5B98:  MOVWF  x06
....................   buf[1] = make8(bitf, 0); 
5B9A:  MOVFF  20D,207
....................   buf[2] = make8(bitf, 1); 
5B9E:  MOVFF  20E,208
....................   buf[3] = make8(bitf, 2); 
5BA2:  MOVFF  20F,209
....................   buf[4] = make8(bitf, 3); 
5BA6:  MOVFF  210,20A
....................   send_FPGA_command(5, buf); 
5BAA:  MOVLW  05
5BAC:  MOVWF  x3F
5BAE:  MOVLW  02
5BB0:  MOVWF  x41
5BB2:  MOVLW  06
5BB4:  MOVWF  x40
5BB6:  MOVLB  0
5BB8:  CALL   1580
....................   } 
5BBC:  GOTO   605E (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 0; 
*
15EE:  MOVLB  2
15F0:  CLRF   x32
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
15F2:  MOVLB  0
15F4:  SWAPF  xAF,W
15F6:  MOVWF  00
15F8:  MOVLW  F0
15FA:  ANDWF  00,F
15FC:  MOVF   00,W
15FE:  IORWF  xAE,W
1600:  MOVLB  2
1602:  MOVWF  x3B
1604:  MOVLB  0
1606:  SWAPF  xB0,W
1608:  MOVWF  00
160A:  RLCF   00,F
160C:  MOVLW  E0
160E:  ANDWF  00,F
1610:  MOVF   00,W
1612:  MOVLB  2
1614:  IORWF  x3B,F
1616:  MOVLB  0
1618:  SWAPF  xB4,W
161A:  MOVWF  00
161C:  RLCF   00,F
161E:  RLCF   00,F
1620:  MOVLW  C0
1622:  ANDWF  00,F
1624:  MOVF   00,W
1626:  MOVLB  2
1628:  IORWF  x3B,F
162A:  CLRF   00
162C:  MOVLB  0
162E:  BTFSC  xB6.0
1630:  BSF    00.7
1632:  MOVF   00,W
1634:  MOVLB  2
1636:  IORWF  x3B,W
1638:  MOVWF  x33
....................   send_FPGA_command(2, buf); 
163A:  MOVLW  02
163C:  MOVWF  x3F
163E:  MOVWF  x41
1640:  MOVLW  32
1642:  MOVWF  x40
1644:  MOVLB  0
1646:  RCALL  1580
....................   } 
1648:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 6; 
164A:  MOVLW  06
164C:  MOVLB  2
164E:  MOVWF  x32
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
1650:  BCF    FD8.0
1652:  MOVLB  0
1654:  RLCF   xB2,W
1656:  IORWF  xB1,W
1658:  MOVLB  2
165A:  MOVWF  x3B
165C:  MOVLB  0
165E:  RLCF   xB3,W
1660:  MOVWF  00
1662:  RLCF   00,F
1664:  MOVLW  FC
1666:  ANDWF  00,F
1668:  MOVF   00,W
166A:  MOVLB  2
166C:  IORWF  x3B,W
166E:  MOVWF  x33
....................   send_FPGA_command(2, buf); 
1670:  MOVLW  02
1672:  MOVWF  x3F
1674:  MOVWF  x41
1676:  MOVLW  32
1678:  MOVWF  x40
167A:  MOVLB  0
167C:  RCALL  1580
....................   } 
167E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1A48:  MOVLB  2
1A4A:  CLRF   x42
1A4C:  CLRF   x41
1A4E:  MOVFF  AB,240
1A52:  MOVFF  AA,23F
1A56:  MOVFF  242,247
1A5A:  MOVFF  241,246
1A5E:  MOVFF  AB,245
1A62:  MOVFF  AA,244
1A66:  CLRF   x4B
1A68:  CLRF   x4A
1A6A:  MOVLW  27
1A6C:  MOVWF  x49
1A6E:  MOVLW  10
1A70:  MOVWF  x48
1A72:  MOVLB  0
1A74:  CALL   10D8
1A78:  MOVFF  03,242
1A7C:  MOVFF  02,241
1A80:  MOVFF  01,240
1A84:  MOVFF  00,23F
1A88:  MOVFF  03,246
1A8C:  MOVFF  02,245
1A90:  MOVFF  01,244
1A94:  MOVFF  00,243
1A98:  RCALL  1950
1A9A:  MOVFF  03,23E
1A9E:  MOVFF  02,23D
1AA2:  MOVFF  01,23C
1AA6:  MOVFF  00,23B
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1AAA:  MOVLW  02
1AAC:  MOVLB  2
1AAE:  MOVWF  x32
1AB0:  MOVFF  23B,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1AB4:  MOVLW  02
1AB6:  MOVWF  x3F
1AB8:  MOVWF  x41
1ABA:  MOVLW  32
1ABC:  MOVWF  x40
1ABE:  MOVLB  0
1AC0:  RCALL  1580
1AC2:  MOVLW  0A
1AC4:  MOVLB  2
1AC6:  MOVWF  x3F
1AC8:  MOVLB  0
1ACA:  CALL   0DD6
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1ACE:  MOVLW  03
1AD0:  MOVLB  2
1AD2:  MOVWF  x32
1AD4:  MOVFF  23C,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1AD8:  MOVLW  02
1ADA:  MOVWF  x3F
1ADC:  MOVWF  x41
1ADE:  MOVLW  32
1AE0:  MOVWF  x40
1AE2:  MOVLB  0
1AE4:  RCALL  1580
1AE6:  MOVLW  0A
1AE8:  MOVLB  2
1AEA:  MOVWF  x3F
1AEC:  MOVLB  0
1AEE:  CALL   0DD6
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1AF2:  MOVLW  04
1AF4:  MOVLB  2
1AF6:  MOVWF  x32
1AF8:  MOVFF  23D,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1AFC:  MOVLW  02
1AFE:  MOVWF  x3F
1B00:  MOVWF  x41
1B02:  MOVLW  32
1B04:  MOVWF  x40
1B06:  MOVLB  0
1B08:  RCALL  1580
1B0A:  MOVLW  0A
1B0C:  MOVLB  2
1B0E:  MOVWF  x3F
1B10:  MOVLB  0
1B12:  CALL   0DD6
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1B16:  MOVLW  05
1B18:  MOVLB  2
1B1A:  MOVWF  x32
1B1C:  MOVFF  23E,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1B20:  MOVLW  02
1B22:  MOVWF  x3F
1B24:  MOVWF  x41
1B26:  MOVLW  32
1B28:  MOVWF  x40
1B2A:  MOVLB  0
1B2C:  RCALL  1580
1B2E:  MOVLW  0A
1B30:  MOVLB  2
1B32:  MOVWF  x3F
1B34:  MOVLB  0
1B36:  CALL   0DD6
....................   } 
1B3A:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
2F9A:  MOVLB  2
2F9C:  MOVF   x2F,W
2F9E:  MOVWF  03
2FA0:  MOVF   x2E,W
2FA2:  BTFSC  FD8.2
2FA4:  DECF   x2F,F
2FA6:  DECF   x2E,F
2FA8:  IORWF  03,W
2FAA:  BZ    3004
2FAC:  MOVF   x2B,W
2FAE:  MOVWF  03
2FB0:  MOVF   x2A,W
2FB2:  INCF   x2A,F
2FB4:  BTFSC  FD8.2
2FB6:  INCF   x2B,F
2FB8:  MOVWF  x30
2FBA:  MOVFF  03,231
2FBE:  MOVF   x2D,W
2FC0:  MOVWF  03
2FC2:  MOVF   x2C,W
2FC4:  INCF   x2C,F
2FC6:  BTFSC  FD8.2
2FC8:  INCF   x2D,F
2FCA:  MOVWF  FE9
2FCC:  MOVFF  03,FEA
2FD0:  MOVFF  FEF,232
2FD4:  MOVF   FF2,W
2FD6:  MOVWF  00
2FD8:  BCF    FF2.7
2FDA:  MOVFF  230,FA9
2FDE:  MOVFF  232,FA8
2FE2:  BCF    FA6.6
2FE4:  BCF    FA6.7
2FE6:  BSF    FA6.2
2FE8:  MOVLB  F
2FEA:  MOVLW  55
2FEC:  MOVWF  FA7
2FEE:  MOVLW  AA
2FF0:  MOVWF  FA7
2FF2:  BSF    FA6.1
2FF4:  BTFSC  FA6.1
2FF6:  BRA    2FF4
2FF8:  BCF    FA6.2
2FFA:  MOVF   00,W
2FFC:  IORWF  FF2,F
2FFE:  MOVLB  0
3000:  BRA    2F9A
3002:  MOVLB  2
....................   } 
3004:  MOVLB  0
3006:  GOTO   302C (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0E00:  MOVLB  2
0E02:  MOVF   x2F,W
0E04:  MOVWF  03
0E06:  MOVF   x2E,W
0E08:  BTFSC  FD8.2
0E0A:  DECF   x2F,F
0E0C:  DECF   x2E,F
0E0E:  IORWF  03,W
0E10:  BZ    0E50
0E12:  MOVF   x2D,W
0E14:  MOVWF  03
0E16:  MOVF   x2C,W
0E18:  INCF   x2C,F
0E1A:  BTFSC  FD8.2
0E1C:  INCF   x2D,F
0E1E:  MOVWF  FE9
0E20:  MOVFF  03,FEA
0E24:  MOVF   x2B,W
0E26:  MOVWF  03
0E28:  MOVF   x2A,W
0E2A:  INCF   x2A,F
0E2C:  BTFSC  FD8.2
0E2E:  INCF   x2B,F
0E30:  MOVWF  x32
0E32:  MOVFF  03,233
0E36:  MOVFF  FF2,234
0E3A:  BCF    FF2.7
0E3C:  MOVFF  232,FA9
0E40:  BCF    FA6.6
0E42:  BCF    FA6.7
0E44:  BSF    FA6.0
0E46:  MOVF   FA8,W
0E48:  BTFSC  x34.7
0E4A:  BSF    FF2.7
0E4C:  MOVWF  FEF
0E4E:  BRA    0E02
....................   } 
0E50:  MOVLB  0
0E52:  GOTO   0E88 (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
300A:  MOVF   xFE,W
300C:  SUBLW  9F
300E:  BNZ   302C
3010:  MOVF   xFF,W
3012:  SUBLW  0B
3014:  BNZ   302C
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
3016:  MOVLB  2
3018:  CLRF   x2B
301A:  CLRF   x2A
301C:  CLRF   x2D
301E:  MOVLW  AA
3020:  MOVWF  x2C
3022:  CLRF   x2F
3024:  MOVLW  54
3026:  MOVWF  x2E
3028:  MOVLB  0
302A:  BRA    2F9A
....................   allow_write = 0; 
302C:  CLRF   xFF
302E:  CLRF   xFE
....................   } 
3030:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0E72:  MOVLB  2
0E74:  CLRF   x2B
0E76:  CLRF   x2A
0E78:  CLRF   x2D
0E7A:  MOVLW  AA
0E7C:  MOVWF  x2C
0E7E:  CLRF   x2F
0E80:  MOVLW  54
0E82:  MOVWF  x2E
0E84:  MOVLB  0
0E86:  BRA    0E00
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0E88:  INCFSZ xB1,W
0E8A:  BRA    0E8E
0E8C:  BRA    0E92
0E8E:  INCFSZ xB2,W
0E90:  BRA    0EA2
....................     memset(&setup, 0, sizeof(setup)); 
0E92:  CLRF   FEA
0E94:  MOVLW  AA
0E96:  MOVWF  FE9
0E98:  CLRF   00
0E9A:  CLRF   02
0E9C:  MOVLW  54
0E9E:  MOVWF  01
0EA0:  BRA    0E56
....................   } 
0EA2:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
*
1BA6:  INCFSZ 24,W
1BA8:  BRA    1BB0
1BAA:  INCFSZ 25,W
1BAC:  BRA    1BB0
1BAE:  BRA    1BF2
....................     { 
....................     if (TMR_100MS_POWER) 
1BB0:  BTFSS  2C.3
1BB2:  BRA    1BF0
....................       { 
....................       TMR_100MS_POWER = 0; 
1BB4:  BCF    2C.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1BB6:  MOVLB  2
1BB8:  CLRF   x2E
1BBA:  MOVFF  25,230
1BBE:  MOVFF  24,22F
1BC2:  MOVLB  0
1BC4:  CALL   0EA4
....................       set_adc_channel(A2D_POWER); // select forward power input 
1BC8:  MOVLW  14
1BCA:  MOVWF  01
1BCC:  MOVF   FC2,W
1BCE:  ANDLW  83
1BD0:  IORWF  01,W
1BD2:  MOVWF  FC2
....................       delay_us(20); 
1BD4:  MOVLW  1A
1BD6:  MOVWF  00
1BD8:  DECFSZ 00,F
1BDA:  BRA    1BD8
1BDC:  NOP   
....................       power = read_adc(); 
1BDE:  BSF    FC2.1
1BE0:  BTFSC  FC2.1
1BE2:  BRA    1BE0
1BE4:  MOVFF  FC4,22B
1BE8:  MOVLB  2
1BEA:  MOVFF  FC3,22A
1BEE:  MOVLB  0
....................       } 
....................     return; 
1BF0:  BRA    1F52
....................     } 
....................      
....................      if (input(STANDBY) && setup.cot ==0) 
1BF2:  BTFSS  F83.7
1BF4:  BRA    1C50
1BF6:  MOVF   xF4,F
1BF8:  BNZ   1C50
1BFA:  MOVF   xF5,F
1BFC:  BNZ   1C50
....................     { 
....................     if (setup.pwr == 1) 
1BFE:  DECFSZ xAC,W
1C00:  BRA    1C44
1C02:  MOVF   xAD,F
1C04:  BNZ   1C44
....................       { 
....................       output_high(POWER_EN); 
1C06:  BSF    F8C.6
....................       a++; 
1C08:  MOVLB  1
1C0A:  INCF   x00,F
1C0C:  BTFSC  FD8.2
1C0E:  INCF   x01,F
....................        if(a==1) 
1C10:  DECFSZ x00,W
1C12:  BRA    1C2A
1C14:  MOVF   x01,F
1C16:  BNZ   1C2A
.................... 	{ 
.................... 	output_high(POWER_EN); 
1C18:  BSF    F8C.6
.................... 	delay_ms(50); 
1C1A:  MOVLW  32
1C1C:  MOVLB  2
1C1E:  MOVWF  x3F
1C20:  MOVLB  0
1C22:  CALL   0DD6
.................... 	update_all(); 
1C26:  RCALL  1B3C
1C28:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1C2A:  MOVF   x01,W
1C2C:  SUBLW  E9
1C2E:  BC    1C40
1C30:  XORLW  FF
1C32:  BNZ   1C3A
1C34:  MOVF   x00,W
1C36:  SUBLW  60
1C38:  BC    1C40
....................       { 
....................       a=2; 
1C3A:  CLRF   x01
1C3C:  MOVLW  02
1C3E:  MOVWF  x00
....................       } 
....................       }   
....................     else 
1C40:  BRA    1C4C
1C42:  MOVLB  0
....................     	{ 
....................       	output_low(POWER_EN); 
1C44:  BCF    F8C.6
....................      	a=0; 
1C46:  MOVLB  1
1C48:  CLRF   x01
1C4A:  CLRF   x00
....................     	} 	 
....................     } 
....................     else if(!input(STANDBY) && setup.cot ==0) 
1C4C:  BRA    1CAA
1C4E:  MOVLB  0
1C50:  BTFSC  F83.7
1C52:  BRA    1CAC
1C54:  MOVF   xF4,F
1C56:  BNZ   1CAC
1C58:  MOVF   xF5,F
1C5A:  BNZ   1CAC
....................       { 
....................        if(setup.pwr == 1) 
1C5C:  DECFSZ xAC,W
1C5E:  BRA    1C70
1C60:  MOVF   xAD,F
1C62:  BNZ   1C70
....................        	{ 
....................          output_low(POWER_EN);  
1C64:  BCF    F8C.6
....................          a=0; 
1C66:  MOVLB  1
1C68:  CLRF   x01
1C6A:  CLRF   x00
....................         } 
....................        else 
1C6C:  BRA    1C7A
1C6E:  MOVLB  0
....................        { 
....................          output_high(POWER_EN); 
1C70:  BSF    F8C.6
....................           a++; 
1C72:  MOVLB  1
1C74:  INCF   x00,F
1C76:  BTFSC  FD8.2
1C78:  INCF   x01,F
....................        }    
....................        if(a==1) 
1C7A:  DECFSZ x00,W
1C7C:  BRA    1C94
1C7E:  MOVF   x01,F
1C80:  BNZ   1C94
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1C82:  BSF    F8C.6
.................... 	delay_ms(50); 
1C84:  MOVLW  32
1C86:  MOVLB  2
1C88:  MOVWF  x3F
1C8A:  MOVLB  0
1C8C:  CALL   0DD6
.................... 	update_all(); 
1C90:  RCALL  1B3C
1C92:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1C94:  MOVF   x01,W
1C96:  SUBLW  E9
1C98:  BC    1CAA
1C9A:  XORLW  FF
1C9C:  BNZ   1CA4
1C9E:  MOVF   x00,W
1CA0:  SUBLW  60
1CA2:  BC    1CAA
....................       { 
....................       a=2; 
1CA4:  CLRF   x01
1CA6:  MOVLW  02
1CA8:  MOVWF  x00
1CAA:  MOVLB  0
....................       } 
....................       BREAK; 
....................       }  
....................       {  
.................... } 
....................  
....................  
.................... if (!input(STANDBY) && setup.cot ==1) 
1CAC:  BTFSC  F83.7
1CAE:  BRA    1D1E
1CB0:  DECFSZ xF4,W
1CB2:  BRA    1D1E
1CB4:  MOVF   xF5,F
1CB6:  BNZ   1D1E
....................     { 
....................     if (setup.pwr == 1) 
1CB8:  DECFSZ xAC,W
1CBA:  BRA    1CFC
1CBC:  MOVF   xAD,F
1CBE:  BNZ   1CFC
....................       { 
....................       output_high(POWER_EN); 
1CC0:  BSF    F8C.6
....................       b++; 
1CC2:  MOVLB  1
1CC4:  INCF   x02,F
1CC6:  BTFSC  FD8.2
1CC8:  INCF   x03,F
....................        if(b==1) 
1CCA:  DECFSZ x02,W
1CCC:  BRA    1CE4
1CCE:  MOVF   x03,F
1CD0:  BNZ   1CE4
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1CD2:  BSF    F8C.6
.................... 	delay_ms(60); 
1CD4:  MOVLW  3C
1CD6:  MOVLB  2
1CD8:  MOVWF  x3F
1CDA:  MOVLB  0
1CDC:  CALL   0DD6
.................... 	update_all(); 
1CE0:  RCALL  1B3C
1CE2:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(b>60000) 
1CE4:  MOVF   x03,W
1CE6:  SUBLW  E9
1CE8:  BC    1CFA
1CEA:  XORLW  FF
1CEC:  BNZ   1CF4
1CEE:  MOVF   x02,W
1CF0:  SUBLW  60
1CF2:  BC    1CFA
....................       { 
....................       b=2; 
1CF4:  CLRF   x03
1CF6:  MOVLW  02
1CF8:  MOVWF  x02
1CFA:  MOVLB  0
....................       } 
....................       }   
....................     if(setup.pwr == 0) 
1CFC:  MOVF   xAC,F
1CFE:  BNZ   1D1C
1D00:  MOVF   xAD,F
1D02:  BNZ   1D1C
....................     	{ 
....................       	output_low(POWER_EN); 
1D04:  BCF    F8C.6
....................      	set_AD5312(DAC_POS_VOLT, 0); 
1D06:  MOVLB  2
1D08:  CLRF   x2E
1D0A:  CLRF   x30
1D0C:  CLRF   x2F
1D0E:  MOVLB  0
1D10:  CALL   0EA4
....................      	b=0; 
1D14:  MOVLB  1
1D16:  CLRF   x03
1D18:  CLRF   x02
1D1A:  MOVLB  0
....................      	} 	 
....................     } 
....................     else if(input(STANDBY) && setup.cot ==1) 
1D1C:  BRA    1DA8
1D1E:  BTFSS  F83.7
1D20:  BRA    1DA8
1D22:  DECFSZ xF4,W
1D24:  BRA    1DA8
1D26:  MOVF   xF5,F
1D28:  BNZ   1DA8
....................       { 
....................        if(setup.pwr == 1) 
1D2A:  DECFSZ xAC,W
1D2C:  BRA    1D4A
1D2E:  MOVF   xAD,F
1D30:  BNZ   1D4A
....................        	{ 
....................          output_low(POWER_EN);  
1D32:  BCF    F8C.6
....................          set_AD5312(DAC_POS_VOLT, 0); 
1D34:  MOVLB  2
1D36:  CLRF   x2E
1D38:  CLRF   x30
1D3A:  CLRF   x2F
1D3C:  MOVLB  0
1D3E:  CALL   0EA4
....................          b=0; 
1D42:  MOVLB  1
1D44:  CLRF   x03
1D46:  CLRF   x02
1D48:  MOVLB  0
....................         } 
....................        if(setup.pwr == 0) 
1D4A:  MOVF   xAC,F
1D4C:  BNZ   1D74
1D4E:  MOVF   xAD,F
1D50:  BNZ   1D74
....................        { 
.................... 	       if(b==1) 
1D52:  MOVLB  1
1D54:  DECFSZ x02,W
1D56:  BRA    1D74
1D58:  MOVF   x03,F
1D5A:  BNZ   1D74
.................... 	       { 
....................  
....................          output_high(POWER_EN); 
1D5C:  BSF    F8C.6
....................          	delay_ms(60); 
1D5E:  MOVLW  3C
1D60:  MOVLB  2
1D62:  MOVWF  x3F
1D64:  MOVLB  0
1D66:  CALL   0DD6
.................... 			update_all(); 
1D6A:  RCALL  1B3C
....................           b++; 
1D6C:  MOVLB  1
1D6E:  INCF   x02,F
1D70:  BTFSC  FD8.2
1D72:  INCF   x03,F
....................         }   
....................        }    
....................        if(b==1) 
1D74:  MOVLB  1
1D76:  DECFSZ x02,W
1D78:  BRA    1D90
1D7A:  MOVF   x03,F
1D7C:  BNZ   1D90
.................... 	{ 
.................... 	output_high(POWER_EN); 
1D7E:  BSF    F8C.6
.................... 	delay_ms(50); 
1D80:  MOVLW  32
1D82:  MOVLB  2
1D84:  MOVWF  x3F
1D86:  MOVLB  0
1D88:  CALL   0DD6
.................... 	update_all(); 
1D8C:  RCALL  1B3C
1D8E:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1D90:  MOVF   x01,W
1D92:  SUBLW  E9
1D94:  BC    1DA6
1D96:  XORLW  FF
1D98:  BNZ   1DA0
1D9A:  MOVF   x00,W
1D9C:  SUBLW  60
1D9E:  BC    1DA6
....................       { 
....................       b=2; 
1DA0:  CLRF   x03
1DA2:  MOVLW  02
1DA4:  MOVWF  x02
1DA6:  MOVLB  0
....................       } 
....................        
....................       }  
....................       break; 
....................       {  
....................     } 
....................      
....................      if (setup.frequency < FREQ_LOW_THRESH) 
1DA8:  MOVF   xB9,W
1DAA:  SUBLW  58
1DAC:  BNC   1DCC
1DAE:  BNZ   1DB6
1DB0:  MOVF   xB8,W
1DB2:  SUBLW  29
1DB4:  BNC   1DCC
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1DB6:  MOVLW  01
1DB8:  MOVLB  2
1DBA:  MOVWF  x2E
1DBC:  MOVFF  BE,230
1DC0:  MOVFF  BD,22F
1DC4:  MOVLB  0
1DC6:  CALL   0EA4
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1DCA:  BRA    1E04
1DCC:  MOVF   xB9,W
1DCE:  SUBLW  5A
1DD0:  BNC   1DF0
1DD2:  BNZ   1DDA
1DD4:  MOVF   xB8,W
1DD6:  SUBLW  F9
1DD8:  BNC   1DF0
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1DDA:  MOVLW  01
1DDC:  MOVLB  2
1DDE:  MOVWF  x2E
1DE0:  MOVFF  C0,230
1DE4:  MOVFF  BF,22F
1DE8:  MOVLB  0
1DEA:  CALL   0EA4
....................   else 
1DEE:  BRA    1E04
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1DF0:  MOVLW  01
1DF2:  MOVLB  2
1DF4:  MOVWF  x2E
1DF6:  MOVFF  C2,230
1DFA:  MOVFF  C1,22F
1DFE:  MOVLB  0
1E00:  CALL   0EA4
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input 
1E04:  MOVLW  14
1E06:  MOVWF  01
1E08:  MOVF   FC2,W
1E0A:  ANDLW  83
1E0C:  IORWF  01,W
1E0E:  MOVWF  FC2
....................   delay_us(20); 
1E10:  MOVLW  1A
1E12:  MOVWF  00
1E14:  DECFSZ 00,F
1E16:  BRA    1E14
1E18:  NOP   
....................   power = read_adc(); 
1E1A:  BSF    FC2.1
1E1C:  BTFSC  FC2.1
1E1E:  BRA    1E1C
1E20:  MOVFF  FC4,22B
1E24:  MOVLB  2
1E26:  MOVFF  FC3,22A
....................   
....................      
.................... if(setup.rc == 1) 
1E2A:  MOVLB  0
1E2C:  DECFSZ xF6,W
1E2E:  BRA    1E7E
1E30:  MOVF   xF7,F
1E32:  BNZ   1E7E
.................... {      
.................... 	 if (input(HILO) && setup.rp == 1) 
1E34:  BTFSS  F83.2
1E36:  BRA    1E4A
1E38:  DECFSZ xF8,W
1E3A:  BRA    1E4A
1E3C:  MOVF   xF9,F
1E3E:  BNZ   1E4A
.................... 	 { 
....................     level = power_level;  //SV 
1E40:  MOVFF  1D,22D
1E44:  MOVFF  1C,22C
....................      }   
....................   else if (input(HILO) && setup.rp == 0) 
1E48:  BRA    1E7E
1E4A:  BTFSS  F83.2
1E4C:  BRA    1E60
1E4E:  MOVF   xF8,F
1E50:  BNZ   1E60
1E52:  MOVF   xF9,F
1E54:  BNZ   1E60
....................     { 
....................     level = low_power_level; //VL 
1E56:  MOVFF  1B,22D
1E5A:  MOVFF  1A,22C
....................     } 
....................     else if(!input(HILO) && setup.rp == 0) 
1E5E:  BRA    1E7E
1E60:  BTFSC  F83.2
1E62:  BRA    1E76
1E64:  MOVF   xF8,F
1E66:  BNZ   1E76
1E68:  MOVF   xF9,F
1E6A:  BNZ   1E76
....................     { 
....................     level = power_level;  //SV 
1E6C:  MOVFF  1D,22D
1E70:  MOVFF  1C,22C
....................     } 
....................   else 
1E74:  BRA    1E7E
....................   { 
....................     level = low_power_level;  // VL 
1E76:  MOVFF  1B,22D
1E7A:  MOVFF  1A,22C
....................   }   
.................... } 
.................... 	 
.................... 	if(setup.rc == 0) 
1E7E:  MOVF   xF6,F
1E80:  BNZ   1ED0
1E82:  MOVF   xF7,F
1E84:  BNZ   1ED0
.................... 	{ 
.................... 	  if (input(HILO) && setup.rp == 0) 
1E86:  BTFSS  F83.2
1E88:  BRA    1E9C
1E8A:  MOVF   xF8,F
1E8C:  BNZ   1E9C
1E8E:  MOVF   xF9,F
1E90:  BNZ   1E9C
.................... 	    { 
....................     level = power_level;  //SV  
1E92:  MOVFF  1D,22D
1E96:  MOVFF  1C,22C
....................         }    
....................   else if (!input(HILO) && setup.rp == 1) 
1E9A:  BRA    1ED0
1E9C:  BTFSC  F83.2
1E9E:  BRA    1EB2
1EA0:  DECFSZ xF8,W
1EA2:  BRA    1EB2
1EA4:  MOVF   xF9,F
1EA6:  BNZ   1EB2
....................     { 
....................     level = power_level; 
1EA8:  MOVFF  1D,22D
1EAC:  MOVFF  1C,22C
....................     } 
....................     else if(input(HILO) && setup.rp == 1) 
1EB0:  BRA    1ED0
1EB2:  BTFSS  F83.2
1EB4:  BRA    1EC8
1EB6:  DECFSZ xF8,W
1EB8:  BRA    1EC8
1EBA:  MOVF   xF9,F
1EBC:  BNZ   1EC8
....................     { 
....................     level = low_power_level; 
1EBE:  MOVFF  1B,22D
1EC2:  MOVFF  1A,22C
....................     } 
....................   else 
1EC6:  BRA    1ED0
....................     level = low_power_level; // VL 
1EC8:  MOVFF  1B,22D
1ECC:  MOVFF  1A,22C
.................... } 
....................  
....................  
....................  
....................      
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
1ED0:  MOVLW  06
1ED2:  MOVLB  2
1ED4:  ADDWF  x2C,W
1ED6:  MOVWF  01
1ED8:  MOVLW  00
1EDA:  ADDWFC x2D,W
1EDC:  MOVWF  03
1EDE:  MOVF   03,W
1EE0:  SUBWF  x2B,W
1EE2:  BNC   1EEC
1EE4:  BNZ   1F0A
1EE6:  MOVF   x2A,W
1EE8:  SUBWF  01,W
1EEA:  BNC   1F0A
1EEC:  MOVLW  06
1EEE:  SUBWF  x2C,W
1EF0:  MOVWF  00
1EF2:  MOVLW  00
1EF4:  SUBWFB x2D,W
1EF6:  MOVWF  03
1EF8:  MOVFF  00,01
1EFC:  MOVF   x2B,W
1EFE:  SUBWF  03,W
1F00:  BNC   1F54
1F02:  BNZ   1F0A
1F04:  MOVF   01,W
1F06:  SUBWF  x2A,W
1F08:  BC    1F54
....................     { 
....................     if (power < level) 
1F0A:  MOVF   x2B,W
1F0C:  SUBWF  x2D,W
1F0E:  BNC   1F2C
1F10:  BNZ   1F18
1F12:  MOVF   x2C,W
1F14:  SUBWF  x2A,W
1F16:  BC    1F2C
....................       { 
....................       if (power_control >= 150) 
1F18:  MOVF   1F,F
1F1A:  BNZ   1F22
1F1C:  MOVF   1E,W
1F1E:  SUBLW  95
1F20:  BC    1F2A
....................         power_control -= DEADBAND / 2; 
1F22:  MOVLW  03
1F24:  SUBWF  1E,F
1F26:  MOVLW  00
1F28:  SUBWFB 1F,F
....................       } 
....................     else if (power_control <= 1010) 
1F2A:  BRA    1F42
1F2C:  MOVF   1F,W
1F2E:  SUBLW  03
1F30:  BNC   1F42
1F32:  BNZ   1F3A
1F34:  MOVF   1E,W
1F36:  SUBLW  F2
1F38:  BNC   1F42
....................       { 
....................       power_control += DEADBAND / 2; 
1F3A:  MOVLW  03
1F3C:  ADDWF  1E,F
1F3E:  MOVLW  00
1F40:  ADDWFC 1F,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
1F42:  CLRF   x2E
1F44:  MOVFF  1F,230
1F48:  MOVFF  1E,22F
1F4C:  MOVLB  0
1F4E:  CALL   0EA4
1F52:  MOVLB  2
....................     }	 
....................  
....................  
....................   } 
1F54:  MOVLB  0
1F56:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0D36:  CLRF   F89
....................   output_b(0); 
0D38:  CLRF   F8A
....................   output_c(0); 
0D3A:  CLRF   F8B
....................   output_d(0); 
0D3C:  CLRF   F8C
....................   output_e(0); 
0D3E:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0D40:  MOVLW  E1
0D42:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0D44:  MOVLW  C1
0D46:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0D48:  MOVLW  F1
0D4A:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0D4C:  MOVLW  8E
0D4E:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0D50:  BSF    F96.0
0D52:  BSF    F96.1
0D54:  BCF    F96.2
0D56:  BSF    F96.3
....................   } 
0D58:  GOTO   0D9C (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0D72:  MOVLW  48
0D74:  IORLW  05
0D76:  MOVWF  FBA
0D78:  MOVLW  63
0D7A:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0D7C:  CLRF   FB4
0D7E:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0D80:  MOVLW  00
0D82:  IORLW  05
0D84:  MOVLB  F
0D86:  MOVWF  x51
0D88:  MOVLW  63
0D8A:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0D8C:  CLRF   x4D
0D8E:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0D90:  MOVLW  00
0D92:  MOVWF  x4A
0D94:  MOVLW  00
0D96:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0D98:  MOVLB  0
0D9A:  BRA    0D36
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0D9C:  MOVF   FC1,W
0D9E:  ANDLW  F0
0DA0:  MOVWF  FC1
0DA2:  MOVLW  21
0DA4:  MOVLB  F
0DA6:  MOVWF  x38
0DA8:  MOVLW  03
0DAA:  MOVWF  x3C
0DAC:  MOVLW  00
0DAE:  MOVWF  x39
0DB0:  MOVWF  x3A
0DB2:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0DB4:  MOVF   FC0,W
0DB6:  ANDLW  C0
0DB8:  IORLW  25
0DBA:  MOVWF  FC0
0DBC:  BSF    FC0.7
0DBE:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0DC0:  CLRF   F77
0DC2:  MOVLW  04
0DC4:  MOVWF  F78
0DC6:  MOVWF  F79
....................  
....................   COM1_init(); 
0DC8:  MOVLB  0
0DCA:  RCALL  0D5C
....................   enable_interrupts(INT_TIMER2); 
0DCC:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0DCE:  MOVLW  C0
0DD0:  IORWF  FF2,F
....................   } 
0DD2:  GOTO   65DA (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1B3C:  MOVFF  B9,22F
1B40:  MOVFF  B8,22E
....................   delay_ms(5); 
1B44:  MOVLW  05
1B46:  MOVLB  2
1B48:  MOVWF  x3F
1B4A:  MOVLB  0
1B4C:  CALL   0DD6
....................   PLL_compute_freq_parameters(freq); 
1B50:  MOVFF  22F,233
1B54:  MOVFF  22E,232
1B58:  CALL   11C8
....................   delay_ms(5); 
1B5C:  MOVLW  05
1B5E:  MOVLB  2
1B60:  MOVWF  x3F
1B62:  MOVLB  0
1B64:  CALL   0DD6
....................   PLL_update(); 
1B68:  RCALL  1498
....................   delay_ms(5); 
1B6A:  MOVLW  05
1B6C:  MOVLB  2
1B6E:  MOVWF  x3F
1B70:  MOVLB  0
1B72:  CALL   0DD6
....................   FPGA_set_reg0(); 
1B76:  RCALL  15EE
....................   delay_ms(5); 
1B78:  MOVLW  05
1B7A:  MOVLB  2
1B7C:  MOVWF  x3F
1B7E:  MOVLB  0
1B80:  CALL   0DD6
....................   FPGA_set_reg6(); 
1B84:  RCALL  164A
....................   delay_ms(5); 
1B86:  MOVLW  05
1B88:  MOVLB  2
1B8A:  MOVWF  x3F
1B8C:  MOVLB  0
1B8E:  CALL   0DD6
....................   FPGA_set_bitrate(); 
1B92:  RCALL  1A48
....................   bitr = setup.bitrate; 
1B94:  MOVFF  AB,231
1B98:  MOVFF  AA,230
....................   power_control = 1000; 
1B9C:  MOVLW  03
1B9E:  MOVWF  1F
1BA0:  MOVLW  E8
1BA2:  MOVWF  1E
....................   } 
1BA4:  RETURN 0
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
6552:  CLRF   FF8
6554:  BCF    FD0.7
6556:  BSF    07.7
6558:  CLRF   FEA
655A:  CLRF   FE9
655C:  MOVLW  70
655E:  MOVWF  FD3
6560:  BCF    F9B.6
6562:  BCF    F9B.7
6564:  BCF    FB8.3
6566:  MOVLW  19
6568:  MOVWF  FAF
656A:  MOVLW  A6
656C:  MOVWF  FAC
656E:  MOVLW  90
6570:  MOVWF  FAB
6572:  SETF   23
6574:  SETF   22
6576:  SETF   25
6578:  SETF   24
657A:  CLRF   2F
657C:  CLRF   30
657E:  CLRF   31
6580:  CLRF   32
6582:  CLRF   xFF
6584:  CLRF   xFE
6586:  MOVLB  1
6588:  CLRF   x01
658A:  MOVLW  02
658C:  MOVWF  x00
658E:  CLRF   x03
6590:  MOVWF  x02
6592:  CLRF   x09
6594:  CLRF   x08
6596:  CLRF   x0D
6598:  CLRF   x0C
659A:  CLRF   x28
659C:  MOVLW  01
659E:  MOVWF  x3E
65A0:  CLRF   x3F
65A2:  MOVFF  F8,19C
65A6:  MOVFF  AC,19D
65AA:  CLRF   xA0
65AC:  CLRF   x9F
65AE:  MOVF   FC1,W
65B0:  ANDLW  F0
65B2:  MOVWF  FC1
65B4:  MOVLW  00
65B6:  MOVLB  F
65B8:  MOVWF  x38
65BA:  MOVWF  x3C
65BC:  MOVWF  x39
65BE:  MOVWF  x3A
65C0:  MOVWF  x3B
65C2:  MOVLB  1
65C4:  CLRF   x88
65C6:  CLRF   F77
65C8:  CLRF   F78
65CA:  CLRF   F79
65CC:  MOVLW  03
65CE:  MOVWF  xA2
65D0:  MOVLW  E8
65D2:  MOVWF  xA1
....................   int16 vouta = 1000; 
....................   init_system();  
65D4:  MOVLB  0
65D6:  GOTO   0D72
....................   output_high(D2A_CSB); 
65DA:  BSF    F8A.1
....................   delay_ms(100); 
65DC:  MOVLW  64
65DE:  MOVLB  2
65E0:  MOVWF  x3F
65E2:  MOVLB  0
65E4:  CALL   0DD6
....................   read_setup(); 
65E8:  CALL   0E72
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
65EC:  MOVF   xFA,F
65EE:  BNZ   65F4
.................... 		setup.UART_Time = 10; 
65F0:  MOVLW  0A
65F2:  MOVWF  xFA
.................... 	setup.UART_Status = 1; 
65F4:  MOVLW  01
65F6:  MOVWF  xFB
....................   power_level = setup.power_in[setup.power_level]; 
65F8:  BCF    FD8.0
65FA:  RLCF   xBA,W
65FC:  MOVWF  02
65FE:  RLCF   xBB,W
6600:  MOVWF  03
6602:  MOVF   02,W
6604:  ADDLW  C3
6606:  MOVWF  FE9
6608:  MOVLW  00
660A:  ADDWFC 03,W
660C:  MOVWF  FEA
660E:  MOVFF  FEC,03
6612:  MOVF   FED,F
6614:  MOVFF  FEF,1C
6618:  MOVFF  03,1D
....................   low_power_level = setup.power_in[setup.power_low_level]; 
661C:  BCF    FD8.0
661E:  RLCF   xF2,W
6620:  MOVWF  02
6622:  RLCF   xF3,W
6624:  MOVWF  03
6626:  MOVF   02,W
6628:  ADDLW  C3
662A:  MOVWF  FE9
662C:  MOVLW  00
662E:  ADDWFC 03,W
6630:  MOVWF  FEA
6632:  MOVFF  FEC,03
6636:  MOVF   FED,F
6638:  MOVFF  FEF,1A
663C:  MOVFF  03,1B
....................   power_control = 1000; 
6640:  MOVLW  03
6642:  MOVWF  1F
6644:  MOVLW  E8
6646:  MOVWF  1E
....................   power_output(); 
6648:  CALL   1BA6
....................    
....................  
....................   PLL_initialize(); 
664C:  GOTO   1F58
....................   delay_ms(50); 
6650:  MOVLW  32
6652:  MOVLB  2
6654:  MOVWF  x3F
6656:  MOVLB  0
6658:  CALL   0DD6
....................   update_all(); 
665C:  CALL   1B3C
....................  
....................   output_high(D2A_RESET); 
6660:  BSF    F8A.3
....................   delay_ms(50); 
6662:  MOVLW  32
6664:  MOVLB  2
6666:  MOVWF  x3F
6668:  MOVLB  0
666A:  CALL   0DD6
....................   output_low(D2A_RESET); 
666E:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
6670:  MOVLW  0D
6672:  MOVLB  1
6674:  MOVWF  xA3
6676:  MOVLW  0A
6678:  MOVWF  xA4
667A:  CLRF   xA5
667C:  MOVLW  01
667E:  MOVLB  2
6680:  MOVWF  x69
6682:  MOVLW  A3
6684:  MOVWF  x68
6686:  MOVLB  0
6688:  CALL   2002
....................   COM1_send_str(VERSION); 
668C:  MOVLW  01
668E:  MOVWF  FEA
6690:  MOVLW  A3
6692:  MOVWF  FE9
6694:  MOVLW  0F
6696:  MOVWF  01
6698:  CLRF   FF7
669A:  MOVLW  00
669C:  CALL   08AE
66A0:  TBLRD*-
66A2:  TBLRD*+
66A4:  MOVFF  FF5,FEE
66A8:  DECFSZ 01,F
66AA:  BRA    66A2
66AC:  MOVLW  01
66AE:  MOVLB  2
66B0:  MOVWF  x69
66B2:  MOVLW  A3
66B4:  MOVWF  x68
66B6:  MOVLB  0
66B8:  CALL   2002
....................   COM1_send_str("\r\n"); 
66BC:  MOVLW  0D
66BE:  MOVLB  1
66C0:  MOVWF  xA3
66C2:  MOVLW  0A
66C4:  MOVWF  xA4
66C6:  CLRF   xA5
66C8:  MOVLW  01
66CA:  MOVLB  2
66CC:  MOVWF  x69
66CE:  MOVLW  A3
66D0:  MOVWF  x68
66D2:  MOVLB  0
66D4:  CALL   2002
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
66D8:  MOVLB  2
66DA:  CLRF   x2E
66DC:  MOVFF  1A2,230
66E0:  MOVFF  1A1,22F
66E4:  MOVLB  0
66E6:  CALL   0EA4
....................  
....................  
....................   delay_ms(500); 
66EA:  MOVLW  02
66EC:  MOVLB  1
66EE:  MOVWF  xB2
66F0:  MOVLW  FA
66F2:  MOVLB  2
66F4:  MOVWF  x3F
66F6:  MOVLB  0
66F8:  CALL   0DD6
66FC:  MOVLB  1
66FE:  DECFSZ xB2,F
6700:  BRA    66F0
....................   output_high(POWER_EN); 
6702:  BSF    F8C.6
....................  
.................... update_all(); 
6704:  MOVLB  0
6706:  CALL   1B3C
....................  
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
670A:  CLRWDT
....................     if (TMR_100mS_BLINK) 
670C:  BTFSS  2C.0
670E:  BRA    6718
....................       { 
....................       TMR_100mS_BLINK = 0; 
6710:  BCF    2C.0
....................       output_toggle(LED1); 
6712:  BTG    F8A.4
....................       delay_us(1); 
6714:  BRA    6716
6716:  BRA    6718
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6718:  DECFSZ 32,W
671A:  BRA    6752
671C:  MOVF   35,F
671E:  BNZ   6752
6720:  MOVLB  1
6722:  DECFSZ x08,W
6724:  BRA    672A
6726:  MOVF   x09,F
6728:  BZ    673E
672A:  MOVF   x08,F
672C:  BTFSC  FD8.2
672E:  BRA    6734
6730:  MOVLB  0
6732:  BRA    6752
6734:  MOVF   x09,F
6736:  BTFSC  FD8.2
6738:  BRA    673E
673A:  MOVLB  0
673C:  BRA    6752
....................     	{         
.................... 				if (setup.UART_Status == 1) 
673E:  MOVLB  0
6740:  DECFSZ xFB,W
6742:  BRA    6752
.................... 		      { 
.................... 			      stay_on = 1; 
6744:  MOVLB  1
6746:  CLRF   x09
6748:  MOVLW  01
674A:  MOVWF  x08
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
674C:  MOVLB  0
674E:  GOTO   273E
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6752:  MOVLB  1
6754:  MOVF   x08,W
6756:  SUBLW  02
6758:  BNZ   675E
675A:  MOVF   x09,F
675C:  BZ    6766
675E:  MOVF   x08,F
6760:  BNZ   6776
6762:  MOVF   x09,F
6764:  BNZ   6776
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6766:  MOVLB  0
6768:  BRA    6518
.................... 		   			if (COM1_rxo != 0 ) 
676A:  MOVF   35,F
676C:  BZ    6778
.................... 		   				stay_on = 2; 
676E:  MOVLB  1
6770:  CLRF   x09
6772:  MOVLW  02
6774:  MOVWF  x08
6776:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6778:  CALL   1BA6
....................    } 
677C:  BRA    670A
....................   } 
677E:  SLEEP 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
