CCS PCH C Compiler, Version 4.137, 5799               05-מאי-16 13:02

               Filename: D:\nati\projects\1410TX\BA1410TX-V3.2 New Update Status Block\Seventeenth\BA1410TX.lst

               ROM used: 27802 bytes (85%)
                         Largest free fragment is 4962
               RAM used: 431 (28%) at main() level
                         633 (41%) worst case
               Stack:    10 worst case (8 in main + 2 for interrupts)

*
0000:  GOTO   6A5A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   0AAA
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   0B56
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0B5C
0078:  BTFSS  F9D.5
007A:  GOTO   0084
007E:  BTFSC  F9E.5
0080:  GOTO   0B62
0084:  BTFSS  F9D.4
0086:  GOTO   0090
008A:  BTFSC  F9E.4
008C:  GOTO   0BB0
0090:  BTFSS  F7D.0
0092:  GOTO   009C
0096:  BTFSC  F7E.0
0098:  GOTO   0A8E
009C:  MOVFF  0E,00
00A0:  MOVFF  0F,01
00A4:  MOVFF  10,02
00A8:  MOVFF  11,03
00AC:  MOVFF  0C,FE9
00B0:  MOVFF  07,FEA
00B4:  BSF    07.7
00B6:  MOVFF  08,FE1
00BA:  MOVFF  09,FE2
00BE:  MOVFF  0A,FD9
00C2:  MOVFF  0B,FDA
00C6:  MOVFF  12,FF3
00CA:  MOVFF  13,FF4
00CE:  MOVFF  14,FFA
00D2:  MOVFF  15,FF5
00D6:  MOVFF  16,FF6
00DA:  MOVFF  17,FF7
00DE:  MOVF   04,W
00E0:  MOVFF  06,FE0
00E4:  MOVFF  05,FD8
00E8:  RETFIE 0
.................... #include <BA1410TX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0B90:  MOVLW  04
0B92:  MOVLB  2
0B94:  SUBWF  x76,F
0B96:  BNC   0BAC
0B98:  MOVLW  02
0B9A:  MOVWF  FEA
0B9C:  MOVLW  76
0B9E:  MOVWF  FE9
0BA0:  MOVF   FEF,W
0BA2:  BZ    0BAC
0BA4:  BRA    0BA8
0BA6:  NOP   
0BA8:  DECFSZ FEF,F
0BAA:  BRA    0BA6
0BAC:  MOVLB  0
0BAE:  RETURN 0
*
0F20:  MOVLW  02
0F22:  MOVWF  FEA
0F24:  MOVLW  45
0F26:  MOVWF  FE9
0F28:  MOVF   FEF,W
0F2A:  BZ    0F48
0F2C:  MOVLW  05
0F2E:  MOVWF  01
0F30:  CLRF   00
0F32:  DECFSZ 00,F
0F34:  BRA    0F32
0F36:  DECFSZ 01,F
0F38:  BRA    0F30
0F3A:  MOVLW  2E
0F3C:  MOVWF  00
0F3E:  DECFSZ 00,F
0F40:  BRA    0F3E
0F42:  BRA    0F44
0F44:  DECFSZ FEF,F
0F46:  BRA    0F2C
0F48:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION " BA1410TX V3.3" 
.................... #define VER "33" 
.................... // VERSION 3.3 Custmmer chenge Add Status Block 25.04.2016 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           10000L       // in KHz 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UINT  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
....................  
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... // To delet status check 
.................... //UINT  test_status = 0; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
.................... 	  	 UINT  cot; 
.................... 	  	 UINT  rc; 
.................... 	  	 UINT  rp; 
.................... 	  	 UCHAR UART_Time; // VERSION 3.3 UT 
.................... 	  	 UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
.................... 	  	 byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
.................... 	  	 byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
.................... 	     UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT a=2, b=2; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... UINT current_power;// VERSION 3.3  FFWR 02.05.16 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[25]; // VERSION 3.3 use 24 25.04.2016 
....................  
.................... UCHAR ttccp_login = 0; 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0FEE:  BCF    F89.2
....................  
....................   if (channel) 
0FF0:  MOVLB  2
0FF2:  MOVF   x34,F
0FF4:  BZ    0FFA
....................     output_high(DA2_DAT);    // send to VOUTB 
0FF6:  BSF    F89.4
....................   else 
0FF8:  BRA    0FFC
....................     output_low(DA2_DAT);    // send to VOUTA 
0FFA:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0FFC:  BSF    F89.3
....................   delay_cycles(15); 
0FFE:  MOVLW  04
1000:  MOVWF  00
1002:  DECFSZ 00,F
1004:  BRA    1002
1006:  BRA    1008
....................   output_low(DA2_CLK); 
1008:  BCF    F89.3
....................   delay_cycles(15); 
100A:  MOVLW  04
100C:  MOVWF  00
100E:  DECFSZ 00,F
1010:  BRA    100E
1012:  BRA    1014
....................  
....................   output_low(DA2_DAT); 
1014:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
1016:  BSF    F89.3
....................   delay_cycles(15); 
1018:  MOVLW  04
101A:  MOVWF  00
101C:  DECFSZ 00,F
101E:  BRA    101C
1020:  BRA    1022
....................   output_low(DA2_CLK); 
1022:  BCF    F89.3
....................   delay_cycles(15); 
1024:  MOVLW  04
1026:  MOVWF  00
1028:  DECFSZ 00,F
102A:  BRA    1028
102C:  BRA    102E
....................  
....................   output_high(DA2_CLK); 
102E:  BSF    F89.3
....................   delay_cycles(15); 
1030:  MOVLW  04
1032:  MOVWF  00
1034:  DECFSZ 00,F
1036:  BRA    1034
1038:  BRA    103A
....................   output_low(DA2_CLK); 
103A:  BCF    F89.3
....................   delay_cycles(15); 
103C:  MOVLW  04
103E:  MOVWF  00
1040:  DECFSZ 00,F
1042:  BRA    1040
1044:  BRA    1046
....................  
....................   output_high(DA2_CLK); 
1046:  BSF    F89.3
....................   delay_cycles(15); 
1048:  MOVLW  04
104A:  MOVWF  00
104C:  DECFSZ 00,F
104E:  BRA    104C
1050:  BRA    1052
....................   output_low(DA2_CLK); 
1052:  BCF    F89.3
....................   delay_cycles(15); 
1054:  MOVLW  04
1056:  MOVWF  00
1058:  DECFSZ 00,F
105A:  BRA    1058
105C:  BRA    105E
....................  
....................  
....................   output_high(DA2_CLK); 
105E:  BSF    F89.3
....................   if (level & 0x0200) 
1060:  ANDLW  00
1062:  MOVWF  00
1064:  MOVF   x36,W
1066:  ANDLW  02
1068:  MOVWF  03
106A:  MOVF   00,W
106C:  IORWF  03,W
106E:  BZ    1074
....................     output_high(DA2_DAT); 
1070:  BSF    F89.4
....................   else 
1072:  BRA    1076
....................     output_low(DA2_DAT); 
1074:  BCF    F89.4
....................   delay_cycles(15); 
1076:  MOVLW  04
1078:  MOVWF  00
107A:  DECFSZ 00,F
107C:  BRA    107A
107E:  BRA    1080
....................   output_low(DA2_CLK); 
1080:  BCF    F89.3
....................   delay_cycles(15); 
1082:  MOVLW  04
1084:  MOVWF  00
1086:  DECFSZ 00,F
1088:  BRA    1086
108A:  BRA    108C
....................  
....................   output_high(DA2_CLK); 
108C:  BSF    F89.3
....................   if (level & 0x0100) 
108E:  ANDLW  00
1090:  MOVWF  00
1092:  MOVF   x36,W
1094:  ANDLW  01
1096:  MOVWF  03
1098:  MOVF   00,W
109A:  IORWF  03,W
109C:  BZ    10A2
....................     output_high(DA2_DAT); 
109E:  BSF    F89.4
....................   else 
10A0:  BRA    10A4
....................     output_low(DA2_DAT); 
10A2:  BCF    F89.4
....................   output_low(DA2_CLK); 
10A4:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
10A6:  BSF    F89.3
....................   if (level & 0x0080) 
10A8:  MOVF   x35,W
10AA:  ANDLW  80
10AC:  MOVWF  00
10AE:  CLRF   03
10B0:  MOVF   00,W
10B2:  IORWF  03,W
10B4:  BZ    10BA
....................     output_high(DA2_DAT); 
10B6:  BSF    F89.4
....................   else 
10B8:  BRA    10BC
....................     output_low(DA2_DAT); 
10BA:  BCF    F89.4
....................   delay_cycles(15); 
10BC:  MOVLW  04
10BE:  MOVWF  00
10C0:  DECFSZ 00,F
10C2:  BRA    10C0
10C4:  BRA    10C6
....................   output_low(DA2_CLK); 
10C6:  BCF    F89.3
....................   delay_cycles(15); 
10C8:  MOVLW  04
10CA:  MOVWF  00
10CC:  DECFSZ 00,F
10CE:  BRA    10CC
10D0:  BRA    10D2
....................  
....................   output_high(DA2_CLK); 
10D2:  BSF    F89.3
....................   if (level & 0x0040) 
10D4:  MOVF   x35,W
10D6:  ANDLW  40
10D8:  MOVWF  00
10DA:  CLRF   03
10DC:  MOVF   00,W
10DE:  IORWF  03,W
10E0:  BZ    10E6
....................     output_high(DA2_DAT); 
10E2:  BSF    F89.4
....................   else 
10E4:  BRA    10E8
....................     output_low(DA2_DAT); 
10E6:  BCF    F89.4
....................   delay_cycles(15); 
10E8:  MOVLW  04
10EA:  MOVWF  00
10EC:  DECFSZ 00,F
10EE:  BRA    10EC
10F0:  BRA    10F2
....................   output_low(DA2_CLK); 
10F2:  BCF    F89.3
....................   delay_cycles(15); 
10F4:  MOVLW  04
10F6:  MOVWF  00
10F8:  DECFSZ 00,F
10FA:  BRA    10F8
10FC:  BRA    10FE
....................  
....................   output_high(DA2_CLK); 
10FE:  BSF    F89.3
....................   if (level & 0x0020) 
1100:  MOVF   x35,W
1102:  ANDLW  20
1104:  MOVWF  00
1106:  CLRF   03
1108:  MOVF   00,W
110A:  IORWF  03,W
110C:  BZ    1112
....................     output_high(DA2_DAT); 
110E:  BSF    F89.4
....................   else 
1110:  BRA    1114
....................     output_low(DA2_DAT); 
1112:  BCF    F89.4
....................   output_low(DA2_CLK); 
1114:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
1116:  BSF    F89.3
....................   if (level & 0x0010) 
1118:  MOVF   x35,W
111A:  ANDLW  10
111C:  MOVWF  00
111E:  CLRF   03
1120:  MOVF   00,W
1122:  IORWF  03,W
1124:  BZ    112A
....................     output_high(DA2_DAT); 
1126:  BSF    F89.4
....................   else 
1128:  BRA    112C
....................     output_low(DA2_DAT); 
112A:  BCF    F89.4
....................   delay_cycles(15); 
112C:  MOVLW  04
112E:  MOVWF  00
1130:  DECFSZ 00,F
1132:  BRA    1130
1134:  BRA    1136
....................   output_low(DA2_CLK); 
1136:  BCF    F89.3
....................   delay_cycles(15); 
1138:  MOVLW  04
113A:  MOVWF  00
113C:  DECFSZ 00,F
113E:  BRA    113C
1140:  BRA    1142
....................  
....................   output_high(DA2_CLK); 
1142:  BSF    F89.3
....................   if (level & 0x0008) 
1144:  MOVF   x35,W
1146:  ANDLW  08
1148:  MOVWF  00
114A:  CLRF   03
114C:  MOVF   00,W
114E:  IORWF  03,W
1150:  BZ    1156
....................     output_high(DA2_DAT); 
1152:  BSF    F89.4
....................   else 
1154:  BRA    1158
....................     output_low(DA2_DAT); 
1156:  BCF    F89.4
....................   output_low(DA2_CLK); 
1158:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
115A:  BSF    F89.3
....................   if (level & 0x0004) 
115C:  MOVF   x35,W
115E:  ANDLW  04
1160:  MOVWF  00
1162:  CLRF   03
1164:  MOVF   00,W
1166:  IORWF  03,W
1168:  BZ    116E
....................     output_high(DA2_DAT); 
116A:  BSF    F89.4
....................   else 
116C:  BRA    1170
....................     output_low(DA2_DAT); 
116E:  BCF    F89.4
....................   delay_cycles(15); 
1170:  MOVLW  04
1172:  MOVWF  00
1174:  DECFSZ 00,F
1176:  BRA    1174
1178:  BRA    117A
....................   output_low(DA2_CLK); 
117A:  BCF    F89.3
....................   delay_cycles(15); 
117C:  MOVLW  04
117E:  MOVWF  00
1180:  DECFSZ 00,F
1182:  BRA    1180
1184:  BRA    1186
....................  
....................   output_high(DA2_CLK); 
1186:  BSF    F89.3
....................   if (level & 0x0002) 
1188:  MOVF   x35,W
118A:  ANDLW  02
118C:  MOVWF  00
118E:  CLRF   03
1190:  MOVF   00,W
1192:  IORWF  03,W
1194:  BZ    119A
....................     output_high(DA2_DAT); 
1196:  BSF    F89.4
....................   else 
1198:  BRA    119C
....................     output_low(DA2_DAT); 
119A:  BCF    F89.4
....................   output_low(DA2_CLK); 
119C:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
119E:  BSF    F89.3
....................   if (level & 0x0001) 
11A0:  MOVF   x35,W
11A2:  ANDLW  01
11A4:  MOVWF  00
11A6:  CLRF   03
11A8:  MOVF   00,W
11AA:  IORWF  03,W
11AC:  BZ    11B2
....................     output_high(DA2_DAT); 
11AE:  BSF    F89.4
....................   else 
11B0:  BRA    11B4
....................     output_low(DA2_DAT); 
11B2:  BCF    F89.4
....................   delay_cycles(15); 
11B4:  MOVLW  04
11B6:  MOVWF  00
11B8:  DECFSZ 00,F
11BA:  BRA    11B8
11BC:  BRA    11BE
....................   output_low(DA2_CLK); 
11BE:  BCF    F89.3
....................   delay_cycles(15); 
11C0:  MOVLW  04
11C2:  MOVWF  00
11C4:  DECFSZ 00,F
11C6:  BRA    11C4
11C8:  BRA    11CA
....................  
....................  
....................   output_high(DA2_CLK); 
11CA:  BSF    F89.3
....................   delay_cycles(15); 
11CC:  MOVLW  04
11CE:  MOVWF  00
11D0:  DECFSZ 00,F
11D2:  BRA    11D0
11D4:  BRA    11D6
....................   output_low(DA2_CLK); 
11D6:  BCF    F89.3
....................  
....................   output_high(DA2_CLK); 
11D8:  BSF    F89.3
....................   delay_cycles(15); 
11DA:  MOVLW  04
11DC:  MOVWF  00
11DE:  DECFSZ 00,F
11E0:  BRA    11DE
11E2:  BRA    11E4
....................   delay_cycles(15); 
11E4:  MOVLW  04
11E6:  MOVWF  00
11E8:  DECFSZ 00,F
11EA:  BRA    11E8
11EC:  BRA    11EE
....................   output_low(DA2_CLK); 
11EE:  BCF    F89.3
....................   delay_cycles(15); 
11F0:  MOVLW  04
11F2:  MOVWF  00
11F4:  DECFSZ 00,F
11F6:  BRA    11F4
11F8:  BRA    11FA
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_cycles(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_cycles(15); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
11FA:  BSF    F89.2
....................   delay_cycles(15); 
11FC:  MOVLW  04
11FE:  MOVWF  00
1200:  DECFSZ 00,F
1202:  BRA    1200
1204:  BRA    1206
....................   output_low(DA2_LAT); 
1206:  BCF    F89.1
....................   delay_cycles(15); 
1208:  MOVLW  04
120A:  MOVWF  00
120C:  DECFSZ 00,F
120E:  BRA    120C
1210:  BRA    1212
....................   output_high(DA2_LAT); 
1212:  BSF    F89.1
....................   delay_cycles(15); 
1214:  MOVLW  04
1216:  MOVWF  00
1218:  DECFSZ 00,F
121A:  BRA    1218
121C:  BRA    121E
....................   } 
121E:  MOVLB  0
1220:  RETURN 0
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
616E:  BCF    F8A.1
....................   addr |= 0x80; 
6170:  MOVLB  2
6172:  BSF    x08.7
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
6174:  CLRF   x0A
6176:  MOVF   x0A,W
6178:  SUBLW  07
617A:  BNC   61A2
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
617C:  MOVF   x08,W
617E:  ANDLW  80
6180:  BNZ   6186
6182:  BCF    F8C.4
6184:  BRA    6188
6186:  BSF    F8C.4
....................     delay_us(1); 
6188:  BRA    618A
618A:  BRA    618C
....................     output_high(D2A_SCLK); 
618C:  BSF    F8C.0
....................     delay_us(1); 
618E:  BRA    6190
6190:  BRA    6192
....................     output_low(D2A_SCLK); 
6192:  BCF    F8C.0
....................     delay_us(1); 
6194:  BRA    6196
6196:  BRA    6198
....................     } 
6198:  MOVF   x0A,W
619A:  INCF   x0A,F
619C:  BCF    FD8.0
619E:  RLCF   x08,F
61A0:  BRA    6176
....................   for (ix = 0; ix < 8; ix++) 
61A2:  CLRF   x0A
61A4:  MOVF   x0A,W
61A6:  SUBLW  07
61A8:  BNC   61C4
....................     { 
....................     output_high(D2A_SCLK); 
61AA:  BSF    F8C.0
....................     delay_us(1); 
61AC:  BRA    61AE
61AE:  BRA    61B0
....................     output_low(D2A_SCLK); 
61B0:  BCF    F8C.0
....................     delay_us(1); 
61B2:  BRA    61B4
61B4:  BRA    61B6
....................     dout <<= 1; 
61B6:  BCF    FD8.0
61B8:  RLCF   x09,F
....................     if (input(D2A_MISO)) 
61BA:  BTFSS  F83.1
61BC:  BRA    61C0
....................       dout |= 1; 
61BE:  BSF    x09.0
....................     } 
61C0:  INCF   x0A,F
61C2:  BRA    61A4
....................   output_high(D2A_CSB); 
61C4:  BSF    F8A.1
....................   return dout; 
61C6:  MOVFF  209,01
....................   } 
61CA:  MOVLB  0
61CC:  GOTO   6616 (RETURN)
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
....................   { 
....................   UCHAR dout, ix; 
....................   output_low(D2A_CSB); 
*
591A:  BCF    F8A.1
.................... //  addr |= 0x80; 
....................   for (ix = 0; ix < 8; ix++, addr <<= 1) 
591C:  MOVLB  2
591E:  CLRF   x0B
5920:  MOVF   x0B,W
5922:  SUBLW  07
5924:  BNC   594C
....................     { 
....................     output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5926:  MOVF   x08,W
5928:  ANDLW  80
592A:  BNZ   5930
592C:  BCF    F8C.4
592E:  BRA    5932
5930:  BSF    F8C.4
....................     delay_us(1); 
5932:  BRA    5934
5934:  BRA    5936
....................     output_high(D2A_SCLK); 
5936:  BSF    F8C.0
....................     delay_us(1); 
5938:  BRA    593A
593A:  BRA    593C
....................     output_low(D2A_SCLK); 
593C:  BCF    F8C.0
....................     delay_us(1); 
593E:  BRA    5940
5940:  BRA    5942
....................     } 
5942:  MOVF   x0B,W
5944:  INCF   x0B,F
5946:  BCF    FD8.0
5948:  RLCF   x08,F
594A:  BRA    5920
....................   for (ix = 0; ix < 8; ix++, din <<= 1) 
594C:  CLRF   x0B
594E:  MOVF   x0B,W
5950:  SUBLW  07
5952:  BNC   597A
....................     { 
....................     output_bit(D2A_MOSI, (din & 0x80) != 0); 
5954:  MOVF   x09,W
5956:  ANDLW  80
5958:  BNZ   595E
595A:  BCF    F8C.4
595C:  BRA    5960
595E:  BSF    F8C.4
....................     delay_us(1); 
5960:  BRA    5962
5962:  BRA    5964
....................     output_high(D2A_SCLK); 
5964:  BSF    F8C.0
....................     delay_us(1); 
5966:  BRA    5968
5968:  BRA    596A
....................     output_low(D2A_SCLK); 
596A:  BCF    F8C.0
....................     delay_us(1); 
596C:  BRA    596E
596E:  BRA    5970
....................     } 
5970:  MOVF   x0B,W
5972:  INCF   x0B,F
5974:  BCF    FD8.0
5976:  RLCF   x09,F
5978:  BRA    594E
....................   output_high(D2A_CSB); 
597A:  BSF    F8A.1
....................   return dout; 
597C:  MOVFF  20A,01
....................   } 
5980:  MOVLB  0
5982:  RETURN 0
....................  
....................  
.................... #include "ADF4350.c" 
.................... /* 
.................... REGISTERS FRO PLL ADF4350: 
.................... Flow= 2185MHz 
.................... Fhigh=2400MHz 
.................... Steps: 100KHz 
.................... Ref : 10MHz 
.................... Phase Detector: 10MHz 
....................  
.................... REG0 = Calculated 
.................... REG1= Calculated 
.................... REG2=18004EC2 
.................... REG3=000004B3 
.................... REG4=0095003C 
....................  
.................... Examples for REG0, REG1: 
.................... 2185MHz 
.................... REG0:DA8000 
.................... REG1: 8008191 
....................  
.................... 2300MHz 
.................... REG0:E60000 
.................... REG1: 8008191 
....................  
....................  */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
1604:  MOVLW  08
1606:  MOVLB  2
1608:  MOVWF  x42
160A:  MOVF   x42,F
160C:  BZ    164A
....................     { 
....................     if (data & 0X80) 
160E:  BTFSS  x41.7
1610:  BRA    1616
....................       output_high(PLL_DAT); 
1612:  BSF    F8B.3
....................     else 
1614:  BRA    1618
....................       output_low(PLL_DAT); 
1616:  BCF    F8B.3
....................     delay_us(10); 
1618:  MOVLW  0C
161A:  MOVWF  00
161C:  DECFSZ 00,F
161E:  BRA    161C
1620:  BRA    1622
1622:  NOP   
....................     output_high(PLL_CLK); 
1624:  BSF    F8B.2
....................     delay_us(10); 
1626:  MOVLW  0C
1628:  MOVWF  00
162A:  DECFSZ 00,F
162C:  BRA    162A
162E:  BRA    1630
1630:  NOP   
....................     output_low(PLL_CLK); 
1632:  BCF    F8B.2
....................  
....................     delay_us(25); 
1634:  MOVLW  20
1636:  MOVWF  00
1638:  DECFSZ 00,F
163A:  BRA    1638
163C:  BRA    163E
163E:  NOP   
....................     } 
1640:  MOVF   x42,W
1642:  DECF   x42,F
1644:  BCF    FD8.0
1646:  RLCF   x41,F
1648:  BRA    160A
....................   output_low(PLL_DAT); 
164A:  BCF    F8B.3
....................   output_low(PLL_CLK); 
164C:  BCF    F8B.2
....................   } 
164E:  MOVLB  0
1650:  RETURN 0
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
1652:  CLRWDT
....................   disable_interrupts(GLOBAL); 
1654:  BCF    FF2.6
1656:  BCF    FF2.7
1658:  BTFSC  FF2.7
165A:  BRA    1656
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
165C:  MOVFF  23F,240
1660:  MOVFF  23F,241
1664:  RCALL  1604
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
1666:  MOVFF  23E,240
166A:  MOVFF  23E,241
166E:  RCALL  1604
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
1670:  MOVFF  23D,240
1674:  MOVFF  23D,241
1678:  RCALL  1604
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
167A:  MOVFF  23C,240
167E:  MOVFF  23C,241
1682:  RCALL  1604
....................   delay_us(40); 
1684:  MOVLW  34
1686:  MOVWF  00
1688:  DECFSZ 00,F
168A:  BRA    1688
168C:  BRA    168E
168E:  NOP   
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
1690:  BSF    F8B.1
....................   delay_us(5); 
1692:  MOVLW  06
1694:  MOVWF  00
1696:  DECFSZ 00,F
1698:  BRA    1696
169A:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
169C:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
169E:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
16A0:  MOVLW  C0
16A2:  IORWF  FF2,F
....................   restart_wdt(); 
16A4:  CLRWDT
....................   } 
16A6:  RETURN 0
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
2190:  MOVLB  1
2192:  CLRF   xBD
2194:  MOVLW  05
2196:  MOVWF  xBC
2198:  MOVF   xBD,W
219A:  SUBLW  05
219C:  BNC   220A
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
219E:  MOVF   xBC,W
21A0:  MULLW  04
21A2:  MOVF   FF3,W
21A4:  CLRF   03
21A6:  MOVLB  0
21A8:  CALL   00EA
21AC:  TBLRD*+
21AE:  MOVFF  FF5,01
21B2:  TBLRD*+
21B4:  MOVFF  FF5,02
21B8:  TBLRD*+
21BA:  MOVFF  FF5,03
21BE:  MOVFF  03,1BB
21C2:  MOVFF  02,1BA
21C6:  MOVFF  01,1B9
21CA:  MOVFF  FE8,1B8
....................     prog |= (ULONG)idx; 
21CE:  MOVFF  1BC,00
21D2:  CLRF   01
21D4:  CLRF   02
21D6:  CLRF   03
21D8:  MOVF   00,W
21DA:  MOVLB  1
21DC:  IORWF  xB8,F
21DE:  MOVF   01,W
21E0:  IORWF  xB9,F
21E2:  MOVF   02,W
21E4:  IORWF  xBA,F
21E6:  MOVF   03,W
21E8:  IORWF  xBB,F
....................     PLL_send_word(prog); 
21EA:  MOVFF  1BB,23F
21EE:  MOVFF  1BA,23E
21F2:  MOVFF  1B9,23D
21F6:  MOVFF  1B8,23C
21FA:  MOVLB  0
21FC:  CALL   1652
....................     } 
2200:  MOVLB  1
2202:  MOVF   xBD,W
2204:  INCF   xBD,F
2206:  DECF   xBC,F
2208:  BRA    2198
....................   delay_ms(250); 
220A:  MOVLW  FA
220C:  MOVLB  2
220E:  MOVWF  x45
2210:  MOVLB  0
2212:  CALL   0F20
....................   PLL_send_word(prog); 
2216:  MOVFF  1BB,23F
221A:  MOVFF  1BA,23E
221E:  MOVFF  1B9,23D
2222:  MOVFF  1B8,23C
2226:  CALL   1652
....................   delay_ms(250); 
222A:  MOVLW  FA
222C:  MOVLB  2
222E:  MOVWF  x45
2230:  MOVLB  0
2232:  CALL   0F20
....................   } 
2236:  GOTO   6B6E (RETURN)
....................  
.................... //--------- frequency computation functions -------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
....................   { 
*
13D8:  MOVLB  2
13DA:  CLRF   x45
13DC:  CLRF   x44
13DE:  CLRF   x43
13E0:  MOVLW  02
13E2:  MOVWF  x42
....................   ULONG Fvco, D, RFdiv = 2; 
....................   restart_wdt(); 
13E4:  CLRWDT
....................   D = Frequest; 
13E6:  CLRF   x41
13E8:  CLRF   x40
13EA:  MOVFF  239,23F
13EE:  MOVFF  238,23E
....................   PLL_RFdiv = 0x0095003CL; 
13F2:  MOVLB  1
13F4:  CLRF   x42
13F6:  MOVLW  95
13F8:  MOVWF  x41
13FA:  CLRF   x40
13FC:  MOVLW  3C
13FE:  MOVWF  x3F
....................   if (Frequest >= 22000) 
1400:  MOVLB  2
1402:  MOVF   x39,W
1404:  SUBLW  54
1406:  BC    142C
1408:  XORLW  FF
140A:  BNZ   1412
140C:  MOVF   x38,W
140E:  SUBLW  EF
1410:  BC    142C
....................     { 
....................     RFdiv = 1; 
1412:  CLRF   x45
1414:  CLRF   x44
1416:  CLRF   x43
1418:  MOVLW  01
141A:  MOVWF  x42
....................     PLL_RFdiv = 0x0085003CL; 
141C:  MOVLB  1
141E:  CLRF   x42
1420:  MOVLW  85
1422:  MOVWF  x41
1424:  CLRF   x40
1426:  MOVLW  3C
1428:  MOVWF  x3F
142A:  MOVLB  2
....................     }   
....................   restart_wdt(); 
142C:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
142E:  MOVFF  241,24D
1432:  MOVFF  240,24C
1436:  MOVFF  23F,24B
143A:  MOVFF  23E,24A
143E:  MOVFF  245,251
1442:  MOVFF  244,250
1446:  MOVFF  243,24F
144A:  MOVFF  242,24E
144E:  MOVLB  0
1450:  RCALL  12E8
1452:  MOVFF  03,249
1456:  MOVFF  02,248
145A:  MOVFF  01,247
145E:  MOVFF  00,246
1462:  MOVFF  03,24D
1466:  MOVFF  02,24C
146A:  MOVFF  01,24B
146E:  MOVFF  00,24A
1472:  MOVLB  2
1474:  CLRF   x51
1476:  CLRF   x50
1478:  CLRF   x4F
147A:  MOVLW  64
147C:  MOVWF  x4E
147E:  MOVLB  0
1480:  RCALL  12E8
1482:  MOVFF  03,241
1486:  MOVFF  02,240
148A:  MOVFF  01,23F
148E:  MOVFF  00,23E
....................   restart_wdt(); 
1492:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
1494:  BCF    FD8.1
1496:  MOVFF  241,251
149A:  MOVFF  240,250
149E:  MOVFF  23F,24F
14A2:  MOVFF  23E,24E
14A6:  MOVLB  2
14A8:  CLRF   x55
14AA:  CLRF   x54
14AC:  MOVLW  27
14AE:  MOVWF  x53
14B0:  MOVLW  10
14B2:  MOVWF  x52
14B4:  MOVLB  0
14B6:  RCALL  1344
14B8:  MOVFF  03,132
14BC:  MOVFF  02,131
14C0:  MOVFF  01,130
14C4:  MOVFF  00,12F
....................   restart_wdt(); 
14C8:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
14CA:  MOVFF  132,24D
14CE:  MOVFF  131,24C
14D2:  MOVFF  130,24B
14D6:  MOVFF  12F,24A
14DA:  MOVLB  2
14DC:  CLRF   x51
14DE:  CLRF   x50
14E0:  MOVLW  27
14E2:  MOVWF  x4F
14E4:  MOVLW  10
14E6:  MOVWF  x4E
14E8:  MOVLB  0
14EA:  RCALL  12E8
14EC:  MOVF   00,W
14EE:  MOVLB  2
14F0:  SUBWF  x3E,W
14F2:  MOVWF  x46
14F4:  MOVF   01,W
14F6:  SUBWFB x3F,W
14F8:  MOVWF  x47
14FA:  MOVF   02,W
14FC:  SUBWFB x40,W
14FE:  MOVWF  x48
1500:  MOVF   03,W
1502:  SUBWFB x41,W
1504:  MOVWF  x49
1506:  CLRF   x4D
1508:  CLRF   x4C
150A:  CLRF   x4B
150C:  MOVLW  64
150E:  MOVWF  x4A
1510:  MOVFF  245,251
1514:  MOVFF  244,250
1518:  MOVFF  243,24F
151C:  MOVFF  242,24E
1520:  MOVLB  0
1522:  RCALL  12E8
1524:  MOVFF  03,24D
1528:  MOVFF  02,24C
152C:  MOVFF  01,24B
1530:  MOVFF  00,24A
1534:  BCF    FD8.1
1536:  MOVFF  249,251
153A:  MOVFF  248,250
153E:  MOVFF  247,24F
1542:  MOVFF  246,24E
1546:  MOVFF  03,255
154A:  MOVFF  02,254
154E:  MOVFF  01,253
1552:  MOVFF  00,252
1556:  RCALL  1344
1558:  MOVFF  03,136
155C:  MOVFF  02,135
1560:  MOVFF  01,134
1564:  MOVFF  00,133
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
1568:  BCF    FD8.1
156A:  MOVLB  2
156C:  CLRF   x51
156E:  CLRF   x50
1570:  CLRF   x4F
1572:  MOVLW  64
1574:  MOVWF  x4E
1576:  MOVFF  245,255
157A:  MOVFF  244,254
157E:  MOVFF  243,253
1582:  MOVFF  242,252
1586:  MOVLB  0
1588:  RCALL  1344
158A:  MOVFF  03,249
158E:  MOVFF  02,248
1592:  MOVFF  01,247
1596:  MOVFF  00,246
159A:  MOVLB  2
159C:  RLCF   00,W
159E:  MOVWF  00
15A0:  RLCF   01,W
15A2:  MOVWF  01
15A4:  RLCF   02,W
15A6:  MOVWF  02
15A8:  RLCF   03,W
15AA:  MOVWF  03
15AC:  RLCF   00,F
15AE:  RLCF   01,F
15B0:  RLCF   02,F
15B2:  RLCF   03,F
15B4:  RLCF   00,F
15B6:  RLCF   01,F
15B8:  RLCF   02,F
15BA:  RLCF   03,F
15BC:  MOVLW  F8
15BE:  ANDWF  00,F
15C0:  MOVLW  08
15C2:  ADDWF  03,W
15C4:  MOVWF  x49
15C6:  MOVLW  01
15C8:  ADDWF  00,W
15CA:  MOVLB  1
15CC:  MOVWF  x37
15CE:  MOVLW  00
15D0:  MOVLB  2
15D2:  ADDWFC 01,W
15D4:  MOVLB  1
15D6:  MOVWF  x38
15D8:  MOVLW  00
15DA:  MOVLB  2
15DC:  ADDWFC 02,W
15DE:  MOVLB  1
15E0:  MOVWF  x39
15E2:  MOVLW  00
15E4:  MOVLB  2
15E6:  ADDWFC x49,W
15E8:  MOVLB  1
15EA:  MOVWF  x3A
....................   restart_wdt(); 
15EC:  CLRWDT
....................   Fvco++; 
15EE:  MOVLW  01
15F0:  MOVLB  2
15F2:  ADDWF  x3A,F
15F4:  BTFSC  FD8.0
15F6:  INCF   x3B,F
15F8:  BTFSC  FD8.2
15FA:  INCF   x3C,F
15FC:  BTFSC  FD8.2
15FE:  INCF   x3D,F
....................   } 
1600:  MOVLB  0
1602:  RETURN 0
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
*
16A8:  MOVLB  2
16AA:  CLRF   x3D
16AC:  MOVLB  1
16AE:  RLCF   x2F,W
16B0:  MOVLB  2
16B2:  MOVWF  x3E
16B4:  MOVLB  1
16B6:  RLCF   x30,W
16B8:  MOVLB  2
16BA:  MOVWF  x3F
16BC:  MOVLB  1
16BE:  RLCF   x31,W
16C0:  MOVLB  2
16C2:  MOVWF  x40
16C4:  RLCF   x3E,F
16C6:  RLCF   x3F,F
16C8:  RLCF   x40,F
16CA:  RLCF   x3E,F
16CC:  RLCF   x3F,F
16CE:  RLCF   x40,F
16D0:  RLCF   x3E,F
16D2:  RLCF   x3F,F
16D4:  RLCF   x40,F
16D6:  RLCF   x3E,F
16D8:  RLCF   x3F,F
16DA:  RLCF   x40,F
16DC:  RLCF   x3E,F
16DE:  RLCF   x3F,F
16E0:  RLCF   x40,F
16E2:  RLCF   x3E,F
16E4:  RLCF   x3F,F
16E6:  RLCF   x40,F
16E8:  MOVLW  80
16EA:  ANDWF  x3E,F
16EC:  MOVLB  1
16EE:  RLCF   x33,W
16F0:  MOVWF  00
16F2:  RLCF   x34,W
16F4:  MOVWF  01
16F6:  RLCF   x35,W
16F8:  MOVWF  02
16FA:  RLCF   x36,W
16FC:  MOVWF  03
16FE:  RLCF   00,F
1700:  RLCF   01,F
1702:  RLCF   02,F
1704:  RLCF   03,F
1706:  RLCF   00,F
1708:  RLCF   01,F
170A:  RLCF   02,F
170C:  RLCF   03,F
170E:  MOVLW  F8
1710:  ANDWF  00,F
1712:  MOVF   00,W
1714:  MOVLB  2
1716:  ADDWF  x3D,W
1718:  MOVWF  x38
171A:  MOVF   01,W
171C:  ADDWFC x3E,W
171E:  MOVWF  x39
1720:  MOVF   02,W
1722:  ADDWFC x3F,W
1724:  MOVWF  x3A
1726:  MOVF   03,W
1728:  ADDWFC x40,W
172A:  MOVWF  x3B
....................   PLL_frequency = prog; 
172C:  MOVFF  23B,13E
1730:  MOVFF  23A,13D
1734:  MOVFF  239,13C
1738:  MOVFF  238,13B
....................   restart_wdt(); 
173C:  CLRWDT
....................   PLL_send_word(prog); 
173E:  MOVFF  23B,23F
1742:  MOVFF  23A,23E
1746:  MOVFF  239,23D
174A:  MOVFF  238,23C
174E:  MOVLB  0
1750:  RCALL  1652
....................   delay_us(20); 
1752:  MOVLW  1A
1754:  MOVWF  00
1756:  DECFSZ 00,F
1758:  BRA    1756
175A:  NOP   
....................   restart_wdt(); 
175C:  CLRWDT
....................   PLL_send_word(PLL_mod); 
175E:  MOVFF  13A,23F
1762:  MOVFF  139,23E
1766:  MOVFF  138,23D
176A:  MOVFF  137,23C
176E:  RCALL  1652
....................   delay_us(20); 
1770:  MOVLW  1A
1772:  MOVWF  00
1774:  DECFSZ 00,F
1776:  BRA    1774
1778:  NOP   
....................   restart_wdt(); 
177A:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
177C:  MOVFF  142,23F
1780:  MOVFF  141,23E
1784:  MOVFF  140,23D
1788:  MOVFF  13F,23C
178C:  RCALL  1652
....................    
....................   } 
178E:  RETURN 0
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(1000); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0A8E:  BCF    F7E.0
0A90:  GOTO   009C
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
*
0AAA:  SETF   26
....................   TMR_1mS_Count++; 
0AAC:  INCF   27,F
....................    if (++TMR_SendStatus >= setup.Block_per_second && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
0AAE:  INCF   2F,F
0AB0:  BTFSC  FD8.2
0AB2:  INCF   30,F
0AB4:  MOVLB  1
0AB6:  MOVF   x00,W
0AB8:  SUBWF  30,W
0ABA:  BNC   0B10
0ABC:  BNZ   0ACE
0ABE:  MOVLB  0
0AC0:  MOVF   xFF,W
0AC2:  SUBWF  2F,W
0AC4:  BTFSC  FD8.0
0AC6:  BRA    0ACC
0AC8:  MOVLB  1
0ACA:  BRA    0B10
0ACC:  MOVLB  1
0ACE:  DECFSZ 33,W
0AD0:  BRA    0B10
0AD2:  MOVLB  0
0AD4:  DECFSZ xFC,W
0AD6:  BRA    0ADA
0AD8:  BRA    0ADE
0ADA:  MOVLB  1
0ADC:  BRA    0B10
0ADE:  MOVLB  1
0AE0:  DECFSZ x0D,W
0AE2:  BRA    0AE8
0AE4:  MOVF   x0E,F
0AE6:  BZ    0AF0
0AE8:  MOVF   x0D,F
0AEA:  BNZ   0B10
0AEC:  MOVF   x0E,F
0AEE:  BNZ   0B10
....................     { 
....................     TMR_SendStatus = 0; 
0AF0:  CLRF   30
0AF2:  CLRF   2F
....................     SendStatusFlag = 1; 
0AF4:  MOVLW  01
0AF6:  MOVWF  31
....................     TX_Counter++; //VERSION 3.3 21.3.2016 cunt the number of time block is sent 
0AF8:  INCF   x11,F
0AFA:  BTFSC  FD8.2
0AFC:  INCF   x12,F
....................     //if (StartStatusFlag == 1 && setup.UART_Status == 1) 
....................     if (!ttccp_login) 
0AFE:  MOVF   x2E,F
0B00:  BNZ   0B10
....................       { 
....................       	COM1_send_block(25); 
0B02:  MOVLB  2
0B04:  CLRF   x76
0B06:  MOVLW  19
0B08:  MOVWF  x75
0B0A:  MOVLB  0
0B0C:  BRA    0A94
0B0E:  MOVLB  1
....................       } 
....................     } 
....................   if (++TMR_1mS_Cnt >= 10) 
0B10:  INCF   28,F
0B12:  MOVF   28,W
0B14:  SUBLW  09
0B16:  BC    0B4E
....................     { 
....................     TMR_1mS_Cnt = 0; 
0B18:  CLRF   28
....................     ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
0B1A:  INCF   2F,F
0B1C:  BTFSC  FD8.2
0B1E:  INCF   30,F
....................     TMR_10mS_Count++; 
0B20:  INCF   29,F
....................     TMR_10mS_Flags = 0xFF; 
0B22:  SETF   2A
....................     if (++TMR_10mS_Cnt >= 10) 
0B24:  INCF   2B,F
0B26:  MOVF   2B,W
0B28:  SUBLW  09
0B2A:  BC    0B4E
....................       { 
....................       TMR_10mS_Cnt = 0; 
0B2C:  CLRF   2B
....................       TMR_100mS_Flags = 0xFF; 
0B2E:  SETF   2C
....................       if (++TMR_100mS_Cnt >= 10) 
0B30:  INCF   2D,F
0B32:  MOVF   2D,W
0B34:  SUBLW  09
0B36:  BC    0B4E
....................         { 
....................         TMR_100mS_Cnt = 0; 
0B38:  CLRF   2D
....................         TMR_1sec_Flags = 0xFF; 
0B3A:  SETF   2E
....................         if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
0B3C:  INCF   32,F
0B3E:  MOVLB  0
0B40:  MOVF   xFB,W
0B42:  SUBWF  32,W
0B44:  BNC   0B4C
....................    				 { 
....................    					 TMR_StartStatus = 0; 
0B46:  CLRF   32
....................     				 StartStatusFlag = 1; 
0B48:  MOVLW  01
0B4A:  MOVWF  33
0B4C:  MOVLB  1
....................     				 //test_status++; 
....................     				 //setup.Block_per_second = convert_power(test_status); 
.................... 			     } 
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0B4E:  BCF    F9E.1
0B50:  MOVLB  0
0B52:  GOTO   009C
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
0B56:  BCF    FF2.1
0B58:  GOTO   009C
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0B5C:  BCF    FF0.0
0B5E:  GOTO   009C
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0B62:  MOVFF  FAE,275
....................   COM1_rbuf[COM1_rxi] = x; 
0B66:  CLRF   03
0B68:  MOVF   35,W
0B6A:  ADDLW  37
0B6C:  MOVWF  FE9
0B6E:  MOVLW  00
0B70:  ADDWFC 03,W
0B72:  MOVWF  FEA
0B74:  MOVFF  275,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
0B78:  INCF   35,F
0B7A:  MOVF   35,W
0B7C:  SUBLW  1F
0B7E:  BC    0B82
....................     COM1_rxi = 0; 
0B80:  CLRF   35
....................   if (COM1_rcnt < COM1_RX_LEN) 
0B82:  MOVF   34,W
0B84:  SUBLW  1F
0B86:  BNC   0B8A
....................     COM1_rcnt++; 
0B88:  INCF   34,F
....................   } 
....................    
0B8A:  BCF    F9E.5
0B8C:  GOTO   009C
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
....................   { 
.................... 	  output_high(RS485_EN); 
*
0BB0:  BSF    F8C.5
.................... 	  status_tx_index = 0; 
0BB2:  MOVLB  1
0BB4:  CLRF   x14
0BB6:  CLRF   x13
.................... 	  while (tx_block_len--) 
.................... 	  { 
0BB8:  MOVFF  110,03
0BBC:  MOVF   x0F,W
0BBE:  BTFSC  FD8.2
0BC0:  DECF   x10,F
0BC2:  DECF   x0F,F
0BC4:  IORWF  03,W
0BC6:  BZ    0C02
.................... 		  output_high(RS485_EN); 
0BC8:  BSF    F8C.5
.................... 		 	TXREG1 = status_buffer[status_tx_index++]; 
0BCA:  MOVFF  114,03
0BCE:  MOVF   x13,W
0BD0:  INCF   x13,F
0BD2:  BTFSC  FD8.2
0BD4:  INCF   x14,F
0BD6:  MOVLB  2
0BD8:  MOVWF  x75
0BDA:  MOVLW  15
0BDC:  ADDWF  x75,W
0BDE:  MOVWF  FE9
0BE0:  MOVLW  01
0BE2:  ADDWFC 03,W
0BE4:  MOVWF  FEA
0BE6:  MOVFF  FEF,FAD
.................... 		 	delay_us(500);  
0BEA:  MOVLW  02
0BEC:  MOVWF  x75
0BEE:  MOVLW  F9
0BF0:  MOVWF  x76
0BF2:  MOVLB  0
0BF4:  RCALL  0B90
0BF6:  MOVLB  2
0BF8:  DECFSZ x75,F
0BFA:  BRA    0BEE
.................... 		 	output_low(RS485_EN); 
0BFC:  BCF    F8C.5
.................... 		} 
0BFE:  MOVLB  1
0C00:  BRA    0BB8
.................... 		 
.................... 		disable_interrupts(int_TBE);     
0C02:  BCF    F9D.4
....................   } 
....................  
....................  
....................  
.................... #include "BA1410TX_serial.c" 
....................  
0C04:  BCF    F9E.4
0C06:  MOVLB  0
0C08:  GOTO   009C
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
2A58:  CLRF   03
2A5A:  MOVF   36,W
2A5C:  ADDLW  37
2A5E:  MOVWF  FE9
2A60:  MOVLW  00
2A62:  ADDWFC 03,W
2A64:  MOVWF  FEA
2A66:  MOVFF  FEF,1D1
2A6A:  MOVLB  1
....................   if (++COM1_rxo >= COM1_RX_LEN) 
2A6C:  INCF   36,F
2A6E:  MOVF   36,W
2A70:  SUBLW  1F
2A72:  BC    2A76
....................     COM1_rxo = 0; 
2A74:  CLRF   36
....................   if (COM1_rcnt) 
2A76:  MOVF   34,F
2A78:  BZ    2A7C
....................     COM1_rcnt--; 
2A7A:  DECF   34,F
....................   return x; 
2A7C:  MOVFF  1D1,01
....................   } 
2A80:  MOVLB  0
2A82:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
223A:  BCF    F9D.5
....................   output_high(RS485_EN); 
223C:  BSF    F8C.5
....................   delay_us(100); 
223E:  MOVLW  84
2240:  MOVWF  00
2242:  DECFSZ 00,F
2244:  BRA    2242
2246:  BRA    2248
2248:  NOP   
....................   pos = 0; 
224A:  MOVLB  2
224C:  CLRF   x71
....................   while (*str) 
....................     { 
224E:  MOVFF  26F,03
2252:  MOVFF  26E,FE9
2256:  MOVFF  26F,FEA
225A:  MOVF   FEF,F
225C:  BZ    22EA
....................     x = *str++; 
225E:  MOVFF  26F,03
2262:  MOVF   x6E,W
2264:  INCF   x6E,F
2266:  BTFSC  FD8.2
2268:  INCF   x6F,F
226A:  MOVWF  FE9
226C:  MOVFF  03,FEA
2270:  MOVFF  FEF,270
....................     if (x != '\t') 
2274:  MOVF   x70,W
2276:  SUBLW  09
2278:  BZ    22A6
....................       { 
....................       TXREG1 = x; 
227A:  MOVFF  270,FAD
....................       pos++; 
227E:  INCF   x71,F
....................       delay_us(300);  
2280:  MOVLW  02
2282:  MOVWF  x73
2284:  CLRF   19
2286:  BTFSC  FF2.7
2288:  BSF    19.7
228A:  BCF    FF2.7
228C:  MOVLW  95
228E:  MOVWF  x76
2290:  MOVLB  0
2292:  CALL   0B90
2296:  BTFSC  19.7
2298:  BSF    FF2.7
229A:  MOVLB  2
229C:  DECFSZ x73,F
229E:  BRA    2284
....................       x = RCREG1; 
22A0:  MOVFF  FAE,270
....................       } 
....................     else 
22A4:  BRA    22E8
....................       { 
....................       tab_stop = 32; 
22A6:  MOVLW  20
22A8:  MOVWF  x72
....................       if (pos >= tab_stop) 
22AA:  MOVF   x72,W
22AC:  SUBWF  x71,W
22AE:  BNC   22B6
....................         tab_stop = pos + 2; 
22B0:  MOVLW  02
22B2:  ADDWF  x71,W
22B4:  MOVWF  x72
....................       while (pos < tab_stop) 
....................         { 
22B6:  MOVF   x72,W
22B8:  SUBWF  x71,W
22BA:  BC    22E8
....................         TXREG1 = ' '; 
22BC:  MOVLW  20
22BE:  MOVWF  FAD
....................         pos++; 
22C0:  INCF   x71,F
....................         delay_us(300); 
22C2:  MOVLW  02
22C4:  MOVWF  x73
22C6:  CLRF   19
22C8:  BTFSC  FF2.7
22CA:  BSF    19.7
22CC:  BCF    FF2.7
22CE:  MOVLW  95
22D0:  MOVWF  x76
22D2:  MOVLB  0
22D4:  CALL   0B90
22D8:  BTFSC  19.7
22DA:  BSF    FF2.7
22DC:  MOVLB  2
22DE:  DECFSZ x73,F
22E0:  BRA    22C6
....................         x = RCREG1; 
22E2:  MOVFF  FAE,270
....................         } 
22E6:  BRA    22B6
....................       } 
....................     } 
22E8:  BRA    224E
....................   delay_us(100); 
22EA:  MOVLW  84
22EC:  MOVWF  00
22EE:  DECFSZ 00,F
22F0:  BRA    22EE
22F2:  BRA    22F4
22F4:  NOP   
....................   output_low(RS485_EN); 
22F6:  BCF    F8C.5
....................   x = RCREG1; 
22F8:  MOVFF  FAE,270
....................   enable_interrupts(int_RDA); 
22FC:  BSF    F9D.5
....................   } 
22FE:  MOVLB  0
2300:  RETURN 0
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
....................   { 
....................   UCHAR pos;//, tab_stop; 
....................   pos = 0; 
*
0A94:  MOVLB  2
0A96:  CLRF   x77
....................   tx_block_len = len ; 
0A98:  MOVFF  276,110
0A9C:  MOVFF  275,10F
....................   //status_tx_index = 0; 
....................    
....................   //TXREG1 = status_buffer[0]; 
....................   clear_interrupt(int_TBE); 
0AA0:  BCF    F9E.4
....................   enable_interrupts(int_TBE); 
0AA2:  BSF    F9D.4
....................   //TXREG1 = status_buffer[0]; 
....................   //output_high(RS485_EN);  
....................   } 
0AA4:  MOVLB  0
0AA6:  GOTO   0B0E (RETURN)
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   ttccp_error_message[0] = 0; 
*
0EA6:  MOVLB  1
0EA8:  CLRF   x7A
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0EAA:  CLRF   34
0EAC:  MOVFF  34,36
0EB0:  MOVFF  36,35
....................   comm_state = COMM_INIT; 
0EB4:  CLRF   57
....................   enable_interrupts(int_RDA); 
0EB6:  BSF    F9D.5
....................   } 
0EB8:  MOVLB  0
0EBA:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
2AA2:  MOVLB  1
2AA4:  MOVF   x43,W
2AA6:  INCF   x43,F
2AA8:  CLRF   03
2AAA:  ADDLW  59
2AAC:  MOVWF  FE9
2AAE:  MOVLW  00
2AB0:  ADDWFC 03,W
2AB2:  MOVWF  FEA
2AB4:  CLRF   03
2AB6:  MOVFF  FEF,01
2ABA:  MOVFF  03,02
....................   } 
2ABE:  MOVLB  0
2AC0:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
.................... //  skip_spc(); 
....................   return comm_buf[comm_ptr]; 
*
2A84:  CLRF   03
2A86:  MOVLB  1
2A88:  MOVF   x43,W
2A8A:  ADDLW  59
2A8C:  MOVWF  FE9
2A8E:  MOVLW  00
2A90:  ADDWFC 03,W
2A92:  MOVWF  FEA
2A94:  CLRF   03
2A96:  MOVFF  FEF,01
2A9A:  MOVFF  03,02
....................   } 
2A9E:  MOVLB  0
2AA0:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
....................     comm_ptr++; 
*
2AC2:  CLRF   03
2AC4:  MOVLB  1
2AC6:  MOVF   x43,W
2AC8:  ADDLW  59
2ACA:  MOVWF  FE9
2ACC:  MOVLW  00
2ACE:  ADDWFC 03,W
2AD0:  MOVWF  FEA
2AD2:  MOVF   FEF,F
2AD4:  BZ    2B06
2AD6:  CLRF   03
2AD8:  MOVF   x43,W
2ADA:  ADDLW  59
2ADC:  MOVWF  FE9
2ADE:  MOVLW  00
2AE0:  ADDWFC 03,W
2AE2:  MOVWF  FEA
2AE4:  MOVF   FEF,W
2AE6:  SUBLW  2C
2AE8:  BZ    2AFE
2AEA:  CLRF   03
2AEC:  MOVF   x43,W
2AEE:  ADDLW  59
2AF0:  MOVWF  FE9
2AF2:  MOVLW  00
2AF4:  ADDWFC 03,W
2AF6:  MOVWF  FEA
2AF8:  MOVF   FEF,W
2AFA:  SUBLW  20
2AFC:  BNZ   2B06
2AFE:  INCF   x43,F
2B00:  MOVLB  0
2B02:  BRA    2AC2
2B04:  MOVLB  1
....................   } 
2B06:  MOVLB  0
2B08:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
....................   { 
*
2B5E:  MOVLB  2
2B60:  CLRF   x3B
2B62:  MOVLW  01
2B64:  MOVWF  x3A
....................   SINT num, sign = 1; 
....................   skip_spc(); 
2B66:  MOVLB  0
2B68:  RCALL  2AC2
....................   if (comm_buf[comm_ptr]) 
2B6A:  CLRF   03
2B6C:  MOVLB  1
2B6E:  MOVF   x43,W
2B70:  ADDLW  59
2B72:  MOVWF  FE9
2B74:  MOVLW  00
2B76:  ADDWFC 03,W
2B78:  MOVWF  FEA
2B7A:  MOVF   FEF,F
2B7C:  BZ    2C06
....................     { 
....................     num = 0; 
2B7E:  MOVLB  2
2B80:  CLRF   x39
2B82:  CLRF   x38
....................     if (peek_char() == '-') 
2B84:  MOVLB  0
2B86:  RCALL  2A84
2B88:  MOVFF  02,23D
2B8C:  MOVFF  01,23C
2B90:  MOVLB  2
2B92:  MOVF   01,W
2B94:  SUBLW  2D
2B96:  BNZ   2BA6
2B98:  MOVF   x3D,F
2B9A:  BNZ   2BA6
....................       { 
....................       sign = -1; 
2B9C:  SETF   x3B
2B9E:  SETF   x3A
....................       get_char(); 
2BA0:  MOVLB  0
2BA2:  RCALL  2AA2
2BA4:  MOVLB  2
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2BA6:  CLRF   03
2BA8:  MOVLB  1
2BAA:  MOVF   x43,W
2BAC:  ADDLW  59
2BAE:  MOVWF  FE9
2BB0:  MOVLW  00
2BB2:  ADDWFC 03,W
2BB4:  MOVWF  FEA
2BB6:  MOVFF  FEF,23C
2BBA:  MOVLB  2
2BBC:  MOVF   x3C,W
2BBE:  SUBLW  2F
2BC0:  BC    2C06
2BC2:  MOVF   x3C,W
2BC4:  SUBLW  39
2BC6:  BNC   2C06
2BC8:  MOVFF  239,23D
2BCC:  MOVFF  238,23C
2BD0:  CLRF   x3F
2BD2:  MOVLW  0A
2BD4:  MOVWF  x3E
2BD6:  MOVLB  0
2BD8:  RCALL  2B0A
2BDA:  MOVFF  02,23D
2BDE:  MOVFF  01,23C
2BE2:  MOVLB  1
2BE4:  MOVF   x43,W
2BE6:  INCF   x43,F
2BE8:  CLRF   03
2BEA:  ADDLW  59
2BEC:  MOVWF  FE9
2BEE:  MOVLW  00
2BF0:  ADDWFC 03,W
2BF2:  MOVWF  FEA
2BF4:  MOVLW  30
2BF6:  SUBWF  FEF,W
2BF8:  MOVLB  2
2BFA:  ADDWF  01,W
2BFC:  MOVWF  x38
2BFE:  MOVLW  00
2C00:  ADDWFC 02,W
2C02:  MOVWF  x39
2C04:  BRA    2BA6
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
2C06:  MOVFF  239,23D
2C0A:  MOVFF  238,23C
2C0E:  MOVFF  23B,23F
2C12:  MOVFF  23A,23E
2C16:  MOVLB  0
2C18:  RCALL  2B0A
2C1A:  MOVFF  02,03
2C1E:  MOVFF  02,02
....................   } 
2C22:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
*
5F78:  CALL   2AC2
....................   if (comm_buf[comm_ptr]) 
5F7C:  CLRF   03
5F7E:  MOVLB  1
5F80:  MOVF   x43,W
5F82:  ADDLW  59
5F84:  MOVWF  FE9
5F86:  MOVLW  00
5F88:  ADDWFC 03,W
5F8A:  MOVWF  FEA
5F8C:  MOVF   FEF,F
5F8E:  BZ    601E
....................     { 
....................     num = 0; 
5F90:  MOVLB  2
5F92:  CLRF   x0B
5F94:  CLRF   x0A
5F96:  CLRF   x09
5F98:  CLRF   x08
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5F9A:  CLRF   03
5F9C:  MOVLB  1
5F9E:  MOVF   x43,W
5FA0:  ADDLW  59
5FA2:  MOVWF  FE9
5FA4:  MOVLW  00
5FA6:  ADDWFC 03,W
5FA8:  MOVWF  FEA
5FAA:  MOVFF  FEF,20C
5FAE:  MOVLB  2
5FB0:  MOVF   x0C,W
5FB2:  SUBLW  2F
5FB4:  BC    601C
5FB6:  MOVF   x0C,W
5FB8:  SUBLW  39
5FBA:  BNC   601C
5FBC:  MOVFF  20B,24D
5FC0:  MOVFF  20A,24C
5FC4:  MOVFF  209,24B
5FC8:  MOVFF  208,24A
5FCC:  CLRF   x51
5FCE:  CLRF   x50
5FD0:  CLRF   x4F
5FD2:  MOVLW  0A
5FD4:  MOVWF  x4E
5FD6:  MOVLB  0
5FD8:  CALL   12E8
5FDC:  MOVFF  03,20F
5FE0:  MOVFF  02,20E
5FE4:  MOVFF  01,20D
5FE8:  MOVFF  00,20C
5FEC:  MOVLB  1
5FEE:  MOVF   x43,W
5FF0:  INCF   x43,F
5FF2:  CLRF   03
5FF4:  ADDLW  59
5FF6:  MOVWF  FE9
5FF8:  MOVLW  00
5FFA:  ADDWFC 03,W
5FFC:  MOVWF  FEA
5FFE:  MOVLW  30
6000:  SUBWF  FEF,W
6002:  MOVLB  2
6004:  ADDWF  00,W
6006:  MOVWF  x08
6008:  MOVLW  00
600A:  ADDWFC 01,W
600C:  MOVWF  x09
600E:  MOVLW  00
6010:  ADDWFC 02,W
6012:  MOVWF  x0A
6014:  MOVLW  00
6016:  ADDWFC x0F,W
6018:  MOVWF  x0B
601A:  BRA    5F9A
601C:  MOVLB  1
....................     } 
.................... //  skip_spc(); 
....................   return num; 
601E:  MOVFF  208,00
6022:  MOVFF  209,01
6026:  MOVFF  20A,02
602A:  MOVFF  20B,03
....................   } 
602E:  MOVLB  0
6030:  GOTO   6540 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
*
5E80:  CALL   2AC2
....................   if (peek_char()) 
5E84:  CALL   2A84
5E88:  MOVF   01,W
5E8A:  IORWF  02,W
5E8C:  BTFSC  FD8.2
5E8E:  BRA    5F66
....................     { 
....................     num = 0; 
5E90:  MOVLB  2
5E92:  CLRF   x0B
5E94:  CLRF   x0A
5E96:  CLRF   x09
5E98:  CLRF   x08
....................     while (isxdigit(peek_char())) 
....................       { 
5E9A:  MOVLB  0
5E9C:  CALL   2A84
5EA0:  MOVFF  02,20E
5EA4:  MOVFF  01,20D
5EA8:  MOVLB  2
5EAA:  MOVF   x0E,F
5EAC:  BNZ   5EB4
5EAE:  MOVF   x0D,W
5EB0:  SUBLW  2F
5EB2:  BC    5EBE
5EB4:  MOVF   x0E,F
5EB6:  BNZ   5EBE
5EB8:  MOVF   x0D,W
5EBA:  SUBLW  39
5EBC:  BC    5EE6
5EBE:  MOVF   x0E,F
5EC0:  BNZ   5EC8
5EC2:  MOVF   x0D,W
5EC4:  SUBLW  40
5EC6:  BC    5ED2
5EC8:  MOVF   x0E,F
5ECA:  BNZ   5ED2
5ECC:  MOVF   x0D,W
5ECE:  SUBLW  46
5ED0:  BC    5EE6
5ED2:  MOVF   x0E,F
5ED4:  BNZ   5EDC
5ED6:  MOVF   x0D,W
5ED8:  SUBLW  60
5EDA:  BC    5F64
5EDC:  MOVF   x0E,F
5EDE:  BNZ   5F64
5EE0:  MOVF   x0D,W
5EE2:  SUBLW  66
5EE4:  BNC   5F64
....................       chr = get_char(); 
5EE6:  MOVLB  0
5EE8:  CALL   2AA2
5EEC:  MOVFF  01,20C
....................       chr = toupper(chr); 
5EF0:  MOVLB  2
5EF2:  MOVF   x0C,W
5EF4:  SUBLW  60
5EF6:  BC    5F04
5EF8:  MOVF   x0C,W
5EFA:  SUBLW  7A
5EFC:  BNC   5F04
5EFE:  MOVF   x0C,W
5F00:  ANDLW  DF
5F02:  BRA    5F06
5F04:  MOVF   x0C,W
5F06:  MOVWF  x0C
....................       if (chr <= '9') 
5F08:  MOVF   x0C,W
5F0A:  SUBLW  39
5F0C:  BNC   5F14
....................         chr -= '0'; 
5F0E:  MOVLW  30
5F10:  SUBWF  x0C,F
....................       else 
5F12:  BRA    5F18
....................         chr = chr - ('A' - 10); 
5F14:  MOVLW  37
5F16:  SUBWF  x0C,F
....................       num = num * 16 + (ULONG)chr; 
5F18:  RLCF   x08,W
5F1A:  MOVWF  x0D
5F1C:  RLCF   x09,W
5F1E:  MOVWF  x0E
5F20:  RLCF   x0A,W
5F22:  MOVWF  x0F
5F24:  RLCF   x0B,W
5F26:  MOVWF  x10
5F28:  RLCF   x0D,F
5F2A:  RLCF   x0E,F
5F2C:  RLCF   x0F,F
5F2E:  RLCF   x10,F
5F30:  RLCF   x0D,F
5F32:  RLCF   x0E,F
5F34:  RLCF   x0F,F
5F36:  RLCF   x10,F
5F38:  RLCF   x0D,F
5F3A:  RLCF   x0E,F
5F3C:  RLCF   x0F,F
5F3E:  RLCF   x10,F
5F40:  MOVLW  F0
5F42:  ANDWF  x0D,F
5F44:  CLRF   01
5F46:  CLRF   02
5F48:  CLRF   03
5F4A:  MOVF   x0C,W
5F4C:  ADDWF  x0D,W
5F4E:  MOVWF  x08
5F50:  MOVF   01,W
5F52:  ADDWFC x0E,W
5F54:  MOVWF  x09
5F56:  MOVF   02,W
5F58:  ADDWFC x0F,W
5F5A:  MOVWF  x0A
5F5C:  MOVF   03,W
5F5E:  ADDWFC x10,W
5F60:  MOVWF  x0B
....................       } 
5F62:  BRA    5E9A
5F64:  MOVLB  0
....................     } 
....................   return num; 
5F66:  MOVFF  208,00
5F6A:  MOVFF  209,01
5F6E:  MOVFF  20A,02
5F72:  MOVFF  20B,03
....................   } 
5F76:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int() * 10; 
*
30F4:  RCALL  2B5E
30F6:  MOVFF  02,233
30FA:  MOVFF  01,232
30FE:  MOVFF  02,23D
3102:  MOVFF  01,23C
3106:  MOVLB  2
3108:  CLRF   x3F
310A:  MOVLW  0A
310C:  MOVWF  x3E
310E:  MOVLB  0
3110:  RCALL  2B0A
3112:  MOVFF  02,231
3116:  MOVLB  2
3118:  MOVFF  01,230
....................   if (peek_char() == '.') 
311C:  MOVLB  0
311E:  RCALL  2A84
3120:  MOVFF  02,233
3124:  MOVFF  01,232
3128:  MOVLB  2
312A:  MOVF   01,W
312C:  SUBLW  2E
312E:  BNZ   3150
3130:  MOVF   x33,F
3132:  BNZ   3150
....................     { 
....................     get_char(); // skip '.' 
3134:  MOVLB  0
3136:  RCALL  2AA2
....................     freq += get_char() - '0'; 
3138:  RCALL  2AA2
313A:  MOVLW  30
313C:  MOVLB  2
313E:  SUBWF  01,W
3140:  MOVWF  00
3142:  MOVLW  00
3144:  SUBWFB 02,W
3146:  MOVWF  03
3148:  MOVF   00,W
314A:  ADDWF  x30,F
314C:  MOVF   03,W
314E:  ADDWFC x31,F
....................     } 
....................   return freq; 
3150:  MOVFF  230,01
3154:  MOVFF  231,02
....................   } 
3158:  MOVLB  0
315A:  RETURN 0
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
....................   { 
....................   UINT incdec; 
....................   switch (chr) 
....................     { 
*
59A2:  MOVLB  1
59A4:  MOVF   xD1,W
59A6:  XORLW  69
59A8:  MOVLB  0
59AA:  BZ    59DE
59AC:  XORLW  20
59AE:  BZ    5A0E
59B0:  XORLW  2D
59B2:  BZ    5A3E
59B4:  XORLW  20
59B6:  BZ    5A72
59B8:  XORLW  6F
59BA:  BTFSC  FD8.2
59BC:  BRA    5AA6
59BE:  XORLW  16
59C0:  BTFSC  FD8.2
59C2:  BRA    5AF6
59C4:  XORLW  10
59C6:  BTFSC  FD8.2
59C8:  BRA    5B46
59CA:  XORLW  72
59CC:  BTFSC  FD8.2
59CE:  BRA    5B9A
59D0:  XORLW  61
59D2:  BTFSC  FD8.2
59D4:  BRA    5BEE
59D6:  XORLW  02
59D8:  BTFSC  FD8.2
59DA:  BRA    5C06
59DC:  BRA    5C1A
....................     case 'i': 
....................       if (++D2A_image[11] == 0) 
59DE:  MOVLB  1
59E0:  INCF   x71,F
59E2:  BNZ   59F0
....................         if (++D2A_image[12] > 3) 
59E4:  INCF   x72,F
59E6:  MOVF   x72,W
59E8:  SUBLW  03
59EA:  BC    59F0
....................           { 
....................           D2A_image[11] = 0; 
59EC:  CLRF   x71
....................           D2A_image[12] = 0; 
59EE:  CLRF   x72
....................           } 
....................       write_D2A(11, D2A_image[11]); 
59F0:  MOVLW  0B
59F2:  MOVLB  2
59F4:  MOVWF  x08
59F6:  MOVFF  171,209
59FA:  MOVLB  0
59FC:  RCALL  591A
....................       write_D2A(12, D2A_image[12]); 
59FE:  MOVLW  0C
5A00:  MOVLB  2
5A02:  MOVWF  x08
5A04:  MOVFF  172,209
5A08:  MOVLB  0
5A0A:  RCALL  591A
....................       break; 
5A0C:  BRA    5C1A
....................     case 'I': 
....................       if (++D2A_image[15] == 0) 
5A0E:  MOVLB  1
5A10:  INCF   x75,F
5A12:  BNZ   5A20
....................         if (++D2A_image[16] > 3) 
5A14:  INCF   x76,F
5A16:  MOVF   x76,W
5A18:  SUBLW  03
5A1A:  BC    5A20
....................           { 
....................           D2A_image[15] = 0; 
5A1C:  CLRF   x75
....................           D2A_image[16] = 0; 
5A1E:  CLRF   x76
....................           } 
....................       write_D2A(15, D2A_image[15]); 
5A20:  MOVLW  0F
5A22:  MOVLB  2
5A24:  MOVWF  x08
5A26:  MOVFF  175,209
5A2A:  MOVLB  0
5A2C:  RCALL  591A
....................       write_D2A(16, D2A_image[16]); 
5A2E:  MOVLW  10
5A30:  MOVLB  2
5A32:  MOVWF  x08
5A34:  MOVFF  176,209
5A38:  MOVLB  0
5A3A:  RCALL  591A
....................       break; 
5A3C:  BRA    5C1A
....................     case 'd': 
....................       if (--D2A_image[11] == 255) 
5A3E:  MOVLB  1
5A40:  DECF   x71,F
5A42:  INCFSZ x71,W
5A44:  BRA    5A54
....................         if (--D2A_image[12] > 3) 
5A46:  DECF   x72,F
5A48:  MOVF   x72,W
5A4A:  SUBLW  03
5A4C:  BC    5A54
....................           { 
....................           D2A_image[11] = 255; 
5A4E:  SETF   x71
....................           D2A_image[12] = 3; 
5A50:  MOVLW  03
5A52:  MOVWF  x72
....................           } 
....................       write_D2A(11, D2A_image[11]); 
5A54:  MOVLW  0B
5A56:  MOVLB  2
5A58:  MOVWF  x08
5A5A:  MOVFF  171,209
5A5E:  MOVLB  0
5A60:  RCALL  591A
....................       write_D2A(12, D2A_image[12]); 
5A62:  MOVLW  0C
5A64:  MOVLB  2
5A66:  MOVWF  x08
5A68:  MOVFF  172,209
5A6C:  MOVLB  0
5A6E:  RCALL  591A
....................       break; 
5A70:  BRA    5C1A
....................     case 'D': 
....................       if (--D2A_image[15] == 255) 
5A72:  MOVLB  1
5A74:  DECF   x75,F
5A76:  INCFSZ x75,W
5A78:  BRA    5A88
....................         if (--D2A_image[16] > 3) 
5A7A:  DECF   x76,F
5A7C:  MOVF   x76,W
5A7E:  SUBLW  03
5A80:  BC    5A88
....................           { 
....................           D2A_image[15] = 255; 
5A82:  SETF   x75
....................           D2A_image[16] = 3; 
5A84:  MOVLW  03
5A86:  MOVWF  x76
....................           } 
....................       write_D2A(15, D2A_image[15]); 
5A88:  MOVLW  0F
5A8A:  MOVLB  2
5A8C:  MOVWF  x08
5A8E:  MOVFF  175,209
5A92:  MOVLB  0
5A94:  RCALL  591A
....................       write_D2A(16, D2A_image[16]); 
5A96:  MOVLW  10
5A98:  MOVLB  2
5A9A:  MOVWF  x08
5A9C:  MOVFF  176,209
5AA0:  MOVLB  0
5AA2:  RCALL  591A
....................       break; 
5AA4:  BRA    5C1A
....................     case '+': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5AA6:  MOVLB  1
5AA8:  MOVFF  173,1D2
5AAC:  MOVF   x74,W
5AAE:  ANDLW  03
5AB0:  MOVWF  xD3
....................       if (++incdec > 0x3FF) 
5AB2:  INCF   xD2,F
5AB4:  BTFSC  FD8.2
5AB6:  INCF   xD3,F
5AB8:  MOVF   xD3,W
5ABA:  SUBLW  03
5ABC:  BC    5AC2
....................         incdec = 0; 
5ABE:  CLRF   xD3
5AC0:  CLRF   xD2
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5AC2:  MOVF   x74,W
5AC4:  ANDLW  C0
5AC6:  MOVWF  xD4
5AC8:  MOVLW  00
5ACA:  IORWF  xD2,F
5ACC:  MOVF   xD4,W
5ACE:  IORWF  xD3,F
....................       D2A_image[13] = make8(incdec, 0); 
5AD0:  MOVFF  1D2,173
....................       D2A_image[14] = make8(incdec, 1); 
5AD4:  MOVFF  1D3,174
....................       write_D2A(11, D2A_image[13]); 
5AD8:  MOVLW  0B
5ADA:  MOVLB  2
5ADC:  MOVWF  x08
5ADE:  MOVFF  173,209
5AE2:  MOVLB  0
5AE4:  RCALL  591A
....................       write_D2A(12, D2A_image[14]); 
5AE6:  MOVLW  0C
5AE8:  MOVLB  2
5AEA:  MOVWF  x08
5AEC:  MOVFF  174,209
5AF0:  MOVLB  0
5AF2:  RCALL  591A
....................       break; 
5AF4:  BRA    5C1A
....................     case '=': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5AF6:  MOVLB  1
5AF8:  MOVFF  177,1D2
5AFC:  MOVF   x78,W
5AFE:  ANDLW  03
5B00:  MOVWF  xD3
....................       if (++incdec > 0x3FF) 
5B02:  INCF   xD2,F
5B04:  BTFSC  FD8.2
5B06:  INCF   xD3,F
5B08:  MOVF   xD3,W
5B0A:  SUBLW  03
5B0C:  BC    5B12
....................         incdec = 0; 
5B0E:  CLRF   xD3
5B10:  CLRF   xD2
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5B12:  MOVF   x78,W
5B14:  ANDLW  C0
5B16:  MOVWF  xD4
5B18:  MOVLW  00
5B1A:  IORWF  xD2,F
5B1C:  MOVF   xD4,W
5B1E:  IORWF  xD3,F
....................       D2A_image[17] = make8(incdec, 0); 
5B20:  MOVFF  1D2,177
....................       D2A_image[18] = make8(incdec, 1); 
5B24:  MOVFF  1D3,178
....................       write_D2A(11, D2A_image[17]); 
5B28:  MOVLW  0B
5B2A:  MOVLB  2
5B2C:  MOVWF  x08
5B2E:  MOVFF  177,209
5B32:  MOVLB  0
5B34:  RCALL  591A
....................       write_D2A(12, D2A_image[18]); 
5B36:  MOVLW  0C
5B38:  MOVLB  2
5B3A:  MOVWF  x08
5B3C:  MOVFF  178,209
5B40:  MOVLB  0
5B42:  RCALL  591A
....................       break; 
5B44:  BRA    5C1A
....................     case '-': 
....................       incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5B46:  MOVLB  1
5B48:  MOVFF  173,1D2
5B4C:  MOVF   x74,W
5B4E:  ANDLW  03
5B50:  MOVWF  xD3
....................       if (--incdec > 0x3FF) 
5B52:  MOVF   xD2,W
5B54:  BTFSC  FD8.2
5B56:  DECF   xD3,F
5B58:  DECF   xD2,F
5B5A:  MOVF   xD3,W
5B5C:  SUBLW  03
5B5E:  BC    5B66
....................         incdec = 0x3FF; 
5B60:  MOVLW  03
5B62:  MOVWF  xD3
5B64:  SETF   xD2
....................       incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5B66:  MOVF   x74,W
5B68:  ANDLW  C0
5B6A:  MOVWF  xD4
5B6C:  MOVLW  00
5B6E:  IORWF  xD2,F
5B70:  MOVF   xD4,W
5B72:  IORWF  xD3,F
....................       D2A_image[13] = make8(incdec, 0); 
5B74:  MOVFF  1D2,173
....................       D2A_image[14] = make8(incdec, 1); 
5B78:  MOVFF  1D3,174
....................       write_D2A(11, D2A_image[13]); 
5B7C:  MOVLW  0B
5B7E:  MOVLB  2
5B80:  MOVWF  x08
5B82:  MOVFF  173,209
5B86:  MOVLB  0
5B88:  RCALL  591A
....................       write_D2A(12, D2A_image[14]); 
5B8A:  MOVLW  0C
5B8C:  MOVLB  2
5B8E:  MOVWF  x08
5B90:  MOVFF  174,209
5B94:  MOVLB  0
5B96:  RCALL  591A
....................       break; 
5B98:  BRA    5C1A
....................     case '_': 
....................       incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5B9A:  MOVLB  1
5B9C:  MOVFF  177,1D2
5BA0:  MOVF   x78,W
5BA2:  ANDLW  03
5BA4:  MOVWF  xD3
....................       if (--incdec > 0x3FF) 
5BA6:  MOVF   xD2,W
5BA8:  BTFSC  FD8.2
5BAA:  DECF   xD3,F
5BAC:  DECF   xD2,F
5BAE:  MOVF   xD3,W
5BB0:  SUBLW  03
5BB2:  BC    5BBA
....................         incdec = 0x3FF; 
5BB4:  MOVLW  03
5BB6:  MOVWF  xD3
5BB8:  SETF   xD2
....................       incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5BBA:  MOVF   x78,W
5BBC:  ANDLW  C0
5BBE:  MOVWF  xD4
5BC0:  MOVLW  00
5BC2:  IORWF  xD2,F
5BC4:  MOVF   xD4,W
5BC6:  IORWF  xD3,F
....................       D2A_image[17] = make8(incdec, 0); 
5BC8:  MOVFF  1D2,177
....................       D2A_image[18] = make8(incdec, 1); 
5BCC:  MOVFF  1D3,178
....................       write_D2A(11, D2A_image[17]); 
5BD0:  MOVLW  0B
5BD2:  MOVLB  2
5BD4:  MOVWF  x08
5BD6:  MOVFF  177,209
5BDA:  MOVLB  0
5BDC:  RCALL  591A
....................       write_D2A(12, D2A_image[18]); 
5BDE:  MOVLW  0C
5BE0:  MOVLB  2
5BE2:  MOVWF  x08
5BE4:  MOVFF  178,209
5BE8:  MOVLB  0
5BEA:  RCALL  591A
....................       break; 
5BEC:  BRA    5C1A
....................     case '>': 
....................       if (setup.phase_offset < 255) 
5BEE:  INCFSZ xBD,W
5BF0:  BRA    5BF4
5BF2:  BRA    5BF6
....................         setup.phase_offset++; 
5BF4:  INCF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5BF6:  MOVLW  01
5BF8:  MOVLB  1
5BFA:  MOVWF  xD4
5BFC:  MOVFF  BD,1D5
5C00:  MOVLB  0
5C02:  RCALL  5984
....................       break; 
5C04:  BRA    5C1A
....................     case '<': 
....................       if (setup.phase_offset) 
5C06:  MOVF   xBD,F
5C08:  BZ    5C0C
....................         setup.phase_offset--; 
5C0A:  DECF   xBD,F
....................       update_FPGA(1, setup.phase_offset); 
5C0C:  MOVLW  01
5C0E:  MOVLB  1
5C10:  MOVWF  xD4
5C12:  MOVFF  BD,1D5
5C16:  MOVLB  0
5C18:  RCALL  5984
....................       break; 
....................     } 
....................   } 
5C1A:  GOTO   68F4 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
5C1E:  MOVLW  0D
5C20:  MOVLB  2
5C22:  MOVWF  x08
5C24:  MOVLW  0A
5C26:  MOVWF  x09
5C28:  CLRF   x0A
5C2A:  MOVLW  02
5C2C:  MOVWF  x6F
5C2E:  MOVLW  08
5C30:  MOVWF  x6E
5C32:  MOVLB  0
5C34:  CALL   223A
....................   COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
5C38:  MOVLW  02
5C3A:  MOVWF  FEA
5C3C:  MOVLW  08
5C3E:  MOVWF  FE9
5C40:  MOVLW  3D
5C42:  MOVWF  01
5C44:  CLRF   FF7
5C46:  MOVLW  00
5C48:  CALL   0112
5C4C:  TBLRD*-
5C4E:  TBLRD*+
5C50:  MOVFF  FF5,FEE
5C54:  DECFSZ 01,F
5C56:  BRA    5C4E
5C58:  MOVLW  02
5C5A:  MOVLB  2
5C5C:  MOVWF  x6F
5C5E:  MOVLW  08
5C60:  MOVWF  x6E
5C62:  MOVLB  0
5C64:  CALL   223A
....................   COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5C68:  MOVLW  02
5C6A:  MOVWF  FEA
5C6C:  MOVLW  08
5C6E:  MOVWF  FE9
5C70:  MOVLW  2E
5C72:  MOVWF  01
5C74:  CLRF   FF7
5C76:  MOVLW  00
5C78:  CALL   0160
5C7C:  TBLRD*-
5C7E:  TBLRD*+
5C80:  MOVFF  FF5,FEE
5C84:  DECFSZ 01,F
5C86:  BRA    5C7E
5C88:  MOVLW  02
5C8A:  MOVLB  2
5C8C:  MOVWF  x6F
5C8E:  MOVLW  08
5C90:  MOVWF  x6E
5C92:  MOVLB  0
5C94:  CALL   223A
....................   COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
5C98:  MOVLW  02
5C9A:  MOVWF  FEA
5C9C:  MOVLW  08
5C9E:  MOVWF  FE9
5CA0:  MOVLW  42
5CA2:  MOVWF  01
5CA4:  CLRF   FF7
5CA6:  MOVLW  00
5CA8:  CALL   019E
5CAC:  TBLRD*-
5CAE:  TBLRD*+
5CB0:  MOVFF  FF5,FEE
5CB4:  DECFSZ 01,F
5CB6:  BRA    5CAE
5CB8:  MOVLW  02
5CBA:  MOVLB  2
5CBC:  MOVWF  x6F
5CBE:  MOVLW  08
5CC0:  MOVWF  x6E
5CC2:  MOVLB  0
5CC4:  CALL   223A
....................   COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
5CC8:  MOVLW  02
5CCA:  MOVWF  FEA
5CCC:  MOVLW  08
5CCE:  MOVWF  FE9
5CD0:  MOVLW  23
5CD2:  MOVWF  01
5CD4:  CLRF   FF7
5CD6:  MOVLW  00
5CD8:  CALL   01F0
5CDC:  TBLRD*-
5CDE:  TBLRD*+
5CE0:  MOVFF  FF5,FEE
5CE4:  DECFSZ 01,F
5CE6:  BRA    5CDE
5CE8:  MOVLW  02
5CEA:  MOVLB  2
5CEC:  MOVWF  x6F
5CEE:  MOVLW  08
5CF0:  MOVWF  x6E
5CF2:  MOVLB  0
5CF4:  CALL   223A
....................   COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5CF8:  MOVLW  02
5CFA:  MOVWF  FEA
5CFC:  MOVLW  08
5CFE:  MOVWF  FE9
5D00:  MOVLW  2D
5D02:  MOVWF  01
5D04:  CLRF   FF7
5D06:  MOVLW  00
5D08:  CALL   0224
5D0C:  TBLRD*-
5D0E:  TBLRD*+
5D10:  MOVFF  FF5,FEE
5D14:  DECFSZ 01,F
5D16:  BRA    5D0E
5D18:  MOVLW  02
5D1A:  MOVLB  2
5D1C:  MOVWF  x6F
5D1E:  MOVLW  08
5D20:  MOVWF  x6E
5D22:  MOVLB  0
5D24:  CALL   223A
....................   COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5D28:  MOVLW  02
5D2A:  MOVWF  FEA
5D2C:  MOVLW  08
5D2E:  MOVWF  FE9
5D30:  MOVLW  2E
5D32:  MOVWF  01
5D34:  CLRF   FF7
5D36:  MOVLW  00
5D38:  CALL   0262
5D3C:  TBLRD*-
5D3E:  TBLRD*+
5D40:  MOVFF  FF5,FEE
5D44:  DECFSZ 01,F
5D46:  BRA    5D3E
5D48:  MOVLW  02
5D4A:  MOVLB  2
5D4C:  MOVWF  x6F
5D4E:  MOVLW  08
5D50:  MOVWF  x6E
5D52:  MOVLB  0
5D54:  CALL   223A
....................   COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5D58:  MOVLW  02
5D5A:  MOVWF  FEA
5D5C:  MOVLW  08
5D5E:  MOVWF  FE9
5D60:  MOVLW  36
5D62:  MOVWF  01
5D64:  CLRF   FF7
5D66:  MOVLW  00
5D68:  CALL   02A0
5D6C:  TBLRD*-
5D6E:  TBLRD*+
5D70:  MOVFF  FF5,FEE
5D74:  DECFSZ 01,F
5D76:  BRA    5D6E
5D78:  MOVLW  02
5D7A:  MOVLB  2
5D7C:  MOVWF  x6F
5D7E:  MOVLW  08
5D80:  MOVWF  x6E
5D82:  MOVLB  0
5D84:  CALL   223A
....................   COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
5D88:  MOVLW  02
5D8A:  MOVWF  FEA
5D8C:  MOVLW  08
5D8E:  MOVWF  FE9
5D90:  MOVLW  16
5D92:  MOVWF  01
5D94:  CLRF   FF7
5D96:  MOVLW  00
5D98:  CALL   02E6
5D9C:  TBLRD*-
5D9E:  TBLRD*+
5DA0:  MOVFF  FF5,FEE
5DA4:  DECFSZ 01,F
5DA6:  BRA    5D9E
5DA8:  MOVLW  02
5DAA:  MOVLB  2
5DAC:  MOVWF  x6F
5DAE:  MOVLW  08
5DB0:  MOVWF  x6E
5DB2:  MOVLB  0
5DB4:  CALL   223A
....................   COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
5DB8:  MOVLW  02
5DBA:  MOVWF  FEA
5DBC:  MOVLW  08
5DBE:  MOVWF  FE9
5DC0:  MOVLW  3C
5DC2:  MOVWF  01
5DC4:  CLRF   FF7
5DC6:  MOVLW  00
5DC8:  CALL   030C
5DCC:  TBLRD*-
5DCE:  TBLRD*+
5DD0:  MOVFF  FF5,FEE
5DD4:  DECFSZ 01,F
5DD6:  BRA    5DCE
5DD8:  MOVLW  02
5DDA:  MOVLB  2
5DDC:  MOVWF  x6F
5DDE:  MOVLW  08
5DE0:  MOVWF  x6E
5DE2:  MOVLB  0
5DE4:  CALL   223A
....................   COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5DE8:  MOVLW  02
5DEA:  MOVWF  FEA
5DEC:  MOVLW  08
5DEE:  MOVWF  FE9
5DF0:  MOVLW  3D
5DF2:  MOVWF  01
5DF4:  CLRF   FF7
5DF6:  MOVLW  00
5DF8:  CALL   0358
5DFC:  TBLRD*-
5DFE:  TBLRD*+
5E00:  MOVFF  FF5,FEE
5E04:  DECFSZ 01,F
5E06:  BRA    5DFE
5E08:  MOVLW  02
5E0A:  MOVLB  2
5E0C:  MOVWF  x6F
5E0E:  MOVLW  08
5E10:  MOVWF  x6E
5E12:  MOVLB  0
5E14:  CALL   223A
....................   COM1_send_str("\r\n"); 
5E18:  MOVLW  0D
5E1A:  MOVLB  2
5E1C:  MOVWF  x08
5E1E:  MOVLW  0A
5E20:  MOVWF  x09
5E22:  CLRF   x0A
5E24:  MOVLW  02
5E26:  MOVWF  x6F
5E28:  MOVLW  08
5E2A:  MOVWF  x6E
5E2C:  MOVLB  0
5E2E:  CALL   223A
....................   } 
5E32:  GOTO   625A (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
....................   { 
....................   //COM1_send_str("\r\nFAIL\r\n"); 
....................   } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT read_temperature(void)// VERSION 3.3 17.1.2016 
....................   { 
....................   float temp; 
....................   SINT t, val; 
....................   set_adc_channel(A2D_TEMP); // read temperature 
*
2766:  MOVLW  18
2768:  MOVWF  01
276A:  MOVF   FC2,W
276C:  ANDLW  83
276E:  IORWF  01,W
2770:  MOVWF  FC2
....................   delay_us(50); 
2772:  MOVLW  42
2774:  MOVWF  00
2776:  DECFSZ 00,F
2778:  BRA    2776
277A:  NOP   
....................   val = read_adc(); 
277C:  BSF    FC2.1
277E:  BTFSC  FC2.1
2780:  BRA    277E
2782:  MOVFF  FC4,1C5
2786:  MOVLB  1
2788:  MOVFF  FC3,1C4
....................   temp = (float)val / 1024.0 * 3.3; 
278C:  MOVFF  1C5,1C7
2790:  MOVFF  1C4,1C6
2794:  MOVLB  0
2796:  BRA    245E
2798:  MOVFF  00,1C6
279C:  MOVFF  01,1C7
27A0:  MOVFF  02,1C8
27A4:  MOVFF  03,1C9
27A8:  MOVFF  03,258
27AC:  MOVFF  02,257
27B0:  MOVFF  01,256
27B4:  MOVFF  00,255
27B8:  MOVLB  2
27BA:  CLRF   x5C
27BC:  CLRF   x5B
27BE:  CLRF   x5A
27C0:  MOVLW  89
27C2:  MOVWF  x59
27C4:  MOVLB  0
27C6:  CALL   18CA
27CA:  MOVFF  00,1C6
27CE:  MOVFF  01,1C7
27D2:  MOVFF  02,1C8
27D6:  MOVFF  03,1C9
27DA:  MOVFF  03,258
27DE:  MOVFF  02,257
27E2:  MOVFF  01,256
27E6:  MOVFF  00,255
27EA:  MOVLW  33
27EC:  MOVLB  2
27EE:  MOVWF  x5C
27F0:  MOVWF  x5B
27F2:  MOVLW  53
27F4:  MOVWF  x5A
27F6:  MOVLW  80
27F8:  MOVWF  x59
27FA:  MOVLB  0
27FC:  CALL   1A28
2800:  MOVFF  03,1C1
2804:  MOVFF  02,1C0
2808:  MOVFF  01,1BF
280C:  MOVFF  00,1BE
....................   temp -= 0.75; 
2810:  BSF    FD8.1
2812:  MOVFF  1C1,233
2816:  MOVFF  1C0,232
281A:  MOVFF  1BF,231
281E:  MOVFF  1BE,230
2822:  MOVLB  2
2824:  CLRF   x37
2826:  CLRF   x36
2828:  MOVLW  40
282A:  MOVWF  x35
282C:  MOVLW  7E
282E:  MOVWF  x34
2830:  MOVLB  0
2832:  RCALL  24B0
2834:  MOVFF  03,1C1
2838:  MOVFF  02,1C0
283C:  MOVFF  01,1BF
2840:  MOVFF  00,1BE
....................   temp *= 100; 
2844:  MOVFF  1C1,258
2848:  MOVFF  1C0,257
284C:  MOVFF  1BF,256
2850:  MOVFF  1BE,255
2854:  MOVLB  2
2856:  CLRF   x5C
2858:  CLRF   x5B
285A:  MOVLW  48
285C:  MOVWF  x5A
285E:  MOVLW  85
2860:  MOVWF  x59
2862:  MOVLB  0
2864:  CALL   1A28
2868:  MOVFF  03,1C1
286C:  MOVFF  02,1C0
2870:  MOVFF  01,1BF
2874:  MOVFF  00,1BE
....................   temp += 25.0; 
2878:  BCF    FD8.1
287A:  MOVFF  1C1,233
287E:  MOVFF  1C0,232
2882:  MOVFF  1BF,231
2886:  MOVFF  1BE,230
288A:  MOVLB  2
288C:  CLRF   x37
288E:  CLRF   x36
2890:  MOVLW  48
2892:  MOVWF  x35
2894:  MOVLW  83
2896:  MOVWF  x34
2898:  MOVLB  0
289A:  RCALL  24B0
289C:  MOVFF  03,1C1
28A0:  MOVFF  02,1C0
28A4:  MOVFF  01,1BF
28A8:  MOVFF  00,1BE
....................   t = (SINT)(temp*100); 
28AC:  MOVFF  1C1,258
28B0:  MOVFF  1C0,257
28B4:  MOVFF  1BF,256
28B8:  MOVFF  1BE,255
28BC:  MOVLB  2
28BE:  CLRF   x5C
28C0:  CLRF   x5B
28C2:  MOVLW  48
28C4:  MOVWF  x5A
28C6:  MOVLW  85
28C8:  MOVWF  x59
28CA:  MOVLB  0
28CC:  CALL   1A28
28D0:  MOVFF  03,1C9
28D4:  MOVFF  02,1C8
28D8:  MOVFF  01,1C7
28DC:  MOVFF  00,1C6
28E0:  BRA    2728
28E2:  MOVFF  02,1C3
28E6:  MOVFF  01,1C2
....................   return t; 
28EA:  MOVLB  1
28EC:  MOVFF  1C2,01
28F0:  MOVFF  1C3,02
....................   } 
28F4:  MOVLB  0
28F6:  GOTO   298C (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
....................   { 
*
2302:  MOVLB  1
2304:  CLRF   xBE
....................  // float temp; 
....................   byte t = 0; 
....................   t =          (bit)setup.data_source ; 
2306:  CLRF   xBE
2308:  MOVLB  0
230A:  BTFSS  xB3.0
230C:  BRA    2314
230E:  MOVLB  1
2310:  INCF   xBE,F
2312:  MOVLB  0
....................   t = t + ( (bit)setup.data_polarity <<  1); 
2314:  MOVLW  00
2316:  BTFSC  xB1.0
2318:  MOVLW  01
231A:  MOVWF  00
231C:  BCF    FD8.0
231E:  RLCF   00,F
2320:  MOVF   00,W
2322:  MOVLB  1
2324:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.randomizer <<     2); 
2326:  MOVLW  00
2328:  MOVLB  0
232A:  BTFSC  xB5.0
232C:  MOVLW  01
232E:  MOVWF  00
2330:  RLCF   00,F
2332:  RLCF   00,F
2334:  MOVLW  FC
2336:  ANDWF  00,F
2338:  MOVF   00,W
233A:  MOVLB  1
233C:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.clock_source <<   3); 
233E:  MOVLW  00
2340:  MOVLB  0
2342:  BTFSC  xB2.0
2344:  MOVLW  01
2346:  MOVWF  00
2348:  RLCF   00,F
234A:  RLCF   00,F
234C:  RLCF   00,F
234E:  MOVLW  F8
2350:  ANDWF  00,F
2352:  MOVF   00,W
2354:  MOVLB  1
2356:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.clock_polarity << 4); 
2358:  MOVLW  00
235A:  MOVLB  0
235C:  BTFSC  xB0.0
235E:  MOVLW  01
2360:  MOVWF  00
2362:  SWAPF  00,F
2364:  MOVLW  F0
2366:  ANDWF  00,F
2368:  MOVF   00,W
236A:  MOVLB  1
236C:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.SOQPSK <<         5); 
236E:  MOVLW  00
2370:  MOVLB  0
2372:  BTFSC  xB7.0
2374:  MOVLW  01
2376:  MOVWF  00
2378:  SWAPF  00,F
237A:  RLCF   00,F
237C:  MOVLW  E0
237E:  ANDWF  00,F
2380:  MOVF   00,W
2382:  MOVLB  1
2384:  ADDWF  xBE,F
....................   t = t + ( (bit)0 <<       6); 
....................   t = t + ( (bit)0 <<       7); 
....................    
....................   //  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................   return t; 
2386:  CLRF   03
2388:  MOVFF  1BE,01
238C:  MOVFF  03,02
....................   } 
2390:  MOVLB  0
2392:  GOTO   2980 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
....................   { 
....................  // float temp; 
....................  set_adc_channel(A2D_PREV); // select forward power input 
2396:  MOVLW  10
2398:  MOVWF  01
239A:  MOVF   FC2,W
239C:  ANDLW  83
239E:  IORWF  01,W
23A0:  MOVWF  FC2
....................  delay_us(20); 
23A2:  MOVLW  1A
23A4:  MOVWF  00
23A6:  DECFSZ 00,F
23A8:  BRA    23A6
23AA:  NOP   
....................  revp = read_adc(); 
23AC:  BSF    FC2.1
23AE:  BTFSC  FC2.1
23B0:  BRA    23AE
23B2:  MOVFF  FC4,108
23B6:  MOVLB  1
23B8:  MOVFF  FC3,107
....................   if (revp <= 580) 
23BC:  MOVF   x08,W
23BE:  SUBLW  02
23C0:  BNC   23CE
23C2:  BNZ   23CA
23C4:  MOVF   x07,W
23C6:  SUBLW  44
23C8:  BNC   23CE
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
23CA:  BCF    xA4.0
....................       else 
23CC:  BRA    23D0
....................         revp_status = 1;//Q strcpy(revstat, "BAD"); 
23CE:  BSF    xA4.0
....................  
....................   byte t = 0; 
23D0:  CLRF   xBE
....................   t =       (bit)setup.cot ; //RB 
23D2:  CLRF   xBE
23D4:  MOVLB  0
23D6:  BTFSS  xF5.0
23D8:  BRA    23E0
23DA:  MOVLB  1
23DC:  INCF   xBE,F
23DE:  MOVLB  0
....................   t = t + ( (bit)setup.rc <<  1); 
23E0:  MOVLW  00
23E2:  BTFSC  xF7.0
23E4:  MOVLW  01
23E6:  MOVWF  00
23E8:  BCF    FD8.0
23EA:  RLCF   00,F
23EC:  MOVF   00,W
23EE:  MOVLB  1
23F0:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.pwr << 2);//RF 
23F2:  MOVLW  00
23F4:  MOVLB  0
23F6:  BTFSC  xAD.0
23F8:  MOVLW  01
23FA:  MOVWF  00
23FC:  RLCF   00,F
23FE:  RLCF   00,F
2400:  MOVLW  FC
2402:  ANDWF  00,F
2404:  MOVF   00,W
2406:  MOVLB  1
2408:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.rp <<  3); 
240A:  MOVLW  00
240C:  MOVLB  0
240E:  BTFSC  xF9.0
2410:  MOVLW  01
2412:  MOVWF  00
2414:  RLCF   00,F
2416:  RLCF   00,F
2418:  RLCF   00,F
241A:  MOVLW  F8
241C:  ANDWF  00,F
241E:  MOVF   00,W
2420:  MOVLB  1
2422:  ADDWF  xBE,F
....................   t = t + ( (bit)setup.UART_Status << 4); 
2424:  MOVLW  00
2426:  MOVLB  0
2428:  BTFSC  xFC.0
242A:  MOVLW  01
242C:  MOVWF  00
242E:  SWAPF  00,F
2430:  MOVLW  F0
2432:  ANDWF  00,F
2434:  MOVF   00,W
2436:  MOVLB  1
2438:  ADDWF  xBE,F
....................   t = t + ( (bit)revp_status <<       5); 
243A:  MOVLW  00
243C:  BTFSC  xA4.0
243E:  MOVLW  01
2440:  MOVWF  00
2442:  SWAPF  00,F
2444:  RLCF   00,F
2446:  MOVLW  E0
2448:  ANDWF  00,F
244A:  MOVF   00,W
244C:  ADDWF  xBE,F
....................   t = t + ( (bit)0 <<       6); 
....................   t = t + ( (bit)0 <<       7); 
....................    
....................   
....................   return t; 
244E:  CLRF   03
2450:  MOVFF  1BE,01
2454:  MOVFF  03,02
....................   } 
2458:  MOVLB  0
245A:  GOTO   2986 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
34D0:  CALL   2B5E
34D4:  MOVFF  02,231
34D8:  MOVFF  01,230
....................   setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
34DC:  MOVFF  230,FE
....................   if (idx <= 40 && idx >= 20) 
34E0:  MOVLB  2
34E2:  MOVF   x31,F
34E4:  BNZ   3538
34E6:  MOVF   x30,W
34E8:  SUBLW  28
34EA:  BNC   3538
34EC:  MOVF   x31,F
34EE:  BNZ   34F6
34F0:  MOVF   x30,W
34F2:  SUBLW  13
34F4:  BC    3538
....................     { 
....................     setup.power_level = idx - 20; 
34F6:  MOVLW  14
34F8:  SUBWF  x30,W
34FA:  MOVLB  0
34FC:  MOVWF  xBB
34FE:  MOVLW  00
3500:  MOVLB  2
3502:  SUBWFB x31,W
3504:  MOVLB  0
3506:  MOVWF  xBC
....................     power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
3508:  BCF    FD8.0
350A:  RLCF   xBB,W
350C:  MOVWF  02
350E:  RLCF   xBC,W
3510:  MOVWF  03
3512:  MOVF   02,W
3514:  ADDLW  C4
3516:  MOVWF  FE9
3518:  MOVLW  00
351A:  ADDWFC 03,W
351C:  MOVWF  FEA
351E:  MOVFF  FEC,03
3522:  MOVF   FED,F
3524:  MOVFF  FEF,1C
3528:  MOVFF  03,1D
....................     return 1; 
352C:  MOVLW  01
352E:  MOVWF  01
3530:  MOVLW  00
3532:  MOVWF  02
3534:  BRA    353E
3536:  MOVLB  2
....................     } 
....................   return 0; 
3538:  MOVLW  00
353A:  MOVWF  01
353C:  MOVWF  02
353E:  MOVLB  0
....................   } 
3540:  GOTO   4C42 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
345C:  CALL   2B5E
3460:  MOVFF  02,231
3464:  MOVFF  01,230
....................   setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
3468:  MOVFF  230,FD
....................   if (idx <= 40 && idx >= 20) 
346C:  MOVLB  2
346E:  MOVF   x31,F
3470:  BNZ   34C4
3472:  MOVF   x30,W
3474:  SUBLW  28
3476:  BNC   34C4
3478:  MOVF   x31,F
347A:  BNZ   3482
347C:  MOVF   x30,W
347E:  SUBLW  13
3480:  BC    34C4
....................     { 
....................     setup.power_low_level = idx - 20; 
3482:  MOVLW  14
3484:  SUBWF  x30,W
3486:  MOVLB  0
3488:  MOVWF  xF3
348A:  MOVLW  00
348C:  MOVLB  2
348E:  SUBWFB x31,W
3490:  MOVLB  0
3492:  MOVWF  xF4
....................     low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
3494:  BCF    FD8.0
3496:  RLCF   xF3,W
3498:  MOVWF  02
349A:  RLCF   xF4,W
349C:  MOVWF  03
349E:  MOVF   02,W
34A0:  ADDLW  C4
34A2:  MOVWF  FE9
34A4:  MOVLW  00
34A6:  ADDWFC 03,W
34A8:  MOVWF  FEA
34AA:  MOVFF  FEC,03
34AE:  MOVF   FED,F
34B0:  MOVFF  FEF,1A
34B4:  MOVFF  03,1B
....................     return 1; 
34B8:  MOVLW  01
34BA:  MOVWF  01
34BC:  MOVLW  00
34BE:  MOVWF  02
34C0:  BRA    34CA
34C2:  MOVLB  2
....................     } 
....................   return 0; 
34C4:  MOVLW  00
34C6:  MOVWF  01
34C8:  MOVWF  02
34CA:  MOVLB  0
....................   } 
34CC:  GOTO   4B98 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... The message structure is defined below. 
....................  
.................... Byte# Description Remarks 
.................... 1 Header  Constant - 47 Hex 
.................... 2 Temperature Send 2's complement 
.................... 3 Power level 
.................... 4 Current 
.................... 5 PLL lock 
.................... 6 Checksum  Checksum of all preceding bytes 
....................  
.................... Table 1 - Status Packet structure 
....................  
.................... The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
....................   { 
*
2972:  MOVLB  1
2974:  CLRF   xB9
2976:  CLRF   xB8
....................   UINT chksum = 0, idx; 
....................   power_output(); 
2978:  MOVLB  0
297A:  CALL   1DB6
....................   byte BitsStatus1,BitsStatus2; 
....................   BitsStatus1 = Bits_status1(); 
297E:  BRA    2302
2980:  MOVFF  01,1BC
....................   BitsStatus2 = Bits_status2(); 
2984:  BRA    2396
2986:  MOVFF  01,1BD
....................   
....................   current_temperature = read_temperature(); 
298A:  BRA    2766
298C:  MOVFF  02,10A
2990:  MOVFF  01,109
....................   //measured_current = read_current(); 
....................   //power_level_stat = current_power; 
....................   status_buffer[0] = 0xFB; // Synchronization Byte 1 
2994:  MOVLW  FB
2996:  MOVLB  1
2998:  MOVWF  x15
....................   status_buffer[1] = 0x60; // Synchronization Byte 2 
299A:  MOVLW  60
299C:  MOVWF  x16
....................   status_buffer[2] = TX_Counter; // The counter increments by one each time an update is sent 0 to 255 
299E:  MOVFF  111,117
....................   status_buffer[3] = setup.frequency / 256; // MSB TX frequency  
29A2:  MOVFF  BA,118
....................   status_buffer[4] = setup.frequency % 256; // LSB TX frequency  
29A6:  MOVFF  B9,119
29AA:  MOVLB  1
....................   status_buffer[5] = setup.mode; // State of modulation state 
29AC:  MOVFF  AF,11A
....................   status_buffer[6] = BitsStatus1; //0x00; // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
29B0:  MOVFF  1BC,11B
....................   status_buffer[7] = current_temperature / 256; //MSB TX Temperature  
29B4:  MOVFF  10A,1BF
29B8:  MOVFF  109,1BE
29BC:  MOVLW  01
29BE:  MOVWF  xC1
29C0:  CLRF   xC0
29C2:  MOVLB  0
29C4:  RCALL  28FA
29C6:  MOVFF  01,11C
29CA:  MOVLB  1
....................   status_buffer[8] = current_temperature % 256; //LSB TX Temperature  
29CC:  MOVFF  10A,1BF
29D0:  MOVFF  109,1BE
29D4:  MOVLW  01
29D6:  MOVWF  xC1
29D8:  CLRF   xC0
29DA:  MOVLB  0
29DC:  RCALL  28FA
29DE:  MOVFF  00,11D
29E2:  MOVLB  1
....................   status_buffer[9] = setup.bitrate / 256; //MSB Bit rate state ,  
29E4:  MOVFF  AC,11E
....................   status_buffer[10] = setup.bitrate % 256; //LSB Bit rate state  
29E8:  MOVFF  AB,11F
29EC:  MOVLB  1
....................   status_buffer[11] = current_power; // TX power in dBm 
29EE:  MOVFF  10B,120
....................   status_buffer[12] = setup.internal_pattern; //Data type while using internal data 
29F2:  MOVFF  B4,121
....................   status_buffer[13] = BitsStatus2; // Bits status of: Reverse Power N/A 
29F6:  MOVFF  1BD,122
....................   status_buffer[14] = setup.bitlow_power_level ;// TX low power in dBm (VL) 
29FA:  MOVFF  FD,123
....................   status_buffer[15] = setup.bitpower_level ;// TX low power in dBm (VP) 
29FE:  MOVFF  FE,124
....................   status_buffer[16] = revp/2; // Revers power div by 2 in order to make it 1 BIT 
2A02:  BCF    FD8.0
2A04:  RRCF   x08,W
2A06:  RRCF   x07,W
2A08:  MOVWF  x25
....................   status_buffer[17] = VER;// TX VERSION 
2A0A:  MOVLW  33
2A0C:  MOVWF  x26
....................   status_buffer[18] = setup.unit_ID / 256;//MSB TX Serial number 
2A0E:  MOVFF  F2,127
....................   status_buffer[19] = setup.unit_ID % 256;//LSB TX Serial number 
2A12:  MOVFF  F1,128
2A16:  MOVLB  1
....................   status_buffer[20] = 0xAA;// Spare 
2A18:  MOVLW  AA
2A1A:  MOVWF  x29
....................   status_buffer[21] = 0xAA;// Spare 
2A1C:  MOVWF  x2A
....................   status_buffer[22] = 0xAA;// Spare 
2A1E:  MOVWF  x2B
....................    
....................   for (idx = 0; idx < 25; idx++) 
2A20:  CLRF   xBB
2A22:  CLRF   xBA
2A24:  MOVF   xBB,F
2A26:  BNZ   2A4A
2A28:  MOVF   xBA,W
2A2A:  SUBLW  18
2A2C:  BNC   2A4A
....................     { 
....................     chksum += status_buffer[idx]; 
2A2E:  MOVLW  15
2A30:  ADDWF  xBA,W
2A32:  MOVWF  FE9
2A34:  MOVLW  01
2A36:  ADDWFC xBB,W
2A38:  MOVWF  FEA
2A3A:  MOVF   FEF,W
2A3C:  ADDWF  xB8,F
2A3E:  MOVLW  00
2A40:  ADDWFC xB9,F
....................     } 
2A42:  INCF   xBA,F
2A44:  BTFSC  FD8.2
2A46:  INCF   xBB,F
2A48:  BRA    2A24
....................   status_buffer[23] =(chksum ) / 256;//& 255 
2A4A:  MOVFF  1B9,12C
....................   status_buffer[24] =(chksum ) % 256;//& 255 
2A4E:  MOVFF  1B8,12D
....................   } 
2A52:  MOVLB  0
2A54:  GOTO   6C70 (RETURN)
.................... /* 
....................   for (idx = 0; idx < 5; idx++) 
....................     { 
....................     chksum += status_buffer[idx]; 
....................     } 
....................   status_buffer[5] =chksum & 255; 
....................   } 
....................  */  
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, device, addr, data, buf[40]; 
....................   ULONG freq, bitrate; 
....................   UINT  value; 
....................   chr = 2; 
*
61D0:  MOVLW  02
61D2:  MOVLB  1
61D4:  MOVWF  xD1
....................   comm_ptr = 0; 
61D6:  CLRF   x43
....................   switch (toupper(get_char())) 
....................     { 
61D8:  MOVLB  0
61DA:  CALL   2AA2
61DE:  MOVFF  02,209
61E2:  MOVFF  01,208
61E6:  MOVLB  2
61E8:  MOVF   x09,F
61EA:  BNZ   61F2
61EC:  MOVF   x08,W
61EE:  SUBLW  60
61F0:  BC    6202
61F2:  MOVF   x09,F
61F4:  BNZ   6202
61F6:  MOVF   x08,W
61F8:  SUBLW  7A
61FA:  BNC   6202
61FC:  MOVF   x08,W
61FE:  ANDLW  DF
6200:  BRA    6204
6202:  MOVF   x08,W
6204:  XORLW  48
6206:  MOVLB  0
6208:  BZ    6258
620A:  XORLW  09
620C:  BZ    6260
620E:  XORLW  02
6210:  BTFSC  FD8.2
6212:  BRA    6334
6214:  XORLW  07
6216:  BTFSC  FD8.2
6218:  BRA    6412
621A:  XORLW  0B
621C:  BTFSC  FD8.2
621E:  BRA    6490
6220:  XORLW  1D
6222:  BTFSC  FD8.2
6224:  BRA    64CE
6226:  XORLW  10
6228:  BTFSC  FD8.2
622A:  BRA    650E
622C:  XORLW  05
622E:  BTFSC  FD8.2
6230:  BRA    6566
6232:  XORLW  01
6234:  BTFSC  FD8.2
6236:  BRA    6682
6238:  XORLW  15
623A:  BTFSC  FD8.2
623C:  BRA    6710
623E:  XORLW  07
6240:  BTFSC  FD8.2
6242:  BRA    67B6
6244:  XORLW  65
6246:  BTFSC  FD8.2
6248:  BRA    687E
624A:  XORLW  03
624C:  BTFSC  FD8.2
624E:  BRA    688C
6250:  XORLW  01
6252:  BTFSC  FD8.2
6254:  BRA    6896
6256:  BRA    68A4
....................     case 'H': 
....................       list_help1(); 
6258:  BRA    5C1E
....................       return 0; 
625A:  MOVLW  00
625C:  MOVWF  01
625E:  BRA    68AE
....................     case 'A': 
....................       switch (toupper(get_char())) 
....................         { 
6260:  CALL   2AA2
6264:  MOVFF  02,209
6268:  MOVFF  01,208
626C:  MOVLB  2
626E:  MOVF   x09,F
6270:  BNZ   6278
6272:  MOVF   x08,W
6274:  SUBLW  60
6276:  BC    6288
6278:  MOVF   x09,F
627A:  BNZ   6288
627C:  MOVF   x08,W
627E:  SUBLW  7A
6280:  BNC   6288
6282:  MOVF   x08,W
6284:  ANDLW  DF
6286:  BRA    628A
6288:  MOVF   x08,W
628A:  XORLW  54
628C:  MOVLB  0
628E:  BZ    6296
6290:  XORLW  1D
6292:  BZ    62A0
6294:  BRA    6332
....................         case 'T': 
....................           idx = get_int(); 
6296:  CALL   2B5E
629A:  MOVFF  01,1D2
....................  
....................           // write to attenuator 
....................           break; 
629E:  BRA    6332
....................         case 'I': 
....................           idx = get_int(); 
62A0:  CALL   2B5E
62A4:  MOVFF  01,1D2
....................           if (idx && idx < 4) 
62A8:  MOVLB  1
62AA:  MOVF   xD2,F
62AC:  BZ    6330
62AE:  MOVF   xD2,W
62B0:  SUBLW  03
62B2:  BNC   6330
....................             { 
....................             set_adc_channel(idx-1); 
62B4:  MOVLW  01
62B6:  SUBWF  xD2,W
62B8:  MOVLB  2
62BA:  MOVWF  x08
62BC:  RLCF   x08,W
62BE:  MOVWF  00
62C0:  RLCF   00,F
62C2:  MOVLW  FC
62C4:  ANDWF  00,F
62C6:  MOVF   FC2,W
62C8:  ANDLW  83
62CA:  IORWF  00,W
62CC:  MOVWF  FC2
....................             delay_us(30); 
62CE:  MOVLW  27
62D0:  MOVWF  00
62D2:  DECFSZ 00,F
62D4:  BRA    62D2
62D6:  BRA    62D8
....................             value = read_adc(); 
62D8:  BSF    FC2.1
62DA:  BTFSC  FC2.1
62DC:  BRA    62DA
62DE:  MOVFF  FC3,206
62E2:  MOVFF  FC4,207
....................             sprintf(buf, "$AR %lu\r", value); 
62E6:  MOVLW  01
62E8:  MOVLB  1
62EA:  MOVWF  xA6
62EC:  MOVLW  D6
62EE:  MOVWF  xA5
62F0:  MOVLW  0C
62F2:  MOVWF  FF6
62F4:  MOVLW  0C
62F6:  MOVWF  FF7
62F8:  MOVLW  04
62FA:  MOVLB  2
62FC:  MOVWF  x34
62FE:  MOVLB  0
6300:  CALL   3010
6304:  MOVLW  10
6306:  MOVWF  FE9
6308:  MOVFF  207,235
630C:  MOVFF  206,234
6310:  CALL   3038
6314:  MOVLW  0D
6316:  MOVLB  2
6318:  MOVWF  x3D
631A:  MOVLB  0
631C:  CALL   2FEE
....................             COM1_send_str(buf); 
6320:  MOVLW  01
6322:  MOVLB  2
6324:  MOVWF  x6F
6326:  MOVLW  D6
6328:  MOVWF  x6E
632A:  MOVLB  0
632C:  CALL   223A
....................             } 
....................           break; 
6330:  MOVLB  0
....................         } 
....................       break; 
6332:  BRA    68AA
....................     case 'C': 
....................       if (chr = toupper(get_char()) == 'F') 
6334:  CALL   2AA2
6338:  MOVFF  02,209
633C:  MOVFF  01,208
6340:  MOVLB  2
6342:  MOVF   x09,F
6344:  BNZ   634C
6346:  MOVF   x08,W
6348:  SUBLW  60
634A:  BC    635C
634C:  MOVF   x09,F
634E:  BNZ   635C
6350:  MOVF   x08,W
6352:  SUBLW  7A
6354:  BNC   635C
6356:  MOVF   x08,W
6358:  ANDLW  DF
635A:  BRA    635E
635C:  MOVF   x08,W
635E:  SUBLW  46
6360:  BZ    6366
6362:  MOVLW  00
6364:  BRA    6368
6366:  MOVLW  01
6368:  MOVLB  1
636A:  MOVWF  xD1
636C:  MOVF   xD1,F
636E:  BZ    63A2
....................         { 
....................         freq = get_frequency(); 
6370:  MOVLB  0
6372:  CALL   30F4
6376:  MOVLB  2
6378:  CLRF   x01
637A:  CLRF   x00
637C:  MOVFF  02,1FF
6380:  MOVFF  01,1FE
....................         PLL_compute_freq_parameters(freq); 
6384:  MOVFF  1FF,209
6388:  MOVFF  1FE,208
638C:  MOVFF  1FF,239
6390:  MOVFF  1FE,238
6394:  MOVLB  0
6396:  CALL   13D8
....................         PLL_update(); 
639A:  CALL   16A8
....................         } 
....................       else if (chr == 'P') 
639E:  BRA    640C
63A0:  MOVLB  1
63A2:  MOVF   xD1,W
63A4:  SUBLW  50
63A6:  BNZ   640E
....................         { 
....................         idx = get_int(); 
63A8:  MOVLB  0
63AA:  CALL   2B5E
63AE:  MOVFF  01,1D2
....................         if (idx < 2) 
63B2:  MOVLB  1
63B4:  MOVF   xD2,W
63B6:  SUBLW  01
63B8:  BNC   640E
....................           { 
....................           setup.clock_polarity = idx & 1; 
63BA:  MOVF   xD2,W
63BC:  ANDLW  01
63BE:  MOVLB  0
63C0:  MOVWF  xB0
....................           sprintf(buf, "$CP %u\r", idx); 
63C2:  MOVLW  01
63C4:  MOVLB  1
63C6:  MOVWF  xA6
63C8:  MOVLW  D6
63CA:  MOVWF  xA5
63CC:  MOVLW  16
63CE:  MOVWF  FF6
63D0:  MOVLW  0C
63D2:  MOVWF  FF7
63D4:  MOVLW  04
63D6:  MOVLB  2
63D8:  MOVWF  x34
63DA:  MOVLB  0
63DC:  CALL   3010
63E0:  MOVFF  1D2,234
63E4:  MOVLW  1B
63E6:  MOVLB  2
63E8:  MOVWF  x35
63EA:  MOVLB  0
63EC:  CALL   3188
63F0:  MOVLW  0D
63F2:  MOVLB  2
63F4:  MOVWF  x3D
63F6:  MOVLB  0
63F8:  CALL   2FEE
....................           COM1_send_str(buf); 
63FC:  MOVLW  01
63FE:  MOVLB  2
6400:  MOVWF  x6F
6402:  MOVLW  D6
6404:  MOVWF  x6E
6406:  MOVLB  0
6408:  CALL   223A
640C:  MOVLB  1
....................           } 
....................         } 
....................       break; 
640E:  MOVLB  0
6410:  BRA    68AA
....................     case 'D': 
....................       if (toupper(get_char()) == 'I') 
6412:  CALL   2AA2
6416:  MOVFF  02,209
641A:  MOVFF  01,208
641E:  MOVLB  2
6420:  MOVF   x09,F
6422:  BNZ   642A
6424:  MOVF   x08,W
6426:  SUBLW  60
6428:  BC    643A
642A:  MOVF   x09,F
642C:  BNZ   643A
642E:  MOVF   x08,W
6430:  SUBLW  7A
6432:  BNC   643A
6434:  MOVF   x08,W
6436:  ANDLW  DF
6438:  BRA    643C
643A:  MOVF   x08,W
643C:  SUBLW  49
643E:  BNZ   648C
....................         { 
....................         idx = input_c(); // change to REAL input ports 
6440:  MOVFF  F82,1D2
....................         sprintf(buf, "$DR %02X\r", idx); 
6444:  MOVLW  01
6446:  MOVLB  1
6448:  MOVWF  xA6
644A:  MOVLW  D6
644C:  MOVWF  xA5
644E:  MOVLW  1E
6450:  MOVWF  FF6
6452:  MOVLW  0C
6454:  MOVWF  FF7
6456:  MOVLW  04
6458:  MOVLB  2
645A:  MOVWF  x34
645C:  MOVLB  0
645E:  CALL   3010
6462:  MOVFF  1D2,208
6466:  MOVLW  37
6468:  MOVLB  2
646A:  MOVWF  x09
646C:  MOVLB  0
646E:  RCALL  5E36
6470:  MOVLW  0D
6472:  MOVLB  2
6474:  MOVWF  x3D
6476:  MOVLB  0
6478:  CALL   2FEE
....................         COM1_send_str(buf); 
647C:  MOVLW  01
647E:  MOVLB  2
6480:  MOVWF  x6F
6482:  MOVLW  D6
6484:  MOVWF  x6E
6486:  MOVLB  0
6488:  CALL   223A
....................         } 
....................       break; 
648C:  MOVLB  0
648E:  BRA    68AA
....................     case 'O': 
....................       if (toupper(get_char()) == 'T') 
6490:  CALL   2AA2
6494:  MOVFF  02,209
6498:  MOVFF  01,208
649C:  MOVLB  2
649E:  MOVF   x09,F
64A0:  BNZ   64A8
64A2:  MOVF   x08,W
64A4:  SUBLW  60
64A6:  BC    64B8
64A8:  MOVF   x09,F
64AA:  BNZ   64B8
64AC:  MOVF   x08,W
64AE:  SUBLW  7A
64B0:  BNC   64B8
64B2:  MOVF   x08,W
64B4:  ANDLW  DF
64B6:  BRA    64BA
64B8:  MOVF   x08,W
64BA:  SUBLW  54
64BC:  BNZ   64CA
....................         { 
....................         value = get_hex(); 
64BE:  MOVLB  0
64C0:  RCALL  5E80
64C2:  MOVFF  01,207
64C6:  MOVFF  00,206
....................         // output bits 
....................         } 
....................       break; 
64CA:  MOVLB  0
64CC:  BRA    68AA
....................     case 'R': 
....................       if (toupper(get_char()) == 'D') 
64CE:  CALL   2AA2
64D2:  MOVFF  02,209
64D6:  MOVFF  01,208
64DA:  MOVLB  2
64DC:  MOVF   x09,F
64DE:  BNZ   64E6
64E0:  MOVF   x08,W
64E2:  SUBLW  60
64E4:  BC    64F6
64E6:  MOVF   x09,F
64E8:  BNZ   64F6
64EA:  MOVF   x08,W
64EC:  SUBLW  7A
64EE:  BNC   64F6
64F0:  MOVF   x08,W
64F2:  ANDLW  DF
64F4:  BRA    64F8
64F6:  MOVF   x08,W
64F8:  SUBLW  44
64FA:  BNZ   650A
....................         { 
....................         output_high(D2A_RESET); 
64FC:  BSF    F8A.3
....................         delay_ms(100); 
64FE:  MOVLW  64
6500:  MOVWF  x45
6502:  MOVLB  0
6504:  CALL   0F20
....................         output_low(D2A_RESET); 
6508:  BCF    F8A.3
....................         } 
....................       break; 
650A:  MOVLB  0
650C:  BRA    68AA
....................     case 'B':             // bit rate 
....................       if (toupper(get_char()) == 'R') 
650E:  CALL   2AA2
6512:  MOVFF  02,209
6516:  MOVFF  01,208
651A:  MOVLB  2
651C:  MOVF   x09,F
651E:  BNZ   6526
6520:  MOVF   x08,W
6522:  SUBLW  60
6524:  BC    6536
6526:  MOVF   x09,F
6528:  BNZ   6536
652A:  MOVF   x08,W
652C:  SUBLW  7A
652E:  BNC   6536
6530:  MOVF   x08,W
6532:  ANDLW  DF
6534:  BRA    6538
6536:  MOVF   x08,W
6538:  SUBLW  52
653A:  BNZ   6562
....................         { 
....................         bitrate = str_to_long(); 
653C:  MOVLB  0
653E:  BRA    5F78
6540:  MOVFF  03,205
6544:  MOVFF  02,204
6548:  MOVFF  01,203
654C:  MOVFF  00,202
....................         set_bitrate(bitrate); 
6550:  MOVFF  203,209
6554:  MOVFF  202,208
6558:  MOVFF  203,20B
655C:  MOVFF  202,20A
6560:  BRA    6034
....................         } 
....................       break; 
6562:  MOVLB  0
6564:  BRA    68AA
....................     case 'G': 
....................       device = get_char(); 
6566:  CALL   2AA2
656A:  MOVFF  01,1D3
....................       addr = get_hex(); 
656E:  RCALL  5E80
6570:  MOVFF  00,1D4
....................       switch (toupper(device)) 
....................         { 
6574:  MOVLB  1
6576:  MOVF   xD3,W
6578:  SUBLW  60
657A:  BC    6588
657C:  MOVF   xD3,W
657E:  SUBLW  7A
6580:  BNC   6588
6582:  MOVF   xD3,W
6584:  ANDLW  DF
6586:  BRA    658A
6588:  MOVF   xD3,W
658A:  XORLW  46
658C:  MOVLB  0
658E:  BZ    6596
6590:  XORLW  02
6592:  BZ    6610
6594:  BRA    6680
....................         case 'F': 
....................           chr = get_FPGA_register(addr, &data); 
6596:  MOVFF  1D4,208
659A:  MOVLW  01
659C:  MOVLB  2
659E:  MOVWF  x0A
65A0:  MOVLW  D5
65A2:  MOVWF  x09
65A4:  MOVLB  0
65A6:  BRA    60C4
65A8:  MOVFF  01,1D1
....................           sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
65AC:  MOVLW  01
65AE:  MOVLB  1
65B0:  MOVWF  xA6
65B2:  MOVLW  D6
65B4:  MOVWF  xA5
65B6:  MOVLW  28
65B8:  MOVWF  FF6
65BA:  MOVLW  0C
65BC:  MOVWF  FF7
65BE:  MOVLW  07
65C0:  MOVLB  2
65C2:  MOVWF  x34
65C4:  MOVLB  0
65C6:  CALL   3010
65CA:  MOVFF  1D4,208
65CE:  MOVLW  37
65D0:  MOVLB  2
65D2:  MOVWF  x09
65D4:  MOVLB  0
65D6:  RCALL  5E36
65D8:  MOVLW  20
65DA:  MOVLB  2
65DC:  MOVWF  x3D
65DE:  MOVLB  0
65E0:  CALL   2FEE
65E4:  MOVFF  1D1,208
65E8:  MOVLW  37
65EA:  MOVLB  2
65EC:  MOVWF  x09
65EE:  MOVLB  0
65F0:  RCALL  5E36
65F2:  MOVLW  0D
65F4:  MOVLB  2
65F6:  MOVWF  x3D
65F8:  MOVLB  0
65FA:  CALL   2FEE
....................           COM1_send_str(buf); 
65FE:  MOVLW  01
6600:  MOVLB  2
6602:  MOVWF  x6F
6604:  MOVLW  D6
6606:  MOVWF  x6E
6608:  MOVLB  0
660A:  CALL   223A
....................           break; 
660E:  BRA    6680
....................         case 'D': 
....................           data = read_D2A(addr); 
6610:  MOVFF  1D4,208
6614:  BRA    616E
6616:  MOVFF  01,1D5
....................           sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
661A:  MOVLW  01
661C:  MOVLB  1
661E:  MOVWF  xA6
6620:  MOVLW  D6
6622:  MOVWF  xA5
6624:  MOVLW  3A
6626:  MOVWF  FF6
6628:  MOVLW  0C
662A:  MOVWF  FF7
662C:  MOVLW  07
662E:  MOVLB  2
6630:  MOVWF  x34
6632:  MOVLB  0
6634:  CALL   3010
6638:  MOVFF  1D4,208
663C:  MOVLW  37
663E:  MOVLB  2
6640:  MOVWF  x09
6642:  MOVLB  0
6644:  CALL   5E36
6648:  MOVLW  20
664A:  MOVLB  2
664C:  MOVWF  x3D
664E:  MOVLB  0
6650:  CALL   2FEE
6654:  MOVFF  1D5,208
6658:  MOVLW  37
665A:  MOVLB  2
665C:  MOVWF  x09
665E:  MOVLB  0
6660:  CALL   5E36
6664:  MOVLW  0D
6666:  MOVLB  2
6668:  MOVWF  x3D
666A:  MOVLB  0
666C:  CALL   2FEE
....................           COM1_send_str(buf); 
6670:  MOVLW  01
6672:  MOVLB  2
6674:  MOVWF  x6F
6676:  MOVLW  D6
6678:  MOVWF  x6E
667A:  MOVLB  0
667C:  CALL   223A
....................           break; 
....................         } 
....................       break; 
6680:  BRA    68AA
....................     case 'F': // fill tables 
....................       skip_spc(); 
6682:  CALL   2AC2
....................       idx = get_char(); // get table designator 
6686:  CALL   2AA2
668A:  MOVFF  01,1D2
....................       addr = get_int(); // get table index 
668E:  CALL   2B5E
6692:  MOVFF  01,1D4
....................       value = get_int(); // get value to put into table 
6696:  CALL   2B5E
669A:  MOVFF  02,207
669E:  MOVFF  01,206
....................       switch (toupper(idx)) 
....................         { 
66A2:  MOVLB  1
66A4:  MOVF   xD2,W
66A6:  SUBLW  60
66A8:  BC    66B6
66AA:  MOVF   xD2,W
66AC:  SUBLW  7A
66AE:  BNC   66B6
66B0:  MOVF   xD2,W
66B2:  ANDLW  DF
66B4:  BRA    66B8
66B6:  MOVF   xD2,W
66B8:  XORLW  4E
66BA:  MOVLB  0
66BC:  BZ    66C4
66BE:  XORLW  1E
66C0:  BZ    66EA
66C2:  BRA    670E
....................         case 'N': // negative voltage 
....................           if (addr < 3) 
66C4:  MOVLB  1
66C6:  MOVF   xD4,W
66C8:  SUBLW  02
66CA:  BNC   66E6
....................             { 
....................             setup.negative_voltage[addr] = value; 
66CC:  BCF    FD8.0
66CE:  RLCF   xD4,W
66D0:  CLRF   03
66D2:  ADDLW  BE
66D4:  MOVWF  FE9
66D6:  MOVLW  00
66D8:  ADDWFC 03,W
66DA:  MOVWF  FEA
66DC:  MOVFF  207,FEC
66E0:  MOVF   FED,F
66E2:  MOVFF  206,FEF
....................             } 
....................           break; 
66E6:  MOVLB  0
66E8:  BRA    670E
....................         case 'P': // positive voltage 
....................           if (addr < 21) 
66EA:  MOVLB  1
66EC:  MOVF   xD4,W
66EE:  SUBLW  14
66F0:  BNC   670C
....................             { 
....................             setup.power_in[addr] = value; 
66F2:  BCF    FD8.0
66F4:  RLCF   xD4,W
66F6:  CLRF   03
66F8:  ADDLW  C4
66FA:  MOVWF  FE9
66FC:  MOVLW  00
66FE:  ADDWFC 03,W
6700:  MOVWF  FEA
6702:  MOVFF  207,FEC
6706:  MOVF   FED,F
6708:  MOVFF  206,FEF
....................             } 
....................           break; 
670C:  MOVLB  0
....................         } 
....................       break; 
670E:  BRA    68AA
....................     case 'S': 
....................       device = get_char(); 
6710:  CALL   2AA2
6714:  MOVFF  01,1D3
....................       addr = get_hex(); 
6718:  CALL   5E80
671C:  MOVFF  00,1D4
....................       data = get_hex(); 
6720:  CALL   5E80
6724:  MOVFF  00,1D5
....................       switch (toupper(device)) 
....................         { 
6728:  MOVLB  1
672A:  MOVF   xD3,W
672C:  SUBLW  60
672E:  BC    673C
6730:  MOVF   xD3,W
6732:  SUBLW  7A
6734:  BNC   673C
6736:  MOVF   xD3,W
6738:  ANDLW  DF
673A:  BRA    673E
673C:  MOVF   xD3,W
673E:  XORLW  46
6740:  MOVLB  0
6742:  BZ    674E
6744:  XORLW  02
6746:  BZ    6780
6748:  XORLW  12
674A:  BZ    67A4
674C:  BRA    67B4
....................         case 'F': 
....................           buf[0] = addr; 
674E:  MOVFF  1D4,1D6
....................           buf[1] = data; 
6752:  MOVFF  1D5,1D7
....................           FPGA_image[addr] = data; 
6756:  CLRF   03
6758:  MOVLB  1
675A:  MOVF   xD4,W
675C:  ADDLW  46
675E:  MOVWF  FE9
6760:  MOVLW  01
6762:  ADDWFC 03,W
6764:  MOVWF  FEA
6766:  MOVFF  1D5,FEF
....................           send_FPGA_command(2, buf); 
676A:  MOVLW  02
676C:  MOVLB  2
676E:  MOVWF  x45
6770:  MOVLW  01
6772:  MOVWF  x47
6774:  MOVLW  D6
6776:  MOVWF  x46
6778:  MOVLB  0
677A:  CALL   1790
....................           break; 
677E:  BRA    67B4
....................         case 'D': 
....................           D2A_image[addr] = data; 
6780:  CLRF   03
6782:  MOVLB  1
6784:  MOVF   xD4,W
6786:  ADDLW  66
6788:  MOVWF  FE9
678A:  MOVLW  01
678C:  ADDWFC 03,W
678E:  MOVWF  FEA
6790:  MOVFF  1D5,FEF
....................           write_D2A(addr, data); 
6794:  MOVFF  1D4,208
6798:  MOVFF  1D5,209
679C:  MOVLB  0
679E:  CALL   591A
....................           break; 
67A2:  BRA    67B4
....................         case 'V': 
....................           allow_write = 2975; 
67A4:  MOVLW  0B
67A6:  MOVLB  1
67A8:  MOVWF  x02
67AA:  MOVLW  9F
67AC:  MOVWF  x01
....................           write_setup(); 
67AE:  MOVLB  0
67B0:  CALL   3274
....................           break; 
....................         } 
....................       break; 
67B4:  BRA    68AA
....................     case 'T': 
....................       if (toupper(get_char()) == 'T') 
67B6:  CALL   2AA2
67BA:  MOVFF  02,209
67BE:  MOVFF  01,208
67C2:  MOVLB  2
67C4:  MOVF   x09,F
67C6:  BNZ   67CE
67C8:  MOVF   x08,W
67CA:  SUBLW  60
67CC:  BC    67DE
67CE:  MOVF   x09,F
67D0:  BNZ   67DE
67D2:  MOVF   x08,W
67D4:  SUBLW  7A
67D6:  BNC   67DE
67D8:  MOVF   x08,W
67DA:  ANDLW  DF
67DC:  BRA    67E0
67DE:  MOVF   x08,W
67E0:  SUBLW  54
67E2:  BNZ   687A
....................         if (toupper(get_char()) == 'C') 
67E4:  MOVLB  0
67E6:  CALL   2AA2
67EA:  MOVFF  02,209
67EE:  MOVFF  01,208
67F2:  MOVLB  2
67F4:  MOVF   x09,F
67F6:  BNZ   67FE
67F8:  MOVF   x08,W
67FA:  SUBLW  60
67FC:  BC    680E
67FE:  MOVF   x09,F
6800:  BNZ   680E
6802:  MOVF   x08,W
6804:  SUBLW  7A
6806:  BNC   680E
6808:  MOVF   x08,W
680A:  ANDLW  DF
680C:  BRA    6810
680E:  MOVF   x08,W
6810:  SUBLW  43
6812:  BNZ   687A
....................           if (toupper(get_char()) == 'C') 
6814:  MOVLB  0
6816:  CALL   2AA2
681A:  MOVFF  02,209
681E:  MOVFF  01,208
6822:  MOVLB  2
6824:  MOVF   x09,F
6826:  BNZ   682E
6828:  MOVF   x08,W
682A:  SUBLW  60
682C:  BC    683E
682E:  MOVF   x09,F
6830:  BNZ   683E
6832:  MOVF   x08,W
6834:  SUBLW  7A
6836:  BNC   683E
6838:  MOVF   x08,W
683A:  ANDLW  DF
683C:  BRA    6840
683E:  MOVF   x08,W
6840:  SUBLW  43
6842:  BNZ   687A
....................             if (toupper(get_char()) == 'P') 
6844:  MOVLB  0
6846:  CALL   2AA2
684A:  MOVFF  02,209
684E:  MOVFF  01,208
6852:  MOVLB  2
6854:  MOVF   x09,F
6856:  BNZ   685E
6858:  MOVF   x08,W
685A:  SUBLW  60
685C:  BC    686E
685E:  MOVF   x09,F
6860:  BNZ   686E
6862:  MOVF   x08,W
6864:  SUBLW  7A
6866:  BNC   686E
6868:  MOVF   x08,W
686A:  ANDLW  DF
686C:  BRA    6870
686E:  MOVF   x08,W
6870:  SUBLW  50
6872:  BNZ   687A
....................               ttccp = 1; 
6874:  MOVLW  01
6876:  MOVLB  1
6878:  MOVWF  x44
....................       break; 
687A:  MOVLB  0
687C:  BRA    68AA
....................     case '1': // year 
....................       setup.year = get_int(); 
687E:  CALL   2B5E
6882:  MOVFF  02,EF
6886:  MOVFF  01,EE
....................       break; 
688A:  BRA    68AA
....................     case '2': // week 
....................       setup.week = get_int(); 
688C:  CALL   2B5E
6890:  MOVFF  01,F0
....................       break; 
6894:  BRA    68AA
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
6896:  CALL   2B5E
689A:  MOVFF  02,F2
689E:  MOVFF  01,F1
....................       break; 
68A2:  BRA    68AA
....................     default: 
....................       return 0; 
68A4:  MOVLW  00
68A6:  MOVWF  01
68A8:  BRA    68AE
....................     } 
....................   return 0; 
68AA:  MOVLW  00
68AC:  MOVWF  01
....................   } 
68AE:  GOTO   693C (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
....................   { 
....................   ULONG bitrate, sub; 
....................             bitrate = get_int();//* 100; 
*
336A:  CALL   2B5E
336E:  MOVFF  01,00
3372:  MOVFF  02,01
3376:  CLRF   02
3378:  CLRF   03
337A:  MOVFF  03,233
337E:  MOVFF  02,232
3382:  MOVFF  01,231
3386:  MOVFF  00,230
....................             get_char(); 
338A:  CALL   2AA2
....................             sub = get_int(); 
338E:  CALL   2B5E
3392:  MOVFF  01,00
3396:  MOVFF  02,01
339A:  CLRF   02
339C:  CLRF   03
339E:  MOVFF  03,237
33A2:  MOVFF  02,236
33A6:  MOVFF  01,235
33AA:  MOVFF  00,234
....................  
....................             if (peek_char() == '.') 
33AE:  CALL   2A84
33B2:  MOVFF  02,239
33B6:  MOVFF  01,238
33BA:  MOVLB  2
33BC:  MOVF   01,W
33BE:  SUBLW  2E
33C0:  BNZ   33FE
33C2:  MOVF   x39,F
33C4:  BNZ   33FE
....................               { 
....................               get_char(); 
33C6:  MOVLB  0
33C8:  CALL   2AA2
....................               sub = get_int(); 
33CC:  CALL   2B5E
33D0:  MOVFF  01,00
33D4:  MOVFF  02,01
33D8:  CLRF   02
33DA:  CLRF   03
33DC:  MOVFF  03,237
33E0:  MOVFF  02,236
33E4:  MOVFF  01,235
33E8:  MOVFF  00,234
....................               bitrate += sub; 
33EC:  MOVLB  2
33EE:  MOVF   x34,W
33F0:  ADDWF  x30,F
33F2:  MOVF   x35,W
33F4:  ADDWFC x31,F
33F6:  MOVF   x36,W
33F8:  ADDWFC x32,F
33FA:  MOVF   x37,W
33FC:  ADDWFC x33,F
....................               } 
....................  
....................             setup.bitrate = bitrate * 100 + sub; 
33FE:  MOVFF  233,24D
3402:  MOVFF  232,24C
3406:  MOVFF  231,24B
340A:  MOVFF  230,24A
340E:  CLRF   x51
3410:  CLRF   x50
3412:  CLRF   x4F
3414:  MOVLW  64
3416:  MOVWF  x4E
3418:  MOVLB  0
341A:  CALL   12E8
341E:  MOVLB  2
3420:  MOVF   x34,W
3422:  ADDWF  00,W
3424:  MOVLB  0
3426:  MOVWF  xAB
3428:  MOVLB  2
342A:  MOVF   x35,W
342C:  ADDWFC 01,W
342E:  MOVLB  0
3430:  MOVWF  xAC
.................... 		//	setup.bitrate1= setup.bitrate; 
....................             FPGA_set_bitrate(); 
3432:  CALL   1C58
....................  
....................   } 
3436:  GOTO   4A50 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n\n"); 
*
2C24:  MOVLW  0D
2C26:  MOVLB  2
2C28:  MOVWF  x30
2C2A:  MOVLW  0A
2C2C:  MOVWF  x31
2C2E:  MOVWF  x32
2C30:  CLRF   x33
2C32:  MOVLW  02
2C34:  MOVWF  x6F
2C36:  MOVLW  30
2C38:  MOVWF  x6E
2C3A:  MOVLB  0
2C3C:  CALL   223A
....................   COM1_send_str("DS <data soure><cr>  \tSet data sourse (0-1)\r\n"); 
2C40:  MOVLW  02
2C42:  MOVWF  FEA
2C44:  MOVLW  30
2C46:  MOVWF  FE9
2C48:  MOVLW  2E
2C4A:  MOVWF  01
2C4C:  CLRF   FF7
2C4E:  MOVLW  00
2C50:  CALL   03A6
2C54:  TBLRD*-
2C56:  TBLRD*+
2C58:  MOVFF  FF5,FEE
2C5C:  DECFSZ 01,F
2C5E:  BRA    2C56
2C60:  MOVLW  02
2C62:  MOVLB  2
2C64:  MOVWF  x6F
2C66:  MOVLW  30
2C68:  MOVWF  x6E
2C6A:  MOVLB  0
2C6C:  CALL   223A
....................   COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2C70:  MOVLW  02
2C72:  MOVWF  FEA
2C74:  MOVLW  30
2C76:  MOVWF  FE9
2C78:  MOVLW  33
2C7A:  MOVWF  01
2C7C:  CLRF   FF7
2C7E:  MOVLW  00
2C80:  CALL   03E4
2C84:  TBLRD*-
2C86:  TBLRD*+
2C88:  MOVFF  FF5,FEE
2C8C:  DECFSZ 01,F
2C8E:  BRA    2C86
2C90:  MOVLW  02
2C92:  MOVLB  2
2C94:  MOVWF  x6F
2C96:  MOVLW  30
2C98:  MOVWF  x6E
2C9A:  MOVLB  0
2C9C:  CALL   223A
....................   COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2CA0:  MOVLW  02
2CA2:  MOVWF  FEA
2CA4:  MOVLW  30
2CA6:  MOVWF  FE9
2CA8:  MOVLW  31
2CAA:  MOVWF  01
2CAC:  CLRF   FF7
2CAE:  MOVLW  00
2CB0:  CALL   0428
2CB4:  TBLRD*-
2CB6:  TBLRD*+
2CB8:  MOVFF  FF5,FEE
2CBC:  DECFSZ 01,F
2CBE:  BRA    2CB6
2CC0:  MOVLW  02
2CC2:  MOVLB  2
2CC4:  MOVWF  x6F
2CC6:  MOVLW  30
2CC8:  MOVWF  x6E
2CCA:  MOVLB  0
2CCC:  CALL   223A
....................   COM1_send_str("RP <power higth><cr>  \tSet power higth (0-1)\r\n"); 
2CD0:  MOVLW  02
2CD2:  MOVWF  FEA
2CD4:  MOVLW  30
2CD6:  MOVWF  FE9
2CD8:  MOVLW  2F
2CDA:  MOVWF  01
2CDC:  CLRF   FF7
2CDE:  MOVLW  00
2CE0:  CALL   046A
2CE4:  TBLRD*-
2CE6:  TBLRD*+
2CE8:  MOVFF  FF5,FEE
2CEC:  DECFSZ 01,F
2CEE:  BRA    2CE6
2CF0:  MOVLW  02
2CF2:  MOVLB  2
2CF4:  MOVWF  x6F
2CF6:  MOVLW  30
2CF8:  MOVWF  x6E
2CFA:  MOVLB  0
2CFC:  CALL   223A
....................   COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2D00:  MOVLW  02
2D02:  MOVWF  FEA
2D04:  MOVLW  30
2D06:  MOVWF  FE9
2D08:  MOVLW  31
2D0A:  MOVWF  01
2D0C:  CLRF   FF7
2D0E:  MOVLW  00
2D10:  CALL   04AA
2D14:  TBLRD*-
2D16:  TBLRD*+
2D18:  MOVFF  FF5,FEE
2D1C:  DECFSZ 01,F
2D1E:  BRA    2D16
2D20:  MOVLW  02
2D22:  MOVLB  2
2D24:  MOVWF  x6F
2D26:  MOVLW  30
2D28:  MOVWF  x6E
2D2A:  MOVLB  0
2D2C:  CALL   223A
....................   COM1_send_str("RA <randomizer><cr>  \tset with/without randomizer (0-1)\r\n"); 
2D30:  MOVLW  02
2D32:  MOVWF  FEA
2D34:  MOVLW  30
2D36:  MOVWF  FE9
2D38:  MOVLW  3A
2D3A:  MOVWF  01
2D3C:  CLRF   FF7
2D3E:  MOVLW  00
2D40:  CALL   04EC
2D44:  TBLRD*-
2D46:  TBLRD*+
2D48:  MOVFF  FF5,FEE
2D4C:  DECFSZ 01,F
2D4E:  BRA    2D46
2D50:  MOVLW  02
2D52:  MOVLB  2
2D54:  MOVWF  x6F
2D56:  MOVLW  30
2D58:  MOVWF  x6E
2D5A:  MOVLB  0
2D5C:  CALL   223A
....................   COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2D60:  MOVLW  02
2D62:  MOVWF  FEA
2D64:  MOVLW  30
2D66:  MOVWF  FE9
2D68:  MOVLW  35
2D6A:  MOVWF  01
2D6C:  CLRF   FF7
2D6E:  MOVLW  00
2D70:  CALL   0536
2D74:  TBLRD*-
2D76:  TBLRD*+
2D78:  MOVFF  FF5,FEE
2D7C:  DECFSZ 01,F
2D7E:  BRA    2D76
2D80:  MOVLW  02
2D82:  MOVLB  2
2D84:  MOVWF  x6F
2D86:  MOVLW  30
2D88:  MOVWF  x6E
2D8A:  MOVLB  0
2D8C:  CALL   223A
....................   COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2D90:  MOVLW  02
2D92:  MOVWF  FEA
2D94:  MOVLW  30
2D96:  MOVWF  FE9
2D98:  MOVLW  21
2D9A:  MOVWF  01
2D9C:  CLRF   FF7
2D9E:  MOVLW  00
2DA0:  CALL   057C
2DA4:  TBLRD*-
2DA6:  TBLRD*+
2DA8:  MOVFF  FF5,FEE
2DAC:  DECFSZ 01,F
2DAE:  BRA    2DA6
2DB0:  MOVLW  02
2DB2:  MOVLB  2
2DB4:  MOVWF  x6F
2DB6:  MOVLW  30
2DB8:  MOVWF  x6E
2DBA:  MOVLB  0
2DBC:  CALL   223A
....................   COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2DC0:  MOVLW  02
2DC2:  MOVWF  FEA
2DC4:  MOVLW  30
2DC6:  MOVWF  FE9
2DC8:  MOVLW  32
2DCA:  MOVWF  01
2DCC:  CLRF   FF7
2DCE:  MOVLW  00
2DD0:  CALL   05AE
2DD4:  TBLRD*-
2DD6:  TBLRD*+
2DD8:  MOVFF  FF5,FEE
2DDC:  DECFSZ 01,F
2DDE:  BRA    2DD6
2DE0:  MOVLW  02
2DE2:  MOVLB  2
2DE4:  MOVWF  x6F
2DE6:  MOVLW  30
2DE8:  MOVWF  x6E
2DEA:  MOVLB  0
2DEC:  CALL   223A
....................   COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2DF0:  MOVLW  02
2DF2:  MOVWF  FEA
2DF4:  MOVLW  30
2DF6:  MOVWF  FE9
2DF8:  MOVLW  39
2DFA:  MOVWF  01
2DFC:  CLRF   FF7
2DFE:  MOVLW  00
2E00:  CALL   05F0
2E04:  TBLRD*-
2E06:  TBLRD*+
2E08:  MOVFF  FF5,FEE
2E0C:  DECFSZ 01,F
2E0E:  BRA    2E06
2E10:  MOVLW  02
2E12:  MOVLB  2
2E14:  MOVWF  x6F
2E16:  MOVLW  30
2E18:  MOVWF  x6E
2E1A:  MOVLB  0
2E1C:  CALL   223A
....................   COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2E20:  MOVLW  02
2E22:  MOVWF  FEA
2E24:  MOVLW  30
2E26:  MOVWF  FE9
2E28:  MOVLW  31
2E2A:  MOVWF  01
2E2C:  CLRF   FF7
2E2E:  MOVLW  00
2E30:  CALL   063A
2E34:  TBLRD*-
2E36:  TBLRD*+
2E38:  MOVFF  FF5,FEE
2E3C:  DECFSZ 01,F
2E3E:  BRA    2E36
2E40:  MOVLW  02
2E42:  MOVLB  2
2E44:  MOVWF  x6F
2E46:  MOVLW  30
2E48:  MOVWF  x6E
2E4A:  MOVLB  0
2E4C:  CALL   223A
....................   COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2E50:  MOVLW  02
2E52:  MOVWF  FEA
2E54:  MOVLW  30
2E56:  MOVWF  FE9
2E58:  MOVLW  35
2E5A:  MOVWF  01
2E5C:  CLRF   FF7
2E5E:  MOVLW  00
2E60:  CALL   067C
2E64:  TBLRD*-
2E66:  TBLRD*+
2E68:  MOVFF  FF5,FEE
2E6C:  DECFSZ 01,F
2E6E:  BRA    2E66
2E70:  MOVLW  02
2E72:  MOVLB  2
2E74:  MOVWF  x6F
2E76:  MOVLW  30
2E78:  MOVWF  x6E
2E7A:  MOVLB  0
2E7C:  CALL   223A
....................   COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2E80:  MOVLW  02
2E82:  MOVWF  FEA
2E84:  MOVLW  30
2E86:  MOVWF  FE9
2E88:  MOVLW  3B
2E8A:  MOVWF  01
2E8C:  CLRF   FF7
2E8E:  MOVLW  00
2E90:  CALL   06C2
2E94:  TBLRD*-
2E96:  TBLRD*+
2E98:  MOVFF  FF5,FEE
2E9C:  DECFSZ 01,F
2E9E:  BRA    2E96
2EA0:  MOVLW  02
2EA2:  MOVLB  2
2EA4:  MOVWF  x6F
2EA6:  MOVLW  30
2EA8:  MOVWF  x6E
2EAA:  MOVLB  0
2EAC:  CALL   223A
....................   COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2EB0:  MOVLW  02
2EB2:  MOVWF  FEA
2EB4:  MOVLW  30
2EB6:  MOVWF  FE9
2EB8:  MOVLW  3B
2EBA:  MOVWF  01
2EBC:  CLRF   FF7
2EBE:  MOVLW  00
2EC0:  CALL   070E
2EC4:  TBLRD*-
2EC6:  TBLRD*+
2EC8:  MOVFF  FF5,FEE
2ECC:  DECFSZ 01,F
2ECE:  BRA    2EC6
2ED0:  MOVLW  02
2ED2:  MOVLB  2
2ED4:  MOVWF  x6F
2ED6:  MOVLW  30
2ED8:  MOVWF  x6E
2EDA:  MOVLB  0
2EDC:  CALL   223A
....................   COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2EE0:  MOVLW  02
2EE2:  MOVWF  FEA
2EE4:  MOVLW  30
2EE6:  MOVWF  FE9
2EE8:  MOVLW  2F
2EEA:  MOVWF  01
2EEC:  CLRF   FF7
2EEE:  MOVLW  00
2EF0:  CALL   075A
2EF4:  TBLRD*-
2EF6:  TBLRD*+
2EF8:  MOVFF  FF5,FEE
2EFC:  DECFSZ 01,F
2EFE:  BRA    2EF6
2F00:  MOVLW  02
2F02:  MOVLB  2
2F04:  MOVWF  x6F
2F06:  MOVLW  30
2F08:  MOVWF  x6E
2F0A:  MOVLB  0
2F0C:  CALL   223A
....................   COM1_send_str("UT <UART Time><cr>  \tSet the stop time current 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
2F10:  MOVLW  02
2F12:  MOVWF  FEA
2F14:  MOVLW  30
2F16:  MOVWF  FE9
2F18:  MOVLW  3C
2F1A:  MOVWF  01
2F1C:  CLRF   FF7
2F1E:  MOVLW  00
2F20:  CALL   079A
2F24:  TBLRD*-
2F26:  TBLRD*+
2F28:  MOVFF  FF5,FEE
2F2C:  DECFSZ 01,F
2F2E:  BRA    2F26
2F30:  MOVLW  02
2F32:  MOVLB  2
2F34:  MOVWF  x6F
2F36:  MOVLW  30
2F38:  MOVWF  x6E
2F3A:  MOVLB  0
2F3C:  CALL   223A
....................   COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
2F40:  MOVLW  02
2F42:  MOVWF  FEA
2F44:  MOVLW  30
2F46:  MOVWF  FE9
2F48:  MOVLW  2D
2F4A:  MOVWF  01
2F4C:  CLRF   FF7
2F4E:  MOVLW  00
2F50:  CALL   07E6
2F54:  TBLRD*-
2F56:  TBLRD*+
2F58:  MOVFF  FF5,FEE
2F5C:  DECFSZ 01,F
2F5E:  BRA    2F56
2F60:  MOVLW  02
2F62:  MOVLB  2
2F64:  MOVWF  x6F
2F66:  MOVLW  30
2F68:  MOVWF  x6E
2F6A:  MOVLB  0
2F6C:  CALL   223A
....................   COM1_send_str("BG <UART Change><cr>  \tSet Block per second (1-20)\r\n");// VERSION 3.3  23.03.2016 
2F70:  MOVLW  02
2F72:  MOVWF  FEA
2F74:  MOVLW  30
2F76:  MOVWF  FE9
2F78:  MOVLW  35
2F7A:  MOVWF  01
2F7C:  CLRF   FF7
2F7E:  MOVLW  00
2F80:  CALL   0824
2F84:  TBLRD*-
2F86:  TBLRD*+
2F88:  MOVFF  FF5,FEE
2F8C:  DECFSZ 01,F
2F8E:  BRA    2F86
2F90:  MOVLW  02
2F92:  MOVLB  2
2F94:  MOVWF  x6F
2F96:  MOVLW  30
2F98:  MOVWF  x6E
2F9A:  MOVLB  0
2F9C:  CALL   223A
....................   COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2FA0:  MOVLW  02
2FA2:  MOVWF  FEA
2FA4:  MOVLW  30
2FA6:  MOVWF  FE9
2FA8:  MOVLW  25
2FAA:  MOVWF  01
2FAC:  CLRF   FF7
2FAE:  MOVLW  00
2FB0:  CALL   086A
2FB4:  TBLRD*-
2FB6:  TBLRD*+
2FB8:  MOVFF  FF5,FEE
2FBC:  DECFSZ 01,F
2FBE:  BRA    2FB6
2FC0:  MOVLW  02
2FC2:  MOVLB  2
2FC4:  MOVWF  x6F
2FC6:  MOVLW  30
2FC8:  MOVWF  x6E
2FCA:  MOVLB  0
2FCC:  CALL   223A
....................   COM1_send_str("\r\n"); 
2FD0:  MOVLW  0D
2FD2:  MOVLB  2
2FD4:  MOVWF  x30
2FD6:  MOVLW  0A
2FD8:  MOVWF  x31
2FDA:  CLRF   x32
2FDC:  MOVLW  02
2FDE:  MOVWF  x6F
2FE0:  MOVLW  30
2FE2:  MOVWF  x6E
2FE4:  MOVLB  0
2FE6:  CALL   223A
....................   } 
2FEA:  GOTO   5778 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
....................   { 
*
3798:  MOVLB  1
379A:  CLRF   xC4
379C:  CLRF   xEE
....................   UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
....................   ULONG freq, bitrate, sub; 
....................   float temp; 
....................   UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
....................   chr = 2; 
379E:  MOVLW  02
37A0:  MOVWF  xC5
....................   comm_ptr = 0; 
37A2:  CLRF   x43
....................     if (peek_char() == ':') // addressed message? 
37A4:  MOVLB  0
37A6:  CALL   2A84
37AA:  MOVFF  02,231
37AE:  MOVFF  01,230
37B2:  MOVLB  2
37B4:  MOVF   01,W
37B6:  SUBLW  3A
37B8:  BNZ   37F8
37BA:  MOVF   x31,F
37BC:  BNZ   37F8
....................     { 
....................     get_char(); // skip ':' 
37BE:  MOVLB  0
37C0:  CALL   2AA2
....................     addr = get_int(); 
37C4:  CALL   2B5E
37C8:  MOVFF  01,1FD
....................     if (get_char() != ':') 
37CC:  CALL   2AA2
37D0:  MOVFF  02,231
37D4:  MOVFF  01,230
37D8:  MOVLB  2
37DA:  MOVF   01,W
37DC:  SUBLW  3A
37DE:  BNZ   37E4
37E0:  MOVF   x31,F
37E2:  BNZ   37E4
....................       break; 
....................     if (setup.unit_id != addr) 
37E4:  MOVLB  1
37E6:  MOVF   xFD,W
37E8:  MOVLB  0
37EA:  SUBWF  xF1,W
37EC:  BNZ   37F2
37EE:  MOVF   xF2,F
37F0:  BZ    37F6
....................       goto aaa; 
37F2:  GOTO   5778
37F6:  MOVLB  2
....................     } 
....................     break; 
....................   c1 = toupper(get_char()); 
37F8:  MOVLB  0
37FA:  CALL   2AA2
37FE:  MOVFF  02,231
3802:  MOVFF  01,230
3806:  MOVLB  2
3808:  MOVF   x31,F
380A:  BNZ   3812
380C:  MOVF   x30,W
380E:  SUBLW  60
3810:  BC    3822
3812:  MOVF   x31,F
3814:  BNZ   3822
3816:  MOVF   x30,W
3818:  SUBLW  7A
381A:  BNC   3822
381C:  MOVF   x30,W
381E:  ANDLW  DF
3820:  BRA    3824
3822:  MOVF   x30,W
3824:  MOVLB  1
3826:  MOVWF  xEF
....................   c2 = toupper(get_char()); 
3828:  MOVLB  0
382A:  CALL   2AA2
382E:  MOVFF  02,231
3832:  MOVFF  01,230
3836:  MOVLB  2
3838:  MOVF   x31,F
383A:  BNZ   3842
383C:  MOVF   x30,W
383E:  SUBLW  60
3840:  BC    3852
3842:  MOVF   x31,F
3844:  BNZ   3852
3846:  MOVF   x30,W
3848:  SUBLW  7A
384A:  BNC   3852
384C:  MOVF   x30,W
384E:  ANDLW  DF
3850:  BRA    3854
3852:  MOVF   x30,W
3854:  MOVLB  1
3856:  MOVWF  xF0
....................   skip_spc(); 
3858:  MOVLB  0
385A:  CALL   2AC2
....................  
....................   if (peek_char() == 13) // is this a query? 
385E:  CALL   2A84
3862:  MOVFF  02,231
3866:  MOVFF  01,230
386A:  MOVLB  2
386C:  MOVF   01,W
386E:  SUBLW  0D
3870:  BNZ   387E
3872:  MOVF   x31,F
3874:  BNZ   387E
....................     query = 1; // YES 
3876:  MOVLW  01
3878:  MOVLB  1
387A:  MOVWF  xEE
387C:  MOVLB  2
....................   switch (c1) 
....................     { 
387E:  MOVLB  1
3880:  MOVF   xEF,W
3882:  XORLW  4C
3884:  MOVLB  0
3886:  BZ    38FE
3888:  XORLW  68
388A:  BZ    3942
388C:  XORLW  6C
388E:  BTFSC  FD8.2
3890:  BRA    39A0
3892:  XORLW  0E
3894:  BTFSC  FD8.2
3896:  BRA    39E8
3898:  XORLW  0B
389A:  BTFSC  FD8.2
389C:  BRA    3AE0
389E:  XORLW  09
38A0:  BTFSC  FD8.2
38A2:  BRA    3BE6
38A4:  XORLW  16
38A6:  BTFSC  FD8.2
38A8:  BRA    3EF4
38AA:  XORLW  05
38AC:  BTFSC  FD8.2
38AE:  GOTO   4524
38B2:  XORLW  04
38B4:  BTFSC  FD8.2
38B6:  GOTO   4542
38BA:  XORLW  06
38BC:  BTFSC  FD8.2
38BE:  GOTO   4584
38C2:  XORLW  17
38C4:  BTFSC  FD8.2
38C6:  GOTO   478E
38CA:  XORLW  0B
38CC:  BTFSC  FD8.2
38CE:  GOTO   48E2
38D2:  XORLW  1D
38D4:  BTFSC  FD8.2
38D6:  GOTO   4A5C
38DA:  XORLW  02
38DC:  BTFSC  FD8.2
38DE:  GOTO   4A78
38E2:  XORLW  15
38E4:  BTFSC  FD8.2
38E6:  GOTO   4D40
38EA:  XORLW  04
38EC:  BTFSC  FD8.2
38EE:  GOTO   4F4E
38F2:  XORLW  16
38F4:  BTFSC  FD8.2
38F6:  GOTO   524C
38FA:  GOTO   573A
....................     case 'L': // login or logout 
....................       switch (c2) 
....................         { 
38FE:  MOVLB  1
3900:  MOVF   xF0,W
3902:  XORLW  49
3904:  MOVLB  0
3906:  BZ    390E
3908:  XORLW  06
390A:  BZ    3938
390C:  BRA    393E
....................         case 'I':               // login 
....................           val = get_int(); 
390E:  CALL   2B5E
3912:  MOVFF  02,20F
3916:  MOVFF  01,20E
....................           if (val == 17592) 
391A:  MOVLB  2
391C:  MOVF   x0E,W
391E:  SUBLW  B8
3920:  BNZ   392E
3922:  MOVF   x0F,W
3924:  SUBLW  44
3926:  BNZ   392E
....................             ttccp_login = 1; 
3928:  MOVLW  01
392A:  MOVLB  1
392C:  MOVWF  x2E
.................... 			debug_mode = 1; 
392E:  MOVLW  01
3930:  MOVLB  1
3932:  MOVWF  x45
....................           break; 
3934:  MOVLB  0
3936:  BRA    393E
....................         case 'O':              // logout 
....................           ttccp_login = 0; 
3938:  MOVLB  1
393A:  CLRF   x2E
....................           break; 
393C:  MOVLB  0
....................         } 
....................       break; 
393E:  GOTO   5778
....................     case '$': 
....................       if (!ttccp_login) break; 
3942:  MOVLB  1
3944:  MOVF   x2E,F
3946:  BNZ   3950
3948:  MOVLB  0
394A:  GOTO   5778
394E:  MOVLB  1
....................       if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
3950:  MOVF   xF0,W
3952:  SUBLW  52
3954:  BNZ   399A
....................         { 
....................         val = get_int(); 
3956:  MOVLB  0
3958:  CALL   2B5E
395C:  MOVFF  02,20F
3960:  MOVFF  01,20E
....................           if (val != 17591) 
3964:  MOVLB  2
3966:  MOVF   x0E,W
3968:  SUBLW  B7
396A:  BNZ   3972
396C:  MOVF   x0F,W
396E:  SUBLW  44
3970:  BZ    3976
....................             return; 
3972:  GOTO   577A
....................         ttccp = 0; 
3976:  MOVLB  1
3978:  CLRF   x44
....................         COM1_send_str("\r\n\n*"); 
397A:  MOVLW  0D
397C:  MOVLB  2
397E:  MOVWF  x12
3980:  MOVLW  0A
3982:  MOVWF  x13
3984:  MOVWF  x14
3986:  MOVLW  2A
3988:  MOVWF  x15
398A:  CLRF   x16
398C:  MOVLW  02
398E:  MOVWF  x6F
3990:  MOVLW  12
3992:  MOVWF  x6E
3994:  MOVLB  0
3996:  CALL   223A
....................         } 
....................       break; 
399A:  MOVLB  0
399C:  GOTO   5778
....................  
....................   /*  case ':': 
....................        if(c2 == setup.unit_id+48) 
....................         if(toupper(get_char()) == ':') 
....................           comm_ptr = 2; 
....................         break; 
.................... */ 
....................       case 'H': 
....................       if (!ttccp_login) break; 
39A0:  MOVLB  1
39A2:  MOVF   x2E,F
39A4:  BNZ   39AE
39A6:  MOVLB  0
39A8:  GOTO   5778
39AC:  MOVLB  1
....................       COM1_send_str("\r\t HELP LIST \r"); 
39AE:  MOVLW  02
39B0:  MOVWF  FEA
39B2:  MOVLW  17
39B4:  MOVWF  FE9
39B6:  MOVLW  0F
39B8:  MOVWF  01
39BA:  CLRF   FF7
39BC:  MOVLW  00
39BE:  MOVLB  0
39C0:  CALL   08A0
39C4:  TBLRD*-
39C6:  TBLRD*+
39C8:  MOVFF  FF5,FEE
39CC:  DECFSZ 01,F
39CE:  BRA    39C6
39D0:  MOVLW  02
39D2:  MOVLB  2
39D4:  MOVWF  x6F
39D6:  MOVLW  17
39D8:  MOVWF  x6E
39DA:  MOVLB  0
39DC:  CALL   223A
....................       list_help(); 
39E0:  GOTO   2C24
....................     break; 
39E4:  GOTO   5778
....................  
....................     case 'F': 
....................       if (!ttccp_login) break; 
39E8:  MOVLB  1
39EA:  MOVF   x2E,F
39EC:  BNZ   39F6
39EE:  MOVLB  0
39F0:  GOTO   5778
39F4:  MOVLB  1
....................       switch (c2) 
....................         { 
39F6:  MOVF   xF0,W
39F8:  XORLW  52
39FA:  MOVLB  0
39FC:  BZ    3A00
39FE:  BRA    3ADC
....................         case 'R': // set frequency 
....................           if(c2 == 'R') 
3A00:  MOVLB  1
3A02:  MOVF   xF0,W
3A04:  SUBLW  52
3A06:  BNZ   3AAA
....................             { 
....................             if (query) 
3A08:  MOVF   xEE,F
3A0A:  BZ    3A58
....................               { 
....................               sprintf(buf, "FR %lu\r", setup.frequency); 
3A0C:  MOVLW  01
3A0E:  MOVWF  xA6
3A10:  MOVLW  C6
3A12:  MOVWF  xA5
3A14:  MOVLW  4C
3A16:  MOVWF  FF6
3A18:  MOVLW  0C
3A1A:  MOVWF  FF7
3A1C:  MOVLW  03
3A1E:  MOVLB  2
3A20:  MOVWF  x34
3A22:  MOVLB  0
3A24:  CALL   3010
3A28:  MOVLW  10
3A2A:  MOVWF  FE9
3A2C:  MOVFF  BA,235
3A30:  MOVFF  B9,234
3A34:  CALL   3038
3A38:  MOVLW  0D
3A3A:  MOVLB  2
3A3C:  MOVWF  x3D
3A3E:  MOVLB  0
3A40:  CALL   2FEE
....................               COM1_send_str(buf); 
3A44:  MOVLW  01
3A46:  MOVLB  2
3A48:  MOVWF  x6F
3A4A:  MOVLW  C6
3A4C:  MOVWF  x6E
3A4E:  MOVLB  0
3A50:  CALL   223A
....................               } 
....................               else 
3A54:  BRA    3AA6
3A56:  MOVLB  1
....................               { 
....................                 freq = get_frequency(); 
3A58:  MOVLB  0
3A5A:  CALL   30F4
3A5E:  MOVLB  2
3A60:  CLRF   x01
3A62:  CLRF   x00
3A64:  MOVFF  02,1FF
3A68:  MOVFF  01,1FE
....................                 setup.frequency = freq; 
3A6C:  MOVFF  1FF,BA
3A70:  MOVFF  1FE,B9
....................                 PLL_compute_freq_parameters(freq); 
3A74:  MOVFF  1FF,231
3A78:  MOVFF  1FE,230
3A7C:  MOVFF  1FF,239
3A80:  MOVFF  1FE,238
3A84:  MOVLB  0
3A86:  CALL   13D8
....................                 PLL_update(); 
3A8A:  CALL   16A8
.................... 				delay_ms(50); 
3A8E:  MOVLW  32
3A90:  MOVLB  2
3A92:  MOVWF  x45
3A94:  MOVLB  0
3A96:  CALL   0F20
.................... 				PLL_update(); 
3A9A:  CALL   16A8
....................                 ret = 1; 
3A9E:  MOVLW  01
3AA0:  MOVLB  1
3AA2:  MOVWF  xC4
3AA4:  MOVLB  0
....................               } 
....................             } 
....................             else 
3AA6:  BRA    3ADC
3AA8:  MOVLB  1
....................               COM1_send_str("\r\nFAULT\r\n"); 
3AAA:  MOVLW  02
3AAC:  MOVWF  FEA
3AAE:  MOVLW  17
3AB0:  MOVWF  FE9
3AB2:  MOVLW  0A
3AB4:  MOVWF  01
3AB6:  CLRF   FF7
3AB8:  MOVLW  00
3ABA:  MOVLB  0
3ABC:  CALL   08C0
3AC0:  TBLRD*-
3AC2:  TBLRD*+
3AC4:  MOVFF  FF5,FEE
3AC8:  DECFSZ 01,F
3ACA:  BRA    3AC2
3ACC:  MOVLW  02
3ACE:  MOVLB  2
3AD0:  MOVWF  x6F
3AD2:  MOVLW  17
3AD4:  MOVWF  x6E
3AD6:  MOVLB  0
3AD8:  CALL   223A
....................           break; 
....................         } 
....................       break; 
3ADC:  GOTO   5778
....................  
....................     case 'M': 
....................       if (!ttccp_login) break; 
3AE0:  MOVLB  1
3AE2:  MOVF   x2E,F
3AE4:  BNZ   3AEE
3AE6:  MOVLB  0
3AE8:  GOTO   5778
3AEC:  MOVLB  1
....................       if (c2 == 'O')  // mode - Addr0 bit 0-3 
3AEE:  MOVF   xF0,W
3AF0:  SUBLW  4F
3AF2:  BNZ   3BAE
....................           { 
....................             if(query) 
3AF4:  MOVF   xEE,F
3AF6:  BZ    3B40
....................             { 
....................             sprintf(buf, "MO %u\r", setup.mode); 
3AF8:  MOVLW  01
3AFA:  MOVWF  xA6
3AFC:  MOVLW  C6
3AFE:  MOVWF  xA5
3B00:  MOVLW  54
3B02:  MOVWF  FF6
3B04:  MOVLW  0C
3B06:  MOVWF  FF7
3B08:  MOVLW  03
3B0A:  MOVLB  2
3B0C:  MOVWF  x34
3B0E:  MOVLB  0
3B10:  CALL   3010
3B14:  MOVFF  AF,234
3B18:  MOVLW  1B
3B1A:  MOVLB  2
3B1C:  MOVWF  x35
3B1E:  MOVLB  0
3B20:  CALL   3188
3B24:  MOVLW  0D
3B26:  MOVLB  2
3B28:  MOVWF  x3D
3B2A:  MOVLB  0
3B2C:  CALL   2FEE
....................             COM1_send_str(buf); 
3B30:  MOVLW  01
3B32:  MOVLB  2
3B34:  MOVWF  x6F
3B36:  MOVLW  C6
3B38:  MOVWF  x6E
3B3A:  MOVLB  0
3B3C:  CALL   223A
....................             } 
....................           val = get_int(); 
3B40:  MOVLB  0
3B42:  CALL   2B5E
3B46:  MOVFF  02,20F
3B4A:  MOVFF  01,20E
....................           if (val <= 3) 
3B4E:  MOVLB  2
3B50:  MOVF   x0F,F
3B52:  BNZ   3B6E
3B54:  MOVF   x0E,W
3B56:  SUBLW  03
3B58:  BNC   3B6E
....................             { 
....................             setup.mode = val; 
3B5A:  MOVFF  20E,AF
....................             FPGA_set_reg0(); 
3B5E:  MOVLB  0
3B60:  CALL   17FE
....................             ret = 1; 
3B64:  MOVLW  01
3B66:  MOVLB  1
3B68:  MOVWF  xC4
....................             } 
....................           else 
3B6A:  BRA    3BAC
3B6C:  MOVLB  2
....................             { 
....................             COM1_send_str("\r\nFAIL\r\n"); 
3B6E:  MOVLW  02
3B70:  MOVWF  FEA
3B72:  MOVLW  17
3B74:  MOVWF  FE9
3B76:  MOVLW  09
3B78:  MOVWF  01
3B7A:  CLRF   FF7
3B7C:  MOVLW  00
3B7E:  MOVLB  0
3B80:  CALL   08DA
3B84:  TBLRD*-
3B86:  TBLRD*+
3B88:  MOVFF  FF5,FEE
3B8C:  DECFSZ 01,F
3B8E:  BRA    3B86
3B90:  MOVLW  02
3B92:  MOVLB  2
3B94:  MOVWF  x6F
3B96:  MOVLW  17
3B98:  MOVWF  x6E
3B9A:  MOVLB  0
3B9C:  CALL   223A
....................             ret = 0; 
3BA0:  MOVLB  1
3BA2:  CLRF   xC4
....................             break; 
3BA4:  MOVLB  0
3BA6:  GOTO   5778
3BAA:  MOVLB  1
....................             } 
....................           } 
....................           else 
3BAC:  BRA    3BE0
....................               COM1_send_str("\r\nFAIL\r\n"); 
3BAE:  MOVLW  02
3BB0:  MOVWF  FEA
3BB2:  MOVLW  17
3BB4:  MOVWF  FE9
3BB6:  MOVLW  09
3BB8:  MOVWF  01
3BBA:  CLRF   FF7
3BBC:  MOVLW  00
3BBE:  MOVLB  0
3BC0:  CALL   08DA
3BC4:  TBLRD*-
3BC6:  TBLRD*+
3BC8:  MOVFF  FF5,FEE
3BCC:  DECFSZ 01,F
3BCE:  BRA    3BC6
3BD0:  MOVLW  02
3BD2:  MOVLB  2
3BD4:  MOVWF  x6F
3BD6:  MOVLW  17
3BD8:  MOVWF  x6E
3BDA:  MOVLB  0
3BDC:  CALL   223A
....................       break; 
3BE0:  MOVLB  0
3BE2:  GOTO   5778
....................  
....................     case 'D': 
....................       if (!ttccp_login) break; 
3BE6:  MOVLB  1
3BE8:  MOVF   x2E,F
3BEA:  BNZ   3BF4
3BEC:  MOVLB  0
3BEE:  GOTO   5778
3BF2:  MOVLB  1
....................       switch (c2) 
....................         { 
3BF4:  MOVF   xF0,W
3BF6:  XORLW  53
3BF8:  MOVLB  0
3BFA:  BZ    3C0A
3BFC:  XORLW  03
3BFE:  BTFSC  FD8.2
3C00:  BRA    3D02
3C02:  XORLW  15
3C04:  BTFSC  FD8.2
3C06:  BRA    3DFA
3C08:  BRA    3EF0
....................        // case 'B':  // debug mode 
....................        //   debug_mode = 1; 
....................        //   break; 
....................         case 'S':   // Addr 6 bit 1   setup.data_source 
....................           if (query) 
3C0A:  MOVLB  1
3C0C:  MOVF   xEE,F
3C0E:  BZ    3C5C
....................             { 
....................             sprintf(buf, "DS %u\r", setup.data_source); 
3C10:  MOVLW  01
3C12:  MOVWF  xA6
3C14:  MOVLW  C6
3C16:  MOVWF  xA5
3C18:  MOVLW  5C
3C1A:  MOVWF  FF6
3C1C:  MOVLW  0C
3C1E:  MOVWF  FF7
3C20:  MOVLW  03
3C22:  MOVLB  2
3C24:  MOVWF  x34
3C26:  MOVLB  0
3C28:  CALL   3010
3C2C:  MOVFF  B3,234
3C30:  MOVLW  1B
3C32:  MOVLB  2
3C34:  MOVWF  x35
3C36:  MOVLB  0
3C38:  CALL   3188
3C3C:  MOVLW  0D
3C3E:  MOVLB  2
3C40:  MOVWF  x3D
3C42:  MOVLB  0
3C44:  CALL   2FEE
....................             COM1_send_str(buf); 
3C48:  MOVLW  01
3C4A:  MOVLB  2
3C4C:  MOVWF  x6F
3C4E:  MOVLW  C6
3C50:  MOVWF  x6E
3C52:  MOVLB  0
3C54:  CALL   223A
....................             } 
....................           else 
3C58:  BRA    3CF8
3C5A:  MOVLB  1
....................             { 
....................             val = get_int(); 
3C5C:  MOVLB  0
3C5E:  CALL   2B5E
3C62:  MOVFF  02,20F
3C66:  MOVFF  01,20E
....................             if (val < 2) 
3C6A:  MOVLB  2
3C6C:  MOVF   x0F,F
3C6E:  BNZ   3C84
3C70:  MOVF   x0E,W
3C72:  SUBLW  01
3C74:  BNC   3C84
....................               { 
....................               setup.data_source = val; 
3C76:  MOVFF  20E,B3
....................               FPGA_set_reg6(); 
3C7A:  MOVLB  0
3C7C:  CALL   185A
....................               } 
....................             else 
3C80:  BRA    3CF8
3C82:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3C84:  MOVLW  02
3C86:  MOVWF  FEA
3C88:  MOVLW  17
3C8A:  MOVWF  FE9
3C8C:  MOVLW  09
3C8E:  MOVWF  01
3C90:  CLRF   FF7
3C92:  MOVLW  00
3C94:  MOVLB  0
3C96:  CALL   08DA
3C9A:  TBLRD*-
3C9C:  TBLRD*+
3C9E:  MOVFF  FF5,FEE
3CA2:  DECFSZ 01,F
3CA4:  BRA    3C9C
3CA6:  MOVLW  02
3CA8:  MOVLB  2
3CAA:  MOVWF  x6F
3CAC:  MOVLW  17
3CAE:  MOVWF  x6E
3CB0:  MOVLB  0
3CB2:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3CB6:  MOVLW  01
3CB8:  MOVLB  1
3CBA:  MOVWF  xA6
3CBC:  MOVLW  7A
3CBE:  MOVWF  xA5
3CC0:  MOVLW  64
3CC2:  MOVWF  FF6
3CC4:  MOVLW  0C
3CC6:  MOVWF  FF7
3CC8:  MOVLW  07
3CCA:  MOVLB  2
3CCC:  MOVWF  x34
3CCE:  MOVLB  0
3CD0:  CALL   3010
3CD4:  MOVFF  B3,234
3CD8:  MOVLW  1B
3CDA:  MOVLB  2
3CDC:  MOVWF  x35
3CDE:  MOVLB  0
3CE0:  CALL   3188
3CE4:  MOVLW  0D
3CE6:  MOVLB  2
3CE8:  MOVWF  x3D
3CEA:  MOVLB  0
3CEC:  CALL   2FEE
....................               ret = 0; 
3CF0:  MOVLB  1
3CF2:  CLRF   xC4
....................               break; 
3CF4:  MOVLB  0
3CF6:  BRA    3EF0
....................               } 
....................             } 
....................           ret = 1; 
3CF8:  MOVLW  01
3CFA:  MOVLB  1
3CFC:  MOVWF  xC4
....................           break; 
3CFE:  MOVLB  0
3D00:  BRA    3EF0
....................  
....................         case 'P':   // Addr 0 bit 5   setup.data_polarity 
....................           if (query) 
3D02:  MOVLB  1
3D04:  MOVF   xEE,F
3D06:  BZ    3D54
....................             { 
....................             sprintf(buf, "DP %u\r", setup.data_polarity); 
3D08:  MOVLW  01
3D0A:  MOVWF  xA6
3D0C:  MOVLW  C6
3D0E:  MOVWF  xA5
3D10:  MOVLW  70
3D12:  MOVWF  FF6
3D14:  MOVLW  0C
3D16:  MOVWF  FF7
3D18:  MOVLW  03
3D1A:  MOVLB  2
3D1C:  MOVWF  x34
3D1E:  MOVLB  0
3D20:  CALL   3010
3D24:  MOVFF  B1,234
3D28:  MOVLW  1B
3D2A:  MOVLB  2
3D2C:  MOVWF  x35
3D2E:  MOVLB  0
3D30:  CALL   3188
3D34:  MOVLW  0D
3D36:  MOVLB  2
3D38:  MOVWF  x3D
3D3A:  MOVLB  0
3D3C:  CALL   2FEE
....................             COM1_send_str(buf); 
3D40:  MOVLW  01
3D42:  MOVLB  2
3D44:  MOVWF  x6F
3D46:  MOVLW  C6
3D48:  MOVWF  x6E
3D4A:  MOVLB  0
3D4C:  CALL   223A
....................             } 
....................           else 
3D50:  BRA    3DF0
3D52:  MOVLB  1
....................             { 
....................             val = get_int(); 
3D54:  MOVLB  0
3D56:  CALL   2B5E
3D5A:  MOVFF  02,20F
3D5E:  MOVFF  01,20E
....................             if (val < 2) 
3D62:  MOVLB  2
3D64:  MOVF   x0F,F
3D66:  BNZ   3D7C
3D68:  MOVF   x0E,W
3D6A:  SUBLW  01
3D6C:  BNC   3D7C
....................               { 
....................               setup.data_polarity = val; 
3D6E:  MOVFF  20E,B1
....................               FPGA_set_reg0(); 
3D72:  MOVLB  0
3D74:  CALL   17FE
....................               } 
....................             else 
3D78:  BRA    3DF0
3D7A:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3D7C:  MOVLW  02
3D7E:  MOVWF  FEA
3D80:  MOVLW  17
3D82:  MOVWF  FE9
3D84:  MOVLW  09
3D86:  MOVWF  01
3D88:  CLRF   FF7
3D8A:  MOVLW  00
3D8C:  MOVLB  0
3D8E:  CALL   08DA
3D92:  TBLRD*-
3D94:  TBLRD*+
3D96:  MOVFF  FF5,FEE
3D9A:  DECFSZ 01,F
3D9C:  BRA    3D94
3D9E:  MOVLW  02
3DA0:  MOVLB  2
3DA2:  MOVWF  x6F
3DA4:  MOVLW  17
3DA6:  MOVWF  x6E
3DA8:  MOVLB  0
3DAA:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3DAE:  MOVLW  01
3DB0:  MOVLB  1
3DB2:  MOVWF  xA6
3DB4:  MOVLW  7A
3DB6:  MOVWF  xA5
3DB8:  MOVLW  78
3DBA:  MOVWF  FF6
3DBC:  MOVLW  0C
3DBE:  MOVWF  FF7
3DC0:  MOVLW  07
3DC2:  MOVLB  2
3DC4:  MOVWF  x34
3DC6:  MOVLB  0
3DC8:  CALL   3010
3DCC:  MOVFF  B1,234
3DD0:  MOVLW  1B
3DD2:  MOVLB  2
3DD4:  MOVWF  x35
3DD6:  MOVLB  0
3DD8:  CALL   3188
3DDC:  MOVLW  0D
3DDE:  MOVLB  2
3DE0:  MOVWF  x3D
3DE2:  MOVLB  0
3DE4:  CALL   2FEE
....................               ret = 0; 
3DE8:  MOVLB  1
3DEA:  CLRF   xC4
....................               break; 
3DEC:  MOVLB  0
3DEE:  BRA    3EF0
....................               } 
....................             } 
....................           ret = 1; 
3DF0:  MOVLW  01
3DF2:  MOVLB  1
3DF4:  MOVWF  xC4
....................           break; 
3DF6:  MOVLB  0
3DF8:  BRA    3EF0
....................  
....................         case 'E':   // Addr 0 bit 7   setup.SOQPSK 
....................           if (query) 
3DFA:  MOVLB  1
3DFC:  MOVF   xEE,F
3DFE:  BZ    3E4C
....................             { 
....................             sprintf(buf,"DE %u\r", setup.SOQPSK); 
3E00:  MOVLW  01
3E02:  MOVWF  xA6
3E04:  MOVLW  C6
3E06:  MOVWF  xA5
3E08:  MOVLW  84
3E0A:  MOVWF  FF6
3E0C:  MOVLW  0C
3E0E:  MOVWF  FF7
3E10:  MOVLW  03
3E12:  MOVLB  2
3E14:  MOVWF  x34
3E16:  MOVLB  0
3E18:  CALL   3010
3E1C:  MOVFF  B7,234
3E20:  MOVLW  1B
3E22:  MOVLB  2
3E24:  MOVWF  x35
3E26:  MOVLB  0
3E28:  CALL   3188
3E2C:  MOVLW  0D
3E2E:  MOVLB  2
3E30:  MOVWF  x3D
3E32:  MOVLB  0
3E34:  CALL   2FEE
....................             COM1_send_str(buf); 
3E38:  MOVLW  01
3E3A:  MOVLB  2
3E3C:  MOVWF  x6F
3E3E:  MOVLW  C6
3E40:  MOVWF  x6E
3E42:  MOVLB  0
3E44:  CALL   223A
....................             } 
....................           else 
3E48:  BRA    3EE8
3E4A:  MOVLB  1
....................             { 
....................             val = get_int(); 
3E4C:  MOVLB  0
3E4E:  CALL   2B5E
3E52:  MOVFF  02,20F
3E56:  MOVFF  01,20E
....................             if (val < 2) 
3E5A:  MOVLB  2
3E5C:  MOVF   x0F,F
3E5E:  BNZ   3E74
3E60:  MOVF   x0E,W
3E62:  SUBLW  01
3E64:  BNC   3E74
....................               { 
....................               setup.SOQPSK = val; 
3E66:  MOVFF  20E,B7
....................               FPGA_set_reg0(); 
3E6A:  MOVLB  0
3E6C:  CALL   17FE
....................               } 
....................             else 
3E70:  BRA    3EE8
3E72:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3E74:  MOVLW  02
3E76:  MOVWF  FEA
3E78:  MOVLW  17
3E7A:  MOVWF  FE9
3E7C:  MOVLW  09
3E7E:  MOVWF  01
3E80:  CLRF   FF7
3E82:  MOVLW  00
3E84:  MOVLB  0
3E86:  CALL   08DA
3E8A:  TBLRD*-
3E8C:  TBLRD*+
3E8E:  MOVFF  FF5,FEE
3E92:  DECFSZ 01,F
3E94:  BRA    3E8C
3E96:  MOVLW  02
3E98:  MOVLB  2
3E9A:  MOVWF  x6F
3E9C:  MOVLW  17
3E9E:  MOVWF  x6E
3EA0:  MOVLB  0
3EA2:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3EA6:  MOVLW  01
3EA8:  MOVLB  1
3EAA:  MOVWF  xA6
3EAC:  MOVLW  7A
3EAE:  MOVWF  xA5
3EB0:  MOVLW  8C
3EB2:  MOVWF  FF6
3EB4:  MOVLW  0C
3EB6:  MOVWF  FF7
3EB8:  MOVLW  07
3EBA:  MOVLB  2
3EBC:  MOVWF  x34
3EBE:  MOVLB  0
3EC0:  CALL   3010
3EC4:  MOVFF  B7,234
3EC8:  MOVLW  1B
3ECA:  MOVLB  2
3ECC:  MOVWF  x35
3ECE:  MOVLB  0
3ED0:  CALL   3188
3ED4:  MOVLW  0D
3ED6:  MOVLB  2
3ED8:  MOVWF  x3D
3EDA:  MOVLB  0
3EDC:  CALL   2FEE
....................               ret = 0; 
3EE0:  MOVLB  1
3EE2:  CLRF   xC4
....................               break; 
3EE4:  MOVLB  0
3EE6:  BRA    3EF0
....................               } 
....................             } 
....................           ret = 1; 
3EE8:  MOVLW  01
3EEA:  MOVLB  1
3EEC:  MOVWF  xC4
....................           break; 
3EEE:  MOVLB  0
....................         } 
....................       break; 
3EF0:  GOTO   5778
....................  
....................     case 'R': 
....................       if (!ttccp_login) break; 
3EF4:  MOVLB  1
3EF6:  MOVF   x2E,F
3EF8:  BNZ   3F02
3EFA:  MOVLB  0
3EFC:  GOTO   5778
3F00:  MOVLB  1
....................       switch (c2) 
....................         { 
3F02:  MOVLW  41
3F04:  SUBWF  xF0,W
3F06:  ADDLW  F0
3F08:  BTFSC  FD8.0
3F0A:  BRA    451E
3F0C:  ADDLW  10
3F0E:  MOVLB  0
3F10:  GOTO   5780
....................         case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
....................           if (query) 
3F14:  MOVLB  1
3F16:  MOVF   xEE,F
3F18:  BZ    3F66
....................             { 
....................             sprintf(buf, "RP %u\r", setup.power_high); 
3F1A:  MOVLW  01
3F1C:  MOVWF  xA6
3F1E:  MOVLW  C6
3F20:  MOVWF  xA5
3F22:  MOVLW  98
3F24:  MOVWF  FF6
3F26:  MOVLW  0C
3F28:  MOVWF  FF7
3F2A:  MOVLW  03
3F2C:  MOVLB  2
3F2E:  MOVWF  x34
3F30:  MOVLB  0
3F32:  CALL   3010
3F36:  MOVFF  B6,234
3F3A:  MOVLW  1B
3F3C:  MOVLB  2
3F3E:  MOVWF  x35
3F40:  MOVLB  0
3F42:  CALL   3188
3F46:  MOVLW  0D
3F48:  MOVLB  2
3F4A:  MOVWF  x3D
3F4C:  MOVLB  0
3F4E:  CALL   2FEE
....................             COM1_send_str(buf); 
3F52:  MOVLW  01
3F54:  MOVLB  2
3F56:  MOVWF  x6F
3F58:  MOVLW  C6
3F5A:  MOVWF  x6E
3F5C:  MOVLB  0
3F5E:  CALL   223A
....................             } 
....................           else 
3F62:  BRA    4060
3F64:  MOVLB  1
....................             { 
....................             val = get_int(); 
3F66:  MOVLB  0
3F68:  CALL   2B5E
3F6C:  MOVFF  02,20F
3F70:  MOVFF  01,20E
....................             if (val < 2) 
3F74:  MOVLB  2
3F76:  MOVF   x0F,F
3F78:  BNZ   3FEC
3F7A:  MOVF   x0E,W
3F7C:  SUBLW  01
3F7E:  BNC   3FEC
....................               { 
.................... 	          if(setup.rc == 1) 
3F80:  MOVLB  0
3F82:  DECFSZ xF7,W
3F84:  BRA    3FA4
3F86:  MOVF   xF8,F
3F88:  BNZ   3FA4
.................... 	            { 
.................... 	            if(val == 0) 
3F8A:  MOVLB  2
3F8C:  MOVF   x0E,F
3F8E:  BNZ   3F9E
3F90:  MOVF   x0F,F
3F92:  BNZ   3F9E
.................... 	            { 
.................... 	            setup.rp =1; 
3F94:  MOVLB  0
3F96:  CLRF   xFA
3F98:  MOVLW  01
3F9A:  MOVWF  xF9
.................... 	            } 
.................... 	          else 
3F9C:  BRA    3FA4
....................  
.................... 	          setup.rp = 0; 
3F9E:  MOVLB  0
3FA0:  CLRF   xFA
3FA2:  CLRF   xF9
.................... 	          } 
.................... 	          if(val == 1) 
3FA4:  MOVLB  2
3FA6:  DECFSZ x0E,W
3FA8:  BRA    3FCC
3FAA:  MOVF   x0F,F
3FAC:  BNZ   3FCC
.................... 	          { 
....................               rp_command = setup.rp = 0; 
3FAE:  MOVLB  0
3FB0:  CLRF   xFA
3FB2:  CLRF   xF9
3FB4:  MOVFF  F9,1A2
....................               delay_ms(50); 
3FB8:  MOVLW  32
3FBA:  MOVLB  2
3FBC:  MOVWF  x45
3FBE:  MOVLB  0
3FC0:  CALL   0F20
....................               update_all(); 
3FC4:  CALL   1D4C
....................               } 
....................               else 
3FC8:  BRA    3FE8
3FCA:  MOVLB  2
....................                { 
....................               rp_command = setup.rp = 1; 
3FCC:  MOVLB  0
3FCE:  CLRF   xFA
3FD0:  MOVLW  01
3FD2:  MOVWF  xF9
3FD4:  MOVFF  F9,1A2
....................               delay_ms(50); 
3FD8:  MOVLW  32
3FDA:  MOVLB  2
3FDC:  MOVWF  x45
3FDE:  MOVLB  0
3FE0:  CALL   0F20
....................               update_all(); 
3FE4:  CALL   1D4C
....................               } 
....................               } 
....................             else 
3FE8:  BRA    4060
3FEA:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
3FEC:  MOVLW  02
3FEE:  MOVWF  FEA
3FF0:  MOVLW  17
3FF2:  MOVWF  FE9
3FF4:  MOVLW  09
3FF6:  MOVWF  01
3FF8:  CLRF   FF7
3FFA:  MOVLW  00
3FFC:  MOVLB  0
3FFE:  CALL   08DA
4002:  TBLRD*-
4004:  TBLRD*+
4006:  MOVFF  FF5,FEE
400A:  DECFSZ 01,F
400C:  BRA    4004
400E:  MOVLW  02
4010:  MOVLB  2
4012:  MOVWF  x6F
4014:  MOVLW  17
4016:  MOVWF  x6E
4018:  MOVLB  0
401A:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
401E:  MOVLW  01
4020:  MOVLB  1
4022:  MOVWF  xA6
4024:  MOVLW  7A
4026:  MOVWF  xA5
4028:  MOVLW  A0
402A:  MOVWF  FF6
402C:  MOVLW  0C
402E:  MOVWF  FF7
4030:  MOVLW  07
4032:  MOVLB  2
4034:  MOVWF  x34
4036:  MOVLB  0
4038:  CALL   3010
403C:  MOVFF  1A2,234
4040:  MOVLW  1B
4042:  MOVLB  2
4044:  MOVWF  x35
4046:  MOVLB  0
4048:  CALL   3188
404C:  MOVLW  0D
404E:  MOVLB  2
4050:  MOVWF  x3D
4052:  MOVLB  0
4054:  CALL   2FEE
....................               ret = 0; 
4058:  MOVLB  1
405A:  CLRF   xC4
....................               break; 
405C:  BRA    451E
405E:  MOVLB  0
....................               } 
....................             } 
....................           ret = 1; 
4060:  MOVLW  01
4062:  MOVLB  1
4064:  MOVWF  xC4
....................           break; 
4066:  BRA    451E
....................  
....................         case 'F': // discrete output - power amp on/off       setup.power_amp 
....................           if (query) 
4068:  MOVLB  1
406A:  MOVF   xEE,F
406C:  BZ    40BA
....................             { 
....................             sprintf(buf, "RF %u\r", pwr_command); 
406E:  MOVLW  01
4070:  MOVWF  xA6
4072:  MOVLW  C6
4074:  MOVWF  xA5
4076:  MOVLW  AC
4078:  MOVWF  FF6
407A:  MOVLW  0C
407C:  MOVWF  FF7
407E:  MOVLW  03
4080:  MOVLB  2
4082:  MOVWF  x34
4084:  MOVLB  0
4086:  CALL   3010
408A:  MOVFF  1A3,234
408E:  MOVLW  1B
4090:  MOVLB  2
4092:  MOVWF  x35
4094:  MOVLB  0
4096:  CALL   3188
409A:  MOVLW  0D
409C:  MOVLB  2
409E:  MOVWF  x3D
40A0:  MOVLB  0
40A2:  CALL   2FEE
....................             COM1_send_str(buf); 
40A6:  MOVLW  01
40A8:  MOVLB  2
40AA:  MOVWF  x6F
40AC:  MOVLW  C6
40AE:  MOVWF  x6E
40B0:  MOVLB  0
40B2:  CALL   223A
....................             } 
....................           else 
40B6:  BRA    421C
40B8:  MOVLB  1
....................             { 
....................             val = get_int(); 
40BA:  MOVLB  0
40BC:  CALL   2B5E
40C0:  MOVFF  02,20F
40C4:  MOVFF  01,20E
....................             if (val == 0) 
40C8:  MOVLB  2
40CA:  MOVF   x0E,F
40CC:  BNZ   4136
40CE:  MOVF   x0F,F
40D0:  BNZ   4136
....................               { 
.................... 			  if(setup.cot || setup.rc) 
40D2:  MOVLB  0
40D4:  MOVF   xF5,W
40D6:  IORWF  xF6,W
40D8:  BNZ   40E0
40DA:  MOVF   xF7,W
40DC:  IORWF  xF8,W
40DE:  BZ    4106
.................... 				{ 
....................                 pwr_command = 0; 
40E0:  MOVLB  1
40E2:  CLRF   xA3
....................                 setup.pwr = pwr_command; 
40E4:  MOVLB  0
40E6:  CLRF   xAE
40E8:  MOVFF  1A3,AD
....................                 delay_ms(60); 
40EC:  MOVLW  3C
40EE:  MOVLB  2
40F0:  MOVWF  x45
40F2:  MOVLB  0
40F4:  CALL   0F20
.................... 			 	update_all(); 
40F8:  CALL   1D4C
.................... 			 	ret = 1; 
40FC:  MOVLW  01
40FE:  MOVLB  1
4100:  MOVWF  xC4
....................                 } 
.................... 				else if(setup.cot == 0 || setup.rc) 
4102:  BRA    4132
4104:  MOVLB  0
4106:  MOVF   xF5,F
4108:  BNZ   410E
410A:  MOVF   xF6,F
410C:  BZ    4114
410E:  MOVF   xF7,W
4110:  IORWF  xF8,W
4112:  BZ    4130
.................... 				  { 
....................                   pwr_command = 0; 
4114:  MOVLB  1
4116:  CLRF   xA3
....................                 setup.pwr = pwr_command; 
4118:  MOVLB  0
411A:  CLRF   xAE
411C:  MOVFF  1A3,AD
....................                 delay_ms(60); 
4120:  MOVLW  3C
4122:  MOVLB  2
4124:  MOVWF  x45
4126:  MOVLB  0
4128:  CALL   0F20
.................... 			 	update_all(); 
412C:  CALL   1D4C
4130:  MOVLB  1
....................                   } 
.................... 				} 
.................... 			else 
4132:  BRA    421A
4134:  MOVLB  2
.................... 				{ 
.................... 				if (val == 1) 
4136:  DECFSZ x0E,W
4138:  BRA    41A8
413A:  MOVF   x0F,F
413C:  BNZ   41A8
.................... 				  { 
.................... 				  if(setup.cot) 
413E:  MOVLB  0
4140:  MOVF   xF5,W
4142:  IORWF  xF6,W
4144:  BZ    4172
.................... 				   { 
.................... 				   pwr_command = 1; 
4146:  MOVLW  01
4148:  MOVLB  1
414A:  MOVWF  xA3
.................... 				   setup.pwr = pwr_command; 
414C:  MOVLB  0
414E:  CLRF   xAE
4150:  MOVFF  1A3,AD
.................... 				   power_output(); 
4154:  CALL   1DB6
....................                    delay_ms(50); 
4158:  MOVLW  32
415A:  MOVLB  2
415C:  MOVWF  x45
415E:  MOVLB  0
4160:  CALL   0F20
.................... 				   ret = 1; 
4164:  MOVLW  01
4166:  MOVLB  1
4168:  MOVWF  xC4
....................                    update_all(); 
416A:  MOVLB  0
416C:  CALL   1D4C
.................... 				   } 
.................... 					else if(setup.cot == 0) 
4170:  BRA    41A4
4172:  MOVF   xF5,F
4174:  BNZ   41A4
4176:  MOVF   xF6,F
4178:  BNZ   41A4
.................... 				  { 
....................                   pwr_command = 1; 
417A:  MOVLW  01
417C:  MOVLB  1
417E:  MOVWF  xA3
....................                   setup.pwr = pwr_command; 
4180:  MOVLB  0
4182:  CLRF   xAE
4184:  MOVFF  1A3,AD
....................                   power_output(); 
4188:  CALL   1DB6
.................... 				  delay_ms(50); 
418C:  MOVLW  32
418E:  MOVLB  2
4190:  MOVWF  x45
4192:  MOVLB  0
4194:  CALL   0F20
.................... 				  ret = 1; 
4198:  MOVLW  01
419A:  MOVLB  1
419C:  MOVWF  xC4
....................                   update_all(); 
419E:  MOVLB  0
41A0:  CALL   1D4C
....................                   } 
.................... 				} 
....................             else 
41A4:  BRA    421C
41A6:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
41A8:  MOVLW  02
41AA:  MOVWF  FEA
41AC:  MOVLW  17
41AE:  MOVWF  FE9
41B0:  MOVLW  09
41B2:  MOVWF  01
41B4:  CLRF   FF7
41B6:  MOVLW  00
41B8:  MOVLB  0
41BA:  CALL   08DA
41BE:  TBLRD*-
41C0:  TBLRD*+
41C2:  MOVFF  FF5,FEE
41C6:  DECFSZ 01,F
41C8:  BRA    41C0
41CA:  MOVLW  02
41CC:  MOVLB  2
41CE:  MOVWF  x6F
41D0:  MOVLW  17
41D2:  MOVWF  x6E
41D4:  MOVLB  0
41D6:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
41DA:  MOVLW  01
41DC:  MOVLB  1
41DE:  MOVWF  xA6
41E0:  MOVLW  7A
41E2:  MOVWF  xA5
41E4:  MOVLW  B4
41E6:  MOVWF  FF6
41E8:  MOVLW  0C
41EA:  MOVWF  FF7
41EC:  MOVLW  07
41EE:  MOVLB  2
41F0:  MOVWF  x34
41F2:  MOVLB  0
41F4:  CALL   3010
41F8:  MOVFF  1A3,234
41FC:  MOVLW  1B
41FE:  MOVLB  2
4200:  MOVWF  x35
4202:  MOVLB  0
4204:  CALL   3188
4208:  MOVLW  0D
420A:  MOVLB  2
420C:  MOVWF  x3D
420E:  MOVLB  0
4210:  CALL   2FEE
....................               ret = 0; 
4214:  MOVLB  1
4216:  CLRF   xC4
....................               break; 
4218:  BRA    451E
421A:  MOVLB  0
....................               } 
.................... 			} 
....................             } 
....................           ret = 1; 
421C:  MOVLW  01
421E:  MOVLB  1
4220:  MOVWF  xC4
....................           break; 
4222:  BRA    451E
....................  
....................          case 'C': 
....................          	if (query) 
4224:  MOVLB  1
4226:  MOVF   xEE,F
4228:  BZ    4276
....................             { 
....................             sprintf(buf, "RC %lu\r", setup.rc); 
422A:  MOVLW  01
422C:  MOVWF  xA6
422E:  MOVLW  C6
4230:  MOVWF  xA5
4232:  MOVLW  C0
4234:  MOVWF  FF6
4236:  MOVLW  0C
4238:  MOVWF  FF7
423A:  MOVLW  03
423C:  MOVLB  2
423E:  MOVWF  x34
4240:  MOVLB  0
4242:  CALL   3010
4246:  MOVLW  10
4248:  MOVWF  FE9
424A:  MOVFF  F8,235
424E:  MOVFF  F7,234
4252:  CALL   3038
4256:  MOVLW  0D
4258:  MOVLB  2
425A:  MOVWF  x3D
425C:  MOVLB  0
425E:  CALL   2FEE
....................             COM1_send_str(buf); 
4262:  MOVLW  01
4264:  MOVLB  2
4266:  MOVWF  x6F
4268:  MOVLW  C6
426A:  MOVWF  x6E
426C:  MOVLB  0
426E:  CALL   223A
....................             } 
....................           else 
4272:  BRA    4306
4274:  MOVLB  1
....................             { 
....................           val = get_int(); 
4276:  MOVLB  0
4278:  CALL   2B5E
427C:  MOVFF  02,20F
4280:  MOVFF  01,20E
....................           if(val < 2) 
4284:  MOVLB  2
4286:  MOVF   x0F,F
4288:  BNZ   42D4
428A:  MOVF   x0E,W
428C:  SUBLW  01
428E:  BNC   42D4
....................           	{ 
.................... 	          	if(val == 0) 
4290:  MOVF   x0E,F
4292:  BNZ   42B0
4294:  MOVF   x0F,F
4296:  BNZ   42B0
.................... 	          	{ 
.................... 	              setup.rc = 0; 
4298:  MOVLB  0
429A:  CLRF   xF8
429C:  CLRF   xF7
.................... 	              delay_ms(50); 
429E:  MOVLW  32
42A0:  MOVLB  2
42A2:  MOVWF  x45
42A4:  MOVLB  0
42A6:  CALL   0F20
.................... 	              update_all(); 
42AA:  CALL   1D4C
42AE:  MOVLB  2
.................... 	            } 
.................... 	            if(val == 1) 
42B0:  DECFSZ x0E,W
42B2:  BRA    42D2
42B4:  MOVF   x0F,F
42B6:  BNZ   42D2
.................... 	              { 
.................... 	              setup.rc = 1; 
42B8:  MOVLB  0
42BA:  CLRF   xF8
42BC:  MOVLW  01
42BE:  MOVWF  xF7
.................... 	              delay_ms(50); 
42C0:  MOVLW  32
42C2:  MOVLB  2
42C4:  MOVWF  x45
42C6:  MOVLB  0
42C8:  CALL   0F20
.................... 	              update_all(); 
42CC:  CALL   1D4C
42D0:  MOVLB  2
.................... 	              } 
....................            } 
....................           else 
42D2:  BRA    4308
....................             COM1_send_str("\r\nFAULT\r\n"); 
42D4:  MOVLW  02
42D6:  MOVWF  FEA
42D8:  MOVLW  17
42DA:  MOVWF  FE9
42DC:  MOVLW  0A
42DE:  MOVWF  01
42E0:  CLRF   FF7
42E2:  MOVLW  00
42E4:  MOVLB  0
42E6:  CALL   08C0
42EA:  TBLRD*-
42EC:  TBLRD*+
42EE:  MOVFF  FF5,FEE
42F2:  DECFSZ 01,F
42F4:  BRA    42EC
42F6:  MOVLW  02
42F8:  MOVLB  2
42FA:  MOVWF  x6F
42FC:  MOVLW  17
42FE:  MOVWF  x6E
4300:  MOVLB  0
4302:  CALL   223A
4306:  MOVLB  2
....................             } 
....................           break; 
4308:  MOVLB  1
430A:  BRA    451E
....................  
....................           case 'B': 
....................             if (query) 
430C:  MOVLB  1
430E:  MOVF   xEE,F
4310:  BZ    435E
....................             { 
....................             sprintf(buf, "RB %lu\r", setup.cot); 
4312:  MOVLW  01
4314:  MOVWF  xA6
4316:  MOVLW  C6
4318:  MOVWF  xA5
431A:  MOVLW  C8
431C:  MOVWF  FF6
431E:  MOVLW  0C
4320:  MOVWF  FF7
4322:  MOVLW  03
4324:  MOVLB  2
4326:  MOVWF  x34
4328:  MOVLB  0
432A:  CALL   3010
432E:  MOVLW  10
4330:  MOVWF  FE9
4332:  MOVFF  F6,235
4336:  MOVFF  F5,234
433A:  CALL   3038
433E:  MOVLW  0D
4340:  MOVLB  2
4342:  MOVWF  x3D
4344:  MOVLB  0
4346:  CALL   2FEE
....................             COM1_send_str(buf); 
434A:  MOVLW  01
434C:  MOVLB  2
434E:  MOVWF  x6F
4350:  MOVLW  C6
4352:  MOVWF  x6E
4354:  MOVLB  0
4356:  CALL   223A
....................             } 
....................           else 
435A:  BRA    440C
435C:  MOVLB  1
....................             { 
....................           val = get_int(); 
435E:  MOVLB  0
4360:  CALL   2B5E
4364:  MOVFF  02,20F
4368:  MOVFF  01,20E
....................           if(val < 2) 
436C:  MOVLB  2
436E:  MOVF   x0F,F
4370:  BNZ   43DA
4372:  MOVF   x0E,W
4374:  SUBLW  01
4376:  BNC   43DA
....................           	{ 
.................... 	          if(val) 
4378:  MOVF   x0E,W
437A:  IORWF  x0F,W
437C:  BZ    43C0
.................... 	          	{ 
....................               setup.cot = val; 
437E:  MOVFF  20F,F6
4382:  MOVFF  20E,F5
....................               if(pwr_command == 0) 
4386:  MOVLB  1
4388:  MOVF   xA3,F
438A:  BNZ   43A8
....................               { 
....................               pwr_command == 1; 
438C:  DECFSZ xA3,W
438E:  BRA    4392
4390:  BRA    4394
4392:  MOVLW  00
....................               delay_ms(50); 
4394:  MOVLW  32
4396:  MOVLB  2
4398:  MOVWF  x45
439A:  MOVLB  0
439C:  CALL   0F20
....................               update_all(); 
43A0:  CALL   1D4C
....................               } 
....................               else 
43A4:  BRA    43AE
43A6:  MOVLB  1
....................               	pwr_command == 0; 
43A8:  MOVF   xA3,F
43AA:  BZ    43AE
43AC:  MOVLW  00
....................                delay_ms(50); 
43AE:  MOVLW  32
43B0:  MOVLB  2
43B2:  MOVWF  x45
43B4:  MOVLB  0
43B6:  CALL   0F20
....................               update_all(); 
43BA:  CALL   1D4C
43BE:  MOVLB  2
....................             } 
....................             setup.cot = val; 
43C0:  MOVFF  20F,F6
43C4:  MOVFF  20E,F5
....................               delay_ms(70); 
43C8:  MOVLW  46
43CA:  MOVWF  x45
43CC:  MOVLB  0
43CE:  CALL   0F20
....................               update_all(); 
43D2:  CALL   1D4C
....................            } 
....................           else 
43D6:  BRA    440C
43D8:  MOVLB  2
....................             COM1_send_str("\r\nFAULT\r\n"); 
43DA:  MOVLW  02
43DC:  MOVWF  FEA
43DE:  MOVLW  17
43E0:  MOVWF  FE9
43E2:  MOVLW  0A
43E4:  MOVWF  01
43E6:  CLRF   FF7
43E8:  MOVLW  00
43EA:  MOVLB  0
43EC:  CALL   08C0
43F0:  TBLRD*-
43F2:  TBLRD*+
43F4:  MOVFF  FF5,FEE
43F8:  DECFSZ 01,F
43FA:  BRA    43F2
43FC:  MOVLW  02
43FE:  MOVLB  2
4400:  MOVWF  x6F
4402:  MOVLW  17
4404:  MOVWF  x6E
4406:  MOVLB  0
4408:  CALL   223A
....................             } 
....................           break; 
440C:  MOVLB  1
440E:  BRA    451E
....................  
....................         case 'A': // Addr 0 bit 6     setup.randomizer 
....................           if (query) 
4410:  MOVLB  1
4412:  MOVF   xEE,F
4414:  BZ    4462
....................             { 
....................             sprintf(buf, "RA %u\r", setup.randomizer); 
4416:  MOVLW  01
4418:  MOVWF  xA6
441A:  MOVLW  C6
441C:  MOVWF  xA5
441E:  MOVLW  D0
4420:  MOVWF  FF6
4422:  MOVLW  0C
4424:  MOVWF  FF7
4426:  MOVLW  03
4428:  MOVLB  2
442A:  MOVWF  x34
442C:  MOVLB  0
442E:  CALL   3010
4432:  MOVFF  B5,234
4436:  MOVLW  1B
4438:  MOVLB  2
443A:  MOVWF  x35
443C:  MOVLB  0
443E:  CALL   3188
4442:  MOVLW  0D
4444:  MOVLB  2
4446:  MOVWF  x3D
4448:  MOVLB  0
444A:  CALL   2FEE
....................             COM1_send_str(buf); 
444E:  MOVLW  01
4450:  MOVLB  2
4452:  MOVWF  x6F
4454:  MOVLW  C6
4456:  MOVWF  x6E
4458:  MOVLB  0
445A:  CALL   223A
....................             } 
....................           else 
445E:  BRA    4502
4460:  MOVLB  1
....................             { 
....................             val = get_int(); 
4462:  MOVLB  0
4464:  CALL   2B5E
4468:  MOVFF  02,20F
446C:  MOVFF  01,20E
....................             if (val < 2) 
4470:  MOVLB  2
4472:  MOVF   x0F,F
4474:  BNZ   4490
4476:  MOVF   x0E,W
4478:  SUBLW  01
447A:  BNC   4490
....................               { 
....................               setup.randomizer = val; 
447C:  MOVFF  20E,B5
....................               FPGA_set_reg0(); 
4480:  MOVLB  0
4482:  CALL   17FE
....................               ret = 1; 
4486:  MOVLW  01
4488:  MOVLB  1
448A:  MOVWF  xC4
....................               } 
....................             else 
448C:  BRA    4502
448E:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4490:  MOVLW  02
4492:  MOVWF  FEA
4494:  MOVLW  17
4496:  MOVWF  FE9
4498:  MOVLW  09
449A:  MOVWF  01
449C:  CLRF   FF7
449E:  MOVLW  00
44A0:  MOVLB  0
44A2:  CALL   08DA
44A6:  TBLRD*-
44A8:  TBLRD*+
44AA:  MOVFF  FF5,FEE
44AE:  DECFSZ 01,F
44B0:  BRA    44A8
44B2:  MOVLW  02
44B4:  MOVLB  2
44B6:  MOVWF  x6F
44B8:  MOVLW  17
44BA:  MOVWF  x6E
44BC:  MOVLB  0
44BE:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
44C2:  MOVLW  01
44C4:  MOVLB  1
44C6:  MOVWF  xA6
44C8:  MOVLW  7A
44CA:  MOVWF  xA5
44CC:  MOVLW  D8
44CE:  MOVWF  FF6
44D0:  MOVLW  0C
44D2:  MOVWF  FF7
44D4:  MOVLW  07
44D6:  MOVLB  2
44D8:  MOVWF  x34
44DA:  MOVLB  0
44DC:  CALL   3010
44E0:  MOVFF  B5,234
44E4:  MOVLW  1B
44E6:  MOVLB  2
44E8:  MOVWF  x35
44EA:  MOVLB  0
44EC:  CALL   3188
44F0:  MOVLW  0D
44F2:  MOVLB  2
44F4:  MOVWF  x3D
44F6:  MOVLB  0
44F8:  CALL   2FEE
....................               ret = 0; 
44FC:  MOVLB  1
44FE:  CLRF   xC4
....................               break; 
4500:  BRA    451E
....................               } 
....................             } 
....................           ret = 1; 
4502:  MOVLW  01
4504:  MOVLB  1
4506:  MOVWF  xC4
....................           break; 
4508:  BRA    451E
....................  
....................         case 'L':    // recall 
....................           read_setup(); 
450A:  CALL   0FBC
....................           update_all(); 
450E:  CALL   1D4C
....................           ret = 1; 
4512:  MOVLW  01
4514:  MOVLB  1
4516:  MOVWF  xC4
....................           break; 
4518:  BRA    451E
....................         case 'E':   // reset 
....................           reset_cpu(); 
451A:  RESET
....................           break; 
451C:  MOVLB  1
....................         } 
....................       break; 
451E:  MOVLB  0
4520:  GOTO   5778
....................  
....................     case 'W':            // query 
....................       if (!ttccp_login) break; 
4524:  MOVLB  1
4526:  MOVF   x2E,F
4528:  BNZ   4532
452A:  MOVLB  0
452C:  GOTO   5778
4530:  MOVLB  1
....................       if (c2 == 'A') 
4532:  MOVF   xF0,W
4534:  SUBLW  41
4536:  BNZ   453C
....................         { 
....................         //xxxx 
....................         ret = 1; 
4538:  MOVLW  01
453A:  MOVWF  xC4
....................         } 
....................       break; 
453C:  MOVLB  0
453E:  GOTO   5778
....................  
....................     case 'S': 
....................       if (!ttccp_login) break; 
4542:  MOVLB  1
4544:  MOVF   x2E,F
4546:  BNZ   4550
4548:  MOVLB  0
454A:  GOTO   5778
454E:  MOVLB  1
....................       switch (c2) 
....................         { 
4550:  MOVF   xF0,W
4552:  XORLW  50
4554:  MOVLB  0
4556:  BZ    455E
4558:  XORLW  06
455A:  BZ    4568
455C:  BRA    4580
....................         case 'P': // power down - discrete outputs 
....................           ret = 1; 
455E:  MOVLW  01
4560:  MOVLB  1
4562:  MOVWF  xC4
....................           break; 
4564:  MOVLB  0
4566:  BRA    4580
....................         case 'V': 
....................           allow_write = 2975; 
4568:  MOVLW  0B
456A:  MOVLB  1
456C:  MOVWF  x02
456E:  MOVLW  9F
4570:  MOVWF  x01
....................           write_setup(); 
4572:  MOVLB  0
4574:  CALL   3274
....................           ret = 1; 
4578:  MOVLW  01
457A:  MOVLB  1
457C:  MOVWF  xC4
....................           break; 
457E:  MOVLB  0
....................         } 
....................       break; 
4580:  GOTO   5778
....................        
....................  
....................     case 'U': // VERSION 3.3 UT US 
....................       if (!ttccp_login) break; 
4584:  MOVLB  1
4586:  MOVF   x2E,F
4588:  BNZ   4592
458A:  MOVLB  0
458C:  GOTO   5778
4590:  MOVLB  1
....................       switch (c2) 
....................         { 
4592:  MOVF   xF0,W
4594:  XORLW  54
4596:  MOVLB  0
4598:  BZ    45A2
459A:  XORLW  07
459C:  BTFSC  FD8.2
459E:  BRA    469E
45A0:  BRA    478A
....................         case 'T':  
....................           if (query) 
45A2:  MOVLB  1
45A4:  MOVF   xEE,F
45A6:  BZ    45F4
....................             { 
....................             sprintf(buf, "UT %u\r", setup.UART_Time); 
45A8:  MOVLW  01
45AA:  MOVWF  xA6
45AC:  MOVLW  C6
45AE:  MOVWF  xA5
45B0:  MOVLW  E4
45B2:  MOVWF  FF6
45B4:  MOVLW  0C
45B6:  MOVWF  FF7
45B8:  MOVLW  03
45BA:  MOVLB  2
45BC:  MOVWF  x34
45BE:  MOVLB  0
45C0:  CALL   3010
45C4:  MOVFF  FB,234
45C8:  MOVLW  1B
45CA:  MOVLB  2
45CC:  MOVWF  x35
45CE:  MOVLB  0
45D0:  CALL   3188
45D4:  MOVLW  0D
45D6:  MOVLB  2
45D8:  MOVWF  x3D
45DA:  MOVLB  0
45DC:  CALL   2FEE
....................             COM1_send_str(buf); 
45E0:  MOVLW  01
45E2:  MOVLB  2
45E4:  MOVWF  x6F
45E6:  MOVLW  C6
45E8:  MOVWF  x6E
45EA:  MOVLB  0
45EC:  CALL   223A
....................             } 
.................... 	            else 
45F0:  BRA    4692
45F2:  MOVLB  1
.................... 	            { 
.................... 	            val = get_int(); 
45F4:  MOVLB  0
45F6:  CALL   2B5E
45FA:  MOVFF  02,20F
45FE:  MOVFF  01,20E
.................... 	            if (val < 240 && val >1) 
4602:  MOVLB  2
4604:  MOVF   x0F,F
4606:  BNZ   461E
4608:  MOVF   x0E,W
460A:  SUBLW  EF
460C:  BNC   461E
460E:  MOVF   x0F,F
4610:  BNZ   4618
4612:  MOVF   x0E,W
4614:  SUBLW  01
4616:  BC    461E
.................... 	              { 
.................... 	              setup.UART_Time = val;	               
4618:  MOVFF  20E,FB
.................... 	              } 
.................... 	            else 
461C:  BRA    4694
.................... 	              { 
.................... 				  			COM1_send_str("\r\nFAIL\r\n"); 
461E:  MOVLW  02
4620:  MOVWF  FEA
4622:  MOVLW  17
4624:  MOVWF  FE9
4626:  MOVLW  09
4628:  MOVWF  01
462A:  CLRF   FF7
462C:  MOVLW  00
462E:  MOVLB  0
4630:  CALL   08DA
4634:  TBLRD*-
4636:  TBLRD*+
4638:  MOVFF  FF5,FEE
463C:  DECFSZ 01,F
463E:  BRA    4636
4640:  MOVLW  02
4642:  MOVLB  2
4644:  MOVWF  x6F
4646:  MOVLW  17
4648:  MOVWF  x6E
464A:  MOVLB  0
464C:  CALL   223A
.................... 	              sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
4650:  MOVLW  01
4652:  MOVLB  1
4654:  MOVWF  xA6
4656:  MOVLW  7A
4658:  MOVWF  xA5
465A:  MOVLW  EC
465C:  MOVWF  FF6
465E:  MOVLW  0C
4660:  MOVWF  FF7
4662:  MOVLW  07
4664:  MOVLB  2
4666:  MOVWF  x34
4668:  MOVLB  0
466A:  CALL   3010
466E:  MOVFF  FB,234
4672:  MOVLW  1B
4674:  MOVLB  2
4676:  MOVWF  x35
4678:  MOVLB  0
467A:  CALL   3188
467E:  MOVLW  0D
4680:  MOVLB  2
4682:  MOVWF  x3D
4684:  MOVLB  0
4686:  CALL   2FEE
.................... 	              ret = 0; 
468A:  MOVLB  1
468C:  CLRF   xC4
.................... 	              break; 
468E:  MOVLB  0
4690:  BRA    478A
4692:  MOVLB  2
.................... 	              } 
.................... 	            } 
.................... 	            ret = 1; 
4694:  MOVLW  01
4696:  MOVLB  1
4698:  MOVWF  xC4
....................          		  break;  
469A:  MOVLB  0
469C:  BRA    478A
....................                      
....................         case 'S': 
....................            { 
....................           if (query) 
469E:  MOVLB  1
46A0:  MOVF   xEE,F
46A2:  BZ    46F0
....................             { 
....................             sprintf(buf, "US %u\r",setup.UART_Status); 
46A4:  MOVLW  01
46A6:  MOVWF  xA6
46A8:  MOVLW  C6
46AA:  MOVWF  xA5
46AC:  MOVLW  F8
46AE:  MOVWF  FF6
46B0:  MOVLW  0C
46B2:  MOVWF  FF7
46B4:  MOVLW  03
46B6:  MOVLB  2
46B8:  MOVWF  x34
46BA:  MOVLB  0
46BC:  CALL   3010
46C0:  MOVFF  FC,234
46C4:  MOVLW  1B
46C6:  MOVLB  2
46C8:  MOVWF  x35
46CA:  MOVLB  0
46CC:  CALL   3188
46D0:  MOVLW  0D
46D2:  MOVLB  2
46D4:  MOVWF  x3D
46D6:  MOVLB  0
46D8:  CALL   2FEE
....................             COM1_send_str(buf); 
46DC:  MOVLW  01
46DE:  MOVLB  2
46E0:  MOVWF  x6F
46E2:  MOVLW  C6
46E4:  MOVWF  x6E
46E6:  MOVLB  0
46E8:  CALL   223A
....................             } 
....................           else 
46EC:  BRA    4784
46EE:  MOVLB  1
....................             { 
....................             val = get_int(); 
46F0:  MOVLB  0
46F2:  CALL   2B5E
46F6:  MOVFF  02,20F
46FA:  MOVFF  01,20E
....................             if (val < 2) 
46FE:  MOVLB  2
4700:  MOVF   x0F,F
4702:  BNZ   4710
4704:  MOVF   x0E,W
4706:  SUBLW  01
4708:  BNC   4710
....................               { 
....................               setup.UART_Status = val; 
470A:  MOVFF  20E,FC
....................               } 
....................             else 
470E:  BRA    4786
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
4710:  MOVLW  02
4712:  MOVWF  FEA
4714:  MOVLW  17
4716:  MOVWF  FE9
4718:  MOVLW  09
471A:  MOVWF  01
471C:  CLRF   FF7
471E:  MOVLW  00
4720:  MOVLB  0
4722:  CALL   08DA
4726:  TBLRD*-
4728:  TBLRD*+
472A:  MOVFF  FF5,FEE
472E:  DECFSZ 01,F
4730:  BRA    4728
4732:  MOVLW  02
4734:  MOVLB  2
4736:  MOVWF  x6F
4738:  MOVLW  17
473A:  MOVWF  x6E
473C:  MOVLB  0
473E:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
4742:  MOVLW  01
4744:  MOVLB  1
4746:  MOVWF  xA6
4748:  MOVLW  7A
474A:  MOVWF  xA5
474C:  MOVLW  00
474E:  MOVWF  FF6
4750:  MOVLW  0D
4752:  MOVWF  FF7
4754:  MOVLW  07
4756:  MOVLB  2
4758:  MOVWF  x34
475A:  MOVLB  0
475C:  CALL   3010
4760:  MOVFF  FC,234
4764:  MOVLW  1B
4766:  MOVLB  2
4768:  MOVWF  x35
476A:  MOVLB  0
476C:  CALL   3188
4770:  MOVLW  0D
4772:  MOVLB  2
4774:  MOVWF  x3D
4776:  MOVLB  0
4778:  CALL   2FEE
....................               ret = 0; 
477C:  MOVLB  1
477E:  CLRF   xC4
....................               break; 
4780:  MOVLB  0
4782:  BRA    478A
4784:  MOVLB  2
....................               } 
....................             } 
....................         break; 
4786:  MOVLB  0
4788:  BRA    478A
....................         } 
....................         break; 
....................         } 
....................       break; 
478A:  GOTO   5778
....................        
.................... 	 case 'B': // VERSION 3.3 BG Block Ghange and Check Function 23.0.2016 
....................       if (!ttccp_login) break; 
478E:  MOVLB  1
4790:  MOVF   x2E,F
4792:  BNZ   479C
4794:  MOVLB  0
4796:  GOTO   5778
479A:  MOVLB  1
....................       switch (c2) 
....................         { 
479C:  MOVF   xF0,W
479E:  XORLW  47
47A0:  MOVLB  0
47A2:  BZ    47A6
47A4:  BRA    48DE
....................         case 'G':      
....................           if (query) 
47A6:  MOVLB  1
47A8:  MOVF   xEE,F
47AA:  BZ    47F8
....................             { 
....................             sprintf(buf, "BG %lu\r", setup.Block_per_second); 
47AC:  MOVLW  01
47AE:  MOVWF  xA6
47B0:  MOVLW  C6
47B2:  MOVWF  xA5
47B4:  MOVLW  0C
47B6:  MOVWF  FF6
47B8:  MOVLW  0D
47BA:  MOVWF  FF7
47BC:  MOVLW  03
47BE:  MOVLB  2
47C0:  MOVWF  x34
47C2:  MOVLB  0
47C4:  CALL   3010
47C8:  MOVLW  10
47CA:  MOVWF  FE9
47CC:  MOVFF  100,235
47D0:  MOVFF  FF,234
47D4:  CALL   3038
47D8:  MOVLW  0D
47DA:  MOVLB  2
47DC:  MOVWF  x3D
47DE:  MOVLB  0
47E0:  CALL   2FEE
....................             COM1_send_str(buf); 
47E4:  MOVLW  01
47E6:  MOVLB  2
47E8:  MOVWF  x6F
47EA:  MOVLW  C6
47EC:  MOVWF  x6E
47EE:  MOVLB  0
47F0:  CALL   223A
....................             } 
....................           else 
47F4:  BRA    48D6
47F6:  MOVLB  1
....................             { 
....................             sub = get_int(); 
47F8:  MOVLB  0
47FA:  CALL   2B5E
47FE:  MOVFF  01,00
4802:  MOVFF  02,01
4806:  CLRF   02
4808:  CLRF   03
480A:  MOVFF  03,209
480E:  MOVFF  02,208
4812:  MOVFF  01,207
4816:  MOVFF  00,206
....................             if (sub >= 1 && sub <= 40) 
481A:  MOVLB  2
481C:  MOVF   x09,F
481E:  BNZ   482E
4820:  MOVF   x08,F
4822:  BNZ   482E
4824:  MOVF   x07,F
4826:  BNZ   482E
4828:  MOVF   x06,W
482A:  SUBLW  00
482C:  BC    4862
482E:  MOVF   x09,F
4830:  BNZ   4862
4832:  MOVF   x08,F
4834:  BNZ   4862
4836:  MOVF   x07,F
4838:  BNZ   4862
483A:  MOVF   x06,W
483C:  SUBLW  28
483E:  BNC   4862
....................               { 
.................... 	            //sub = sub*10; 
....................               //setup.Block_per_second = sub; 
....................               setup.Block_per_second = convert_power(sub); 
4840:  MOVFF  207,231
4844:  MOVFF  206,230
4848:  MOVFF  207,233
484C:  MOVFF  206,232
4850:  MOVLB  0
4852:  GOTO   32A2
4856:  MOVFF  02,100
485A:  MOVFF  01,FF
....................               } 
....................             else 
485E:  BRA    48D6
4860:  MOVLB  2
....................               { 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
4862:  MOVLW  02
4864:  MOVWF  FEA
4866:  MOVLW  17
4868:  MOVWF  FE9
486A:  MOVLW  09
486C:  MOVWF  01
486E:  CLRF   FF7
4870:  MOVLW  00
4872:  MOVLB  0
4874:  CALL   08DA
4878:  TBLRD*-
487A:  TBLRD*+
487C:  MOVFF  FF5,FEE
4880:  DECFSZ 01,F
4882:  BRA    487A
4884:  MOVLW  02
4886:  MOVLB  2
4888:  MOVWF  x6F
488A:  MOVLW  17
488C:  MOVWF  x6E
488E:  MOVLB  0
4890:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR BG %lu\r", setup.Block_per_second); 
4894:  MOVLW  01
4896:  MOVLB  1
4898:  MOVWF  xA6
489A:  MOVLW  7A
489C:  MOVWF  xA5
489E:  MOVLW  14
48A0:  MOVWF  FF6
48A2:  MOVLW  0D
48A4:  MOVWF  FF7
48A6:  MOVLW  07
48A8:  MOVLB  2
48AA:  MOVWF  x34
48AC:  MOVLB  0
48AE:  CALL   3010
48B2:  MOVLW  10
48B4:  MOVWF  FE9
48B6:  MOVFF  100,235
48BA:  MOVFF  FF,234
48BE:  CALL   3038
48C2:  MOVLW  0D
48C4:  MOVLB  2
48C6:  MOVWF  x3D
48C8:  MOVLB  0
48CA:  CALL   2FEE
....................               ret = 0; 
48CE:  MOVLB  1
48D0:  CLRF   xC4
....................               break; 
48D2:  MOVLB  0
48D4:  BRA    48DE
....................               } 
....................             } 
....................           ret = 1; 
48D6:  MOVLW  01
48D8:  MOVLB  1
48DA:  MOVWF  xC4
....................           break; 
48DC:  MOVLB  0
....................         } 
....................       break; 
48DE:  GOTO   5778
....................        
....................       	 
....................     case 'I': 
....................       if (!ttccp_login) break; 
48E2:  MOVLB  1
48E4:  MOVF   x2E,F
48E6:  BNZ   48F0
48E8:  MOVLB  0
48EA:  GOTO   5778
48EE:  MOVLB  1
....................       switch (c2) 
....................         { 
48F0:  MOVF   xF0,W
48F2:  XORLW  44
48F4:  MOVLB  0
48F6:  BZ    4900
48F8:  XORLW  07
48FA:  BTFSC  FD8.2
48FC:  BRA    49F8
48FE:  BRA    4A58
....................         case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
....................           if (query) 
4900:  MOVLB  1
4902:  MOVF   xEE,F
4904:  BZ    4952
....................             { 
....................             sprintf(buf, "ID %u\r", setup.internal_pattern); 
4906:  MOVLW  01
4908:  MOVWF  xA6
490A:  MOVLW  C6
490C:  MOVWF  xA5
490E:  MOVLW  20
4910:  MOVWF  FF6
4912:  MOVLW  0D
4914:  MOVWF  FF7
4916:  MOVLW  03
4918:  MOVLB  2
491A:  MOVWF  x34
491C:  MOVLB  0
491E:  CALL   3010
4922:  MOVFF  B4,234
4926:  MOVLW  1B
4928:  MOVLB  2
492A:  MOVWF  x35
492C:  MOVLB  0
492E:  CALL   3188
4932:  MOVLW  0D
4934:  MOVLB  2
4936:  MOVWF  x3D
4938:  MOVLB  0
493A:  CALL   2FEE
....................             COM1_send_str(buf); 
493E:  MOVLW  01
4940:  MOVLB  2
4942:  MOVWF  x6F
4944:  MOVLW  C6
4946:  MOVWF  x6E
4948:  MOVLB  0
494A:  CALL   223A
....................             } 
....................           else 
494E:  BRA    49EE
4950:  MOVLB  1
....................             { 
....................             val = get_int(); 
4952:  MOVLB  0
4954:  CALL   2B5E
4958:  MOVFF  02,20F
495C:  MOVFF  01,20E
....................             if (val < 4) 
4960:  MOVLB  2
4962:  MOVF   x0F,F
4964:  BNZ   497A
4966:  MOVF   x0E,W
4968:  SUBLW  03
496A:  BNC   497A
....................               { 
....................               setup.internal_pattern = val; 
496C:  MOVFF  20E,B4
....................               FPGA_set_reg6(); 
4970:  MOVLB  0
4972:  CALL   185A
....................               } 
....................             else 
4976:  BRA    49EE
4978:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
497A:  MOVLW  02
497C:  MOVWF  FEA
497E:  MOVLW  17
4980:  MOVWF  FE9
4982:  MOVLW  09
4984:  MOVWF  01
4986:  CLRF   FF7
4988:  MOVLW  00
498A:  MOVLB  0
498C:  CALL   08DA
4990:  TBLRD*-
4992:  TBLRD*+
4994:  MOVFF  FF5,FEE
4998:  DECFSZ 01,F
499A:  BRA    4992
499C:  MOVLW  02
499E:  MOVLB  2
49A0:  MOVWF  x6F
49A2:  MOVLW  17
49A4:  MOVWF  x6E
49A6:  MOVLB  0
49A8:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
49AC:  MOVLW  01
49AE:  MOVLB  1
49B0:  MOVWF  xA6
49B2:  MOVLW  7A
49B4:  MOVWF  xA5
49B6:  MOVLW  28
49B8:  MOVWF  FF6
49BA:  MOVLW  0D
49BC:  MOVWF  FF7
49BE:  MOVLW  07
49C0:  MOVLB  2
49C2:  MOVWF  x34
49C4:  MOVLB  0
49C6:  CALL   3010
49CA:  MOVFF  B4,234
49CE:  MOVLW  1B
49D0:  MOVLB  2
49D2:  MOVWF  x35
49D4:  MOVLB  0
49D6:  CALL   3188
49DA:  MOVLW  0D
49DC:  MOVLB  2
49DE:  MOVWF  x3D
49E0:  MOVLB  0
49E2:  CALL   2FEE
....................               ret = 0; 
49E6:  MOVLB  1
49E8:  CLRF   xC4
....................               break; 
49EA:  MOVLB  0
49EC:  BRA    4A58
....................               } 
....................             } 
....................           ret = 1; 
49EE:  MOVLW  01
49F0:  MOVLB  1
49F2:  MOVWF  xC4
....................           break; 
49F4:  MOVLB  0
49F6:  BRA    4A58
....................  
....................         case 'C':    // Addr 2 - 5 bit rate 
....................           if (query) 
49F8:  MOVLB  1
49FA:  MOVF   xEE,F
49FC:  BZ    4A4A
....................             { 
....................             sprintf(buf, "IC %lu\r", setup.bitrate); 
49FE:  MOVLW  01
4A00:  MOVWF  xA6
4A02:  MOVLW  C6
4A04:  MOVWF  xA5
4A06:  MOVLW  34
4A08:  MOVWF  FF6
4A0A:  MOVLW  0D
4A0C:  MOVWF  FF7
4A0E:  MOVLW  03
4A10:  MOVLB  2
4A12:  MOVWF  x34
4A14:  MOVLB  0
4A16:  CALL   3010
4A1A:  MOVLW  10
4A1C:  MOVWF  FE9
4A1E:  MOVFF  AC,235
4A22:  MOVFF  AB,234
4A26:  CALL   3038
4A2A:  MOVLW  0D
4A2C:  MOVLB  2
4A2E:  MOVWF  x3D
4A30:  MOVLB  0
4A32:  CALL   2FEE
....................             COM1_send_str(buf); 
4A36:  MOVLW  01
4A38:  MOVLB  2
4A3A:  MOVWF  x6F
4A3C:  MOVLW  C6
4A3E:  MOVWF  x6E
4A40:  MOVLB  0
4A42:  CALL   223A
....................             } 
....................           else 
4A46:  BRA    4A50
4A48:  MOVLB  1
....................             { 
....................             get_new_bitrate(); 
4A4A:  MOVLB  0
4A4C:  GOTO   336A
....................             } 
....................           ret = 1; 
4A50:  MOVLW  01
4A52:  MOVLB  1
4A54:  MOVWF  xC4
....................           break; 
4A56:  MOVLB  0
....................         } 
....................       break; 
4A58:  GOTO   5778
....................  
....................     case 'T': 
....................       if (!ttccp_login) break; 
4A5C:  MOVLB  1
4A5E:  MOVF   x2E,F
4A60:  BNZ   4A6A
4A62:  MOVLB  0
4A64:  GOTO   5778
4A68:  MOVLB  1
....................       if (c2 == 'E') 
4A6A:  MOVF   xF0,W
4A6C:  SUBLW  45
4A6E:  BNZ   4A72
....................         { 
....................         goto get_temp; 
4A70:  BRA    4FE6
....................         } 
....................       break; 
4A72:  MOVLB  0
4A74:  GOTO   5778
....................  
....................     case 'V': 
....................       if (!ttccp_login) break; 
4A78:  MOVLB  1
4A7A:  MOVF   x2E,F
4A7C:  BNZ   4A86
4A7E:  MOVLB  0
4A80:  GOTO   5778
4A84:  MOVLB  1
....................       switch (c2) 
....................         { 
4A86:  MOVF   xF0,W
4A88:  XORLW  45
4A8A:  MOVLB  0
4A8C:  BZ    4AA8
4A8E:  XORLW  09
4A90:  BTFSC  FD8.2
4A92:  BRA    4B8A
4A94:  XORLW  1C
4A96:  BTFSC  FD8.2
4A98:  BRA    4BD6
4A9A:  XORLW  1D
4A9C:  BTFSC  FD8.2
4A9E:  BRA    4C4C
4AA0:  XORLW  0E
4AA2:  BTFSC  FD8.2
4AA4:  BRA    4CC2
4AA6:  BRA    4D3C
....................         case 'E':  // return version 
.................... 		if(c2 =='E') 
4AA8:  MOVLB  1
4AAA:  MOVF   xF0,W
4AAC:  SUBLW  45
4AAE:  BNZ   4B54
.................... 		{ 
....................           sprintf(buf, "VE %s ID=%02lu DT=%02lu%02u\r", VERSION, setup.unit_ID, setup.year, setup.week); 
4AB0:  MOVLW  01
4AB2:  MOVWF  xA6
4AB4:  MOVLW  C6
4AB6:  MOVWF  xA5
4AB8:  MOVLW  3C
4ABA:  MOVWF  FF6
4ABC:  MOVLW  0D
4ABE:  MOVWF  FF7
4AC0:  MOVLW  03
4AC2:  MOVLB  2
4AC4:  MOVWF  x34
4AC6:  MOVLB  0
4AC8:  CALL   3010
4ACC:  MOVLW  04
4ACE:  MOVWF  FF6
4AD0:  MOVLW  09
4AD2:  MOVWF  FF7
4AD4:  GOTO   343A
4AD8:  MOVLW  41
4ADA:  MOVWF  FF6
4ADC:  MOVLW  0D
4ADE:  MOVWF  FF7
4AE0:  MOVLW  04
4AE2:  MOVLB  2
4AE4:  MOVWF  x34
4AE6:  MOVLB  0
4AE8:  CALL   3010
4AEC:  MOVLW  0B
4AEE:  MOVWF  FE9
4AF0:  MOVFF  F2,235
4AF4:  MOVFF  F1,234
4AF8:  CALL   3038
4AFC:  MOVLW  4A
4AFE:  MOVWF  FF6
4B00:  MOVLW  0D
4B02:  MOVWF  FF7
4B04:  MOVLW  04
4B06:  MOVLB  2
4B08:  MOVWF  x34
4B0A:  MOVLB  0
4B0C:  CALL   3010
4B10:  MOVLW  0B
4B12:  MOVWF  FE9
4B14:  MOVFF  EF,235
4B18:  MOVFF  EE,234
4B1C:  CALL   3038
4B20:  MOVFF  F0,234
4B24:  MOVLW  01
4B26:  MOVLB  2
4B28:  MOVWF  x35
4B2A:  MOVLB  0
4B2C:  CALL   3188
4B30:  MOVLW  0D
4B32:  MOVLB  2
4B34:  MOVWF  x3D
4B36:  MOVLB  0
4B38:  CALL   2FEE
....................           COM1_send_str(buf); 
4B3C:  MOVLW  01
4B3E:  MOVLB  2
4B40:  MOVWF  x6F
4B42:  MOVLW  C6
4B44:  MOVWF  x6E
4B46:  MOVLB  0
4B48:  CALL   223A
....................           ret = 1; 
4B4C:  MOVLW  01
4B4E:  MOVLB  1
4B50:  MOVWF  xC4
.................... 		} 
.................... 		else 
4B52:  BRA    4B86
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4B54:  MOVLW  02
4B56:  MOVWF  FEA
4B58:  MOVLW  17
4B5A:  MOVWF  FE9
4B5C:  MOVLW  09
4B5E:  MOVWF  01
4B60:  CLRF   FF7
4B62:  MOVLW  00
4B64:  MOVLB  0
4B66:  CALL   08DA
4B6A:  TBLRD*-
4B6C:  TBLRD*+
4B6E:  MOVFF  FF5,FEE
4B72:  DECFSZ 01,F
4B74:  BRA    4B6C
4B76:  MOVLW  02
4B78:  MOVLB  2
4B7A:  MOVWF  x6F
4B7C:  MOVLW  17
4B7E:  MOVWF  x6E
4B80:  MOVLB  0
4B82:  CALL   223A
....................           break; 
4B86:  MOVLB  0
4B88:  BRA    4D3C
....................  
....................         case 'L':  // set low power level 
.................... 		if(c2 == 'L') 
4B8A:  MOVLB  1
4B8C:  MOVF   xF0,W
4B8E:  SUBLW  4C
4B90:  BNZ   4BA0
.................... 		{ 
....................  
....................           set_low_power_level(); 
4B92:  MOVLB  0
4B94:  GOTO   345C
....................           ret = 1; 
4B98:  MOVLW  01
4B9A:  MOVLB  1
4B9C:  MOVWF  xC4
.................... 		} 
.................... 		else 
4B9E:  BRA    4BD2
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
4BA0:  MOVLW  02
4BA2:  MOVWF  FEA
4BA4:  MOVLW  17
4BA6:  MOVWF  FE9
4BA8:  MOVLW  09
4BAA:  MOVWF  01
4BAC:  CLRF   FF7
4BAE:  MOVLW  00
4BB0:  MOVLB  0
4BB2:  CALL   08DA
4BB6:  TBLRD*-
4BB8:  TBLRD*+
4BBA:  MOVFF  FF5,FEE
4BBE:  DECFSZ 01,F
4BC0:  BRA    4BB8
4BC2:  MOVLW  02
4BC4:  MOVLB  2
4BC6:  MOVWF  x6F
4BC8:  MOVLW  17
4BCA:  MOVWF  x6E
4BCC:  MOVLB  0
4BCE:  CALL   223A
....................           break; 
4BD2:  MOVLB  0
4BD4:  BRA    4D3C
....................  
....................         case 'P':  // power level control like in Generic TX  $P 
....................           if (query) 
4BD6:  MOVLB  1
4BD8:  MOVF   xEE,F
4BDA:  BZ    4C3C
....................             { 
....................             sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4BDC:  MOVLW  14
4BDE:  MOVLB  0
4BE0:  ADDWF  xBB,W
4BE2:  MOVLB  2
4BE4:  MOVWF  x30
4BE6:  MOVLW  00
4BE8:  MOVLB  0
4BEA:  ADDWFC xBC,W
4BEC:  MOVLB  2
4BEE:  MOVWF  x31
4BF0:  MOVLW  01
4BF2:  MOVLB  1
4BF4:  MOVWF  xA6
4BF6:  MOVLW  C6
4BF8:  MOVWF  xA5
4BFA:  MOVLW  5A
4BFC:  MOVWF  FF6
4BFE:  MOVLW  0D
4C00:  MOVWF  FF7
4C02:  MOVLW  03
4C04:  MOVLB  2
4C06:  MOVWF  x34
4C08:  MOVLB  0
4C0A:  CALL   3010
4C0E:  MOVLW  10
4C10:  MOVWF  FE9
4C12:  MOVFF  231,235
4C16:  MOVFF  230,234
4C1A:  CALL   3038
4C1E:  MOVLW  0D
4C20:  MOVLB  2
4C22:  MOVWF  x3D
4C24:  MOVLB  0
4C26:  CALL   2FEE
....................             COM1_send_str(buf); 
4C2A:  MOVLW  01
4C2C:  MOVLB  2
4C2E:  MOVWF  x6F
4C30:  MOVLW  C6
4C32:  MOVWF  x6E
4C34:  MOVLB  0
4C36:  CALL   223A
....................             } 
....................           else 
4C3A:  BRA    4C42
....................             set_power_level(); 
4C3C:  MOVLB  0
4C3E:  GOTO   34D0
....................             ret = 1; 
4C42:  MOVLW  01
4C44:  MOVLB  1
4C46:  MOVWF  xC4
....................           break; 
4C48:  MOVLB  0
4C4A:  BRA    4D3C
....................  
....................         case 'M': // manual power level 
....................           if (query) 
4C4C:  MOVLB  1
4C4E:  MOVF   xEE,F
4C50:  BZ    4C9E
....................             { 
....................             sprintf(buf, "VM %lu\r", manual_negative); 
4C52:  MOVLW  01
4C54:  MOVWF  xA6
4C56:  MOVLW  C6
4C58:  MOVWF  xA5
4C5A:  MOVLW  62
4C5C:  MOVWF  FF6
4C5E:  MOVLW  0D
4C60:  MOVWF  FF7
4C62:  MOVLW  03
4C64:  MOVLB  2
4C66:  MOVWF  x34
4C68:  MOVLB  0
4C6A:  CALL   3010
4C6E:  MOVLW  10
4C70:  MOVWF  FE9
4C72:  MOVFF  23,235
4C76:  MOVFF  22,234
4C7A:  CALL   3038
4C7E:  MOVLW  0D
4C80:  MOVLB  2
4C82:  MOVWF  x3D
4C84:  MOVLB  0
4C86:  CALL   2FEE
....................             COM1_send_str(buf); 
4C8A:  MOVLW  01
4C8C:  MOVLB  2
4C8E:  MOVWF  x6F
4C90:  MOVLW  C6
4C92:  MOVWF  x6E
4C94:  MOVLB  0
4C96:  CALL   223A
....................             } 
....................           else 
4C9A:  BRA    4CC0
4C9C:  MOVLB  1
....................             { 
....................             manual_negative = get_int(); 
4C9E:  MOVLB  0
4CA0:  CALL   2B5E
4CA4:  MOVFF  02,23
4CA8:  MOVFF  01,22
....................             set_AD5312(DAC_NEG_VOLT, val); 
4CAC:  MOVLW  01
4CAE:  MOVLB  2
4CB0:  MOVWF  x34
4CB2:  MOVFF  20F,236
4CB6:  MOVFF  20E,235
4CBA:  MOVLB  0
4CBC:  CALL   0FEE
....................             } 
....................           break; 
4CC0:  BRA    4D3C
....................         case 'C': // manual power level 
....................           if (query) 
4CC2:  MOVLB  1
4CC4:  MOVF   xEE,F
4CC6:  BZ    4D14
....................             { 
....................             sprintf(buf, "VC %lu\r", manual_pos); 
4CC8:  MOVLW  01
4CCA:  MOVWF  xA6
4CCC:  MOVLW  C6
4CCE:  MOVWF  xA5
4CD0:  MOVLW  6A
4CD2:  MOVWF  FF6
4CD4:  MOVLW  0D
4CD6:  MOVWF  FF7
4CD8:  MOVLW  03
4CDA:  MOVLB  2
4CDC:  MOVWF  x34
4CDE:  MOVLB  0
4CE0:  CALL   3010
4CE4:  MOVLW  10
4CE6:  MOVWF  FE9
4CE8:  MOVFF  25,235
4CEC:  MOVFF  24,234
4CF0:  CALL   3038
4CF4:  MOVLW  0D
4CF6:  MOVLB  2
4CF8:  MOVWF  x3D
4CFA:  MOVLB  0
4CFC:  CALL   2FEE
....................             COM1_send_str(buf); 
4D00:  MOVLW  01
4D02:  MOVLB  2
4D04:  MOVWF  x6F
4D06:  MOVLW  C6
4D08:  MOVWF  x6E
4D0A:  MOVLB  0
4D0C:  CALL   223A
....................             } 
....................           else 
4D10:  BRA    4D3C
4D12:  MOVLB  1
....................             { 
....................             val = get_int(); 
4D14:  MOVLB  0
4D16:  CALL   2B5E
4D1A:  MOVFF  02,20F
4D1E:  MOVFF  01,20E
....................             manual_pos = val; 
4D22:  MOVFF  20F,25
4D26:  MOVFF  20E,24
....................             set_AD5312(DAC_POS_VOLT, val); 
4D2A:  MOVLB  2
4D2C:  CLRF   x34
4D2E:  MOVFF  20F,236
4D32:  MOVFF  20E,235
4D36:  MOVLB  0
4D38:  CALL   0FEE
....................             } 
....................           break; 
.................... 		} 
....................       break; 
4D3C:  GOTO   5778
....................  
....................     case 'C': 
....................       if (!ttccp_login) break; 
4D40:  MOVLB  1
4D42:  MOVF   x2E,F
4D44:  BNZ   4D4E
4D46:  MOVLB  0
4D48:  GOTO   5778
4D4C:  MOVLB  1
....................       if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
4D4E:  MOVF   xF0,W
4D50:  SUBLW  53
4D52:  BTFSS  FD8.2
4D54:  BRA    4E4C
....................         { 
....................           if (query) 
4D56:  MOVF   xEE,F
4D58:  BZ    4DA6
....................             { 
....................             sprintf(buf, "CS %u\r", setup.clock_source); 
4D5A:  MOVLW  01
4D5C:  MOVWF  xA6
4D5E:  MOVLW  C6
4D60:  MOVWF  xA5
4D62:  MOVLW  72
4D64:  MOVWF  FF6
4D66:  MOVLW  0D
4D68:  MOVWF  FF7
4D6A:  MOVLW  03
4D6C:  MOVLB  2
4D6E:  MOVWF  x34
4D70:  MOVLB  0
4D72:  CALL   3010
4D76:  MOVFF  B2,234
4D7A:  MOVLW  1B
4D7C:  MOVLB  2
4D7E:  MOVWF  x35
4D80:  MOVLB  0
4D82:  CALL   3188
4D86:  MOVLW  0D
4D88:  MOVLB  2
4D8A:  MOVWF  x3D
4D8C:  MOVLB  0
4D8E:  CALL   2FEE
....................             COM1_send_str(buf); 
4D92:  MOVLW  01
4D94:  MOVLB  2
4D96:  MOVWF  x6F
4D98:  MOVLW  C6
4D9A:  MOVWF  x6E
4D9C:  MOVLB  0
4D9E:  CALL   223A
....................             } 
....................           else 
4DA2:  BRA    4E44
4DA4:  MOVLB  1
....................             { 
....................             val = get_int(); 
4DA6:  MOVLB  0
4DA8:  CALL   2B5E
4DAC:  MOVFF  02,20F
4DB0:  MOVFF  01,20E
....................             if (val < 2) 
4DB4:  MOVLB  2
4DB6:  MOVF   x0F,F
4DB8:  BNZ   4DCE
4DBA:  MOVF   x0E,W
4DBC:  SUBLW  01
4DBE:  BNC   4DCE
....................               { 
....................               setup.clock_source = val; 
4DC0:  MOVFF  20E,B2
....................               FPGA_set_reg6(); 
4DC4:  MOVLB  0
4DC6:  CALL   185A
....................               } 
....................             else 
4DCA:  BRA    4E44
4DCC:  MOVLB  2
....................               { 
.................... 			  COM1_send_str("\r\nFAIL\r\n"); 
4DCE:  MOVLW  02
4DD0:  MOVWF  FEA
4DD2:  MOVLW  17
4DD4:  MOVWF  FE9
4DD6:  MOVLW  09
4DD8:  MOVWF  01
4DDA:  CLRF   FF7
4DDC:  MOVLW  00
4DDE:  MOVLB  0
4DE0:  CALL   08DA
4DE4:  TBLRD*-
4DE6:  TBLRD*+
4DE8:  MOVFF  FF5,FEE
4DEC:  DECFSZ 01,F
4DEE:  BRA    4DE6
4DF0:  MOVLW  02
4DF2:  MOVLB  2
4DF4:  MOVWF  x6F
4DF6:  MOVLW  17
4DF8:  MOVWF  x6E
4DFA:  MOVLB  0
4DFC:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
4E00:  MOVLW  01
4E02:  MOVLB  1
4E04:  MOVWF  xA6
4E06:  MOVLW  7A
4E08:  MOVWF  xA5
4E0A:  MOVLW  7A
4E0C:  MOVWF  FF6
4E0E:  MOVLW  0D
4E10:  MOVWF  FF7
4E12:  MOVLW  07
4E14:  MOVLB  2
4E16:  MOVWF  x34
4E18:  MOVLB  0
4E1A:  CALL   3010
4E1E:  MOVFF  B2,234
4E22:  MOVLW  1B
4E24:  MOVLB  2
4E26:  MOVWF  x35
4E28:  MOVLB  0
4E2A:  CALL   3188
4E2E:  MOVLW  0D
4E30:  MOVLB  2
4E32:  MOVWF  x3D
4E34:  MOVLB  0
4E36:  CALL   2FEE
....................               ret = 0; 
4E3A:  MOVLB  1
4E3C:  CLRF   xC4
....................               break; 
4E3E:  MOVLB  0
4E40:  GOTO   5778
....................               } 
....................             } 
....................  
....................         ret = 1; 
4E44:  MOVLW  01
4E46:  MOVLB  1
4E48:  MOVWF  xC4
....................         } 
....................       else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
4E4A:  BRA    4F48
4E4C:  MOVF   xF0,W
4E4E:  SUBLW  50
4E50:  BTFSS  FD8.2
4E52:  BRA    4F48
....................         { 
....................           if (query) 
4E54:  MOVF   xEE,F
4E56:  BZ    4EA4
....................             { 
....................             sprintf(buf, "CP %u\r", setup.clock_polarity); 
4E58:  MOVLW  01
4E5A:  MOVWF  xA6
4E5C:  MOVLW  C6
4E5E:  MOVWF  xA5
4E60:  MOVLW  86
4E62:  MOVWF  FF6
4E64:  MOVLW  0D
4E66:  MOVWF  FF7
4E68:  MOVLW  03
4E6A:  MOVLB  2
4E6C:  MOVWF  x34
4E6E:  MOVLB  0
4E70:  CALL   3010
4E74:  MOVFF  B0,234
4E78:  MOVLW  1B
4E7A:  MOVLB  2
4E7C:  MOVWF  x35
4E7E:  MOVLB  0
4E80:  CALL   3188
4E84:  MOVLW  0D
4E86:  MOVLB  2
4E88:  MOVWF  x3D
4E8A:  MOVLB  0
4E8C:  CALL   2FEE
....................             COM1_send_str(buf); 
4E90:  MOVLW  01
4E92:  MOVLB  2
4E94:  MOVWF  x6F
4E96:  MOVLW  C6
4E98:  MOVWF  x6E
4E9A:  MOVLB  0
4E9C:  CALL   223A
....................             } 
....................           else 
4EA0:  BRA    4F42
4EA2:  MOVLB  1
....................             { 
....................             val = get_int(); 
4EA4:  MOVLB  0
4EA6:  CALL   2B5E
4EAA:  MOVFF  02,20F
4EAE:  MOVFF  01,20E
....................             if (val < 2) 
4EB2:  MOVLB  2
4EB4:  MOVF   x0F,F
4EB6:  BNZ   4ECC
4EB8:  MOVF   x0E,W
4EBA:  SUBLW  01
4EBC:  BNC   4ECC
....................               { 
....................               setup.clock_polarity = val; 
4EBE:  MOVFF  20E,B0
....................               FPGA_set_reg0(); 
4EC2:  MOVLB  0
4EC4:  CALL   17FE
....................               } 
....................             else 
4EC8:  BRA    4F42
4ECA:  MOVLB  2
....................               { 
....................               COM1_send_str("\r\nFAIL\r\n"); 
4ECC:  MOVLW  02
4ECE:  MOVWF  FEA
4ED0:  MOVLW  17
4ED2:  MOVWF  FE9
4ED4:  MOVLW  09
4ED6:  MOVWF  01
4ED8:  CLRF   FF7
4EDA:  MOVLW  00
4EDC:  MOVLB  0
4EDE:  CALL   08DA
4EE2:  TBLRD*-
4EE4:  TBLRD*+
4EE6:  MOVFF  FF5,FEE
4EEA:  DECFSZ 01,F
4EEC:  BRA    4EE4
4EEE:  MOVLW  02
4EF0:  MOVLB  2
4EF2:  MOVWF  x6F
4EF4:  MOVLW  17
4EF6:  MOVWF  x6E
4EF8:  MOVLB  0
4EFA:  CALL   223A
....................               sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
4EFE:  MOVLW  01
4F00:  MOVLB  1
4F02:  MOVWF  xA6
4F04:  MOVLW  7A
4F06:  MOVWF  xA5
4F08:  MOVLW  8E
4F0A:  MOVWF  FF6
4F0C:  MOVLW  0D
4F0E:  MOVWF  FF7
4F10:  MOVLW  07
4F12:  MOVLB  2
4F14:  MOVWF  x34
4F16:  MOVLB  0
4F18:  CALL   3010
4F1C:  MOVFF  B0,234
4F20:  MOVLW  1B
4F22:  MOVLB  2
4F24:  MOVWF  x35
4F26:  MOVLB  0
4F28:  CALL   3188
4F2C:  MOVLW  0D
4F2E:  MOVLB  2
4F30:  MOVWF  x3D
4F32:  MOVLB  0
4F34:  CALL   2FEE
....................               ret = 0; 
4F38:  MOVLB  1
4F3A:  CLRF   xC4
....................               break; 
4F3C:  MOVLB  0
4F3E:  GOTO   5778
....................               } 
....................             } 
....................  
....................         ret = 1; 
4F42:  MOVLW  01
4F44:  MOVLB  1
4F46:  MOVWF  xC4
....................         } 
....................       break; 
4F48:  MOVLB  0
4F4A:  GOTO   5778
....................  
....................    case 'G': 
....................       if (!ttccp_login) break; 
4F4E:  MOVLB  1
4F50:  MOVF   x2E,F
4F52:  BNZ   4F5C
4F54:  MOVLB  0
4F56:  GOTO   5778
4F5A:  MOVLB  1
....................       switch (c2) 
....................         { 
4F5C:  MOVF   xF0,W
4F5E:  XORLW  50
4F60:  MOVLB  0
4F62:  BZ    4F70
4F64:  XORLW  04
4F66:  BZ    4FE4
4F68:  XORLW  06
4F6A:  BTFSC  FD8.2
4F6C:  BRA    51D6
4F6E:  BRA    5248
....................         case 'P': 
....................           set_adc_channel(A2D_POWER); // read temperature 
4F70:  MOVLW  14
4F72:  MOVWF  01
4F74:  MOVF   FC2,W
4F76:  ANDLW  83
4F78:  IORWF  01,W
4F7A:  MOVWF  FC2
....................           delay_us(50); 
4F7C:  MOVLW  42
4F7E:  MOVWF  00
4F80:  DECFSZ 00,F
4F82:  BRA    4F80
4F84:  NOP   
....................           val = read_adc(); 
4F86:  BSF    FC2.1
4F88:  BTFSC  FC2.1
4F8A:  BRA    4F88
4F8C:  MOVFF  FC4,20F
4F90:  MOVLB  2
4F92:  MOVFF  FC3,20E
....................           sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
4F96:  MOVLW  01
4F98:  MOVLB  1
4F9A:  MOVWF  xA6
4F9C:  MOVLW  7A
4F9E:  MOVWF  xA5
4FA0:  MOVLW  9A
4FA2:  MOVWF  FF6
4FA4:  MOVLW  0D
4FA6:  MOVWF  FF7
4FA8:  MOVLW  04
4FAA:  MOVLB  2
4FAC:  MOVWF  x34
4FAE:  MOVLB  0
4FB0:  CALL   3010
4FB4:  MOVLW  10
4FB6:  MOVWF  FE9
4FB8:  MOVFF  20F,235
4FBC:  MOVFF  20E,234
4FC0:  CALL   3038
4FC4:  MOVLW  0D
4FC6:  MOVLB  2
4FC8:  MOVWF  x3D
4FCA:  MOVLB  0
4FCC:  CALL   2FEE
4FD0:  MOVLW  0A
4FD2:  MOVLB  2
4FD4:  MOVWF  x3D
4FD6:  MOVLB  0
4FD8:  CALL   2FEE
....................           ret = 0; 
4FDC:  MOVLB  1
4FDE:  CLRF   xC4
....................           break; 
4FE0:  MOVLB  0
4FE2:  BRA    5248
4FE4:  MOVLB  1
....................         case 'T': 
.................... get_temp: 
....................           set_adc_channel(A2D_TEMP); // read temperature 
4FE6:  MOVLW  18
4FE8:  MOVWF  01
4FEA:  MOVF   FC2,W
4FEC:  ANDLW  83
4FEE:  IORWF  01,W
4FF0:  MOVWF  FC2
....................           delay_us(50); 
4FF2:  MOVLW  42
4FF4:  MOVWF  00
4FF6:  DECFSZ 00,F
4FF8:  BRA    4FF6
4FFA:  NOP   
....................           val = read_adc(); 
4FFC:  BSF    FC2.1
4FFE:  BTFSC  FC2.1
5000:  BRA    4FFE
5002:  MOVFF  FC4,20F
5006:  MOVLB  2
5008:  MOVFF  FC3,20E
....................           temp = (float)val / 1024.0 * 3.3; 
500C:  MOVFF  20F,231
5010:  MOVFF  20E,230
5014:  MOVLB  0
5016:  GOTO   3544
501A:  MOVFF  00,230
501E:  MOVFF  01,231
5022:  MOVFF  02,232
5026:  MOVFF  03,233
502A:  MOVFF  03,258
502E:  MOVFF  02,257
5032:  MOVFF  01,256
5036:  MOVFF  00,255
503A:  MOVLB  2
503C:  CLRF   x5C
503E:  CLRF   x5B
5040:  CLRF   x5A
5042:  MOVLW  89
5044:  MOVWF  x59
5046:  MOVLB  0
5048:  CALL   18CA
504C:  MOVFF  00,230
5050:  MOVFF  01,231
5054:  MOVFF  02,232
5058:  MOVFF  03,233
505C:  MOVFF  03,258
5060:  MOVFF  02,257
5064:  MOVFF  01,256
5068:  MOVFF  00,255
506C:  MOVLW  33
506E:  MOVLB  2
5070:  MOVWF  x5C
5072:  MOVWF  x5B
5074:  MOVLW  53
5076:  MOVWF  x5A
5078:  MOVLW  80
507A:  MOVWF  x59
507C:  MOVLB  0
507E:  CALL   1A28
5082:  MOVFF  03,20D
5086:  MOVFF  02,20C
508A:  MOVFF  01,20B
508E:  MOVFF  00,20A
....................           temp -= 0.75; 
5092:  BSF    FD8.1
5094:  MOVFF  20D,233
5098:  MOVFF  20C,232
509C:  MOVFF  20B,231
50A0:  MOVFF  20A,230
50A4:  MOVLB  2
50A6:  CLRF   x37
50A8:  CLRF   x36
50AA:  MOVLW  40
50AC:  MOVWF  x35
50AE:  MOVLW  7E
50B0:  MOVWF  x34
50B2:  MOVLB  0
50B4:  CALL   24B0
50B8:  MOVFF  03,20D
50BC:  MOVFF  02,20C
50C0:  MOVFF  01,20B
50C4:  MOVFF  00,20A
....................           temp *= 100; 
50C8:  MOVFF  20D,258
50CC:  MOVFF  20C,257
50D0:  MOVFF  20B,256
50D4:  MOVFF  20A,255
50D8:  MOVLB  2
50DA:  CLRF   x5C
50DC:  CLRF   x5B
50DE:  MOVLW  48
50E0:  MOVWF  x5A
50E2:  MOVLW  85
50E4:  MOVWF  x59
50E6:  MOVLB  0
50E8:  CALL   1A28
50EC:  MOVFF  03,20D
50F0:  MOVFF  02,20C
50F4:  MOVFF  01,20B
50F8:  MOVFF  00,20A
....................           temp += 25.0; 
50FC:  BCF    FD8.1
50FE:  MOVFF  20D,233
5102:  MOVFF  20C,232
5106:  MOVFF  20B,231
510A:  MOVFF  20A,230
510E:  MOVLB  2
5110:  CLRF   x37
5112:  CLRF   x36
5114:  MOVLW  48
5116:  MOVWF  x35
5118:  MOVLW  83
511A:  MOVWF  x34
511C:  MOVLB  0
511E:  CALL   24B0
5122:  MOVFF  03,20D
5126:  MOVFF  02,20C
512A:  MOVFF  01,20B
512E:  MOVFF  00,20A
....................           if(setup.pwr) 
5132:  MOVF   xAD,W
5134:  IORWF  xAE,W
5136:  BZ    5192
....................             { 
....................             sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", temp); 
5138:  MOVLW  01
513A:  MOVLB  1
513C:  MOVWF  xA6
513E:  MOVLW  7A
5140:  MOVWF  xA5
5142:  MOVLW  A4
5144:  MOVWF  FF6
5146:  MOVLW  0D
5148:  MOVWF  FF7
514A:  MOVLW  06
514C:  MOVLB  2
514E:  MOVWF  x34
5150:  MOVLB  0
5152:  CALL   3010
5156:  MOVLW  05
5158:  MOVWF  FE9
515A:  MOVFF  20D,233
515E:  MOVFF  20C,232
5162:  MOVFF  20B,231
5166:  MOVFF  20A,230
516A:  MOVLW  02
516C:  MOVLB  2
516E:  MOVWF  x34
5170:  MOVLB  0
5172:  GOTO   357C
5176:  MOVLW  AF
5178:  MOVWF  FF6
517A:  MOVLW  0D
517C:  MOVWF  FF7
517E:  MOVLW  08
5180:  MOVLB  2
5182:  MOVWF  x34
5184:  MOVLB  0
5186:  CALL   3010
....................             ret = 0; 
518A:  MOVLB  1
518C:  CLRF   xC4
....................             } 
....................             else 
518E:  BRA    51D2
5190:  MOVLB  0
....................             { 
....................             temp = 0; 
5192:  MOVLB  2
5194:  CLRF   x0D
5196:  CLRF   x0C
5198:  CLRF   x0B
519A:  CLRF   x0A
....................             COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
519C:  MOVLW  02
519E:  MOVWF  FEA
51A0:  MOVLW  17
51A2:  MOVWF  FE9
51A4:  MOVLW  15
51A6:  MOVWF  01
51A8:  CLRF   FF7
51AA:  MOVLW  00
51AC:  MOVLB  0
51AE:  CALL   0914
51B2:  TBLRD*-
51B4:  TBLRD*+
51B6:  MOVFF  FF5,FEE
51BA:  DECFSZ 01,F
51BC:  BRA    51B4
51BE:  MOVLW  02
51C0:  MOVLB  2
51C2:  MOVWF  x6F
51C4:  MOVLW  17
51C6:  MOVWF  x6E
51C8:  MOVLB  0
51CA:  CALL   223A
....................             ret = 0; 
51CE:  MOVLB  1
51D0:  CLRF   xC4
....................              
....................             } 
....................           break; 
51D2:  MOVLB  0
51D4:  BRA    5248
....................  
....................         case 'R': 
....................                 set_adc_channel(A2D_PREV); // select forward power input 
51D6:  MOVLW  10
51D8:  MOVWF  01
51DA:  MOVF   FC2,W
51DC:  ANDLW  83
51DE:  IORWF  01,W
51E0:  MOVWF  FC2
....................                 delay_us(20); 
51E2:  MOVLW  1A
51E4:  MOVWF  00
51E6:  DECFSZ 00,F
51E8:  BRA    51E6
51EA:  NOP   
....................                 val = read_adc(); 
51EC:  BSF    FC2.1
51EE:  BTFSC  FC2.1
51F0:  BRA    51EE
51F2:  MOVFF  FC4,20F
51F6:  MOVLB  2
51F8:  MOVFF  FC3,20E
....................                 sprintf(ttccp_error_message, "\nGR %lu\r\n", val); 
51FC:  MOVLW  01
51FE:  MOVLB  1
5200:  MOVWF  xA6
5202:  MOVLW  7A
5204:  MOVWF  xA5
5206:  MOVLW  B8
5208:  MOVWF  FF6
520A:  MOVLW  0D
520C:  MOVWF  FF7
520E:  MOVLW  04
5210:  MOVLB  2
5212:  MOVWF  x34
5214:  MOVLB  0
5216:  CALL   3010
521A:  MOVLW  10
521C:  MOVWF  FE9
521E:  MOVFF  20F,235
5222:  MOVFF  20E,234
5226:  CALL   3038
522A:  MOVLW  0D
522C:  MOVLB  2
522E:  MOVWF  x3D
5230:  MOVLB  0
5232:  CALL   2FEE
5236:  MOVLW  0A
5238:  MOVLB  2
523A:  MOVWF  x3D
523C:  MOVLB  0
523E:  CALL   2FEE
....................           			ret = 0; 
5242:  MOVLB  1
5244:  CLRF   xC4
5246:  MOVLB  0
....................                 } 
....................               break; 
5248:  BRA    5778
....................       break; 
524A:  BRA    5778
....................  
....................       case 'Q': //statusl      if (!ttccp_login) break; 
....................  
....................       COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
524C:  MOVLW  02
524E:  MOVWF  FEA
5250:  MOVLW  17
5252:  MOVWF  FE9
5254:  MOVLW  19
5256:  MOVWF  01
5258:  CLRF   FF7
525A:  MOVLW  00
525C:  CALL   093A
5260:  TBLRD*-
5262:  TBLRD*+
5264:  MOVFF  FF5,FEE
5268:  DECFSZ 01,F
526A:  BRA    5262
526C:  MOVLW  02
526E:  MOVLB  2
5270:  MOVWF  x6F
5272:  MOVLW  17
5274:  MOVWF  x6E
5276:  MOVLB  0
5278:  CALL   223A
....................       COM1_send_str(VERSION); 
527C:  MOVLW  02
527E:  MOVWF  FEA
5280:  MOVLW  17
5282:  MOVWF  FE9
5284:  MOVLW  0F
5286:  MOVWF  01
5288:  CLRF   FF7
528A:  MOVLW  00
528C:  CALL   08F4
5290:  TBLRD*-
5292:  TBLRD*+
5294:  MOVFF  FF5,FEE
5298:  DECFSZ 01,F
529A:  BRA    5292
529C:  MOVLW  02
529E:  MOVLB  2
52A0:  MOVWF  x6F
52A2:  MOVLW  17
52A4:  MOVWF  x6E
52A6:  MOVLB  0
52A8:  CALL   223A
....................       sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
....................               setup.unit_ID, setup.year, setup.week); 
52AC:  MOVLW  01
52AE:  MOVLB  1
52B0:  MOVWF  xA6
52B2:  MOVLW  C6
52B4:  MOVWF  xA5
52B6:  MOVLW  C2
52B8:  MOVWF  FF6
52BA:  MOVLW  0D
52BC:  MOVWF  FF7
52BE:  MOVLW  05
52C0:  MOVLB  2
52C2:  MOVWF  x34
52C4:  MOVLB  0
52C6:  CALL   3010
52CA:  MOVLW  10
52CC:  MOVWF  FE9
52CE:  MOVFF  F2,235
52D2:  MOVFF  F1,234
52D6:  CALL   3038
52DA:  MOVLW  CA
52DC:  MOVWF  FF6
52DE:  MOVLW  0D
52E0:  MOVWF  FF7
52E2:  MOVLW  04
52E4:  MOVLB  2
52E6:  MOVWF  x34
52E8:  MOVLB  0
52EA:  CALL   3010
52EE:  MOVLW  0B
52F0:  MOVWF  FE9
52F2:  MOVFF  EF,235
52F6:  MOVFF  EE,234
52FA:  CALL   3038
52FE:  MOVFF  F0,234
5302:  MOVLW  01
5304:  MOVLB  2
5306:  MOVWF  x35
5308:  MOVLB  0
530A:  CALL   3188
530E:  MOVLW  0D
5310:  MOVLB  2
5312:  MOVWF  x3D
5314:  MOVLB  0
5316:  CALL   2FEE
....................       COM1_send_str(buf); 
531A:  MOVLW  01
531C:  MOVLB  2
531E:  MOVWF  x6F
5320:  MOVLW  C6
5322:  MOVWF  x6E
5324:  MOVLB  0
5326:  CALL   223A
....................  
....................                 set_adc_channel(A2D_PREV); // select forward power input 
532A:  MOVLW  10
532C:  MOVWF  01
532E:  MOVF   FC2,W
5330:  ANDLW  83
5332:  IORWF  01,W
5334:  MOVWF  FC2
....................                 delay_us(20); 
5336:  MOVLW  1A
5338:  MOVWF  00
533A:  DECFSZ 00,F
533C:  BRA    533A
533E:  NOP   
....................                 revp = read_adc(); 
5340:  BSF    FC2.1
5342:  BTFSC  FC2.1
5344:  BRA    5342
5346:  MOVFF  FC4,108
534A:  MOVLB  1
534C:  MOVFF  FC3,107
....................  
....................           if (revp <= 580) 
5350:  MOVF   x08,W
5352:  SUBLW  02
5354:  BNC   537E
5356:  BNZ   535E
5358:  MOVF   x07,W
535A:  SUBLW  44
535C:  BNC   537E
....................           strcpy(revstat, "GOOD"); 
535E:  MOVLW  01
5360:  MOVWF  FEA
5362:  MOVLW  F1
5364:  MOVWF  FE9
5366:  MOVLW  00
5368:  MOVLB  0
536A:  CALL   0964
536E:  TBLRD*-
5370:  TBLRD*+
5372:  MOVF   FF5,W
5374:  MOVWF  FEE
5376:  IORLW  00
5378:  BNZ   5370
....................           else 
537A:  BRA    539A
537C:  MOVLB  1
....................           strcpy(revstat, "BAD"); 
537E:  MOVLW  01
5380:  MOVWF  FEA
5382:  MOVLW  F1
5384:  MOVWF  FE9
5386:  MOVLW  00
5388:  MOVLB  0
538A:  CALL   097A
538E:  TBLRD*-
5390:  TBLRD*+
5392:  MOVF   FF5,W
5394:  MOVWF  FEE
5396:  IORLW  00
5398:  BNZ   5390
....................  
....................           if(setup.rp) 
539A:  MOVF   xF9,W
539C:  IORWF  xFA,W
539E:  BZ    53A8
....................             rp=0; 
53A0:  MOVLB  2
53A2:  CLRF   x11
53A4:  CLRF   x10
....................             else 
53A6:  BRA    53B0
....................               rp=1; 
53A8:  MOVLB  2
53AA:  CLRF   x11
53AC:  MOVLW  01
53AE:  MOVWF  x10
....................  
....................  
....................       sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
....................               setup.frequency, revstat, current_power, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
53B0:  MOVFF  AC,233
53B4:  MOVFF  AB,232
53B8:  CLRF   x35
53BA:  MOVLW  64
53BC:  MOVWF  x34
53BE:  MOVLB  0
53C0:  CALL   372C
53C4:  MOVFF  02,231
53C8:  MOVFF  01,230
53CC:  MOVFF  AC,233
53D0:  MOVFF  AB,232
53D4:  MOVLB  2
53D6:  CLRF   x35
53D8:  MOVLW  64
53DA:  MOVWF  x34
53DC:  MOVLB  0
53DE:  CALL   372C
53E2:  MOVFF  00,232
53E6:  MOVFF  03,233
53EA:  MOVLW  01
53EC:  MOVLB  1
53EE:  MOVWF  xA6
53F0:  MOVLW  C6
53F2:  MOVWF  xA5
53F4:  MOVLW  DA
53F6:  MOVWF  FF6
53F8:  MOVLW  0D
53FA:  MOVWF  FF7
53FC:  MOVLW  08
53FE:  MOVLB  2
5400:  MOVWF  x34
5402:  MOVLB  0
5404:  CALL   3010
5408:  MOVLW  10
540A:  MOVWF  FE9
540C:  MOVFF  BA,235
5410:  MOVFF  B9,234
5414:  CALL   3038
5418:  MOVLW  E5
541A:  MOVWF  FF6
541C:  MOVLW  0D
541E:  MOVWF  FF7
5420:  MOVLW  06
5422:  MOVLB  2
5424:  MOVWF  x34
5426:  MOVLB  0
5428:  CALL   3010
542C:  MOVLW  01
542E:  MOVWF  FEA
5430:  MOVLW  F1
5432:  MOVWF  FE9
5434:  GOTO   3772
5438:  MOVLW  ED
543A:  MOVWF  FF6
543C:  MOVLW  0D
543E:  MOVWF  FF7
5440:  MOVLW  07
5442:  MOVLB  2
5444:  MOVWF  x34
5446:  MOVLB  0
5448:  CALL   3010
544C:  MOVLW  10
544E:  MOVWF  FE9
5450:  MOVFF  10C,235
5454:  MOVFF  10B,234
5458:  CALL   3038
545C:  MOVLW  F7
545E:  MOVWF  FF6
5460:  MOVLW  0D
5462:  MOVWF  FF7
5464:  MOVLW  05
5466:  MOVLB  2
5468:  MOVWF  x34
546A:  MOVLB  0
546C:  CALL   3010
5470:  MOVLW  10
5472:  MOVWF  FE9
5474:  MOVFF  231,235
5478:  MOVFF  230,234
547C:  CALL   3038
5480:  MOVLW  2E
5482:  MOVLB  2
5484:  MOVWF  x3D
5486:  MOVLB  0
5488:  CALL   2FEE
548C:  MOVLW  10
548E:  MOVWF  FE9
5490:  MOVFF  233,235
5494:  MOVFF  232,234
5498:  CALL   3038
549C:  MOVLW  03
549E:  MOVWF  FF6
54A0:  MOVLW  0E
54A2:  MOVWF  FF7
54A4:  MOVLW  09
54A6:  MOVLB  2
54A8:  MOVWF  x34
54AA:  MOVLB  0
54AC:  CALL   3010
54B0:  MOVFF  AF,234
54B4:  MOVLW  1B
54B6:  MOVLB  2
54B8:  MOVWF  x35
54BA:  MOVLB  0
54BC:  CALL   3188
54C0:  MOVLW  0E
54C2:  MOVWF  FF6
54C4:  MOVLW  0E
54C6:  MOVWF  FF7
54C8:  MOVLW  05
54CA:  MOVLB  2
54CC:  MOVWF  x34
54CE:  MOVLB  0
54D0:  CALL   3010
54D4:  MOVFF  B2,234
54D8:  MOVLW  1B
54DA:  MOVLB  2
54DC:  MOVWF  x35
54DE:  MOVLB  0
54E0:  CALL   3188
54E4:  MOVLW  15
54E6:  MOVWF  FF6
54E8:  MOVLW  0E
54EA:  MOVWF  FF7
54EC:  MOVLW  05
54EE:  MOVLB  2
54F0:  MOVWF  x34
54F2:  MOVLB  0
54F4:  CALL   3010
54F8:  MOVLW  10
54FA:  MOVWF  FE9
54FC:  MOVFF  AE,235
5500:  MOVFF  AD,234
5504:  CALL   3038
5508:  MOVLW  0D
550A:  MOVLB  2
550C:  MOVWF  x3D
550E:  MOVLB  0
5510:  CALL   2FEE
....................       COM1_send_str(buf); 
5514:  MOVLW  01
5516:  MOVLB  2
5518:  MOVWF  x6F
551A:  MOVLW  C6
551C:  MOVWF  x6E
551E:  MOVLB  0
5520:  CALL   223A
....................  
....................       sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u\r" 
....................                 setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
....................                                         setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
....................                                         setup.clock_polarity); 
5524:  MOVLW  14
5526:  ADDWF  xF3,W
5528:  MOVLB  2
552A:  MOVWF  x30
552C:  MOVLW  00
552E:  MOVLB  0
5530:  ADDWFC xF4,W
5532:  MOVLB  2
5534:  MOVWF  x31
5536:  MOVLW  01
5538:  MOVLB  1
553A:  MOVWF  xA6
553C:  MOVLW  C6
553E:  MOVWF  xA5
5540:  MOVLW  20
5542:  MOVWF  FF6
5544:  MOVLW  0E
5546:  MOVWF  FF7
5548:  MOVLW  06
554A:  MOVLB  2
554C:  MOVWF  x34
554E:  MOVLB  0
5550:  CALL   3010
5554:  MOVFF  B7,234
5558:  MOVLW  1B
555A:  MOVLB  2
555C:  MOVWF  x35
555E:  MOVLB  0
5560:  CALL   3188
5564:  MOVLW  28
5566:  MOVWF  FF6
5568:  MOVLW  0E
556A:  MOVWF  FF7
556C:  MOVLW  05
556E:  MOVLB  2
5570:  MOVWF  x34
5572:  MOVLB  0
5574:  CALL   3010
5578:  MOVFF  B5,234
557C:  MOVLW  1B
557E:  MOVLB  2
5580:  MOVWF  x35
5582:  MOVLB  0
5584:  CALL   3188
5588:  MOVLW  2F
558A:  MOVWF  FF6
558C:  MOVLW  0E
558E:  MOVWF  FF7
5590:  MOVLW  05
5592:  MOVLB  2
5594:  MOVWF  x34
5596:  MOVLB  0
5598:  CALL   3010
559C:  MOVFF  B1,234
55A0:  MOVLW  1B
55A2:  MOVLB  2
55A4:  MOVWF  x35
55A6:  MOVLB  0
55A8:  CALL   3188
55AC:  MOVLW  36
55AE:  MOVWF  FF6
55B0:  MOVLW  0E
55B2:  MOVWF  FF7
55B4:  MOVLW  05
55B6:  MOVLB  2
55B8:  MOVWF  x34
55BA:  MOVLB  0
55BC:  CALL   3010
55C0:  MOVLW  10
55C2:  MOVWF  FE9
55C4:  MOVFF  211,235
55C8:  MOVFF  210,234
55CC:  CALL   3038
55D0:  MOVLW  3E
55D2:  MOVWF  FF6
55D4:  MOVLW  0E
55D6:  MOVWF  FF7
55D8:  MOVLW  05
55DA:  MOVLB  2
55DC:  MOVWF  x34
55DE:  MOVLB  0
55E0:  CALL   3010
55E4:  MOVFF  B3,234
55E8:  MOVLW  1B
55EA:  MOVLB  2
55EC:  MOVWF  x35
55EE:  MOVLB  0
55F0:  CALL   3188
55F4:  MOVLW  45
55F6:  MOVWF  FF6
55F8:  MOVLW  0E
55FA:  MOVWF  FF7
55FC:  MOVLW  05
55FE:  MOVLB  2
5600:  MOVWF  x34
5602:  MOVLB  0
5604:  CALL   3010
5608:  MOVFF  B4,234
560C:  MOVLW  1B
560E:  MOVLB  2
5610:  MOVWF  x35
5612:  MOVLB  0
5614:  CALL   3188
5618:  MOVLW  4C
561A:  MOVWF  FF6
561C:  MOVLW  0E
561E:  MOVWF  FF7
5620:  MOVLW  05
5622:  MOVLB  2
5624:  MOVWF  x34
5626:  MOVLB  0
5628:  CALL   3010
562C:  MOVLW  10
562E:  MOVWF  FE9
5630:  MOVFF  231,235
5634:  MOVFF  230,234
5638:  CALL   3038
563C:  MOVLW  54
563E:  MOVWF  FF6
5640:  MOVLW  0E
5642:  MOVWF  FF7
5644:  MOVLW  05
5646:  MOVLB  2
5648:  MOVWF  x34
564A:  MOVLB  0
564C:  CALL   3010
5650:  MOVLW  10
5652:  MOVWF  FE9
5654:  MOVFF  F6,235
5658:  MOVFF  F5,234
565C:  CALL   3038
5660:  MOVLW  5C
5662:  MOVWF  FF6
5664:  MOVLW  0E
5666:  MOVWF  FF7
5668:  MOVLW  05
566A:  MOVLB  2
566C:  MOVWF  x34
566E:  MOVLB  0
5670:  CALL   3010
5674:  MOVLW  10
5676:  MOVWF  FE9
5678:  MOVFF  F8,235
567C:  MOVFF  F7,234
5680:  CALL   3038
5684:  MOVLW  64
5686:  MOVWF  FF6
5688:  MOVLW  0E
568A:  MOVWF  FF7
568C:  MOVLW  05
568E:  MOVLB  2
5690:  MOVWF  x34
5692:  MOVLB  0
5694:  CALL   3010
5698:  MOVFF  B0,234
569C:  MOVLW  1B
569E:  MOVLB  2
56A0:  MOVWF  x35
56A2:  MOVLB  0
56A4:  CALL   3188
56A8:  MOVLW  0D
56AA:  MOVLB  2
56AC:  MOVWF  x3D
56AE:  MOVLB  0
56B0:  CALL   2FEE
....................                                         COM1_send_str(buf); 
56B4:  MOVLW  01
56B6:  MOVLB  2
56B8:  MOVWF  x6F
56BA:  MOVLW  C6
56BC:  MOVWF  x6E
56BE:  MOVLB  0
56C0:  CALL   223A
....................                                          
....................       sprintf(buf, "\r\n\nUT=%u, US=%u\r" setup.UART_Time, setup.UART_Status); // VERSION 3.3 17.1.2016 
56C4:  MOVLW  01
56C6:  MOVLB  1
56C8:  MOVWF  xA6
56CA:  MOVLW  C6
56CC:  MOVWF  xA5
56CE:  MOVLW  6E
56D0:  MOVWF  FF6
56D2:  MOVLW  0E
56D4:  MOVWF  FF7
56D6:  MOVLW  06
56D8:  MOVLB  2
56DA:  MOVWF  x34
56DC:  MOVLB  0
56DE:  CALL   3010
56E2:  MOVFF  FB,234
56E6:  MOVLW  1B
56E8:  MOVLB  2
56EA:  MOVWF  x35
56EC:  MOVLB  0
56EE:  CALL   3188
56F2:  MOVLW  76
56F4:  MOVWF  FF6
56F6:  MOVLW  0E
56F8:  MOVWF  FF7
56FA:  MOVLW  05
56FC:  MOVLB  2
56FE:  MOVWF  x34
5700:  MOVLB  0
5702:  CALL   3010
5706:  MOVFF  FC,234
570A:  MOVLW  1B
570C:  MOVLB  2
570E:  MOVWF  x35
5710:  MOVLB  0
5712:  CALL   3188
5716:  MOVLW  0D
5718:  MOVLB  2
571A:  MOVWF  x3D
571C:  MOVLB  0
571E:  CALL   2FEE
....................       COM1_send_str(buf); 
5722:  MOVLW  01
5724:  MOVLB  2
5726:  MOVWF  x6F
5728:  MOVLW  C6
572A:  MOVWF  x6E
572C:  MOVLB  0
572E:  CALL   223A
....................  
....................       goto get_temp; 
5732:  MOVLB  1
5734:  BRA    4FE6
....................       break; 
5736:  MOVLB  0
5738:  BRA    5778
....................       default: 
....................       	{ 
....................          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
573A:  MOVLB  1
573C:  MOVF   x2E,F
573E:  BNZ   5746
5740:  MOVLB  0
5742:  BRA    5778
5744:  MOVLB  1
....................          COM1_send_str("\r\nFAIL\r\n"); 
5746:  MOVLW  02
5748:  MOVWF  FEA
574A:  MOVLW  17
574C:  MOVWF  FE9
574E:  MOVLW  09
5750:  MOVWF  01
5752:  CLRF   FF7
5754:  MOVLW  00
5756:  MOVLB  0
5758:  CALL   08DA
575C:  TBLRD*-
575E:  TBLRD*+
5760:  MOVFF  FF5,FEE
5764:  DECFSZ 01,F
5766:  BRA    575E
5768:  MOVLW  02
576A:  MOVLB  2
576C:  MOVWF  x6F
576E:  MOVLW  17
5770:  MOVWF  x6E
5772:  MOVLB  0
5774:  CALL   223A
5778:  MOVLB  2
....................          
....................         } 
....................     } 
.................... aaa: 
....................   return; 
....................   } 
577A:  MOVLB  0
577C:  GOTO   5874 (RETURN)
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
57BA:  MOVF   57,W
57BC:  XORLW  00
57BE:  BZ    57CC
57C0:  XORLW  02
57C2:  BZ    57FA
57C4:  XORLW  01
57C6:  BTFSC  FD8.2
57C8:  BRA    5916
57CA:  BRA    5916
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
57CC:  CLRF   58
....................       comm_state = COMM_WAIT_CR; 
57CE:  MOVLW  02
57D0:  MOVWF  57
....................       comm_timeout = 0; 
57D2:  CLRF   xAA
57D4:  CLRF   xA9
....................       if (ttccp_login) 
57D6:  MOVLB  1
57D8:  MOVF   x2E,F
57DA:  BZ    57F6
....................       COM1_send_str("\r>"); 
57DC:  MOVLW  0D
57DE:  MOVWF  xBE
57E0:  MOVLW  3E
57E2:  MOVWF  xBF
57E4:  CLRF   xC0
57E6:  MOVLW  01
57E8:  MOVLB  2
57EA:  MOVWF  x6F
57EC:  MOVLW  BE
57EE:  MOVWF  x6E
57F0:  MOVLB  0
57F2:  CALL   223A
....................       break; 
57F6:  MOVLB  0
57F8:  BRA    5916
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
57FA:  MOVF   34,F
57FC:  BTFSC  FD8.2
57FE:  BRA    58EA
....................         { 
....................         comm_timeout = 0; 
5800:  CLRF   xAA
5802:  CLRF   xA9
....................         chr = COM1_get_chr(); 
5804:  CALL   2A58
5808:  MOVLB  1
580A:  CLRF   xBB
580C:  MOVFF  01,1BA
....................         comm_buf[comm_ridx++] = chr; 
5810:  MOVF   58,W
5812:  INCF   58,F
5814:  CLRF   03
5816:  ADDLW  59
5818:  MOVWF  FE9
581A:  MOVLW  00
581C:  ADDWFC 03,W
581E:  MOVWF  FEA
5820:  MOVFF  1BA,FEF
....................         if (comm_ridx > 70) 
5824:  MOVF   58,W
5826:  SUBLW  46
5828:  BC    5832
....................           { 
....................           comm_state = 0; 
582A:  CLRF   57
....................           break; 
582C:  MOVLB  0
582E:  BRA    5916
5830:  MOVLB  1
....................           } 
....................         if (chr == 13 || chr == ';') 
5832:  MOVF   xBA,W
5834:  SUBLW  0D
5836:  BNZ   583C
5838:  MOVF   xBB,F
583A:  BZ    5846
583C:  MOVF   xBA,W
583E:  SUBLW  3B
5840:  BNZ   58EC
5842:  MOVF   xBB,F
5844:  BNZ   58EC
....................           { 
....................           if (chr == ';') 
5846:  MOVF   xBA,W
5848:  SUBLW  3B
584A:  BNZ   5868
584C:  MOVF   xBB,F
584E:  BNZ   5868
....................             { 
....................             comm_buf[comm_ridx-1] = 13; 
5850:  MOVLW  01
5852:  SUBWF  58,W
5854:  CLRF   03
5856:  ADDLW  59
5858:  MOVWF  FE9
585A:  MOVLW  00
585C:  ADDWFC 03,W
585E:  MOVWF  FEA
5860:  MOVLW  0D
5862:  MOVWF  FEF
....................             comm_ridx = 0; 
5864:  CLRF   58
....................             } 
....................           else 
5866:  BRA    586E
....................             COM1_init(); 
5868:  MOVLB  0
586A:  CALL   0EA6
....................           process_ttccp_commands(); 
586E:  MOVLB  0
5870:  GOTO   3798
....................           if (debug_mode) 
5874:  MOVLB  1
5876:  MOVF   x45,F
5878:  BZ    5884
....................           	if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
587A:  MOVF   x2E,F
587C:  BNZ   5884
587E:  MOVLB  0
5880:  BRA    5916
5882:  MOVLB  1
....................             COM1_send_str("\r\nOK\n"); 
5884:  MOVLW  0D
5886:  MOVWF  xBE
5888:  MOVLW  0A
588A:  MOVWF  xBF
588C:  MOVLW  4F
588E:  MOVWF  xC0
5890:  MOVLW  4B
5892:  MOVWF  xC1
5894:  MOVLW  0A
5896:  MOVWF  xC2
5898:  CLRF   xC3
589A:  MOVLW  01
589C:  MOVLB  2
589E:  MOVWF  x6F
58A0:  MOVLW  BE
58A2:  MOVWF  x6E
58A4:  MOVLB  0
58A6:  CALL   223A
....................           if (ret == 1) 
58AA:  MOVLB  1
58AC:  DECFSZ xBC,W
58AE:  BRA    58DA
58B0:  MOVF   xBD,F
58B2:  BNZ   58DA
....................             { 
.................... 	          if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
58B4:  MOVF   x2E,F
58B6:  BNZ   58BE
58B8:  MOVLB  0
58BA:  BRA    5916
58BC:  MOVLB  1
....................             COM1_send_str("\n\r"); 
58BE:  MOVLW  0A
58C0:  MOVWF  xBE
58C2:  MOVLW  0D
58C4:  MOVWF  xBF
58C6:  CLRF   xC0
58C8:  MOVLW  01
58CA:  MOVLB  2
58CC:  MOVWF  x6F
58CE:  MOVLW  BE
58D0:  MOVWF  x6E
58D2:  MOVLB  0
58D4:  CALL   223A
....................             } 
....................           else 
58D8:  BRA    58EA
....................             COM1_send_str(ttccp_error_message); 
58DA:  MOVLW  01
58DC:  MOVLB  2
58DE:  MOVWF  x6F
58E0:  MOVLW  7A
58E2:  MOVWF  x6E
58E4:  MOVLB  0
58E6:  CALL   223A
58EA:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
58EC:  MOVF   57,W
58EE:  SUBLW  01
58F0:  BC    5912
....................         if (TMR_100MS_COMM_TO) 
58F2:  BTFSS  2C.1
58F4:  BRA    5912
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
58F6:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
58F8:  MOVLB  0
58FA:  INCF   xA9,F
58FC:  BTFSC  FD8.2
58FE:  INCF   xAA,F
5900:  MOVF   xAA,W
5902:  SUBLW  26
5904:  BC    5912
5906:  XORLW  FF
5908:  BNZ   5910
590A:  MOVF   xA9,W
590C:  SUBLW  10
590E:  BC    5912
....................             comm_state = 0; 
5910:  CLRF   57
....................           } 
....................       break; 
5912:  MOVLB  0
5914:  BRA    5916
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
5916:  GOTO   6A56 (RETURN)
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
....................     { 
*
68B2:  MOVF   57,W
68B4:  ADDLW  FC
68B6:  BTFSC  FD8.0
68B8:  BRA    69FA
68BA:  ADDLW  04
68BC:  GOTO   69FE
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
68C0:  CLRF   58
....................       comm_state++; 
68C2:  INCF   57,F
....................       break; 
68C4:  BRA    69FA
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................       if (COM1_rcnt) 
68C6:  MOVF   34,F
68C8:  BZ    68F4
....................         if ((chr = COM1_get_chr()) == '$') 
68CA:  CALL   2A58
68CE:  MOVLB  1
68D0:  CLRF   xBB
68D2:  MOVFF  01,1BA
68D6:  MOVF   xBA,W
68D8:  SUBLW  24
68DA:  BNZ   68EA
68DC:  MOVF   xBB,F
68DE:  BNZ   68EA
....................           { 
....................           comm_state++; 
68E0:  INCF   57,F
....................           comm_timeout = 0; 
68E2:  MOVLB  0
68E4:  CLRF   xAA
68E6:  CLRF   xA9
....................           } 
....................         else 
68E8:  BRA    68F4
....................           inc_dec(chr); 
68EA:  MOVFF  1BA,1D1
68EE:  MOVLB  0
68F0:  GOTO   59A2
....................       break; 
68F4:  BRA    69FA
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
68F6:  MOVF   34,F
68F8:  BTFSC  FD8.2
68FA:  BRA    69CE
....................         { 
....................         comm_timeout = 0; 
68FC:  CLRF   xAA
68FE:  CLRF   xA9
....................         chr = COM1_get_chr(); 
6900:  CALL   2A58
6904:  MOVLB  1
6906:  CLRF   xBB
6908:  MOVFF  01,1BA
....................         comm_buf[comm_ridx++] = chr; 
690C:  MOVF   58,W
690E:  INCF   58,F
6910:  CLRF   03
6912:  ADDLW  59
6914:  MOVWF  FE9
6916:  MOVLW  00
6918:  ADDWFC 03,W
691A:  MOVWF  FEA
691C:  MOVFF  1BA,FEF
....................         if (comm_ridx > 70) 
6920:  MOVF   58,W
6922:  SUBLW  46
6924:  BC    692E
....................           { 
....................           comm_state = 0; 
6926:  CLRF   57
....................           break; 
6928:  MOVLB  0
692A:  BRA    69FA
692C:  MOVLB  1
....................           } 
....................         if (chr == 13) 
692E:  MOVF   xBA,W
6930:  SUBLW  0D
6932:  BNZ   6990
6934:  MOVF   xBB,F
6936:  BNZ   6990
....................           { 
....................           ret = process_dollar_commands(); 
6938:  MOVLB  0
693A:  BRA    61D0
693C:  MOVLB  1
693E:  CLRF   xBD
6940:  MOVFF  01,1BC
....................           if (ret == 1) 
6944:  DECFSZ xBC,W
6946:  BRA    694C
6948:  MOVF   xBD,F
694A:  BNZ   694C
....................             { 
.................... //            store_setup(); 
.................... //            update_all(); 
....................             } 
....................           if (ret != 255) 
694C:  INCFSZ xBC,W
694E:  BRA    6954
6950:  MOVF   xBD,F
6952:  BZ    6986
....................             COM1_send_str("\r\nOK\r\n*"); 
6954:  MOVLW  01
6956:  MOVWF  FEA
6958:  MOVLW  BE
695A:  MOVWF  FE9
695C:  MOVLW  08
695E:  MOVWF  01
6960:  CLRF   FF7
6962:  MOVLW  00
6964:  MOVLB  0
6966:  CALL   098E
696A:  TBLRD*-
696C:  TBLRD*+
696E:  MOVFF  FF5,FEE
6972:  DECFSZ 01,F
6974:  BRA    696C
6976:  MOVLW  01
6978:  MOVLB  2
697A:  MOVWF  x6F
697C:  MOVLW  BE
697E:  MOVWF  x6E
6980:  MOVLB  0
6982:  CALL   223A
....................           COM1_init(); 
6986:  MOVLB  0
6988:  CALL   0EA6
....................           } 
....................         else if (chr == 27) 
698C:  BRA    69CE
698E:  MOVLB  1
6990:  MOVF   xBA,W
6992:  SUBLW  1B
6994:  BNZ   69D0
6996:  MOVF   xBB,F
6998:  BNZ   69D0
....................           { 
....................           COM1_send_str("\r\n\nBREAK\r\n"); 
699A:  MOVLW  01
699C:  MOVWF  FEA
699E:  MOVLW  C6
69A0:  MOVWF  FE9
69A2:  MOVLW  0B
69A4:  MOVWF  01
69A6:  CLRF   FF7
69A8:  MOVLW  00
69AA:  MOVLB  0
69AC:  CALL   09A6
69B0:  TBLRD*-
69B2:  TBLRD*+
69B4:  MOVFF  FF5,FEE
69B8:  DECFSZ 01,F
69BA:  BRA    69B2
69BC:  MOVLW  01
69BE:  MOVLB  2
69C0:  MOVWF  x6F
69C2:  MOVLW  C6
69C4:  MOVWF  x6E
69C6:  MOVLB  0
69C8:  CALL   223A
....................           comm_state = 0; 
69CC:  CLRF   57
69CE:  MOVLB  1
....................           } 
....................         } 
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
69D0:  MOVF   57,W
69D2:  SUBLW  01
69D4:  BC    69F6
....................         if (TMR_100MS_COMM_TO) 
69D6:  BTFSS  2C.1
69D8:  BRA    69F6
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
69DA:  BCF    2C.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
69DC:  MOVLB  0
69DE:  INCF   xA9,F
69E0:  BTFSC  FD8.2
69E2:  INCF   xAA,F
69E4:  MOVF   xAA,W
69E6:  SUBLW  26
69E8:  BC    69F6
69EA:  XORLW  FF
69EC:  BNZ   69F4
69EE:  MOVF   xA9,W
69F0:  SUBLW  10
69F2:  BC    69F6
....................             comm_state = 0; 
69F4:  CLRF   57
....................           } 
....................       break; 
69F6:  MOVLB  0
69F8:  BRA    69FA
....................     case COMM_DELAY: 
....................       break; 
....................     } 
....................   } 
69FA:  GOTO   6A56 (RETURN)
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   UINT chr; 
....................  
....................   if (OERR) 
*
6A20:  BTFSS  FAB.1
6A22:  BRA    6A34
....................     { 
....................     OERR = 0; 
6A24:  BCF    FAB.1
....................     CREN = 0; 
6A26:  BCF    FAB.4
....................     delay_us(5); 
6A28:  MOVLW  06
6A2A:  MOVWF  00
6A2C:  DECFSZ 00,F
6A2E:  BRA    6A2C
6A30:  NOP   
....................     CREN = 1; 
6A32:  BSF    FAB.4
....................     } 
....................   if (FERR) 
6A34:  BTFSS  FAB.2
6A36:  BRA    6A42
....................     { 
....................     FERR = 0; 
6A38:  BCF    FAB.2
....................     chr = RCREG1; 
6A3A:  MOVLB  1
6A3C:  CLRF   xB9
6A3E:  MOVFF  FAE,1B8
....................     } 
....................   if (ttccp) 
6A42:  MOVLB  1
6A44:  MOVF   x44,F
6A46:  BZ    6A52
....................     ttccp_handler(); 
6A48:  MOVLB  0
6A4A:  GOTO   57BA
....................   else 
6A4E:  MOVLB  0
6A50:  BRA    6A56
....................     dollar_handler(); 
6A52:  MOVLB  0
6A54:  BRA    68B2
....................   } 
6A56:  GOTO   6C88 (RETURN)
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 FFWR 
.................... //============================================================================= 
.................... typedef struct { 
....................   UINT analog1; 
....................   UINT Pout1; 
.................... } POWER_TRANS1; 
....................  
.................... const POWER_TRANS1 Ptrans1[] = { 
....................  
.................... //  dec    vmeas    Pout1 
.................... {  80  ,  20  },//  0.29V  ,0 
.................... {  102  ,  21  },//  0.33V  ,1 
.................... {  118  ,  22  },//  0.38V  ,2 
.................... {  127  ,  23  },//  0.41V  ,3 
.................... {  143  ,  24  },//  0.46V  ,4 
.................... {  167  ,  25  },//  0.54V  ,5 
.................... {  183  ,  26  },//  0.59V  ,6 
.................... {  208  ,  27  },//  0.67V  ,7 
.................... {  226  ,  28  },//  0.73V  ,8 
.................... {  257  ,  29  },//  0.83V  ,9 
.................... {  288  ,  30  },//  0.93V  ,10 
.................... {  322  ,  31  },//  1.04V  ,11 
.................... {  360  ,  32  },//  1.16V  ,12 
.................... {  400  ,  33  },//  1.29V  ,13 
.................... {  446  ,  34  },//  1.44V  ,14 
.................... {  505  ,  35  },//  1.63V  ,15 
.................... {  564  ,  36  },//  1.82V  ,16 
.................... {  645  ,  37  },//  2.08V  ,17 
.................... {  722  ,  38  },//  2.33V  ,18 
.................... {  818  ,  39  },//  2.64V  ,19 
.................... {  992  ,  40  },//  3.2V  ,20 
.................... {  1005,   41  }, //  3.2V    ,21 
.................... {   1023,   55  } 
.................... }; 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
1790:  BCF    F8A.2
....................   delay_us(10); 
1792:  MOVLW  0C
1794:  MOVWF  00
1796:  DECFSZ 00,F
1798:  BRA    1796
179A:  BRA    179C
179C:  NOP   
....................   while (length--) 
....................     { 
179E:  MOVLB  2
17A0:  MOVF   x45,W
17A2:  DECF   x45,F
17A4:  XORLW  00
17A6:  BZ    17EC
....................     xbyte = *data++; 
17A8:  MOVFF  247,03
17AC:  MOVF   x46,W
17AE:  INCF   x46,F
17B0:  BTFSC  FD8.2
17B2:  INCF   x47,F
17B4:  MOVWF  FE9
17B6:  MOVFF  03,FEA
17BA:  MOVFF  FEF,248
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
17BE:  CLRF   x49
17C0:  MOVF   x49,W
17C2:  SUBLW  07
17C4:  BNC   17EA
....................       { 
....................       if (xbyte & 0x80) 
17C6:  BTFSS  x48.7
17C8:  BRA    17CE
....................         output_high(D2A_MOSI); 
17CA:  BSF    F8C.4
....................       else 
17CC:  BRA    17D0
....................         output_low(D2A_MOSI); 
17CE:  BCF    F8C.4
....................       delay_us(1); 
17D0:  BRA    17D2
17D2:  BRA    17D4
....................       output_high(D2A_SCLK); 
17D4:  BSF    F8C.0
....................       delay_us(1); 
17D6:  BRA    17D8
17D8:  BRA    17DA
....................       output_low(D2A_SCLK); 
17DA:  BCF    F8C.0
....................       delay_us(1); 
17DC:  BRA    17DE
17DE:  BRA    17E0
....................       } 
17E0:  MOVF   x49,W
17E2:  INCF   x49,F
17E4:  BCF    FD8.0
17E6:  RLCF   x48,F
17E8:  BRA    17C0
....................     } 
17EA:  BRA    17A0
....................   delay_us(10); 
17EC:  MOVLW  0C
17EE:  MOVWF  00
17F0:  DECFSZ 00,F
17F2:  BRA    17F0
17F4:  BRA    17F6
17F6:  NOP   
....................   output_high(CSN); 
17F8:  BSF    F8A.2
....................   } 
17FA:  MOVLB  0
17FC:  RETURN 0
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
60C4:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
60C6:  MOVLB  2
60C8:  CLRF   x0C
60CA:  MOVF   x0C,W
60CC:  SUBLW  07
60CE:  BNC   6106
....................     { 
....................     if (addr & 0x80) 
60D0:  BTFSS  x08.7
60D2:  BRA    60D8
....................       output_high(D2A_MOSI); 
60D4:  BSF    F8C.4
....................     else 
60D6:  BRA    60DA
....................       output_low(D2A_MOSI); 
60D8:  BCF    F8C.4
....................     delay_us(5); 
60DA:  MOVLW  06
60DC:  MOVWF  00
60DE:  DECFSZ 00,F
60E0:  BRA    60DE
60E2:  NOP   
....................     output_high(D2A_SCLK); 
60E4:  BSF    F8C.0
....................     delay_us(5); 
60E6:  MOVLW  06
60E8:  MOVWF  00
60EA:  DECFSZ 00,F
60EC:  BRA    60EA
60EE:  NOP   
....................     output_low(D2A_SCLK); 
60F0:  BCF    F8C.0
....................     delay_us(5); 
60F2:  MOVLW  06
60F4:  MOVWF  00
60F6:  DECFSZ 00,F
60F8:  BRA    60F6
60FA:  NOP   
....................     } 
60FC:  MOVF   x0C,W
60FE:  INCF   x0C,F
6100:  BCF    FD8.0
6102:  RLCF   x08,F
6104:  BRA    60CA
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
6106:  CLRF   x0B
6108:  CLRF   x0C
610A:  MOVF   x0C,W
610C:  SUBLW  07
610E:  BNC   6154
....................     { 
....................     xbyte <<= 1; 
6110:  BCF    FD8.0
6112:  RLCF   x0B,F
....................     delay_us(5); 
6114:  MOVLW  06
6116:  MOVWF  00
6118:  DECFSZ 00,F
611A:  BRA    6118
611C:  NOP   
....................     output_high(D2A_SCLK); 
611E:  BSF    F8C.0
....................     delay_us(3); 
6120:  MOVLW  03
6122:  MOVWF  00
6124:  DECFSZ 00,F
6126:  BRA    6124
6128:  BRA    612A
....................     if (input(D2A_MISO)) 
612A:  BTFSS  F83.1
612C:  BRA    613A
....................       { 
....................       xbyte |= 1; 
612E:  BSF    x0B.0
....................       delay_us(2); 
6130:  MOVLW  02
6132:  MOVWF  00
6134:  DECFSZ 00,F
6136:  BRA    6134
6138:  NOP   
....................       } 
....................     delay_us(2); 
613A:  MOVLW  02
613C:  MOVWF  00
613E:  DECFSZ 00,F
6140:  BRA    613E
6142:  NOP   
....................     output_low(D2A_SCLK); 
6144:  BCF    F8C.0
....................     delay_us(3); 
6146:  MOVLW  03
6148:  MOVWF  00
614A:  DECFSZ 00,F
614C:  BRA    614A
614E:  BRA    6150
....................     } 
6150:  INCF   x0C,F
6152:  BRA    610A
....................   *data = xbyte; 
6154:  MOVFF  209,FE9
6158:  MOVFF  20A,FEA
615C:  MOVFF  20B,FEF
....................   output_high(CSN); 
6160:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
6162:  BCF    F8C.0
....................   return xbyte; 
6164:  MOVFF  20B,01
....................   } 
6168:  MOVLB  0
616A:  GOTO   65A8 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1B60:  MOVFF  24C,258
1B64:  MOVFF  24B,257
1B68:  MOVFF  24A,256
1B6C:  MOVFF  249,255
1B70:  BRA    1890
1B72:  MOVFF  03,250
1B76:  MOVFF  02,24F
1B7A:  MOVFF  01,24E
1B7E:  MOVFF  00,24D
....................   temp = bitspersec / 240000000.0; 
1B82:  MOVFF  250,258
1B86:  MOVFF  24F,257
1B8A:  MOVFF  24E,256
1B8E:  MOVFF  24D,255
1B92:  MOVLW  C0
1B94:  MOVLB  2
1B96:  MOVWF  x5C
1B98:  MOVLW  E1
1B9A:  MOVWF  x5B
1B9C:  MOVLW  64
1B9E:  MOVWF  x5A
1BA0:  MOVLW  9A
1BA2:  MOVWF  x59
1BA4:  MOVLB  0
1BA6:  RCALL  18CA
1BA8:  MOVFF  03,254
1BAC:  MOVFF  02,253
1BB0:  MOVFF  01,252
1BB4:  MOVFF  00,251
....................   temp *= 65536.0; 
1BB8:  MOVFF  254,258
1BBC:  MOVFF  253,257
1BC0:  MOVFF  252,256
1BC4:  MOVFF  251,255
1BC8:  MOVLB  2
1BCA:  CLRF   x5C
1BCC:  CLRF   x5B
1BCE:  CLRF   x5A
1BD0:  MOVLW  8F
1BD2:  MOVWF  x59
1BD4:  MOVLB  0
1BD6:  RCALL  1A28
1BD8:  MOVFF  03,254
1BDC:  MOVFF  02,253
1BE0:  MOVFF  01,252
1BE4:  MOVFF  00,251
....................   temp *= 65536.0; 
1BE8:  MOVFF  254,258
1BEC:  MOVFF  253,257
1BF0:  MOVFF  252,256
1BF4:  MOVFF  251,255
1BF8:  MOVLB  2
1BFA:  CLRF   x5C
1BFC:  CLRF   x5B
1BFE:  CLRF   x5A
1C00:  MOVLW  8F
1C02:  MOVWF  x59
1C04:  MOVLB  0
1C06:  RCALL  1A28
1C08:  MOVFF  03,254
1C0C:  MOVFF  02,253
1C10:  MOVFF  01,252
1C14:  MOVFF  00,251
....................   return (ULONG)temp - 1; 
1C18:  MOVFF  254,258
1C1C:  MOVFF  253,257
1C20:  MOVFF  252,256
1C24:  MOVFF  251,255
1C28:  RCALL  1B1E
1C2A:  MOVFF  03,258
1C2E:  MOVFF  02,257
1C32:  MOVFF  01,256
1C36:  MOVFF  00,255
1C3A:  MOVLW  01
1C3C:  MOVLB  2
1C3E:  SUBWF  00,W
1C40:  MOVWF  00
1C42:  MOVLW  00
1C44:  SUBWFB 01,W
1C46:  MOVWF  01
1C48:  MOVLW  00
1C4A:  SUBWFB 02,W
1C4C:  MOVWF  02
1C4E:  MOVLW  00
1C50:  SUBWFB 03,W
1C52:  MOVWF  03
....................   } 
1C54:  MOVLB  0
1C56:  RETURN 0
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
5984:  MOVFF  1D4,1D6
....................   buf[1] = value; 
5988:  MOVFF  1D5,1D7
....................   send_FPGA_command(2, buf); 
598C:  MOVLW  02
598E:  MOVLB  2
5990:  MOVWF  x45
5992:  MOVLW  01
5994:  MOVWF  x47
5996:  MOVLW  D6
5998:  MOVWF  x46
599A:  MOVLB  0
599C:  CALL   1790
....................   } 
59A0:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
6034:  MOVLB  2
6036:  CLRF   x1A
6038:  CLRF   x19
603A:  MOVFF  20B,218
603E:  MOVFF  20A,217
6042:  MOVFF  21A,24D
6046:  MOVFF  219,24C
604A:  MOVFF  20B,24B
604E:  MOVFF  20A,24A
6052:  CLRF   x51
6054:  CLRF   x50
6056:  MOVLW  27
6058:  MOVWF  x4F
605A:  MOVLW  10
605C:  MOVWF  x4E
605E:  MOVLB  0
6060:  CALL   12E8
6064:  MOVFF  03,21A
6068:  MOVFF  02,219
606C:  MOVFF  01,218
6070:  MOVFF  00,217
6074:  MOVFF  03,24C
6078:  MOVFF  02,24B
607C:  MOVFF  01,24A
6080:  MOVFF  00,249
6084:  CALL   1B60
6088:  MOVFF  03,216
608C:  MOVFF  02,215
6090:  MOVFF  01,214
6094:  MOVFF  00,213
....................   buf[0] = 2; 
6098:  MOVLW  02
609A:  MOVLB  2
609C:  MOVWF  x0C
....................   buf[1] = make8(bitf, 0); 
609E:  MOVFF  213,20D
....................   buf[2] = make8(bitf, 1); 
60A2:  MOVFF  214,20E
....................   buf[3] = make8(bitf, 2); 
60A6:  MOVFF  215,20F
....................   buf[4] = make8(bitf, 3); 
60AA:  MOVFF  216,210
....................   send_FPGA_command(5, buf); 
60AE:  MOVLW  05
60B0:  MOVWF  x45
60B2:  MOVLW  02
60B4:  MOVWF  x47
60B6:  MOVLW  0C
60B8:  MOVWF  x46
60BA:  MOVLB  0
60BC:  CALL   1790
....................   } 
60C0:  GOTO   6562 (RETURN)
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 0; 
*
17FE:  MOVLB  2
1800:  CLRF   x38
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
1802:  MOVLB  0
1804:  SWAPF  xB0,W
1806:  MOVWF  00
1808:  MOVLW  F0
180A:  ANDWF  00,F
180C:  MOVF   00,W
180E:  IORWF  xAF,W
1810:  MOVLB  2
1812:  MOVWF  x41
1814:  MOVLB  0
1816:  SWAPF  xB1,W
1818:  MOVWF  00
181A:  RLCF   00,F
181C:  MOVLW  E0
181E:  ANDWF  00,F
1820:  MOVF   00,W
1822:  MOVLB  2
1824:  IORWF  x41,F
1826:  MOVLB  0
1828:  SWAPF  xB5,W
182A:  MOVWF  00
182C:  RLCF   00,F
182E:  RLCF   00,F
1830:  MOVLW  C0
1832:  ANDWF  00,F
1834:  MOVF   00,W
1836:  MOVLB  2
1838:  IORWF  x41,F
183A:  CLRF   00
183C:  MOVLB  0
183E:  BTFSC  xB7.0
1840:  BSF    00.7
1842:  MOVF   00,W
1844:  MOVLB  2
1846:  IORWF  x41,W
1848:  MOVWF  x39
....................   send_FPGA_command(2, buf); 
184A:  MOVLW  02
184C:  MOVWF  x45
184E:  MOVWF  x47
1850:  MOVLW  38
1852:  MOVWF  x46
1854:  MOVLB  0
1856:  RCALL  1790
....................   } 
1858:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   buf[0] = 6; 
185A:  MOVLW  06
185C:  MOVLB  2
185E:  MOVWF  x38
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
1860:  BCF    FD8.0
1862:  MOVLB  0
1864:  RLCF   xB3,W
1866:  IORWF  xB2,W
1868:  MOVLB  2
186A:  MOVWF  x41
186C:  MOVLB  0
186E:  RLCF   xB4,W
1870:  MOVWF  00
1872:  RLCF   00,F
1874:  MOVLW  FC
1876:  ANDWF  00,F
1878:  MOVF   00,W
187A:  MOVLB  2
187C:  IORWF  x41,W
187E:  MOVWF  x39
....................   send_FPGA_command(2, buf); 
1880:  MOVLW  02
1882:  MOVWF  x45
1884:  MOVWF  x47
1886:  MOVLW  38
1888:  MOVWF  x46
188A:  MOVLB  0
188C:  RCALL  1790
....................   } 
188E:  RETURN 0
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1C58:  MOVLB  2
1C5A:  CLRF   x48
1C5C:  CLRF   x47
1C5E:  MOVFF  AC,246
1C62:  MOVFF  AB,245
1C66:  MOVFF  248,24D
1C6A:  MOVFF  247,24C
1C6E:  MOVFF  AC,24B
1C72:  MOVFF  AB,24A
1C76:  CLRF   x51
1C78:  CLRF   x50
1C7A:  MOVLW  27
1C7C:  MOVWF  x4F
1C7E:  MOVLW  10
1C80:  MOVWF  x4E
1C82:  MOVLB  0
1C84:  CALL   12E8
1C88:  MOVFF  03,248
1C8C:  MOVFF  02,247
1C90:  MOVFF  01,246
1C94:  MOVFF  00,245
1C98:  MOVFF  03,24C
1C9C:  MOVFF  02,24B
1CA0:  MOVFF  01,24A
1CA4:  MOVFF  00,249
1CA8:  RCALL  1B60
1CAA:  MOVFF  03,244
1CAE:  MOVFF  02,243
1CB2:  MOVFF  01,242
1CB6:  MOVFF  00,241
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1CBA:  MOVLW  02
1CBC:  MOVLB  2
1CBE:  MOVWF  x38
1CC0:  MOVFF  241,239
....................   send_FPGA_command(2, buf); delay_ms(10); 
1CC4:  MOVLW  02
1CC6:  MOVWF  x45
1CC8:  MOVWF  x47
1CCA:  MOVLW  38
1CCC:  MOVWF  x46
1CCE:  MOVLB  0
1CD0:  RCALL  1790
1CD2:  MOVLW  0A
1CD4:  MOVLB  2
1CD6:  MOVWF  x45
1CD8:  MOVLB  0
1CDA:  CALL   0F20
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1CDE:  MOVLW  03
1CE0:  MOVLB  2
1CE2:  MOVWF  x38
1CE4:  MOVFF  242,239
....................   send_FPGA_command(2, buf); delay_ms(10); 
1CE8:  MOVLW  02
1CEA:  MOVWF  x45
1CEC:  MOVWF  x47
1CEE:  MOVLW  38
1CF0:  MOVWF  x46
1CF2:  MOVLB  0
1CF4:  RCALL  1790
1CF6:  MOVLW  0A
1CF8:  MOVLB  2
1CFA:  MOVWF  x45
1CFC:  MOVLB  0
1CFE:  CALL   0F20
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1D02:  MOVLW  04
1D04:  MOVLB  2
1D06:  MOVWF  x38
1D08:  MOVFF  243,239
....................   send_FPGA_command(2, buf); delay_ms(10); 
1D0C:  MOVLW  02
1D0E:  MOVWF  x45
1D10:  MOVWF  x47
1D12:  MOVLW  38
1D14:  MOVWF  x46
1D16:  MOVLB  0
1D18:  RCALL  1790
1D1A:  MOVLW  0A
1D1C:  MOVLB  2
1D1E:  MOVWF  x45
1D20:  MOVLB  0
1D22:  CALL   0F20
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1D26:  MOVLW  05
1D28:  MOVLB  2
1D2A:  MOVWF  x38
1D2C:  MOVFF  244,239
....................   send_FPGA_command(2, buf); delay_ms(10); 
1D30:  MOVLW  02
1D32:  MOVWF  x45
1D34:  MOVWF  x47
1D36:  MOVLW  38
1D38:  MOVWF  x46
1D3A:  MOVLB  0
1D3C:  RCALL  1790
1D3E:  MOVLW  0A
1D40:  MOVLB  2
1D42:  MOVWF  x45
1D44:  MOVLB  0
1D46:  CALL   0F20
....................   } 
1D4A:  RETURN 0
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     write_eeprom(addr++, *data++); 
*
3204:  MOVLB  2
3206:  MOVF   x35,W
3208:  MOVWF  03
320A:  MOVF   x34,W
320C:  BTFSC  FD8.2
320E:  DECF   x35,F
3210:  DECF   x34,F
3212:  IORWF  03,W
3214:  BZ    326E
3216:  MOVF   x31,W
3218:  MOVWF  03
321A:  MOVF   x30,W
321C:  INCF   x30,F
321E:  BTFSC  FD8.2
3220:  INCF   x31,F
3222:  MOVWF  x36
3224:  MOVFF  03,237
3228:  MOVF   x33,W
322A:  MOVWF  03
322C:  MOVF   x32,W
322E:  INCF   x32,F
3230:  BTFSC  FD8.2
3232:  INCF   x33,F
3234:  MOVWF  FE9
3236:  MOVFF  03,FEA
323A:  MOVFF  FEF,238
323E:  MOVF   FF2,W
3240:  MOVWF  00
3242:  BCF    FF2.7
3244:  MOVFF  236,FA9
3248:  MOVFF  238,FA8
324C:  BCF    FA6.6
324E:  BCF    FA6.7
3250:  BSF    FA6.2
3252:  MOVLB  F
3254:  MOVLW  55
3256:  MOVWF  FA7
3258:  MOVLW  AA
325A:  MOVWF  FA7
325C:  BSF    FA6.1
325E:  BTFSC  FA6.1
3260:  BRA    325E
3262:  BCF    FA6.2
3264:  MOVF   00,W
3266:  IORWF  FF2,F
3268:  MOVLB  0
326A:  BRA    3204
326C:  MOVLB  2
....................   } 
326E:  MOVLB  0
3270:  GOTO   3298 (RETURN)
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
....................     *data++ = read_eeprom(addr++); 
*
0F4A:  MOVLB  2
0F4C:  MOVF   x35,W
0F4E:  MOVWF  03
0F50:  MOVF   x34,W
0F52:  BTFSC  FD8.2
0F54:  DECF   x35,F
0F56:  DECF   x34,F
0F58:  IORWF  03,W
0F5A:  BZ    0F9A
0F5C:  MOVF   x33,W
0F5E:  MOVWF  03
0F60:  MOVF   x32,W
0F62:  INCF   x32,F
0F64:  BTFSC  FD8.2
0F66:  INCF   x33,F
0F68:  MOVWF  FE9
0F6A:  MOVFF  03,FEA
0F6E:  MOVF   x31,W
0F70:  MOVWF  03
0F72:  MOVF   x30,W
0F74:  INCF   x30,F
0F76:  BTFSC  FD8.2
0F78:  INCF   x31,F
0F7A:  MOVWF  x38
0F7C:  MOVFF  03,239
0F80:  MOVFF  FF2,23A
0F84:  BCF    FF2.7
0F86:  MOVFF  238,FA9
0F8A:  BCF    FA6.6
0F8C:  BCF    FA6.7
0F8E:  BSF    FA6.0
0F90:  MOVF   FA8,W
0F92:  BTFSC  x3A.7
0F94:  BSF    FF2.7
0F96:  MOVWF  FEF
0F98:  BRA    0F4C
....................   } 
0F9A:  MOVLB  0
0F9C:  GOTO   0FD2 (RETURN)
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
3274:  MOVLB  1
3276:  MOVF   x01,W
3278:  SUBLW  9F
327A:  BNZ   329A
327C:  MOVF   x02,W
327E:  SUBLW  0B
3280:  BNZ   329A
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
3282:  MOVLB  2
3284:  CLRF   x31
3286:  CLRF   x30
3288:  CLRF   x33
328A:  MOVLW  AB
328C:  MOVWF  x32
328E:  CLRF   x35
3290:  MOVLW  56
3292:  MOVWF  x34
3294:  MOVLB  0
3296:  BRA    3204
3298:  MOVLB  1
....................   allow_write = 0; 
329A:  CLRF   x02
329C:  CLRF   x01
....................   } 
329E:  MOVLB  0
32A0:  RETURN 0
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0FBC:  MOVLB  2
0FBE:  CLRF   x31
0FC0:  CLRF   x30
0FC2:  CLRF   x33
0FC4:  MOVLW  AB
0FC6:  MOVWF  x32
0FC8:  CLRF   x35
0FCA:  MOVLW  56
0FCC:  MOVWF  x34
0FCE:  MOVLB  0
0FD0:  BRA    0F4A
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0FD2:  INCFSZ xB2,W
0FD4:  BRA    0FD8
0FD6:  BRA    0FDC
0FD8:  INCFSZ xB3,W
0FDA:  BRA    0FEC
....................     memset(&setup, 0, sizeof(setup)); 
0FDC:  CLRF   FEA
0FDE:  MOVLW  AB
0FE0:  MOVWF  FE9
0FE2:  CLRF   00
0FE4:  CLRF   02
0FE6:  MOVLW  56
0FE8:  MOVWF  01
0FEA:  BRA    0FA0
....................   } 
0FEC:  RETURN 0
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
32A2:  MOVLB  2
32A4:  CLRF   x35
32A6:  CLRF   x34
32A8:  MOVF   x35,F
32AA:  BNZ   335E
32AC:  MOVF   x34,W
32AE:  SUBLW  13
32B0:  BNC   335E
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
32B2:  RLCF   x34,W
32B4:  MOVWF  x36
32B6:  RLCF   x35,W
32B8:  MOVWF  x37
32BA:  RLCF   x36,F
32BC:  RLCF   x37,F
32BE:  MOVLW  FC
32C0:  ANDWF  x36,F
32C2:  MOVFF  237,03
32C6:  MOVF   x36,W
32C8:  MOVLB  0
32CA:  CALL   09C2
32CE:  TBLRD*+
32D0:  MOVFF  FF5,03
32D4:  MOVWF  01
32D6:  MOVF   03,W
32D8:  MOVLB  2
32DA:  SUBWF  x33,W
32DC:  BNC   3356
32DE:  BNZ   32E6
32E0:  MOVF   01,W
32E2:  SUBWF  x32,W
32E4:  BNC   3356
32E6:  MOVLW  01
32E8:  ADDWF  x34,W
32EA:  MOVWF  x38
32EC:  MOVLW  00
32EE:  ADDWFC x35,W
32F0:  MOVWF  x39
32F2:  RLCF   x38,F
32F4:  RLCF   x39,F
32F6:  RLCF   x38,F
32F8:  RLCF   x39,F
32FA:  MOVLW  FC
32FC:  ANDWF  x38,F
32FE:  MOVFF  239,03
3302:  MOVF   x38,W
3304:  MOVLB  0
3306:  CALL   09C2
330A:  TBLRD*+
330C:  MOVFF  FF5,03
3310:  MOVWF  01
3312:  MOVLB  2
3314:  MOVF   x33,W
3316:  SUBWF  03,W
3318:  BNC   3356
331A:  BNZ   3322
331C:  MOVF   01,W
331E:  SUBWF  x32,W
3320:  BC    3356
....................     return Ptrans[idx].Pout; 
3322:  RLCF   x34,W
3324:  MOVWF  x36
3326:  RLCF   x35,W
3328:  MOVWF  x37
332A:  RLCF   x36,F
332C:  RLCF   x37,F
332E:  MOVLW  FC
3330:  ANDWF  x36,F
3332:  MOVLW  02
3334:  ADDWF  x36,W
3336:  MOVWF  01
3338:  MOVLW  00
333A:  ADDWFC x37,W
333C:  MOVWF  03
333E:  MOVF   01,W
3340:  MOVLB  0
3342:  CALL   09C2
3346:  TBLRD*+
3348:  MOVFF  FF5,03
334C:  MOVWF  01
334E:  MOVFF  03,02
3352:  BRA    3364
3354:  MOVLB  2
....................   } 
3356:  INCF   x34,F
3358:  BTFSC  FD8.2
335A:  INCF   x35,F
335C:  BRA    32A8
....................   return 0; 
335E:  MOVLW  00
3360:  MOVWF  01
3362:  MOVWF  02
3364:  MOVLB  0
....................   } 
3366:  GOTO   4856 (RETURN)
....................  
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 
.................... //============================================================================= 
.................... UINT convert_power1(UINT analog)// FFWR POWER 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
1222:  MOVLB  2
1224:  CLRF   x37
1226:  CLRF   x36
1228:  MOVF   x37,F
122A:  BNZ   12DE
122C:  MOVF   x36,W
122E:  SUBLW  13
1230:  BNC   12DE
....................     { 
....................   if (analog >= Ptrans1[idx].analog1 && analog < Ptrans1[idx+1].analog1) 
1232:  RLCF   x36,W
1234:  MOVWF  x38
1236:  RLCF   x37,W
1238:  MOVWF  x39
123A:  RLCF   x38,F
123C:  RLCF   x39,F
123E:  MOVLW  FC
1240:  ANDWF  x38,F
1242:  MOVFF  239,03
1246:  MOVF   x38,W
1248:  MOVLB  0
124A:  CALL   0A22
124E:  TBLRD*+
1250:  MOVFF  FF5,03
1254:  MOVWF  01
1256:  MOVF   03,W
1258:  MOVLB  2
125A:  SUBWF  x35,W
125C:  BNC   12D6
125E:  BNZ   1266
1260:  MOVF   01,W
1262:  SUBWF  x34,W
1264:  BNC   12D6
1266:  MOVLW  01
1268:  ADDWF  x36,W
126A:  MOVWF  x3A
126C:  MOVLW  00
126E:  ADDWFC x37,W
1270:  MOVWF  x3B
1272:  RLCF   x3A,F
1274:  RLCF   x3B,F
1276:  RLCF   x3A,F
1278:  RLCF   x3B,F
127A:  MOVLW  FC
127C:  ANDWF  x3A,F
127E:  MOVFF  23B,03
1282:  MOVF   x3A,W
1284:  MOVLB  0
1286:  CALL   0A22
128A:  TBLRD*+
128C:  MOVFF  FF5,03
1290:  MOVWF  01
1292:  MOVLB  2
1294:  MOVF   x35,W
1296:  SUBWF  03,W
1298:  BNC   12D6
129A:  BNZ   12A2
129C:  MOVF   01,W
129E:  SUBWF  x34,W
12A0:  BC    12D6
....................     return Ptrans1[idx].Pout1; 
12A2:  RLCF   x36,W
12A4:  MOVWF  x38
12A6:  RLCF   x37,W
12A8:  MOVWF  x39
12AA:  RLCF   x38,F
12AC:  RLCF   x39,F
12AE:  MOVLW  FC
12B0:  ANDWF  x38,F
12B2:  MOVLW  02
12B4:  ADDWF  x38,W
12B6:  MOVWF  01
12B8:  MOVLW  00
12BA:  ADDWFC x39,W
12BC:  MOVWF  03
12BE:  MOVF   01,W
12C0:  MOVLB  0
12C2:  CALL   0A22
12C6:  TBLRD*+
12C8:  MOVFF  FF5,03
12CC:  MOVWF  01
12CE:  MOVFF  03,02
12D2:  BRA    12E6
12D4:  MOVLB  2
....................   } 
12D6:  INCF   x36,F
12D8:  BTFSC  FD8.2
12DA:  INCF   x37,F
12DC:  BRA    1228
....................   return 0; 
12DE:  MOVLW  00
12E0:  MOVWF  01
12E2:  MOVWF  02
12E4:  MOVLB  0
....................   } 
12E6:  RETURN 0
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
*
1DB6:  INCFSZ 24,W
1DB8:  BRA    1DC0
1DBA:  INCFSZ 25,W
1DBC:  BRA    1DC0
1DBE:  BRA    1E16
....................     { 
....................     if (TMR_100MS_POWER) 
1DC0:  BTFSS  2C.3
1DC2:  BRA    1E14
....................       { 
....................       TMR_100MS_POWER = 0; 
1DC4:  BCF    2C.3
....................       set_AD5312(DAC_POS_VOLT, manual_pos); 
1DC6:  MOVLB  2
1DC8:  CLRF   x34
1DCA:  MOVFF  25,236
1DCE:  MOVFF  24,235
1DD2:  MOVLB  0
1DD4:  CALL   0FEE
....................       set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1DD8:  MOVLW  14
1DDA:  MOVWF  01
1DDC:  MOVF   FC2,W
1DDE:  ANDLW  83
1DE0:  IORWF  01,W
1DE2:  MOVWF  FC2
....................       delay_us(20); 
1DE4:  MOVLW  1A
1DE6:  MOVWF  00
1DE8:  DECFSZ 00,F
1DEA:  BRA    1DE8
1DEC:  NOP   
....................       power = read_adc(); 
1DEE:  BSF    FC2.1
1DF0:  BTFSC  FC2.1
1DF2:  BRA    1DF0
1DF4:  MOVFF  FC4,231
1DF8:  MOVLB  2
1DFA:  MOVFF  FC3,230
....................       current_power = convert_power1(power); 
1DFE:  MOVFF  231,235
1E02:  MOVFF  230,234
1E06:  MOVLB  0
1E08:  CALL   1222
1E0C:  MOVFF  02,10C
1E10:  MOVFF  01,10B
....................       } 
....................     return; 
1E14:  BRA    218A
....................     } 
....................      
....................   if (setup.frequency < FREQ_LOW_THRESH) 
1E16:  MOVF   xBA,W
1E18:  SUBLW  58
1E1A:  BNC   1E3A
1E1C:  BNZ   1E24
1E1E:  MOVF   xB9,W
1E20:  SUBLW  29
1E22:  BNC   1E3A
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1E24:  MOVLW  01
1E26:  MOVLB  2
1E28:  MOVWF  x34
1E2A:  MOVFF  BF,236
1E2E:  MOVFF  BE,235
1E32:  MOVLB  0
1E34:  CALL   0FEE
....................   else if (setup.frequency < FREQ_HIGH_THRESH) 
1E38:  BRA    1E72
1E3A:  MOVF   xBA,W
1E3C:  SUBLW  5A
1E3E:  BNC   1E5E
1E40:  BNZ   1E48
1E42:  MOVF   xB9,W
1E44:  SUBLW  F9
1E46:  BNC   1E5E
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1E48:  MOVLW  01
1E4A:  MOVLB  2
1E4C:  MOVWF  x34
1E4E:  MOVFF  C1,236
1E52:  MOVFF  C0,235
1E56:  MOVLB  0
1E58:  CALL   0FEE
....................   else 
1E5C:  BRA    1E72
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1E5E:  MOVLW  01
1E60:  MOVLB  2
1E62:  MOVWF  x34
1E64:  MOVFF  C3,236
1E68:  MOVFF  C2,235
1E6C:  MOVLB  0
1E6E:  CALL   0FEE
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1E72:  MOVLW  14
1E74:  MOVWF  01
1E76:  MOVF   FC2,W
1E78:  ANDLW  83
1E7A:  IORWF  01,W
1E7C:  MOVWF  FC2
....................   delay_us(20); 
1E7E:  MOVLW  1A
1E80:  MOVWF  00
1E82:  DECFSZ 00,F
1E84:  BRA    1E82
1E86:  NOP   
....................   power = read_adc(); 
1E88:  BSF    FC2.1
1E8A:  BTFSC  FC2.1
1E8C:  BRA    1E8A
1E8E:  MOVFF  FC4,231
1E92:  MOVLB  2
1E94:  MOVFF  FC3,230
....................   current_power = convert_power1(power); 
1E98:  MOVFF  231,235
1E9C:  MOVFF  230,234
1EA0:  MOVLB  0
1EA2:  CALL   1222
1EA6:  MOVFF  02,10C
1EAA:  MOVFF  01,10B
....................      
....................      if (input(STANDBY) && setup.cot ==0) 
1EAE:  BTFSS  F83.7
1EB0:  BRA    1F0C
1EB2:  MOVF   xF5,F
1EB4:  BNZ   1F0C
1EB6:  MOVF   xF6,F
1EB8:  BNZ   1F0C
....................     { 
....................     if (setup.pwr == 1) 
1EBA:  DECFSZ xAD,W
1EBC:  BRA    1F00
1EBE:  MOVF   xAE,F
1EC0:  BNZ   1F00
....................       { 
....................       output_high(POWER_EN); 
1EC2:  BSF    F8C.6
....................       a++; 
1EC4:  MOVLB  1
1EC6:  INCF   x03,F
1EC8:  BTFSC  FD8.2
1ECA:  INCF   x04,F
....................        if(a==1) 
1ECC:  DECFSZ x03,W
1ECE:  BRA    1EE6
1ED0:  MOVF   x04,F
1ED2:  BNZ   1EE6
.................... 	{ 
.................... 	output_high(POWER_EN); 
1ED4:  BSF    F8C.6
.................... 	delay_ms(50); 
1ED6:  MOVLW  32
1ED8:  MOVLB  2
1EDA:  MOVWF  x45
1EDC:  MOVLB  0
1EDE:  CALL   0F20
.................... 	update_all(); 
1EE2:  RCALL  1D4C
1EE4:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1EE6:  MOVF   x04,W
1EE8:  SUBLW  E9
1EEA:  BC    1EFC
1EEC:  XORLW  FF
1EEE:  BNZ   1EF6
1EF0:  MOVF   x03,W
1EF2:  SUBLW  60
1EF4:  BC    1EFC
....................       { 
....................       a=2; 
1EF6:  CLRF   x04
1EF8:  MOVLW  02
1EFA:  MOVWF  x03
....................       } 
....................       }   
....................     else 
1EFC:  BRA    1F08
1EFE:  MOVLB  0
....................     	{ 
....................       	output_low(POWER_EN); 
1F00:  BCF    F8C.6
....................      	a=0; 
1F02:  MOVLB  1
1F04:  CLRF   x04
1F06:  CLRF   x03
....................     	} 	 
....................     } 
....................     else if(!input(STANDBY) && setup.cot ==0) 
1F08:  BRA    1F66
1F0A:  MOVLB  0
1F0C:  BTFSC  F83.7
1F0E:  BRA    1F68
1F10:  MOVF   xF5,F
1F12:  BNZ   1F68
1F14:  MOVF   xF6,F
1F16:  BNZ   1F68
....................       { 
....................        if(setup.pwr == 1) 
1F18:  DECFSZ xAD,W
1F1A:  BRA    1F2C
1F1C:  MOVF   xAE,F
1F1E:  BNZ   1F2C
....................        	{ 
....................          output_low(POWER_EN);  
1F20:  BCF    F8C.6
....................          a=0; 
1F22:  MOVLB  1
1F24:  CLRF   x04
1F26:  CLRF   x03
....................         } 
....................        else 
1F28:  BRA    1F36
1F2A:  MOVLB  0
....................        { 
....................          output_high(POWER_EN); 
1F2C:  BSF    F8C.6
....................           a++; 
1F2E:  MOVLB  1
1F30:  INCF   x03,F
1F32:  BTFSC  FD8.2
1F34:  INCF   x04,F
....................        }    
....................        if(a==1) 
1F36:  DECFSZ x03,W
1F38:  BRA    1F50
1F3A:  MOVF   x04,F
1F3C:  BNZ   1F50
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1F3E:  BSF    F8C.6
.................... 	delay_ms(50); 
1F40:  MOVLW  32
1F42:  MOVLB  2
1F44:  MOVWF  x45
1F46:  MOVLB  0
1F48:  CALL   0F20
.................... 	update_all(); 
1F4C:  RCALL  1D4C
1F4E:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
1F50:  MOVF   x04,W
1F52:  SUBLW  E9
1F54:  BC    1F66
1F56:  XORLW  FF
1F58:  BNZ   1F60
1F5A:  MOVF   x03,W
1F5C:  SUBLW  60
1F5E:  BC    1F66
....................       { 
....................       a=2; 
1F60:  CLRF   x04
1F62:  MOVLW  02
1F64:  MOVWF  x03
1F66:  MOVLB  0
....................       } 
....................       BREAK; 
....................       }  
....................       {  
.................... } 
....................  
....................  
.................... if (!input(STANDBY) && setup.cot ==1) 
1F68:  BTFSC  F83.7
1F6A:  BRA    1FDA
1F6C:  DECFSZ xF5,W
1F6E:  BRA    1FDA
1F70:  MOVF   xF6,F
1F72:  BNZ   1FDA
....................     { 
....................     if (setup.pwr == 1) 
1F74:  DECFSZ xAD,W
1F76:  BRA    1FB8
1F78:  MOVF   xAE,F
1F7A:  BNZ   1FB8
....................       { 
....................       output_high(POWER_EN); 
1F7C:  BSF    F8C.6
....................       b++; 
1F7E:  MOVLB  1
1F80:  INCF   x05,F
1F82:  BTFSC  FD8.2
1F84:  INCF   x06,F
....................        if(b==1) 
1F86:  DECFSZ x05,W
1F88:  BRA    1FA0
1F8A:  MOVF   x06,F
1F8C:  BNZ   1FA0
.................... 	{ 
....................  
.................... 	output_high(POWER_EN); 
1F8E:  BSF    F8C.6
.................... 	delay_ms(60); 
1F90:  MOVLW  3C
1F92:  MOVLB  2
1F94:  MOVWF  x45
1F96:  MOVLB  0
1F98:  CALL   0F20
.................... 	update_all(); 
1F9C:  RCALL  1D4C
1F9E:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(b>60000) 
1FA0:  MOVF   x06,W
1FA2:  SUBLW  E9
1FA4:  BC    1FB6
1FA6:  XORLW  FF
1FA8:  BNZ   1FB0
1FAA:  MOVF   x05,W
1FAC:  SUBLW  60
1FAE:  BC    1FB6
....................       { 
....................       b=2; 
1FB0:  CLRF   x06
1FB2:  MOVLW  02
1FB4:  MOVWF  x05
1FB6:  MOVLB  0
....................       } 
....................       }   
....................     if(setup.pwr == 0) 
1FB8:  MOVF   xAD,F
1FBA:  BNZ   1FD8
1FBC:  MOVF   xAE,F
1FBE:  BNZ   1FD8
....................     	{ 
....................       	output_low(POWER_EN); 
1FC0:  BCF    F8C.6
....................      	set_AD5312(DAC_POS_VOLT, 0); 
1FC2:  MOVLB  2
1FC4:  CLRF   x34
1FC6:  CLRF   x36
1FC8:  CLRF   x35
1FCA:  MOVLB  0
1FCC:  CALL   0FEE
....................      	b=0; 
1FD0:  MOVLB  1
1FD2:  CLRF   x06
1FD4:  CLRF   x05
1FD6:  MOVLB  0
....................      	} 	 
....................     } 
....................     else if(input(STANDBY) && setup.cot ==1) 
1FD8:  BRA    2064
1FDA:  BTFSS  F83.7
1FDC:  BRA    2064
1FDE:  DECFSZ xF5,W
1FE0:  BRA    2064
1FE2:  MOVF   xF6,F
1FE4:  BNZ   2064
....................       { 
....................        if(setup.pwr == 1) 
1FE6:  DECFSZ xAD,W
1FE8:  BRA    2006
1FEA:  MOVF   xAE,F
1FEC:  BNZ   2006
....................        	{ 
....................          output_low(POWER_EN);  
1FEE:  BCF    F8C.6
....................          set_AD5312(DAC_POS_VOLT, 0); 
1FF0:  MOVLB  2
1FF2:  CLRF   x34
1FF4:  CLRF   x36
1FF6:  CLRF   x35
1FF8:  MOVLB  0
1FFA:  CALL   0FEE
....................          b=0; 
1FFE:  MOVLB  1
2000:  CLRF   x06
2002:  CLRF   x05
2004:  MOVLB  0
....................         } 
....................        if(setup.pwr == 0) 
2006:  MOVF   xAD,F
2008:  BNZ   2030
200A:  MOVF   xAE,F
200C:  BNZ   2030
....................        { 
.................... 	       if(b==1) 
200E:  MOVLB  1
2010:  DECFSZ x05,W
2012:  BRA    2030
2014:  MOVF   x06,F
2016:  BNZ   2030
.................... 	       { 
....................  
....................          output_high(POWER_EN); 
2018:  BSF    F8C.6
....................          	delay_ms(60); 
201A:  MOVLW  3C
201C:  MOVLB  2
201E:  MOVWF  x45
2020:  MOVLB  0
2022:  CALL   0F20
.................... 			update_all(); 
2026:  RCALL  1D4C
....................           b++; 
2028:  MOVLB  1
202A:  INCF   x05,F
202C:  BTFSC  FD8.2
202E:  INCF   x06,F
....................         }   
....................        }    
....................        if(b==1) 
2030:  MOVLB  1
2032:  DECFSZ x05,W
2034:  BRA    204C
2036:  MOVF   x06,F
2038:  BNZ   204C
.................... 	{ 
.................... 	output_high(POWER_EN); 
203A:  BSF    F8C.6
.................... 	delay_ms(50); 
203C:  MOVLW  32
203E:  MOVLB  2
2040:  MOVWF  x45
2042:  MOVLB  0
2044:  CALL   0F20
.................... 	update_all(); 
2048:  RCALL  1D4C
204A:  MOVLB  1
.................... 	} 
.................... 	break; 
....................       if(a>60000) 
204C:  MOVF   x04,W
204E:  SUBLW  E9
2050:  BC    2062
2052:  XORLW  FF
2054:  BNZ   205C
2056:  MOVF   x03,W
2058:  SUBLW  60
205A:  BC    2062
....................       { 
....................       b=2; 
205C:  CLRF   x06
205E:  MOVLW  02
2060:  MOVWF  x05
2062:  MOVLB  0
....................       } 
....................        
....................       }  
....................       break; 
....................       {  
....................     } 
....................      
....................  
....................      
.................... if(setup.rc == 1) 
2064:  DECFSZ xF7,W
2066:  BRA    20B6
2068:  MOVF   xF8,F
206A:  BNZ   20B6
.................... {      
.................... 	 if (input(HILO) && setup.rp == 1) 
206C:  BTFSS  F83.2
206E:  BRA    2082
2070:  DECFSZ xF9,W
2072:  BRA    2082
2074:  MOVF   xFA,F
2076:  BNZ   2082
.................... 	 { 
....................     level = power_level;  //SV 
2078:  MOVFF  1D,233
207C:  MOVFF  1C,232
....................      }   
....................   else if (input(HILO) && setup.rp == 0) 
2080:  BRA    20B6
2082:  BTFSS  F83.2
2084:  BRA    2098
2086:  MOVF   xF9,F
2088:  BNZ   2098
208A:  MOVF   xFA,F
208C:  BNZ   2098
....................     { 
....................     level = low_power_level; //VL 
208E:  MOVFF  1B,233
2092:  MOVFF  1A,232
....................     } 
....................     else if(!input(HILO) && setup.rp == 0) 
2096:  BRA    20B6
2098:  BTFSC  F83.2
209A:  BRA    20AE
209C:  MOVF   xF9,F
209E:  BNZ   20AE
20A0:  MOVF   xFA,F
20A2:  BNZ   20AE
....................     { 
....................     level = power_level;  //SV 
20A4:  MOVFF  1D,233
20A8:  MOVFF  1C,232
....................     } 
....................   else 
20AC:  BRA    20B6
....................   { 
....................     level = low_power_level;  // VL 
20AE:  MOVFF  1B,233
20B2:  MOVFF  1A,232
....................   }   
.................... } 
.................... 	 
.................... 	if(setup.rc == 0) 
20B6:  MOVF   xF7,F
20B8:  BNZ   2108
20BA:  MOVF   xF8,F
20BC:  BNZ   2108
.................... 	{ 
.................... 	  if (input(HILO) && setup.rp == 0) 
20BE:  BTFSS  F83.2
20C0:  BRA    20D4
20C2:  MOVF   xF9,F
20C4:  BNZ   20D4
20C6:  MOVF   xFA,F
20C8:  BNZ   20D4
.................... 	    { 
....................     level = power_level;  //SV  
20CA:  MOVFF  1D,233
20CE:  MOVFF  1C,232
....................         }    
....................   else if (!input(HILO) && setup.rp == 1) 
20D2:  BRA    2108
20D4:  BTFSC  F83.2
20D6:  BRA    20EA
20D8:  DECFSZ xF9,W
20DA:  BRA    20EA
20DC:  MOVF   xFA,F
20DE:  BNZ   20EA
....................     { 
....................     level = power_level; 
20E0:  MOVFF  1D,233
20E4:  MOVFF  1C,232
....................     } 
....................     else if(input(HILO) && setup.rp == 1) 
20E8:  BRA    2108
20EA:  BTFSS  F83.2
20EC:  BRA    2100
20EE:  DECFSZ xF9,W
20F0:  BRA    2100
20F2:  MOVF   xFA,F
20F4:  BNZ   2100
....................     { 
....................     level = low_power_level; 
20F6:  MOVFF  1B,233
20FA:  MOVFF  1A,232
....................     } 
....................   else 
20FE:  BRA    2108
....................     level = low_power_level; // VL 
2100:  MOVFF  1B,233
2104:  MOVFF  1A,232
.................... } 
....................  
....................  
....................  
....................      
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
2108:  MOVLW  06
210A:  MOVLB  2
210C:  ADDWF  x32,W
210E:  MOVWF  01
2110:  MOVLW  00
2112:  ADDWFC x33,W
2114:  MOVWF  03
2116:  MOVF   03,W
2118:  SUBWF  x31,W
211A:  BNC   2124
211C:  BNZ   2142
211E:  MOVF   x30,W
2120:  SUBWF  01,W
2122:  BNC   2142
2124:  MOVLW  06
2126:  SUBWF  x32,W
2128:  MOVWF  00
212A:  MOVLW  00
212C:  SUBWFB x33,W
212E:  MOVWF  03
2130:  MOVFF  00,01
2134:  MOVF   x31,W
2136:  SUBWF  03,W
2138:  BNC   218C
213A:  BNZ   2142
213C:  MOVF   01,W
213E:  SUBWF  x30,W
2140:  BC    218C
....................     { 
....................     if (power < level) 
2142:  MOVF   x31,W
2144:  SUBWF  x33,W
2146:  BNC   2164
2148:  BNZ   2150
214A:  MOVF   x32,W
214C:  SUBWF  x30,W
214E:  BC    2164
....................       { 
....................       if (power_control >= 150) 
2150:  MOVF   1F,F
2152:  BNZ   215A
2154:  MOVF   1E,W
2156:  SUBLW  95
2158:  BC    2162
....................         power_control -= DEADBAND / 2; 
215A:  MOVLW  03
215C:  SUBWF  1E,F
215E:  MOVLW  00
2160:  SUBWFB 1F,F
....................       } 
....................     else if (power_control <= 1010) 
2162:  BRA    217A
2164:  MOVF   1F,W
2166:  SUBLW  03
2168:  BNC   217A
216A:  BNZ   2172
216C:  MOVF   1E,W
216E:  SUBLW  F2
2170:  BNC   217A
....................       { 
....................       power_control += DEADBAND / 2; 
2172:  MOVLW  03
2174:  ADDWF  1E,F
2176:  MOVLW  00
2178:  ADDWFC 1F,F
....................       } 
....................     set_AD5312(DAC_POS_VOLT, power_control); 
217A:  CLRF   x34
217C:  MOVFF  1F,236
2180:  MOVFF  1E,235
2184:  MOVLB  0
2186:  CALL   0FEE
218A:  MOVLB  2
....................     }	 
....................  
....................  
....................   } 
218C:  MOVLB  0
218E:  RETURN 0
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0E80:  CLRF   F89
....................   output_b(0); 
0E82:  CLRF   F8A
....................   output_c(0); 
0E84:  CLRF   F8B
....................   output_d(0); 
0E86:  CLRF   F8C
....................   output_e(0); 
0E88:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0E8A:  MOVLW  E1
0E8C:  MOVWF  F92
....................   set_tris_b(0b11000001); 
0E8E:  MOVLW  C1
0E90:  MOVWF  F93
....................   set_tris_c(0b11110001); 
0E92:  MOVLW  F1
0E94:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0E96:  MOVLW  8E
0E98:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0E9A:  BSF    F96.0
0E9C:  BSF    F96.1
0E9E:  BCF    F96.2
0EA0:  BSF    F96.3
....................   } 
0EA2:  GOTO   0EE6 (RETURN)
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0EBC:  MOVLW  48
0EBE:  IORLW  05
0EC0:  MOVWF  FBA
0EC2:  MOVLW  63
0EC4:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0EC6:  CLRF   FB4
0EC8:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0ECA:  MOVLW  00
0ECC:  IORLW  05
0ECE:  MOVLB  F
0ED0:  MOVWF  x51
0ED2:  MOVLW  63
0ED4:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0ED6:  CLRF   x4D
0ED8:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0EDA:  MOVLW  00
0EDC:  MOVWF  x4A
0EDE:  MOVLW  00
0EE0:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0EE2:  MOVLB  0
0EE4:  BRA    0E80
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6); 
0EE6:  MOVF   FC1,W
0EE8:  ANDLW  F0
0EEA:  MOVWF  FC1
0EEC:  MOVLW  21
0EEE:  MOVLB  F
0EF0:  MOVWF  x38
0EF2:  MOVLW  03
0EF4:  MOVWF  x3C
0EF6:  MOVLW  00
0EF8:  MOVWF  x39
0EFA:  MOVWF  x3A
0EFC:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0EFE:  MOVF   FC0,W
0F00:  ANDLW  C0
0F02:  IORLW  25
0F04:  MOVWF  FC0
0F06:  BSF    FC0.7
0F08:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0F0A:  CLRF   F77
0F0C:  MOVLW  04
0F0E:  MOVWF  F78
0F10:  MOVWF  F79
....................  
....................   COM1_init(); 
0F12:  MOVLB  0
0F14:  RCALL  0EA6
....................   enable_interrupts(INT_TIMER2); 
0F16:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0F18:  MOVLW  C0
0F1A:  IORWF  FF2,F
....................   } 
0F1C:  GOTO   6AE4 (RETURN)
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1D4C:  MOVFF  BA,235
1D50:  MOVFF  B9,234
....................   delay_ms(5); 
1D54:  MOVLW  05
1D56:  MOVLB  2
1D58:  MOVWF  x45
1D5A:  MOVLB  0
1D5C:  CALL   0F20
....................   PLL_compute_freq_parameters(freq); 
1D60:  MOVFF  235,239
1D64:  MOVFF  234,238
1D68:  CALL   13D8
....................   delay_ms(5); 
1D6C:  MOVLW  05
1D6E:  MOVLB  2
1D70:  MOVWF  x45
1D72:  MOVLB  0
1D74:  CALL   0F20
....................   PLL_update(); 
1D78:  RCALL  16A8
....................   delay_ms(5); 
1D7A:  MOVLW  05
1D7C:  MOVLB  2
1D7E:  MOVWF  x45
1D80:  MOVLB  0
1D82:  CALL   0F20
....................   FPGA_set_reg0(); 
1D86:  RCALL  17FE
....................   delay_ms(5); 
1D88:  MOVLW  05
1D8A:  MOVLB  2
1D8C:  MOVWF  x45
1D8E:  MOVLB  0
1D90:  CALL   0F20
....................   FPGA_set_reg6(); 
1D94:  RCALL  185A
....................   delay_ms(5); 
1D96:  MOVLW  05
1D98:  MOVLB  2
1D9A:  MOVWF  x45
1D9C:  MOVLB  0
1D9E:  CALL   0F20
....................   FPGA_set_bitrate(); 
1DA2:  RCALL  1C58
....................   bitr = setup.bitrate; 
1DA4:  MOVFF  AC,237
1DA8:  MOVFF  AB,236
....................   power_control = 1000; 
1DAC:  MOVLW  03
1DAE:  MOVWF  1F
1DB0:  MOVLW  E8
1DB2:  MOVWF  1E
....................   } 
1DB4:  RETURN 0
....................  
.................... //============================================================================= 
.................... void main(void) 
....................   { 
*
6A5A:  CLRF   FF8
6A5C:  BCF    FD0.7
6A5E:  BSF    07.7
6A60:  CLRF   FEA
6A62:  CLRF   FE9
6A64:  MOVLW  70
6A66:  MOVWF  FD3
6A68:  BCF    F9B.6
6A6A:  BCF    F9B.7
6A6C:  BCF    FB8.3
6A6E:  MOVLW  19
6A70:  MOVWF  FAF
6A72:  MOVLW  A6
6A74:  MOVWF  FAC
6A76:  MOVLW  90
6A78:  MOVWF  FAB
6A7A:  SETF   23
6A7C:  SETF   22
6A7E:  SETF   25
6A80:  SETF   24
6A82:  CLRF   30
6A84:  CLRF   2F
6A86:  CLRF   31
6A88:  CLRF   32
6A8A:  CLRF   33
6A8C:  MOVLB  1
6A8E:  CLRF   x02
6A90:  CLRF   x01
6A92:  CLRF   x04
6A94:  MOVLW  02
6A96:  MOVWF  x03
6A98:  CLRF   x06
6A9A:  MOVWF  x05
6A9C:  CLRF   x0E
6A9E:  CLRF   x0D
6AA0:  CLRF   x12
6AA2:  CLRF   x11
6AA4:  CLRF   x2E
6AA6:  MOVLW  01
6AA8:  MOVWF  x44
6AAA:  CLRF   x45
6AAC:  MOVFF  F9,1A2
6AB0:  MOVFF  AD,1A3
6AB4:  CLRF   xA6
6AB6:  CLRF   xA5
6AB8:  MOVF   FC1,W
6ABA:  ANDLW  F0
6ABC:  MOVWF  FC1
6ABE:  MOVLW  00
6AC0:  MOVLB  F
6AC2:  MOVWF  x38
6AC4:  MOVWF  x3C
6AC6:  MOVWF  x39
6AC8:  MOVWF  x3A
6ACA:  MOVWF  x3B
6ACC:  MOVLB  1
6ACE:  CLRF   x88
6AD0:  CLRF   F77
6AD2:  CLRF   F78
6AD4:  CLRF   F79
6AD6:  MOVLW  03
6AD8:  MOVWF  xA8
6ADA:  MOVLW  E8
6ADC:  MOVWF  xA7
....................   int16 vouta = 1000; 
....................   init_system();  
6ADE:  MOVLB  0
6AE0:  GOTO   0EBC
....................   output_high(D2A_CSB); 
6AE4:  BSF    F8A.1
....................   delay_ms(100); 
6AE6:  MOVLW  64
6AE8:  MOVLB  2
6AEA:  MOVWF  x45
6AEC:  MOVLB  0
6AEE:  CALL   0F20
....................   read_setup(); 
6AF2:  CALL   0FBC
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
6AF6:  MOVF   xFB,F
6AF8:  BNZ   6AFE
.................... 		setup.UART_Time = 10; 
6AFA:  MOVLW  0A
6AFC:  MOVWF  xFB
.................... 	if (setup.Block_per_second == 0) 
6AFE:  MOVF   xFF,F
6B00:  BNZ   6B16
6B02:  MOVLB  1
6B04:  MOVF   x00,F
6B06:  BTFSC  FD8.2
6B08:  BRA    6B0E
6B0A:  MOVLB  0
6B0C:  BRA    6B16
....................     setup.Block_per_second = 100; 
6B0E:  CLRF   x00
6B10:  MOVLW  64
6B12:  MOVLB  0
6B14:  MOVWF  xFF
.................... 	//setup.UART_Status = 1;// VERSION 3.3: 10.2.2016  
....................   power_level = setup.power_in[setup.power_level]; 
6B16:  BCF    FD8.0
6B18:  RLCF   xBB,W
6B1A:  MOVWF  02
6B1C:  RLCF   xBC,W
6B1E:  MOVWF  03
6B20:  MOVF   02,W
6B22:  ADDLW  C4
6B24:  MOVWF  FE9
6B26:  MOVLW  00
6B28:  ADDWFC 03,W
6B2A:  MOVWF  FEA
6B2C:  MOVFF  FEC,03
6B30:  MOVF   FED,F
6B32:  MOVFF  FEF,1C
6B36:  MOVFF  03,1D
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6B3A:  BCF    FD8.0
6B3C:  RLCF   xF3,W
6B3E:  MOVWF  02
6B40:  RLCF   xF4,W
6B42:  MOVWF  03
6B44:  MOVF   02,W
6B46:  ADDLW  C4
6B48:  MOVWF  FE9
6B4A:  MOVLW  00
6B4C:  ADDWFC 03,W
6B4E:  MOVWF  FEA
6B50:  MOVFF  FEC,03
6B54:  MOVF   FED,F
6B56:  MOVFF  FEF,1A
6B5A:  MOVFF  03,1B
....................   power_control = 1000; 
6B5E:  MOVLW  03
6B60:  MOVWF  1F
6B62:  MOVLW  E8
6B64:  MOVWF  1E
....................   power_output(); 
6B66:  CALL   1DB6
....................    
....................  
....................   PLL_initialize(); 
6B6A:  GOTO   2190
....................   delay_ms(50); 
6B6E:  MOVLW  32
6B70:  MOVLB  2
6B72:  MOVWF  x45
6B74:  MOVLB  0
6B76:  CALL   0F20
....................   update_all(); 
6B7A:  CALL   1D4C
....................  
....................   output_high(D2A_RESET); 
6B7E:  BSF    F8A.3
....................   delay_ms(50); 
6B80:  MOVLW  32
6B82:  MOVLB  2
6B84:  MOVWF  x45
6B86:  MOVLB  0
6B88:  CALL   0F20
....................   output_low(D2A_RESET); 
6B8C:  BCF    F8A.3
....................  
....................   COM1_send_str("\r\n"); 
6B8E:  MOVLW  0D
6B90:  MOVLB  1
6B92:  MOVWF  xA9
6B94:  MOVLW  0A
6B96:  MOVWF  xAA
6B98:  CLRF   xAB
6B9A:  MOVLW  01
6B9C:  MOVLB  2
6B9E:  MOVWF  x6F
6BA0:  MOVLW  A9
6BA2:  MOVWF  x6E
6BA4:  MOVLB  0
6BA6:  CALL   223A
....................   COM1_send_str(VERSION); 
6BAA:  MOVLW  01
6BAC:  MOVWF  FEA
6BAE:  MOVLW  A9
6BB0:  MOVWF  FE9
6BB2:  MOVLW  0F
6BB4:  MOVWF  01
6BB6:  CLRF   FF7
6BB8:  MOVLW  00
6BBA:  CALL   08F4
6BBE:  TBLRD*-
6BC0:  TBLRD*+
6BC2:  MOVFF  FF5,FEE
6BC6:  DECFSZ 01,F
6BC8:  BRA    6BC0
6BCA:  MOVLW  01
6BCC:  MOVLB  2
6BCE:  MOVWF  x6F
6BD0:  MOVLW  A9
6BD2:  MOVWF  x6E
6BD4:  MOVLB  0
6BD6:  CALL   223A
....................   COM1_send_str("\r\n"); 
6BDA:  MOVLW  0D
6BDC:  MOVLB  1
6BDE:  MOVWF  xA9
6BE0:  MOVLW  0A
6BE2:  MOVWF  xAA
6BE4:  CLRF   xAB
6BE6:  MOVLW  01
6BE8:  MOVLB  2
6BEA:  MOVWF  x6F
6BEC:  MOVLW  A9
6BEE:  MOVWF  x6E
6BF0:  MOVLB  0
6BF2:  CALL   223A
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
6BF6:  MOVLB  2
6BF8:  CLRF   x34
6BFA:  MOVFF  1A8,236
6BFE:  MOVFF  1A7,235
6C02:  MOVLB  0
6C04:  CALL   0FEE
....................  
....................  
....................   delay_ms(500); 
6C08:  MOVLW  02
6C0A:  MOVLB  1
6C0C:  MOVWF  xB8
6C0E:  MOVLW  FA
6C10:  MOVLB  2
6C12:  MOVWF  x45
6C14:  MOVLB  0
6C16:  CALL   0F20
6C1A:  MOVLB  1
6C1C:  DECFSZ xB8,F
6C1E:  BRA    6C0E
....................   output_high(POWER_EN); 
6C20:  BSF    F8C.6
....................  
.................... update_all(); 
6C22:  MOVLB  0
6C24:  CALL   1D4C
....................  
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6C28:  CLRWDT
....................     if (TMR_100mS_BLINK) 
6C2A:  BTFSS  2C.0
6C2C:  BRA    6C36
....................       { 
....................       TMR_100mS_BLINK = 0; 
6C2E:  BCF    2C.0
....................       output_toggle(LED1); 
6C30:  BTG    F8A.4
....................       delay_us(1); 
6C32:  BRA    6C34
6C34:  BRA    6C36
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6C36:  DECFSZ 33,W
6C38:  BRA    6C70
6C3A:  MOVF   36,F
6C3C:  BNZ   6C70
6C3E:  MOVLB  1
6C40:  DECFSZ x0D,W
6C42:  BRA    6C48
6C44:  MOVF   x0E,F
6C46:  BZ    6C5C
6C48:  MOVF   x0D,F
6C4A:  BTFSC  FD8.2
6C4C:  BRA    6C52
6C4E:  MOVLB  0
6C50:  BRA    6C70
6C52:  MOVF   x0E,F
6C54:  BTFSC  FD8.2
6C56:  BRA    6C5C
6C58:  MOVLB  0
6C5A:  BRA    6C70
....................     	{         
.................... 				if (setup.UART_Status == 1) 
6C5C:  MOVLB  0
6C5E:  DECFSZ xFC,W
6C60:  BRA    6C70
.................... 		      { 
.................... 			      stay_on = 1; 
6C62:  MOVLB  1
6C64:  CLRF   x0E
6C66:  MOVLW  01
6C68:  MOVWF  x0D
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
6C6A:  MOVLB  0
6C6C:  GOTO   2972
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6C70:  MOVLB  1
6C72:  MOVF   x0D,W
6C74:  SUBLW  02
6C76:  BNZ   6C7C
6C78:  MOVF   x0E,F
6C7A:  BZ    6C84
6C7C:  MOVF   x0D,F
6C7E:  BNZ   6C94
6C80:  MOVF   x0E,F
6C82:  BNZ   6C94
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6C84:  MOVLB  0
6C86:  BRA    6A20
.................... 		   			if (COM1_rxo != 0 ) 
6C88:  MOVF   36,F
6C8A:  BZ    6C96
.................... 		   				stay_on = 2; 
6C8C:  MOVLB  1
6C8E:  CLRF   x0E
6C90:  MOVLW  02
6C92:  MOVWF  x0D
6C94:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6C96:  CALL   1DB6
....................    } 
6C9A:  BRA    6C28
....................   } 
6C9C:  SLEEP 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
